#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : FEN_Moulinette
 major_version : 26
 minor_version : 0
 type : 2
 description : ""
 subtype : 0
window :
 name : FEN_Moulinette
 identifier : 0x2ca5c5a4013e2de9
 internal_properties : BgAAAAYAAADNJHJKRLRYWOmIKwG4XhmH2dpNgYQ7tMCz7KxiA/K7fN0vi265DjHqjtX2BYyiTkpg6q8VIFZ7DpB58eUbNVBdZtYJ9F5cwHGi3QcX97hE3lvDq9ZVjxpLAMIePqRXI4bKvztVEucV7ePMsvTSH7Jic4Fxf9iLbOkOJ4YMo1OubBpZCck/5ivbxdn4czgwyx0Ub1f0Uz8XCP3aSb+p0R4wq3iJQSGvWPxJdOpa1FxY3lLOmGSf369//j3IVVQwwL3UyMRgQs2DBhDE0/P5JiFt4Fox+InbasIya/w6DwaOQlmTRG9kon3Rv/1MgfSTdJ1CgpqRS1trMIzEd7sTGsfSNvAQ4fCuYvk3eQPXtMgxltYWJ57giUTtbg1JUDQhV58br1N3oDD071yFP9YGNTUQ5MKvgHHyVgrvmCXslUmAZboKXecT04qTf+ahH8qVIFAOwT5Yz0zk1ik+6PHQ1zRNMkg/wXK1ECt21Ly1R/WxcTAgHain3G0QcOB9LaVDLIBeUrIWNA8ywxz41xI4p/uXv5Jk4cm0XxjIb4l3a1DIE6+qUuNr8Xkz0oCOmSwxGjPZwfHw4P01diuoGMGj3OZSrgi/Jktt6Byw71alJ3e/3e9tE488s5lRzyu61miNUDu24C8vpcb6fPA2A1zZT3pKRoI9XZt477eiyOvWDHxOdnDmVKKmSFk3XNbZSbVy9xmvZDmOAM3XAEWkBMds8/yM4nDdT71R3xDCyjs+jal8ih621KYHReHm85ax+YFl3L7Alyp8hn7losvqhLg+4MvtEyRmRuI=
 controls :
  -
    name : ONG_SansNom1
    identifier : 0x20b7e40a28936793
    internal_properties : BgAAAAYAAADPGv0tzCTWpgmEtiAj2sem9g47WX8+djcS4vxgeVnrLrkiT9KeO7IUpPaggcna4S4h53wggyqSd1H7j2XRtM5oBqYTEzdfju2lUpgPtxYKs2VpOo8LUmw1WJ80t0xDn0aDJLVWhFSRbS48AgsEwJiJePilRQqwNi6kurIacs0b6ufoWNLlj/dJXtm7XMY+reC9dD9PablfhlOxIofNF1ZLjdQ9TyT7Z4KTGho4yrYkAW5QUCDqcbyVmwgN0l/H4jh1BzdA8mvJarEjc6aHmRfdNahnqXTgkeJe2BS4RRW8ABA/A4wV5HuSsMUTEIaLj9dYWZXVl+OdJRr57flWOMFqI7Of2AJYi6TaC3LxkpDPgXtAoJwSbypUSAVQDdVh3oQoYHAqAlkVybHJJGzY5PkVobvguvMhtGOqv3CDNqhvfwLsbIFlbb+yzDG2DQvH9iB/CnBxnO4RqpzAVxfBhNpvW6r5sp/84rkwnREZcqJmBr+wkpn5T88nilcZPDLJZtqJGPJT1mZpvCzO5PmDoRu74RYpfMjp7EDgYEKNOkIdxaWfAA2F68cqPt0zPSZqpz0l6sFIMxZTDpNTnP43b91kHk50iCzN8PPBLTv6hXE6sttbRNqxJrquO5yW95bnMgRnKSdPBj1Q+geQ0CEeHTboBMISn9NkfnQ9Nb/k6qmDBfs8JT2YTRPpGhYfa0xhK/Z3rPbAuWN4OZurA2jnTxlwrQakleNguJbpfh6V3GgL3t9/2o7UA1B8MoIwlKkBoZhXeOQapB0zdbWCABkJQJEBALa40xJtDZ//RqE9IxelQ3kAPa1YMYazueEvML5Hf1UhDff63kpjxqCj9raiN+zTMyxUOTTrCPfKCMk6A4recq3HpGrMC0zj5Wy3ks7KXV3FKC2cPdd/pWG8QxRrzfqLJbBvqRc5ZEoNJg9ngl9PV3cNIAux5sK6y3sZvmYNtVDZkWBtxYxNbJA62YvUT4t/x++aIkxK3qOcNeS28zuqNFK3fK50boIlYUgqP33qicj3/roVhNIeCbir8NkMIwBYjogmUhm7B9YjOMBGS8YgxwVod5YnJT0BRKEXoPLGoh+7c7Vbb4ZuQWJCpbK15zp/06GH/ahlD2AmQrL+lo/vwNEt89RMo7YpiyzoMcdzfyb1oJl4hcnxzQrgPuHhsI0hp1IijhU9lyUVwEw=
    tabs :
     -
       internal_properties : BgAAAAYAAAA1njrlLDmyFBmXKKukEFoxchn/E3kHeZJqCPDAeVAi5eaYrooukZtkSlpVW/ts1Gn/jhp/eN4fdfUejBxJcW1GYYPdx5gIxJrsYSxBS6whNfzhbesmG6CeXMYZrvcRu/Zmk0bWnI/KOT5QfY44rbMBz+rXkYoR
       controls :
        -
          name : BTN_LANCER_partiel
          identifier : 0x2eabd10ad8d16f9a
          internal_properties : BgAAAAYAAAAZYvvFWC5q9w2+WzkjH0RMtv1BEChVNfZsVebEaeneClQp0GHNRC1mEbd0iawVQC3IXLWxUszNdPKGb2ve9YKB1+d4uSSG7+ku/s3iAR+qvFh1hjFLAJT4WzWZ7tumo+nqgjNcpPKt0uFYnVMHd2suslkmsgE7R37Tjp5C/xXtINz+ZIo/89VXXb/A89Xktuk8Ub4auTEegCmT2YB3rA71CrMoVp4E+KjisSYQfhFBYUZiXsIbjq0uw4p2/CBVcX2/VKGrqiXQS7LQkHIdcDmgrqFLTjoWxzAszFQysLrkNsBM3FDuKpNf9ZQ42sJuAWUzrOpgvN0Hco0ZpGeRM4V859Q6qrmhRocxDgs/DWGfFcejgXspKDrHLdiuJufSmsp5/9lAoh8nwrgFbd26XCPA36fVqFeChh9Zx6wIqWUk3rhkqoJLzzVwU9Zy/8q+QRkw6STSt63j2dSsOoeO6Xr/5IYs8FQvcgbaOltYPNt2j22KaoxsSV6k4cf7T8w2k3cCFGJCr7wRd4YDnpPQdCpWe3BpIREc4LyUAWb4jnrOZG1xVx0eSjiUz2DN5o/+rxh8+ycG/c/4DiLVVmP+i9Rk1UXJI7u8+/GW6nU58Df3d6B/HtItDClf9cFIsqBPj0WwALj3Grk0hLny1mS1+xkvBKbzD9AzfuEFWBarD/SERoo+UcfbojTxo1kio7SliFiDan2QRal+DNVL71jmJMyT8nlupeb9
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1-
               nPosActu est un entier = 0
               nPosMax est un entier = 20
               jauge(nInc(),nPosMax)
               
               //hferme("*")
               
               // Ne pas supprimer les tables suivante
               // Scr_Type_Cmtr
               // Src_Usr
               // Scr_projet
               
               //si pas hcreation(Scr_Commentaire) alors erreur(herreurinfo())
               //SI PAS HCréation(Scr_Message) ALORS Erreur(HErreurInfo())
               //SI PAS HCréation(Scr_Tache) ALORS Erreur(HErreurInfo())
               //SI PAS HCréation(Scr_UserStory) ALORS Erreur(HErreurInfo())
               //SI PAS HCréation(Scr_sprint) ALORS Erreur(HErreurInfo())
               //SI PAS HCréation(Scr_Jalon) ALORS Erreur(HErreurInfo())
               //SI PAS HCréation(Scr_Usr_Projet) ALORS Erreur(HErreurInfo())
               
               
               //ExécuteTraitement(BTN_Vider_tt_les_tables,trtClic)
               
               
               
               
               //ExécuteTraitement(BTN_Vider_Projets_Affectés,trtClic)
               //ExécuteTraitement(BTN_Vider_Historique_US,trtClic)
               //ExécuteTraitement(BTN_Vider_Table_Message,trtClic)
               //ExécuteTraitement(BTN_Vider_utilisateur,trtClic)
               ////ExécuteTraitement(BTN_Vider_la_table_projet,trtClic)
               //ExécuteTraitement(BTN_Vider_la_table_US,trtClic)
               //ExécuteTraitement(BTN_Vider_la_table_tache,trtClic)
               //ExécuteTraitement(BTN_Vider_la_table_sprint,trtClic)
               //ExécuteTraitement(BTN_Vider_Commentaires,trtClic)
               
               
               
               //contrôle des tables a vider au préalable
               HSupprimeTout(Scr_CritereAccept_Composant)
               //on vérifie que tout se passe bien
               SI ErreurDétectée() ALORS
               	Info(ErreurInfo())
               	RETOUR
               ELSE
               	Trace("Vidage Préalable de la table des Critères D'acceptations des composants")
               FIN
               //-----
               
               
               HSupprimeTout(Scr_CritereAccept)
               //on vérifie que tout se passe bien
               SI ErreurDétectée() ALORS
               	Info(ErreurInfo())
               	RETOUR
               ELSE
               	Trace("Vidage Préalable de la table des Critères D'acceptations")
               FIN
               //-----
               
               HSupprimeTout(Scr_CritereAccept_Etat)
               
               //on vérifie que tout se passe bien
               SI ErreurDétectée() ALORS
               	Info(ErreurInfo())
               	RETOUR
               ELSE
               	Trace("Vidage de la table Critère d'Acceptation de la liste des États ")
               FIN
               
               
               HSupprimeTout(Scr_CritereAccept_Composant_Type)
               
               //on vérifie que tout se passe bien
               SI ErreurDétectée() ALORS
               	Info(ErreurInfo())
               ELSE
               	Trace("Vidage de la table Critère d'Acceptation des composants types")
               FIN
               
               //////////////////////////////////////////////////////////////////////////////////////////////////////
               
               
               
               
               
               
               
               
               
               //Import des utilisateurs.
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Enregistrer_utilisateurs,trtClic)
               
               //Paramétrage des types de messages
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Creer_les_types_de_message,trtClic)
               
               // Paramétrage des états des critères et les composants type
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_RemplirLesTables,trtClic)
               
               //Chargement des sprints
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Enregister_les_sprints,trtClic)
               
               
               
               
               //Intégration des projets
               Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Importer_credit_V3,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Import_NF_203,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Import_Migration,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Import_Vieux_Stock,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Import_pool,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Importer_PxF,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Importer_Evols_android,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Importer_Automat,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Importer_DEB_LAD_RAD,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Importer_ControleHebdoBL,trtClic)
               ////Intégration des taches tierces
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Enregistrer_fichier_2,trtClic)
               
               
               
               //Association des projets aux responsables de projets.
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Affecter_Projets,trtClic)
               
               //Chargement des rétrospecives.
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Import_retrospective,trtClic)
               
               jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Taches_MAJ_Str_et_Adaptation,trtClic)
               
               jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Maj_etats,trtClic)
               
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Etat_US,trtClic)
               //
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Projet_terminés,trtClic)
               
               
               
               jauge()
               
               info("Chargement terminé.")
               
               
               	Procédure interne nInc()
               		nPosActu++
               		renvoyer nPosActu
               	fin
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_RemplirLesTables
          identifier : 0x2e302abc0285972d
          internal_properties : BgAAAAYAAAB3lU/l1rEgfPAnKjKLwNW8XtfOkZ1WjHaoSX7dMsQfc4uTHtSFJGwbpHs1syAMxABZFbGlsFlMu5qN9ejmiw8bolc1ok+Vkt1oPE0Khj45y3hn1d7Ab7qXMEUY8wYnuId6aiqC3EBKeW+1ic4Z3/0GKjy2/I3NtvQFFPew33xtzHLNfG53NZkAmjxyG0Qi9eCkAcYnl+cSKMOXyT3Z7ixMS3qtOpKjPFjYZ76HqAFrdNJ5C/bPJ2spHQz6veosUfFXx3y8iTSILJtq6cnYEQZEGfd72Unrnffi7sDc5JnG6gwbY+elx72592M4+DCOvQZf0TFA/tenHh1dDXyrdv83N4ww/DV4duScBYbxkTb6W+Oz4epDC4sUDmhcquZx/Lk7DTPAULMLuuM/tOPYWi7KRONWMYDyhf8Zf5kHN6SohSTuIGMO/vIac5v6OE8txg2ZqyXq+ffjC/lf7RoPoCcjAQJU8eKVQOznPogYMQSwIQOOZITF3dsboyIplH+JRD8P2ytbVuGvVaUXt01SSHFBq1ven18KzbhZdzNF7LKREo2y9o+6EHrWJM5BaBs3ScAOyzTv60DriOmINHjgD0Gh/TIsOAorT3LBPks+4lgVHhT2slZCn40t32S/aoYrNVLk3GIMD5YxWtmIrO+fVpsuP2TaMcwm8EV+IrdCKWCV96+eWNc/cFy6eUIXsi2MyjvthtyMyGIEMkMNGQY1/jeRBxx+EV3A5OgX82Gy+IpjdW1d0E/FQnNMGzdLBaHcwxS1kdEo68edL+sR2fE1xD0tU3j0
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               
               IDfichierXLS est un xlsDocument
               nNbdeLigne est un entier
               
               nNUmeroFeuilleEtat est un entier = 1
               
               
               sResNomFichier est une chaine = Dupplication_Fichier_Avant_Import("L:\Service informatique\Service Développement\Stagiaires Développements\ScrUM\Etats critères A.xlsx")
               
               si sResNomFichier <>"" alors
               
               	IDfichierXLS = xlsOuvre(sResNomFichier)
               	Si ErreurDétectée = faux alors
               	
               	//on définit le nombre de lignes.
               	nNbdeLigne = xlsNbLigne(IDfichierXLS, true)
               		
               	//on récupère le nom de la feuille en cours
               	sNomFeuille est une chaine = xlsFeuilleEnCours(IDfichierXLS)
               	
               	//Je charge la feuille des états.
               	 xlsFeuilleEnCours(IDfichierXLS, nNUmeroFeuilleEtat)
               		POUR i= 2 _A_ nNbdeLigne
               
               			//-------------- Manipulation Jauge -----------------
               			Jauge(i, nNbdeLigne, "Importation de la feuille : "+IDfichierXLS..NomFeuille)	
               					
               			//--------------Fin Manipulation Jauge -----------------
               			
               			// Import des données de la feuille État			
               			HRAZ(Scr_CritereAccept_Etat)			
               				Scr_CritereAccept_Etat.Libelle = xlsDonnée(IDfichierXLS, i, 1)
               				HAjoute(Scr_CritereAccept_Etat, hEcritureDéfaut)											
               		FIN
               		
               		
               		
               		//On fait un changement de feuille pour Composant Type
               		nNumFeuille est un entier = xlsFeuilleEnCours(IDfichierXLS, 2)
               		nNbdeLigne = xlsNbLigne(IDfichierXLS, vrai)
               		pour nIndex = 2 _a_ nNbdeLigne
               			//---------------- Manipulation Jauge -----------------------		
               			Jauge(nIndex, nNbdeLigne, "Importation de la feuille : "+IDfichierXLS..NomFeuille)
               			SI nIndex = nNbdeLigne ALORS
               				Jauge(nIndex, nNbdeLigne, "Importation Terminée")
               			FIN
               			//-------------Fin Manipulation Jauge----------------------
               			
               			//Import Données de la seconde feuille.
               			HRAZ(Scr_CritereAccept_Composant_Type)
               			Scr_CritereAccept_Composant_Type.Libelle = xlsDonnée(IDfichierXLS, nIndex, 1)
               			Scr_CritereAccept_Composant_Type.Ordre = xlsDonnée(IDfichierXLS, nIndex, 2)
               			HAjoute(Scr_CritereAccept_Composant_Type)
               		FIN
               	FIN
               	
               	xlsferme(IDfichierXLS)
               	
               else
               	Info(ErreurInfo())
               FIN
               
               jauge()
               
               
               
               
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Enregister_les_sprints
          identifier : 0x2cac5fcb00cc84a8
          internal_properties : BgAAAAYAAAA149ogHwZZDHwy5dr6iau6GvEC+dHZsgs5eFrCRWn3U6Xf3TZR4FJYyGC61S7kk933sdrVgJ4ki6KqOOH2lHLOUeMElDc3aw7vWeoqCs/warPWm63d0RU/uckMH/efwVLahmqND1XUpHoQttQh5p9bFsMf77++57VoQVgh0ldIqWkq2FpyMiVxfN/FCk/UExfLc0K3nucocHhhTPI3RW/UCgTaQqCfnOjiGxytMoD/AJq5h7UdyCLSgJlVyMdc4wYyhY4387Qo4wEBryxwGOA+hHXwF4CeUdgwS9BSZ0CF9vX1gnQrVtv8jnfLWFEfquQdU6FzdpXbAfq6lTnXOvTRcBuMDm9pSH2igVK6mgxKwJwF6HdX817Yj4KsWAGr85nXC0Xt7qgiHwGe7E+QD+gLDQujbVUHi+LcyrU++27REVx6QGEXxDxJpsnzWxQviiAWoHyBd5ca1uSb7yV7okvg2e0ZN9bKgmA+6Bly+taH1ziJiYPcO+x6/igdEBZ9Ur5K16xsb4c8Gm0d4IZcLbPSZMMsJvGxYGmxtgzKtgb0XBibki/TVX2aDolbAKz0QM7LNf2WgqzbkT9amQPG1Cs+23sx2bu6FpBjwl/WXl3aFbttI0BidqrrJ1hdetkdon686WEvg53zrIR9lkJGmqikSeouC7OQWnv/sgBW6aUYUdlEBtd/gx7wtn/Q+pZSzCvlouphKjYQGsEeL8u1/QqKneZj1hGR+gpuH+Y5rIKFk2sPWQIpCenhdkzh6g==
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               IdFichierXLS est un xlsDocument
               Xlsnbligne_ est un entier
               i est un entier
               sFichier est une chaîne
               
               nPremiereligne est un entier = 2
               
               nCol_numSprint est un entier = 1
               nCol_Date_Debut est un entier = 2
               nCol_Date_Fin est un entier = 3
               oSpr est un ClSprint dynamique
               
               
               // Ouvre le sélecteur de fichiers
                
               sFichier = Dupplication_Fichier_Avant_Import("L:\Service informatique\Service Développement\Normes et procédures de dev\SCRUM.xlsx")
               
               
               SI sFichier <> "" ALORS
               	//identifiant du fichier
               	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               	
               	SI ErreurDétectée = Faux ALORS //interception d'une erreur
               		
               		SI xlsFeuilleEnCours(IdFichierXLS, 4) ALORS	//on ouvre la 4eme feuille du fichier
               			
               			Xlsnbligne_ =xlsNbLigne(IdFichierXLS,Vrai) //nombre de ligne à parcourir
               			
               			POUR i = nPremiereligne _À_ Xlsnbligne_
               				
               				//si la ligne n'est pas vide on enregistre les données
               				SI xlsDonnée(IdFichierXLS,i,nCol_Date_Debut) <> "" alors
               					
               					oSpr = allouer un ClSprint
               					oSpr.SetNumSprint(xlsDonnée(IdFichierXLS, i, nCol_numSprint))
               					oSpr.p_dDateDebut	= ChaîneVersDate(xlsDonnée(IdFichierXLS,i,nCol_Date_Debut))
               					oSpr.p_dDateFin		= ChaîneVersDate(xlsDonnée(IdFichierXLS,i,nCol_Date_Fin))
               					
               					si oSpr.p_dDateFin < DateDuJour() alors
               						oSpr.p_bTop_Termine = Vrai
               					FIN
               					
               					oSpr.Enregistre()
               				FIN
               			FIN
               			
               			
               		SINON
               			Erreur(ErreurInfo(errComplet))
               		FIN
               	SINON
               		Erreur(ErreurInfo(errComplet))
               	FIN	
               	
               	xlsFerme(IdFichierXLS) // fermeture du fichier
               		
               FIN
               
               
               
               
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Import_retrospective
          identifier : 0x2cac94a500cef886
          internal_properties : BgAAAAYAAADdNH4XmxFuAe4jyVz57KKNPWzM0UrwKVQme/tLP4rYn7AbPWNbNqhnP/DJ5xx1u+2CmZYb70FJv3aE+fXqEEQCMimdrjUxrckPx00bWGv4z5iopbf7T4ilbGxxhnu0PzuIMgh9hvz5vrQ/xqCePapKmiewKV4Q7eGHdSX8h+bN0JSvyiS52+sgIDM3e55NO9OSun7fxBjHvuzYg+D5TjuINDgiuYkXYZuiHP4rFVa752cIwOkDeP3HPbs7BIjVDabyqHyG+QEQydIMIsdTC+uMzAMPkCh8LcwG/hWDBKZYDiABaEg47+VYKpDUkYXjU+RN9gacpNWQUAxluBWU1VJgD0sflJaHAD3aAG+RCiad3yvWjt5ICba/lvCUExbQmI38DnqjVug3RwsMlzWVdLXZ6LTkJXGj7iJiJCYc4FsMQ4VVCafJSqunsFc2Xd1oGdw/w/+dkVU1rrbRTC1Gze6S6GZgiRYyxZDSgLy2jyPoL92QtG9QNx28zGLijtFcGxqhEDtQw+NVUod7rR7xppCGK/zpYMNP0acBuj3OT6OXDOF+hx1VE+Le8CfqeompU3YwIMCMlDqkSWEXucxFcmjhvOPnCYJ9UKn4x1tI8T3S00QJQpUBY4gHM7wuVUe5YIMqz53rNcM2HZ7xi5gF2QeqKr0pZxlSGIcwA97CX+lZ3HdqxnIeMlksWFUQJnlVZyXOBuxFTz0s16/nd/49KPQGgwpyeHQuTJ4IcGImz69qE9BHQDOZfPQ1
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               IdFichierXLS est un xlsDocument
               Xlsnbligne_ est un entier
               i est un entier
               sFichier est une chaîne
               
               nSprintActuel est un entier = goApp.m_nNumeroDuSprintActuel
               
               nPremiereligne est un entier = 2
               
               //Declatration VAriables
               sCodeTache est une chaine
               nSprintFin est un entier
               nSprintDemarage est un entier
               //nSprintPointsTotal est un entier
               
               nCol_codeTache est un entier = 2
               nCol_numSprintValid est un entier = 1
               nCol_SprintDemarage est un entier = 4
               nCol_Total est un entier = 2
               
               sFichier = Dupplication_Fichier_Avant_Import("L:\Service informatique\Service Développement\Normes et procédures de dev\SCRUM.xlsx")
               
               SI sFichier <> "" ALORS
               	
               	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               	
               	SI ErreurDétectée = Faux ALORS
               		
               		SI xlsFeuilleEnCours(IdFichierXLS, 2) ALORS	
               			
               			Xlsnbligne_ =xlsNbLigne(IdFichierXLS,Vrai)
               			
               			POUR i = nPremiereligne _À_ Xlsnbligne_
               				
               				//On ne lit pas les cases vide ou "SPRINT"
               				SI xlsDonnée(IdFichierXLS,i,nCol_numSprintValid) <> "Sprint" ET xlsDonnée(IdFichierXLS,i,nCol_numSprintValid) <> "" ALORS
               					
               					//On ne lit pas les cases vide
               					SI xlsDonnée(IdFichierXLS,i,nCol_codeTache) <> ""
               						sCodeTache = xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               						nSprintFin = xlsDonnée(IdFichierXLS,i,nCol_numSprintValid)
               						nSprintDemarage = xlsDonnée(IdFichierXLS,i,nCol_SprintDemarage)
               						
               						//met a jour les sprint de fin des taches
               						
               						
               						
               						
               						
               						//COL_Scrum.SprintFin_Tache_maj_deprecated(sCodeTache, nSprintFin, nSprintDemarage)
               						
               						
               						sdRechercheTache est une source de données
               						sReq est une chaine
               						
               						sReq = ChaîneConstruit([
               							SELECT Scr_Tache.IDScr_Tache
               							FROM Scr_Tache
               							WHERE UPPER(Scr_Tache.CodeTache) = '%1'
               						], Majuscule(sCodeTache))
               						
               						SI goApp.Rsql(sdRechercheTache,sReq) ALORS
               							
               							SI HNbEnr(sdRechercheTache) > 0 ALORS
               								//Si la tache existe
               								SI HLitPremier(sdRechercheTache) ALORS
               									oTache est un ClTache dynamique
               									oTache <- ClTache.GetObj(sdRechercheTache.IDScr_Tache)
               									oTache.p_nNum_Sprint_Fin		= nSprintFin
               									oTache.p_nNum_Sprint_Demarrage	= nSprintDemarage
               									oTache.p_oUsr_Dev				= goapp.m_oUsrCnx
               									oTache.p_bEstRealise			= vrai
               									oTache.Enregistre()
               								SINON
               									Trace(ChaîneConstruit("tache ""%1"" non Trouvée pour la maj du sprint de fin", sCodeTache))
               								FIN
               							SINON
               								Trace("Import rétrospective " + NumériqueVersChaîne(nSprintFin)+ " - tache non trouvé pour le sprint no "+ sCodeTache)
               							FIN
               						FIN
               						
               						HAnnuleDéclaration(sdRechercheTache)
               						
               						
               						
               					FIN
               				FIN
               			FIN
               			
               			//			SI xlsFeuilleEnCours(IdFichierXLS, 3) ALORS
               			//				//On change de feuille donc on change les variables de parcours du tableau
               			//				
               			//				nPremiereligne = 4
               			//				Xlsnbligne_ =xlsNbLigne(IdFichierXLS,Vrai)
               			//				
               			//				POUR i = nPremiereligne _À_ Xlsnbligne_
               			//					//Sinon on verifie si on est dans la colonne totale, si oui, on met a jour le sprint
               			//					SI xlsDonnée(IdFichierXLS,i,nCol_Total) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_numSprint) <> 0 ALORS
               			//						nSprintPointsTotal = xlsDonnée(IdFichierXLS,i,nCol_Total)
               			//						nSprintFin = xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               			//						COL_Scrum.Sprint_Points_Maj(nSprintFin, nSprintPointsTotal)
               			//							
               			//					FIN
               			//				fin
               			
               			//Update des points réalisé pour chaque sprint
               			pour i = 1 _a_ nSprintActuel - 1 
               				ClSprint.Sprint_Points_Realise_Maj(i)
               			fin
               		SINON
               			Erreur(ErreurInfo(errComplet))
               		FIN	
               	SINON
               		Erreur(ErreurInfo(errComplet))
               	FIN
               
               	xlsFerme(IdFichierXLS)	
               	
               FIN
               
               ClSprint.Calcul_Velocite_Moyenne()
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_LANCER_TOUT
          identifier : 0x2ca7520901c1f2e0
          internal_properties : BgAAAAYAAADzUxpwIo6kBuhxlKijcb6KBxQAJACT0rP1bQx54qGe7HjNOIFmbb5clKVDg88Ld4zy1SR4X+MUQLplc3EpOLSc+J5qLX0GvF7NTT3NN8np48BEK8JBXFiF9IOmF5wZ4GofwfROWERxPaLtVkTZNOu29rSgd0DgCPeGNQopfs/dNuS+I2Bmn3avNTc04CCSh5mipSkzLTREVKFC712nRb6OTYW3MqzZ8HjjhUvA82x61KWOOB84f3k3lMeFdSVzDEz4BaikwP/LamjebKxzCmnSRVYeVRXZrZ1r4/jV99qbutQ8Ygg8+M93k1QWOtrCnnhMYpZ9GGp6EGJSumJog7F1anVsFNx1gKyF8z+yBvujKPg8zDwMK9J/7mrZ1sYtAMtdpTExwW5DDtsporn1zTmxn2HFbyDZrhewfZlQuK6W86IoiI1c3JfC7mIjN7v12ch6PVzbiuCP5TNErW+f4IaqPPhKw53IvnJRsFhKXSB+6E0ssOtdbqqQsB8aafWpV1RiuthtQOOtY0nvob8zafw9hbhTLD4dGsb7T+MZeHdiH2uh1YI1ByBs5gDwLua7JdtrVIBGT60BaQiccDxox496gqjOK81cNmpK1xekYlcKY4HOb9oWSrzAX4ImXfpNDuVxTEQ/hou+ZlER1fEmPIvOdnvSVwKTIl6f4Q/10qtgcmHqlYIsBfVTzU608C/aBXr6WvI5jwoIbpZw+ByYmucm+dRo
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1-
               nPosActu	est un entier	= 0
               nPosMax		est un entier	= 36
               jauge(nInc(),nPosMax)
               
               //AnalyseurDébut()
               
               ClObjDB.Purge_cache_obj()
               
               ExécuteTraitement(BTN_Vider_tt_les_tables,trtClic)
               
               //Import des utilisateurs.
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Enregistrer_utilisateurs,trtClic)
               
               
               //Paramétrage des types de messages
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Creer_les_types_de_message,trtClic)
               
               // Paramétrage des états des critères et les composants type
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_RemplirLesTables,trtClic)
               
               //Chargement des sprints
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Enregister_les_sprints,trtClic)
               
               //Association des projets aux responsables de projets.
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Affecter_Projets,trtClic)
               
               //Intégration des projets
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_credit_V3,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Import_NF_203,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Import_Migration,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Import_Vieux_Stock,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Import_pool,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_PxF,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_Evols_android,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_Automat,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_DEB_LAD_RAD,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_ControleHebdoBL,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_ControleHebdoBL1,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_Inventaire_tournant,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_Base_V2,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_Cerebro,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_nv_planning_trp,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_piloting,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_CRM,trtClic)
               Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Importer_Espace_Cli,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_Menuiserie_2021,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_Fusion_UM_GM,trtClic)
               
               //Intégration des taches tierces
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Enregistrer_fichier_2,trtClic)
               
               
               
               //Intégration des docs
               Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Import_Docs,trtClic)
               
               
               
               jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Taches_MAJ_Str_et_Adaptation,trtClic)
               
               //Chargement des rétrospecives.
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Import_retrospective,trtClic)
               
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Import_taches_techniques,trtClic)
               
               jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Maj_etats,trtClic)
               
               jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Import_messages,trtClic)
               
               
               jauge()
               
               //Purge de tous les éléments en mémoire
               clobjdb.purge_cache_obj()
               
               
               goApp.m_nNumeroDuSprintActuel = ClSprint.Sprint_Num_Actuel()
               ClSprint.Calcul_Velocite_Moyenne()
               
               
               ExécuteTraitement(BTN_Recup_listes,trtClic)
               ExécuteTraitement(BTN_Recup_tout,trtClic)
               
               
               HRéindexe(Scr_Historique, hNdxCompactage+hNdxSuppression+hVérifieMémo+hFTX )
               HRéindexe(Scr_Tache, hNdxCompactage+hNdxSuppression+hVérifieMémo+hFTX )
               HRéindexe(Scr_UserStory, hNdxCompactage+hNdxSuppression+hVérifieMémo+hFTX )
               
               
               //AnalyseurFin()
               
               si pas EnModeTestAutomatique() ALORS
               	Info("Chargement terminé.")
               FIN
               
               
               
               	Procédure interne nInc()
               	nPosActu++
               	renvoyer nPosActu
               	fin
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Enregistrer_utilisateurs
          identifier : 0x2ce79e6c022a434c
          internal_properties : BgAAAAYAAABnJvpLEQeyUeHVAxb+BMDjUKPx4xwGC/NSDCOiMFdrxJe+4musVbz2zFaykvfHcPeB2ih+n7e34GOoXZGCurFnHk6ec9EmP05WcJtZgTXzoWChPod0UXXEmMuYX2vARwIrdsyYBrHze9DzJ6Kf0r2UF455pXrfqqxzbvntwO+ljAGJ6o9pzo8vWBCgKx2+tyqb8evk/uVy/NJStiCOw9vJ1D/PaNZIUtwN+8e3aN+LsVMk9mFh3RVWTi0Ca8Q+8ctT9Xh/1wXTud8p0Nn6/Ay1takIH6Kfm7hTUDxUsNM8l28V20KUDdYtwrNkcWMwpbG71U3u2saEnikjJGDUR3ygCGcObHr8IzWrDReA9ORkU4BnSNgQ1Z/KBViCoz09lXiR6z2UgroMxksXRsrVEEbucflr6SOEiVAzePAFz8d4SI6S0K8gEjL/LT6iWPc+Io8LJa23lNskvVkgDo9je6k3EqMVCYGKw4nZumtwlCuIHk4zO5oLvJcfuLnTl8dfpNeu1WYZTI85NFQHHrhcQuJ6M5hedpJHzEUL0/B507p8Zvw3KekMywlvc06Ku/0DeYon2Ut1CdZEVC5iGPO4kYhoJBCyPdopgDp5e2LO0bIYHFnp8ITXvEYeXSd4dqRV8GZndWg2hbbz7c/WJTJ1VKUPId6r4Sq5Y8qep/WPmovthYIMiDw/u/ryOjMHuW2GPRkLw4deNHF2yZrGLhQMO8ULd/Jd+/VgXWB9XavBLfhPP4b+pTuWAQ==
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               IdFichierXLS		est un xlsDocument
               nXlsNbLigne			est un entier
               i					est un entier
               sFichier			est une chaîne
               
               nPremiereligne		est un entier	= 2
               
               //Déclaration Structure
               //stUsr				est un STR_User
               
               nCol_login			est un entier	= 1
               nCol_nom			est un entier	= 2
               nCol_mail			est un entier	= 3
               nCol_Service		est un entier	= 4
               nCol_chef_de_projet	est un entier	= 5
               nCol_equipe_dev		est un entier	= 6
               nCol_IdTrello		est un entier	= 7
               oUsr				est un ClUsr dynamique
               
               
               
               
               // Ouvre le sélecteur de fichiers
               sFichier = Dupplication_Fichier_Avant_Import("L:\Service informatique\Service Développement\Test projet Scrum\utilisateurs Scrum.xlsx")
               
               
               HSupprimetout(Scr_Usr)
               
               
               SI sFichier <> "" ALORS
               	
               	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               	
               	SI ErreurDétectée = Faux ALORS
               		
               		SI xlsFeuilleEnCours(IdFichierXLS, 1) ALORS	
               			
               			nXlsNbLigne =xlsNbLigne(IdFichierXLS,Vrai)
               			
               			POUR i = nPremiereligne _À_ nXlsNbLigne
               				
               				SI xlsDonnée(IdFichierXLS,i,nCol_nom) <> "" ALORS
               					
               					
               					oUsr = allouer un ClUsr
               					oUsr.p_sLogin_AD	= xlsDonnée(IdFichierXLS,i,nCol_login)
               					oUsr.p_sNom			= xlsDonnée(IdFichierXLS,i,nCol_nom)
               					oUsr.p_sEMail		= xlsDonnée(IdFichierXLS,i,nCol_mail)
               					oUsr.p_sService		= xlsDonnée(IdFichierXLS,i,nCol_Service)
               					si xlsDonnée(IdFichierXLS,i,nCol_equipe_dev) ~= "x" alors
               						oUsr.p_bTop_Equip_Informatique =  1
               					sinon
               						oUsr.p_bTop_Equip_Informatique =  0
               					fin
               					oUsr.Enregistre()
               					
               					
               					si xlsDonnée(IdFichierXLS,i,nCol_IdTrello) <> "" ALORS
               						HRAZ(Scr_Usr_Trello)
               						Scr_Usr_Trello.IdTrello = xlsDonnée(IdFichierXLS,i,nCol_IdTrello)
               						Scr_Usr_Trello.IDScr_Usr = oUsr.Get_IdUnique()
               						HAjoute(Scr_Usr_Trello)
               					FIN
               					
               //					stUsr.sLogin_AD = xlsDonnée(IdFichierXLS,i,nCol_login)
               //					stUsr.sNom = xlsDonnée(IdFichierXLS,i,nCol_nom)
               //					stUsr.sEMail =  xlsDonnée(IdFichierXLS,i,nCol_mail)
               //					stUsr.sService =  xlsDonnée(IdFichierXLS,i,nCol_Service)
               //					
               //					si xlsDonnée(IdFichierXLS,i,nCol_chef_de_projet) ~= "x" alors 
               //						stUsr.bChefProjet = 1
               //					sinon
               //						stUsr.bChefProjet = 0
               //					fin
               //					
               //					si xlsDonnée(IdFichierXLS,i,nCol_equipe_dev) ~= "x" alors
               //						stUsr.bTopEquipInformatique =  1
               //					sinon
               //						stUsr.bTopEquipInformatique =  0
               //					fin
               //					
               //					COL_Scrum.Utilisateur_Ajout_Deprecated(stUsr)
               				FIN
               			FIN
               			
               		SINON
               			Erreur(ErreurInfo(errComplet))
               		FIN
               	SINON
               		Erreur(ErreurInfo(errComplet))
               	FIN	
               	
               	xlsFerme(IdFichierXLS)
               	
               FIN
               
               
               
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Creer_les_types_d_intervenants
          identifier : 0x20113f8a19f4969c
          internal_properties : BgAAAAYAAACZEiVMlk1FPFShj+wzD+6srb5RetiFH8HhVHk5pXhZVxYu4PSw0ofxlciGDUYlv5zdVwsitRMyY3g+pjW09+qo2VjbHnxdElX8h++VZqiKrbwYnVXGvIZIdf5S7L+LuNTRlcQe4FfX5G5xn7vpDuN6rFqypZp4xhZp/nf4W/0+yU2zJWaDkez6rrZ6uoMO6PqbfRUDpTS3f6huXCW+SEI736Mt3zWXP1TQ9l4W6KhxJJYPkD/Qhlo8eJFywuOvLWAP4+dqO8XvIbpWPkRY2xJUexbvi8REHKwDGGSOoFzZhh1ti2b4qzcBm/NIEelohEo+QZSZ9WVcQR+STCL6bNHxNqB82MY99idPZnq94H78dLm3CYBTTZJ/InhJdcy48dZy6Abox6PLkjkcgZwBikf4b7tYJIT8JhuWTqhnLn/maKDY94wkW6XEpluC+tcI/Um0yCNcaIpJ2+qTPrQKT1Sjf7V2clclkUVu1s714xH8lso9dmAR6u1pVLQQJ20q++mYZ81vMOpJJT9Rs8m5rGBpiPGXpVIsmQS75i+lC72djxhcPvEJMxcuyeJjcp4Wcrh+ZrdyZK4tDzwRUWwo5tm0ZJplex38kij+J9GeWHcAE3TQbeLALBYTEJ+THKcD6NSJ6L1JuZu7EYLHHbG9eeMhy6aK3l6Pf2L1iih5vCZkm1iNEgncviK2qdnR5/d1V6XvYj/UiX2ENjE/h+LOZ09/A+aSNgzikh23aTtUGkCksZoWu/0ftT0SSJjohXWegiVar5Rj
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               
               
               HRAZ(Scr_Process_Metier_Intervenant_Type)
               Scr_Process_Metier_Intervenant_Type.IDScr_Process_Metier_Intervenant_Type	= 1
               Scr_Process_Metier_Intervenant_Type.Libelle									= "Action manuelle"
               HAjoute(Scr_Process_Metier_Intervenant_Type)
               
               
               HRAZ(Scr_Process_Metier_Intervenant_Type)
               Scr_Process_Metier_Intervenant_Type.IDScr_Process_Metier_Intervenant_Type	= 2
               Scr_Process_Metier_Intervenant_Type.Libelle									= "Action par intervenant"
               HAjoute(Scr_Process_Metier_Intervenant_Type)
               
               
               HRAZ(Scr_Process_Metier_Intervenant_Type)
               Scr_Process_Metier_Intervenant_Type.IDScr_Process_Metier_Intervenant_Type	= 3
               Scr_Process_Metier_Intervenant_Type.Libelle									= "Action automatique"
               HAjoute(Scr_Process_Metier_Intervenant_Type)
               
               
               HRAZ(Scr_Process_Metier_Intervenant_Type)
               Scr_Process_Metier_Intervenant_Type.IDScr_Process_Metier_Intervenant_Type	= 4
               Scr_Process_Metier_Intervenant_Type.Libelle									= "Attente"
               HAjoute(Scr_Process_Metier_Intervenant_Type)
               
               
               HRAZ(Scr_Process_Metier_Intervenant_Type)
               Scr_Process_Metier_Intervenant_Type.IDScr_Process_Metier_Intervenant_Type	= 5
               Scr_Process_Metier_Intervenant_Type.Libelle									= "Sous process"
               HAjoute(Scr_Process_Metier_Intervenant_Type)
               
               
               HRAZ(Scr_Process_Metier_Intervenant_Type)
               Scr_Process_Metier_Intervenant_Type.IDScr_Process_Metier_Intervenant_Type	= 6
               Scr_Process_Metier_Intervenant_Type.Libelle									= "Condition"
               HAjoute(Scr_Process_Metier_Intervenant_Type)
               
               
               
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Creer_les_types_de_message
          identifier : 0x2cd57bd101230065
          internal_properties : BgAAAAYAAACG3iPZghB3EZEtZlvRoLMhK5h7CX2BxvKdHUwwgi8oQp+2tYTvDJDU+/H/4z0Q044RWvLkGw+bduYBI1Gz+X6g7NjJE8PH3FLsEsR1Q3ygEuoyZMLTphKRvUBGiOy8Xo09djv3NGjf4D1rhEe78e9+6DOcwqTT1SuvfbXBgALFJ3iaLjqoBvW18nvHt7no94zgDKDny3BqCH0qFn/Qqa4mwowr2HRpB9NW5ACFresoFVuAE6apw4DDCYuyh3xvKI1IsvgqV6oPvVLq3YaQKdbUhG6AlvjZLIuNHjd7Niqk7bpi+ASrBvUC55vm8kwoRwR3dLs8llE5FNdq+ggzt+9XFyJ+i4Z11/ccZj20nva/6JlJrMfsBR2rLFNbembptrV/JVLwt0jR4Tjm+liFga3d2/scAPxjLFAL6Lkz/jLK8wKuzSCQ+OunNanZoBlhpWAymjF+VEtt+hVN19As+D5uM+XiMslsMTILRp0HrcrkDepBfnA5V/O+edynh1/pKSh4OxNLWBsDiXycbXnZGfuv7o5xVm6F2iGRs96aBaaVeiSfulczRoZ1PB4g6xQOQJucSqCBmF2HzLmlLxScOBcS4j3m5/bvMBe/m4jR4+eyGb/Arvbubx6B8ObhrFNguXB4GeRqeqmuEU/CBd5iMK+w2TksrdaSZSDpAysfXpXaPtA9uG2vyo7/ZAynAMBBHExQs0jPwo9Mt2cNBPFv2oCbEK9BvkV4XEsS/OURftvROhQ57NzW2ctfKYEfWf0=
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1-
               Hraz(Scr_Type_Cmtr)
               
               Scr_Type_Cmtr.Type_Cmtr = "Point(s) fort(s)"
               Scr_Type_Cmtr.Top_Par_Defaut = 1
               
               HAjoute(Scr_Type_Cmtr)
               
               HRAZ(Scr_Type_Cmtr)
               
               Scr_Type_Cmtr.Type_Cmtr = "Point(s) faible(s)"
               Scr_Type_Cmtr.Top_Par_Defaut = 1
               
               HAjoute(Scr_Type_Cmtr)
               
               HRAZ(Scr_Type_Cmtr)
               
               Scr_Type_Cmtr.Type_Cmtr = "Solutions"
               Scr_Type_Cmtr.Top_Par_Defaut = 1
               
               HAjoute(Scr_Type_Cmtr)
               
               HRAZ(Scr_Type_Cmtr)
               
               Scr_Type_Cmtr.Type_Cmtr = "Test fonctionnel"
               Scr_Type_Cmtr.Top_Par_Defaut = 1
               
               HAjoute(Scr_Type_Cmtr)
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_LANCER_B2B
          identifier : 0x20b0928944137a7f
          internal_properties : BgAAAAYAAACH8AFfTrAUmV+4rcuJeaq2EGcrVjZbO4xqc7ySMbN8hF4jMp/fNqdQa0k+62q/Vsc6fid/DMafppzA6aWc9wADCSV8QbScp4YuTGteNEPQeShLFqoOXGGwwzHb/1zt7ZnBxybTgZoI+tVZVK/jYwRmCA4T4Ekw6oiPOhikfZl7XtxO2K4ZV+c5rMmbcS/AsHfMgUL2tw1wqs03a45RyEwriuu4BmBMup4iUWQidCl3u2aaut6ROqfQ0yok/gZNa1tXdA3H3P0iqXoYMgRbSCcmEq0XSoyuQWa0NBb8Bkr+rBRITAj4cpUtOXiKDNC+uzfDbFZMBkWF/AWx6rmH49ciR4T+nvvpHEl96g2lX/UdO0M3GaDycY8Kep2DdRSneSNe5LgZd+xIZRmmrvgz1apBRAy0UaRfnzayYKUXPvKbn0mFwbPovN6biIMPIhebLL71JlPrgJYA9D2FM36f+lUMcSuzMdGcAykL4+TDBcRxRNYTYb1pNu/HxrQoPhnTPtznYb13vAkC5jNw+wpN6dmHmCUcLuqVBeP53tNOxMF3i9T44KxB3XdViqt4o+Jp8PBlltqEyugRpqIVJnCeDVgN5I/eUYz2y3mv2tgoqwjCYezmjDTJGaXNC2B7ZzNQ4R2YCvCN1JdWpp/Q9E7X8SvFSnzRCSLhIHPrpkQdYYo27CBU5wmN8IbTQe84ZXbjyh5ZkBPS3/egrpuZbTIA4tbhoJ8EH3hj
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1-
               nPosActu	est un entier	= 0
               nPosMax		est un entier	= 36
               jauge(nInc(),nPosMax)
               
               //AnalyseurDébut()
               
               ClObjDB.Purge_cache_obj()
               
               ExécuteTraitement(BTN_Vider_tt_les_tables,trtClic)
               
               //Import des utilisateurs.
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Enregistrer_utilisateurs,trtClic)
               
               
               //Paramétrage des types de messages
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Creer_les_types_de_message,trtClic)
               
               // Paramétrage des états des critères et les composants type
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_RemplirLesTables,trtClic)
               
               //Chargement des sprints
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Enregister_les_sprints,trtClic)
               
               //Association des projets aux responsables de projets.
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Affecter_Projets,trtClic)
               
               ////Intégration des projets
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Importer_credit_V3,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Import_NF_203,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Import_Migration,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Import_Vieux_Stock,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Import_pool,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Importer_PxF,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Importer_Evols_android,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Importer_Automat,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Importer_DEB_LAD_RAD,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Importer_ControleHebdoBL,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Importer_ControleHebdoBL1,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Importer_Inventaire_tournant,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Importer_Base_V2,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_Cerebro,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Importer_nv_planning_trp,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Importer_piloting,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Importer_CRM,trtClic)
               //Jauge(nInc(),nPosMax)
               ////ExécuteTraitement(BTN_Importer_Espace_Cli,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Importer_Menuiserie_2021,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Importer_Fusion_UM_GM,trtClic)
               
               ////Intégration des taches tierces
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Enregistrer_fichier_2,trtClic)
               
               
               
               //Intégration des docs
               Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Import_Docs,trtClic)
               
               
               
               //jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Taches_MAJ_Str_et_Adaptation,trtClic)
               
               //Chargement des rétrospecives.
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Import_retrospective,trtClic)
               
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Import_taches_techniques,trtClic)
               //
               //jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Maj_etats,trtClic)
               //
               //jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Import_messages,trtClic)
               
               
               jauge()
               
               //Purge de tous les éléments en mémoire
               clobjdb.purge_cache_obj()
               
               
               goApp.m_nNumeroDuSprintActuel = ClSprint.Sprint_Num_Actuel()
               ClSprint.Calcul_Velocite_Moyenne()
               
               
               HRéindexe(Scr_Historique, hNdxCompactage+hNdxSuppression+hVérifieMémo+hFTX )
               HRéindexe(Scr_Tache, hNdxCompactage+hNdxSuppression+hVérifieMémo+hFTX )
               HRéindexe(Scr_UserStory, hNdxCompactage+hNdxSuppression+hVérifieMémo+hFTX )
               
               
               //AnalyseurFin()
               
               si pas EnModeTestAutomatique() ALORS
               	Info("Chargement terminé.")
               FIN
               
               
               
               	Procédure interne nInc()
               	nPosActu++
               	renvoyer nPosActu
               	fin
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Vider_tt_les_tables
          identifier : 0x2cab417000fa6a9b
          internal_properties : BgAAAAYAAAC36N/fzcqbwVl5jWka/E/5oT04ZE/zgAPfCbmkcYzV/6VMSu2tinj9MUu399yPT/qo1VGFJvGtB0qZzyeKzfjCGoMFa1+QP/RE1+0GWVtcc93vts6brBcGG7YnXjcUxRKWJP+JtTIxX3p8VZqZ2wGqcDanvhuBlFbsvQjujnGiXSjL2+tMbT+vwvf1eXPoCm5oPsQjL3Fz1v8NVBArYAZuutqSDvVlw3GFUciA0ga6jrmxjMfT/8OyYYYOnmnI6awe6SsBMcwMB6mhBNl0Um5RFd/O0BE3l6mB/6qC+mE/TK7tk9NX/QGnAfqs+3KSXEdH3yYcotz2cPIssKaG+4H598dbiYIxfyPObBNIDF59NpQe/LXLkI5DN/YXgyWxqD07Zgi5Mt2wbnmlbIWC7YpCFsj5JfOoIxWXuCVdu+IvtHG52CSgkqwmvsdWaRtPSgU3icoa7Vf7MKrNiMtbzu3PLSrfS00OrIUyEI/SunkrsQy2rdCVHyt6+dwPXEQ0sxAKwIHH4J31+RiVYPezZ0bEQXz5W3nyKToq92AhsNV+Y9g+GcfV5nqpMj/jd/BCuC3aIyFJoOgYNxDHM+mn9QQt84FMDtE8JehQz2oI2C/T/LQgOKUeV9KV8PmEIOc6f+Zin4lPTbzXnC8E+XmBXH3jxriB7OawrlbBNj5TnIUaP/9mAXGTQUkAWaaMzY1Q4DNxDE8ktQLAyBhwiq3bLENq6cfLb9ZbLe9XlStgxpFn4O2xZiQQ
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               
               SI PAS HSupprimeTout(Scr_UserStory_Doc) ALORS
               	Erreur(HErreurInfo(hErrComplet))
               FIN
               
               SI PAS HSupprimeTout(Scr_Historique) ALORS
               	Erreur(HErreurInfo(hErrComplet))
               FIN
               SI PAS HSupprimeTout(Scr_Message) ALORS
               	Erreur(HErreurInfo(hErrComplet))
               FIN
               
               SI PAS HSupprimeTout(Scr_UserStory_Scr_Process_Metier_Intervenant) ALORS
               	Erreur(ErreurInfo(errComplet))
               FIN
               SI PAS HSupprimeTout(Scr_Process_Metier_Intervenant) ALORS
               	Erreur(ErreurInfo(errComplet))
               FIN
               SI PAS HSupprimeTout(Scr_Process_Metier_Axe) ALORS
               	Erreur(ErreurInfo(errComplet))
               FIN
               SI PAS HSupprimeTout(Scr_Process_Metier) ALORS
               	Erreur(ErreurInfo(errComplet))
               FIN
               
               
               SI PAS HSupprimeTout(Scr_Projet_Situation) ALORS
               	Erreur(ErreurInfo(errComplet))
               FIN
               SI PAS HSupprimeTout(Scr_Usr_Projet) ALORS
               	Erreur(ErreurInfo(errComplet))
               FIN
               
               SI PAS HSupprimeTout(Scr_UserStory) ALORS
               	Info("erreur", ErreurInfo())
               FIN
               SI PAS HSupprimeTout(Scr_Tache) ALORS
               	Info("erreur", ErreurInfo())
               FIN
               
               
               
               SI PAS HSupprimeTout(Scr_Usr_Trello) ALORS
               	Info("erreur", ErreurInfo())
               FIN
               
               SI PAS HSupprimeTout(Scr_Usr) ALORS
               	Info("erreur", ErreurInfo())
               FIN
               
               SI PAS HSupprimeTout(Scr_Projet) ALORS
               	Info("erreur", ErreurInfo())
               FIN
               
               
               SI PAS HSupprimeTout(Scr_Commentaire) ALORS
               	Info("erreur", ErreurInfo())
               FIN
               
               SI PAS HSupprimeTout(Scr_Type_Cmtr) ALORS
               	Info("erreur", ErreurInfo())
               FIN
               
               SI PAS HSupprimeTout(Scr_Sprint) ALORS
               	Info("erreur", ErreurInfo())
               FIN
               
               
               
               //contrôle des tables a vider au préalable
               SI PAS HSupprimeTout(Scr_CritereAccept_Composant) ALORS
               	Erreur(ErreurInfo(errComplet))
               FIN
               
               
               si pas HSupprimeTout(Scr_CritereAccept) ALORS
               	Erreur(ErreurInfo(errComplet))
               FIN
               
               SI PAS HSupprimeTout(Scr_CritereAccept_Etat) ALORS
               	Erreur(ErreurInfo(errComplet))
               FIN
               
               
               si pas HSupprimeTout(Scr_CritereAccept_Composant_Type) ALORS
               	Erreur(ErreurInfo(errComplet))
               FIN
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Enregistrer_fichier_2
          identifier : 0x2ca75d8301cec657
          internal_properties : BgAAAAYAAAALicCpDEOwPduDB4rsZu21oW1mGA3aPx5F4VRunhOr7lR/23+uX9V/Vpunk0RPRwZ437pC3QOXOGYHD4E2JfQFN79/XPr97ssZkspxqVWMFfEEAZJKJik3pM0ZVTgGMit/CXatcc0w+N3d+2GoJxwltyDjk8SIn2vGJr2BOJsbYrMslsZeScapMjwAV1RqiHPmvNsb2ktYU43B5afszykGUc5l98/hbRERcZXK+5Jx17AOBGj/xhAMMG6swU4kX5UvJx3BdJoUN/PodkRwxtWPl2a0CEb/VNDsJm5H9RDshMMgUzycxZBRdb1mULCwR3rJW8Id7NiqUiYcvI27hp23aKZ994rWn7840nJrSsTJz5N/PPvc9Hgkxj5KeymZXDE76amrJM1U4snYGTEGTU64wC8KsSl8m8tV4RiRiRBlsmvwbXiElgzAcLwVPx33Fpd9su1SpZtbVKrIjakVmD/PKYPmtaP0+p80H3h+Ru3bAfhnEO6vBXl490fQilBevUjOWWjTwJfHaYxuv2fvUbDSs4uyFXG4Vx7yrM8lTklezbeQPF91RMJP6ECqTVAEyjP0gobJGNDHF5TFO2PEtxyRJeiVGQr33R85rbmjr5aHXJ6OgQBn0pO8rT61rACXg8QyMkWCasWCB1kAjs8FXwA+KeQHumAPL4S9AWqYDeK7HCk2uwiAZm6MZaaz8yIPXkMSwvuTBa+vWmb2JxkPh3r+GPvsXbQixOr7luZciA==
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               IdFichierXLS est un xlsDocument
               Xlsnbligne_ est un entier
               i est un entier
               sFichier est une chaîne
               
               //déclaration des structures
               stMaTache est un STR_Tache
               aMesTaches est un tableau de STR_Tache
               stMaUserStorie est un STR_UserStorie
               
               //requête
               sReq est une chaîne
               sdRechercheProjet est une source de Données 
               
               //Pour créer lié les Taches, les utilisateurs les US et les Projet
               nIDProjet est un entier
               nIDUtilisateur est un entier = 1
               
               
               //Ligne et Colonne des fichiers
               nPremiereligne est un entier = 31
               nCol_CodeTache est un entier = 1
               nCol_Projet est un entier = 2
               nCol_nom est un entier = 3
               nCol_Sprint est un entier = 4
               nCol_Poids est un entier = 5
               nCol_Réalisé est un entier = 6
               nColCommentaire est un entier = 7
               nColDoc est un entier = 8
               
               aTacheATester est un tableau de chaines
               
               sFichier = Dupplication_Fichier_Avant_Import("L:\Service informatique\Service Développement\Normes et procédures de dev\SCRUM.xlsx")
               
               SI sFichier <> "" ALORS
               	
               	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               	
               	SI ErreurDétectée = Faux ALORS
               		
               		Xlsnbligne_ =xlsNbLigne(IdFichierXLS,Vrai)
               		
               		POUR i = nPremiereligne _À_ Xlsnbligne_
               			
               			si xlsDonnée(IdFichierXLS,i,nCol_CodeTache) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_nom) <> "" alors
               				
               				VariableRAZ(stMaTache)
               				
               				stMaTache.sCodeTache   = "T" + xlsDonnée(IdFichierXLS,i, nCol_CodeTache)
               				
               				Si xlsDonnée(IdFichierXLS,i,nCol_Projet) <> "" alors
               					stMaTache.sProjet      = xlsDonnée(IdFichierXLS,i,nCol_Projet)
               									
               				Sinon
               					stMaTache.sProjet      = "Tiers"
               					
               				FIN
               				
               				
               				stMaTache.sDescription          = xlsDonnée(IdFichierXLS,i,nCol_nom)
               				stMaTache.nNumSprintCreation    = xlsDonnée(IdFichierXLS,i,nCol_Sprint)
               				stMaTache.nNumSprintPrevision   = stMaTache.nNumSprintCreation
               				
               				stMaTache.nNumSprintRealisation = stMaTache.nNumSprintCreation 
               				
               				SI (SansEspace(xlsDonnée(IdFichierXLS,i,nCol_Poids)) = "" _ou_ sansespace(xlsDonnée(IdFichierXLS,i,nCol_Sprint)) = "") et pas Majuscule(xlsDonnée(IdFichierXLS,i,nCol_Réalisé)) dans ("A") ALORS
               					stMaTache.bBrouillon = Vrai
               					//Trace(stMaTache.sProjet,TAB,stMaTache.sCodeTache,TAB,stMaTache.sDescription,TAB,"Poids : " + xlsDonnée(IdFichierXLS,i,nCol_Poids),TAB,"Sprint : " + xlsDonnée(IdFichierXLS,i,nCol_Sprint))						
               				FIN
               				
               				//Si la tache n'a pas de poids, on passe son poids a null pour differencier avec les taches qui ont un poids de 0
               				si xlsDonnée(IdFichierXLS,i,nCol_Poids) <> ""
               					stMaTache.nPoids                = xlsDonnée(IdFichierXLS,i,nCol_Poids)
               					stMaTache.nPoids_Prevision      = stMaTache.nPoids
               				sinon
               					stMaTache.nPoids                = NULL		//?
               					stMaTache.nPoids_Prevision      = Null		//?
               				fin
               				
               				stMaTache.sRealise              = xlsDonnée(IdFichierXLS,i,nCol_Réalisé)
               				stMaTache.sCommentaire          = xlsDonnée(IdFichierXLS,i,nColCommentaire)
               				
               				si xlsDonnée(IdFichierXLS,i,nColDoc) ~= "Oui" ALORS
               					stMaTache.sCommentaire		+= rc + rc + "(Voir documentation)"
               				FIN
               				stMaTache.nOrdre = 1
               				
               				SI xlsDonnée(IdFichierXLS,i,nCol_Réalisé) ~= "C" ou xlsDonnée(IdFichierXLS,i,nCol_Réalisé) ~= "x" OU xlsDonnée(IdFichierXLS,i,nCol_Réalisé) ~= "T" ALORS
               					stMaTache.bDemarree = Vrai
               					stMaTache.nNumSprintDemarage = stMaTache.nNumSprintRealisation
               					stMaTache.nNumSprintFin = 0
               					
               					si xlsDonnée(IdFichierXLS,i,nCol_Réalisé) ~= "x" alors
               						stMaTache.bTermine = vrai
               						stMaTache.nNumSprintFin = stMaTache.nNumSprintRealisation
               					FIN
               					
               					//La tache est elle en test ?
               					si xlsDonnée(IdFichierXLS,i,nCol_Réalisé) ~= "T" ALORS
               						//Oui : On mémorise que les taches sont faites
               						stMaTache.bTermine = vrai
               						TableauAjoute(aTacheATester,stMaTache.sCodeTache)
               					FIN
               					
               					
               				sinon
               					stMaTache.nNumSprintDemarage = 0
               					stMaTache.bDemarree = Faux
               					stMaTache.nNumSprintFin = 0
               				Fin
               				
               				
               				SI xlsDonnée(IdFichierXLS,i,nCol_Réalisé) ~= "A" alors 
               					stMaTache.bAnnulee = vrai
               					stMaTache.nNumSprintDemarage = stMaTache.nNumSprintRealisation
               				SInon
               					stMaTache.bAnnulee = faux
               				FIN
               				
               				TableauAjoute(aMesTaches, stMaTache)		
               			fin
               		fin
               		
               		xlsFerme(IdFichierXLS)
               		//Info("importation terminée !")
               		
               		
               	SINON
               		Erreur(ErreurInfo(errComplet))
               	FIN	
               	
               	//Ajout des taches à la base
               	POUR i = 1 _À_ TableauOccurrence(aMesTaches)
               		//Recherche du projet de la tache
               		sReq = ChaîneConstruit([
               			SELECT Scr_Projet.IDScr_Projet 
               			FROM Scr_Projet
               			WHERE Scr_Projet.Nom = '%1'
               		], aMesTaches[i].sProjet)
               		
               		SI goApp.Rsql(sdRechercheProjet,sReq) ALORS
               			//Si On trouve le projet, on enregistre son ID
               			SI HNbEnr(sdRechercheProjet) > 0 ALORS
               				HLitPremier(sdRechercheProjet)
               				SI HTrouve(sdRechercheProjet) ALORS
               					nIDProjet = sdRechercheProjet.IDScr_Projet
               				FIN
               				
               			SINON //Sinon on crée le projet
               				//trace("Projet non trouvé : " + aMesTaches[i].sProjet)
               				HRAZ(Scr_Projet)
               				Scr_Projet.Nom = aMesTaches[i].sProjet
               				//Scr_Projet.IDSrc_Usr = nIDUtilisateur 
               				SI PAS HAjoute(Scr_Projet) ALORS
               					Info("erreur dans l'ajout du projet", ErreurInfo())
               				SINON
               					nIDProjet = Scr_Projet.IDScr_Projet
               				FIN
               			FIN
               			
               			
               			
               			//On créé une User Storie Associée à ce projet et on la lie a la tache
               			VariableRAZ(stMaUserStorie)
               			stMaUserStorie.sCodeUserStorie = aMesTaches[i].sCodeTache
               			stMaUserStorie.sBesoinUserStorie = aMesTaches[i].sDescription
               			stMaUserStorie.nIDProjet = nIDProjet
               			stMaUserStorie.nIDResponsable = 1
               			stMaUserStorie.sEnTantQue = "Historique"
               			
               			//La tache fait elle parti des taches à tester ?
               			SI TableauCherche(aTacheATester,tcLinéaire,stMaUserStorie.sCodeUserStorie) > 0 ALORS
               				//Oui
               				stMaUserStorie.bAtester = Vrai
               			FIN
               			
               			aMesTaches[i].nIDUserStorie = User_Story_ajout(stMaUserStorie)
               			
               			
               			//si aMesTaches[i].nNumSprintRealisation = 0 ALORS stop
               			
               			//Enfin on créé la tache et on l'ajoute à la base de donnée
               			Taches_Ajout(aMesTaches[i])
               			
               			
               			
               		FIN
               		HAnnuleDéclaration(sdRechercheProjet)
               	FIN
               FIN
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Importer_credit_V3
          identifier : 0x2cb44cd8036a26a3
          internal_properties : BgAAAAYAAADF09fsaMVS6czUJn3lFuCbFvpbJhk7//uDhsiA5ouMY2zi9kdQySDLrALgEiY2NEuD5bR7V+5GC0LZF7cBp/oKnfw2k4BwINr7qViCJgjwe6EkGO/gt2mM7FQKBTehtYbvUfmwTSVnJzKcIcyxKbN6fXBMmK53ZDqbfWUFT9IbT7lGBK5zKE/DZIGKliWwq0s0gJpaMM8GdtQ6L8U1E22x/NzvpT1w42mefHMbcGFdsziAK9GDVUoWXGqNmJQdRcfC3hqlXWY1KxaLQ9O9AzWUq3igAQHP1DJ+qRRStnuBtcvcwoY+F/EZQdaNbQ/jKcn4tpkefNhSDpf5cnpgmVvQs1/uzh3xAWq0VPN7NXG9q+cRlWVBJ1B3kFHTscrzWUv6WKpfWdYQrVVqEmQB4dp5DLRsyUizydAaGF2fuGjHC3mV0aM8cKhldLfjHhNBjN4z66fJXKlWwqwzIV6yRH2WWixON5t61mT83plnfTIZZVnAxvG5PUAOHIa1Tet/RKRPQvVKsD/OfMVdcssZpw+27dKphI5JpO1Nmr7va6hoiEeR7IbDJFTTjbC0zlgZgVVv+ymXJF0SPrhP7wvnItsVQWGX4AhHXmLyLpMh38addjszpFkJjj+uUVABe7pPTpYbZNRJdAf34fEsAypMTf8xg0KVD0A98v+j5u04ZY6UNiK8PHAbTJ760GLGnBojSSUX9zMCkBauVG8rXcBQsuCCk6F1PQTnDDE0s7wP6nZBRQal29oAnw==
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               IdFichierXLS est un xlsDocument
               Xlsnbligne_ est un entier
               i est un entier
               sFichier est une chaîne
               
               nPremiereligne est un entier = 2
               
               //Declatration VAriables
               nIdUS est un entier
               //nIdProjet est un entier
               stTache est une STR_Tache
               stUS est une STR_UserStorie
               
               nCol_codeUS est un entier = 1
               nCol_codeTache est un entier = 2
               nCol_numSprint est un entier = 4
               nCol_Poids est un entier = 6
               nCol_fin est un entier = 7
               nCol_nom est un entier = 15
               nCol_Besoin est un entier = 9 
               nCol_Besoin2 est un entier = 15
               nCol_commentaire est un entier = 17
               
               oPrj est un ClProjet <- oProjetDeNom("Credit V3")
               
               //HLitRecherche(Scr_Projet,Nom,"Credit V3")
               //
               //si htrouve(Scr_Projet)
               //	nIdProjet = Scr_Projet.IDScr_Projet
               //sinon
               //	HRAZ(Scr_Projet)
               //	//Scr_Projet.IDSrc_Usr = 1
               //	Scr_Projet.Nom = "Credit V3"
               //	Si pas Hajoute(Scr_Projet) alors
               //		info("erreur dans l'ajout du projet credit V3", ErreurInfo())
               //	FIN
               //	nIdProjet = Scr_Projet.IDScr_Projet //On recupère son ID
               //fin
               nNumeroOrdre est une entier = 0
               // Ouvre le sélecteur de fichiers
               
               sFichier = Dupplication_Fichier_Avant_Import("L:\Service informatique\Procedures\Dev_logiciel\Credit client V3\CDC V2 CREDIT Vdef2.xls")
               
               SI sFichier <> "" ALORS
               	
               	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               	
               	SI ErreurDétectée = Faux ALORS 
               		
               		SI xlsFeuilleEnCours(IdFichierXLS, 3) ALORS	
               			
               			Xlsnbligne_ =xlsNbLigne(IdFichierXLS,Vrai)
               			
               			POUR i = nPremiereligne _À_ Xlsnbligne_
               				
               				//Si le champ code de la tache est vide => c'est une US
               				Si xlsDonnée(IdFichierXLS,i,nCol_codeTache) = "" alors
               					si xlsDonnée(IdFichierXLS,i,nCol_codeUS) <> "" alors
               						VariableRAZ(stUS)
               						stUS.sCodeUserStorie = "CC" + xlsDonnée(IdFichierXLS,i,nCol_codeUS)
               						stUS.sEnTantQue = "Historique"
               						stUS.sBesoinUserStorie = xlsDonnée(IdFichierXLS,i,nCol_Besoin) + " - " + xlsDonnée(IdFichierXLS,i,nCol_Besoin2)
               						stUS.sAfindeUserStorie = xlsDonnée(IdFichierXLS,i,nCol_nom)
               						stUS.nIDProjet = oPrj.Get_IdUnique()
               						stUS.nIDResponsable = oPrj.p_oUsr_ChefProjet.Get_IdUnique()
               						
               						Si xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T" alors
               							stUS.bAtester = vrai
               							stUS.eEtatUserStorie = ClUserStory.ECompteNbUS.En_test_fonctionnel
               						FIN
               						
               						nIdUS = User_Story_ajout(stUS)
               						
               						nNumeroOrdre = 0
               					fin
               				sinon //sinon c'est une tache
               					
               					si PAS (xlsDonnée(IdFichierXLS,i,nCol_nom) = SansEspace("") ET xlsDonnée(IdFichierXLS,i,nCol_numSprint) = SansEspace("")) alors
               						VariableRAZ(stTache)
               						stTache.sCodeTache = "CC" + xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               						stTache.nNumSprintCreation = xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               						stTache.nNumSprintRealisation = stTache.nNumSprintCreation
               						stTache.nNumSprintPrevision = stTache.nNumSprintCreation
               						//stTache.nNumSprintDemarage = stTache.nNumSprintCreation
               						stTache.nIDUserStorie = nIdUS
               						stTache.sDescription = xlsDonnée(IdFichierXLS,i,nCol_nom)
               						
               						//affectation du num d'ordre
               						nNumeroOrdre++
               						stTache.nOrdre = nNumeroOrdre
               						
               						SI (SansEspace(xlsDonnée(IdFichierXLS,i,nCol_Poids)) = "" _OU_ SansEspace(xlsDonnée(IdFichierXLS,i,nCol_numSprint)) = "") _et_ pas (xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A") ALORS
               							Trace(Scr_Projet.Nom,TAB,stTache.sCodeTache,TAB,stTache.sDescription,TAB,"Poids : " + xlsDonnée(IdFichierXLS,i,nCol_Poids),TAB,"Sprint : " + xlsDonnée(IdFichierXLS,i,nCol_numSprint))						
               						FIN
               						
               						//Si le poids n'est pas indiqué --> null
               						Si xlsDonnée(IdFichierXLS,i,nCol_Poids) <> "" alors
               							stTache.nPoids = xlsDonnée(IdFichierXLS,i,nCol_Poids)
               							stTache.nPoids_Prevision = stTache.nPoids
               						sinon
               							stTache.nPoids = null
               							stTache.nPoids_Prevision = null
               						fin
               						
               						Selon Vrai
               							cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "x"
               								stTache.bDemarree = vrai
               								stTache.bAnnulee = faux
               								stTache.bTermine = vrai 
               								stTache.nNumSprintFin = stTache.nNumSprintCreation 
               								stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               							cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T"
               								stTache.bDemarree = vrai
               								stTache.bAnnulee = faux
               								stTache.bTermine = vrai
               //								stTache.nNumSprintFin = stTache.nNumSprintCreation 
               								stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               							CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "C"
               								stTache.bDemarree = Vrai
               								stTache.bAnnulee = Faux	
               								stTache.nNumSprintFin = 0
               								stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               							cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A"
               								stTache.bAnnulee = vrai
               								stTache.bDemarree = faux
               								stTache.nNumSprintFin = 0
               								stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               							AUTRE CAS
               								stTache.bAnnulee = Faux
               								stTache.bDemarree = Faux
               								stTache.nNumSprintFin = 0
               								stTache.nNumSprintDemarage = 0
               						FIN
               						Taches_Ajout(stTache)
               					fin
               				FIN
               				
               			FIN
               			
               		SINON
               			Erreur(ErreurInfo(errComplet))
               		FIN
               	sinon
               		erreur(erreurinfo(errComplet))
               	FIN
               FIN
               
               xlsferme(IdFichierXLS)
               
               // import des critères d'acceptations
               //Import_Des_Criteres_Acceptation(nIdProjet, sFichier)
               
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Import_NF_203
          identifier : 0x2cbece5904088df6
          internal_properties : BgAAAAYAAACxgddEAuVEuD/+8A43xUNISIFXtQ/m8NfY31VXdaJdsLIV2HJ1v/7cOC4ke+Cn2ZiFPlAQfhaoPuSvEUztqFlvWwMgH0+OhPvqpZugcscn1lfeBR0py5Mw15xP9WmP/RS5tnbRxqnPYu2LT8Rrib6y1N38YdbIWnwROckWUuMpb/myMmPL3q5ZsrGwSBxk5lb365NtrsfQFQhiTX0DspmBwMDNTCNmqh/OGxoPiFzV9XQv/PGnENU/b4Y3W1zGkIj8b/rUfjbXuNWLdwRMn/kdpap4vpuTv3t4OavlUAhcIBFNDyUfvme0pNdzIBUOXdFYbRadAcaOwDPMdFodjZPu32hF0J3labi/1X3dyXNaABsfyYSPeI9kxGy4Ci1t5FqlZCLwOKrdT+eq02AAN0BTqlRhhLdn6ozhoegOg+aTRwVh5DMuGR/tINaP0DNVxCptL4T3uxp2cToI9aL/PjXoU8yFZGN/ucKC3SbJyANhQiCSreUPTlpXY2McV+pmEQuWOg9miLx4RCh8HVBRrThRu7p7gosd3E+qbon07BGK5inLPANoxNTT/y23q6tTOVOhnnCLsbBeOa9RI3eIHoWj6OLRvGQ+0ToJgyAmt7TcOuUjB23RL5ilJbqPo8UkJfVIEEMyE6kEk1Q8H9NADSoEK8dP/p33GuJs5I0B4/BRA94v8DfFeswvE8vgKvzrV/ZOQRQeRynMt2gejwZck2ribzNbY2YUnx9DHtMQz95LnrM=
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               IdFichierXLS est un xlsDocument
               Xlsnbligne_ est un entier
               i est un entier
               sFichier est une chaîne
               
               nPremiereligne est un entier = 3
               
               //Declatration VAriables
               nIdUS est un entier
               //nIdProjet est un entier
               stTache est une STR_Tache
               stUS est une STR_UserStorie
               
               
               nCol_codeTache est un entier = 1
               nCol_nom est un entier = 4
               nCol_TacheParente est un entier = 5
               nCol_PoidsPrevisionnel est un entier = 15
               nCol_numSprint est un entier = 16
               
               nCol_fin est un entier = 17
               
               nCol_Poids est un entier = 18
               
               nOrdre est un entier
               
               
               oPrj est un ClProjet <- oProjetDeNom("NF 203")
               
               
               ////Creation ou affectation du projet
               //HLitRecherche(Scr_Projet,Nom,"NF 203")
               //
               //SI HTrouve(Scr_Projet)
               //	nIdProjet = Scr_Projet.IDScr_Projet
               //SINON
               //	HRAZ(Scr_Projet)
               //	
               //	Scr_Projet.Nom = "NF 203"
               //	SI PAS HAjoute(Scr_Projet) ALORS
               //		Erreur(HErreurInfo(hErrComplet))
               //	FIN
               //	nIdProjet = Scr_Projet.IDScr_Projet //On recupère son ID
               //FIN
               
               
               // Ouvre le sélecteur de fichiers
               
               sFichier = Dupplication_Fichier_Avant_Import("L:\Service informatique\Procedures\Dev_logiciel\Loi finance - NF525\NF 203 - Phases et Taches.xlsx")
               //fSélecteur("", "", "Sélectionnez un fichier...", "Tous les fichiers (*.*)" + TAB + "*.*" + RC + "Excel (*.xls)" + TAB + "*.xls;*.xlsx", "*.xls;*.xlsx")
               
               SI sFichier <> "" ALORS
               	
               	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               	
               	SI ErreurDétectée = Faux ALORS 
               		
               		SI xlsFeuilleEnCours(IdFichierXLS, 2) ALORS	
               			
               			Xlsnbligne_ =xlsNbLigne(IdFichierXLS,Vrai)
               			
               			POUR i = nPremiereligne _À_ Xlsnbligne_
               				
               				si xlsDonnée(IdFichierXLS,i,nCol_nom) <> "" alors
               					
               					//Si le champ code de la tache parente = 0001 => c'est une US
               					SI xlsDonnée(IdFichierXLS,i,nCol_TacheParente) = "0001" alors
               						stUS.sCodeUserStorie = "N" + xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               						stUS.sEnTantQue = "Historique"
               						stUS.sBesoinUserStorie = xlsDonnée(IdFichierXLS,i,nCol_nom)
               						stUS.nIDProjet = oPrj.Get_IdUnique()
               						stUS.nIDResponsable = oPrj.p_oUsr_ChefProjet.Get_IdUnique()
               						
               						SI xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T" ALORS
               							stUS.bAtester = Vrai
               							stUS.eEtatUserStorie = ClUserStory.ECompteNbUS.En_test_fonctionnel
               						FIN
               						
               						nIdUS = User_Story_ajout(stUS)
               						
               						nOrdre = 0
               						
               					SINON //sinon c'est une tache 
               						
               						SI xlsDonnée(IdFichierXLS,i,nCol_nom) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_codeTache) <> SansEspace("0003") et xlsDonnée(IdFichierXLS,i,nCol_codeTache) <> SansEspace("0004") ALORS
               							
               							stTache.sCodeTache = "N" + xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               							stTache.nNumSprintCreation = xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               							stTache.nNumSprintRealisation = stTache.nNumSprintCreation
               							stTache.nNumSprintPrevision = stTache.nNumSprintCreation
               							//stTache.nNumSprintDemarage = stTache.nNumSprintCreation
               							stTache.nIDUserStorie = nIdUS
               							stTache.sDescription = xlsDonnée(IdFichierXLS,i,nCol_nom)
               							
               							SI (SansEspace(xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel)) = "" _OU_ SansEspace(xlsDonnée(IdFichierXLS,i,nCol_numSprint)) = "") _et_ pas (xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A") ALORS
               								Trace(Scr_Projet.Nom,TAB,stTache.sCodeTache,TAB,stTache.sDescription,TAB,"Poids : " + xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel),TAB,"Sprint : " + xlsDonnée(IdFichierXLS,i,nCol_numSprint))						
               							FIN						
               							
               							//Si poids pas indiqué --> null
               							SI xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel) <> "" alors
               								stTache.nPoids = xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel)
               								stTache.nPoids_Prevision = xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel)
               							sinon
               								stTache.nPoids = null
               								stTache.nPoids_Prevision = null
               							fin
               							
               							SELON Vrai
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "x" 
               									stTache.bDemarree = Vrai
               									stTache.bAnnulee = Faux
               									stTache.bTermine = Vrai
               									stTache.nNumSprintFin = stTache.nNumSprintCreation 
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "C"
               									stTache.bDemarree = Vrai
               									stTache.bAnnulee = Faux	
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A"
               									stTache.bAnnulee = Vrai
               									stTache.bDemarree = Faux
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								AUTRE CAS
               									stTache.bAnnulee = Faux
               									stTache.bDemarree = Faux
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = 0
               							FIN
               							
               							nOrdre++
               							stTache.nOrdre = nOrdre
               							
               							Taches_Ajout(stTache)
               						fin
               					fin
               				fin
               			FIN
               		fin
               		
               	SINON
               		Erreur(ErreurInfo(errComplet))
               	FIN
               SINON
               	Erreur(ErreurInfo(errComplet))
               FIN
               
               xlsFerme(IdFichierXLS)
               
               
               
               
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Import_Migration
          identifier : 0x2cbefb9d04b46013
          internal_properties : BgAAAAYAAADn1wLsp9AlnUIk64MljysfRvVLCMVOArRp1Ti7XulSybyiQdwtERSx/RUnsbSKp1oX9kqePXB3LxPJtY7Cp8Sucmp186+J+ZUZCtZ6fBIP585IyaiE4DS9NkzXdDXTA+ANXxpKMaf8pG4xX/yat9TZB6AM0j+XXByH3PAiOkXGJZtB79cvcps9QYazLvtXo/r9pzAmVtJWN/Nnc/VCtIyi9c0oPmI2POapruqzZH0vAC95amXPH2oJT0hCpmQbh2TTcdzMUeaxzJYfsl3mnLGaSQYQZeiiP4y4cqilFaIcccWDXC/zX5iR+QhOo5c0sRqHp673ZdsppZia26M/Qp/UJ/JhhNSXWWd+ElYXw4bkaS3/pvZHDEdvOaaFLNwBFGcBjQePZ5JvmredNmdTbYmD8T/FT0D5xu9whZtunnpCoWAi/DmwlI9KqsyVqe1Da+YYbmRD/P8Rv3geK19MktRIhQUn/adQFSVYC9+EmdokmU5PdYnH7UWFspudRv1zxwjwKRw44Pn9/aVOmMIBm1AMYvGEWlL9AfhFcVCglTpbJg5aKwL1jOPQRVGUGRT9yr3EMu6lCIGrQTCKOKKjeHIm12drcVx4ueXRPy9GUbe6HykHed5NnOvahd/niloNE9oUKcSlf7TzjZBOOnboMPMY2Zi7AA9zl367c8i3k1LDgBLa0h/gFsB4cytafYLZVRLifkMXJbYggymUvD2cuAjvzkPoRCdkQHU80+PAnzm3Nm2IRA==
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1-
               IdFichierXLS est un xlsDocument
               Xlsnbligne_ est un entier
               i est un entier
               sFichier est une chaîne
               
               nPremiereligne est un entier = 3
               
               //Déclaration Variables
               nIdUS est un entier
               //nIdProjet est un entier
               stTache est une STR_Tache
               stUS est une STR_UserStorie
               oPrj est un ClProjet <- oProjetDeNom("Migration")
               
               nCol_codeTache est un entier = 1
               nCol_nom est un entier = 4
               nCol_TacheParente est un entier = 5
               nCol_PoidsPrevisionnel est un entier = 15
               nCol_numSprint est un entier = 19
               nCol_fin est un entier = 20
               nCol_Poids est un entier = 21
               
               //
               ////Création du projet
               //HRAZ(Scr_Projet)
               ////Scr_Projet.IDSrc_Usr = 1
               //Scr_Projet.Nom = "Migration"
               //SI PAS HAjoute(Scr_Projet) ALORS
               //	Erreur(ErreurInfo(errComplet))
               //FIN
               //nIdProjet = Scr_Projet.IDScr_Projet //On recupère son ID
               
               
               sFichier = Dupplication_Fichier_Avant_Import("L:\Service informatique\Procedures\Dev_logiciel\Migration SQL\Phases et Taches.xlsx")
               
               SI sFichier <> "" ALORS
               	
               	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               	
               	SI ErreurDétectée = Faux ALORS 
               		
               		SI xlsFeuilleEnCours(IdFichierXLS, 2) ALORS	
               			
               			Xlsnbligne_ =xlsNbLigne(IdFichierXLS,Vrai)
               			
               			POUR i = nPremiereligne _À_ Xlsnbligne_
               				
               				SI xlsDonnée(IdFichierXLS,i,nCol_nom) <> ""
               					
               					si  xlsDonnée(IdFichierXLS,i,2) = "" ET xlsDonnée(IdFichierXLS,i,nCol_numSprint) = "" ET xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel) = "" ET xlsDonnée(IdFichierXLS,i,nCol_fin) = "" ALORS
               					 //on ne traite pas	
               					sinon
               						
               						//si xlsDonnée(IdFichierXLS,i,nCol_codeTache) = "0269" alors stop
               						
               						stUS.sCodeUserStorie	= "S" + xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               						stUS.sEnTantQue			= "Historique"
               						stUS.sBesoinUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_nom)
               						stUS.nIDProjet			= oPrj.Get_IdUnique()
               						stUS.nIDResponsable		= oPrj.p_oUsr_ChefProjet.Get_IdUnique()
               						
               						SI xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T" ALORS
               							stUS.bAtester			= Vrai
               							stUS.eEtatUserStorie	= ClUserStory.ECompteNbUS.En_test_fonctionnel
               						FIN
               						
               						nIdUS = User_Story_ajout(stUS)
               						
               						stTache.sCodeTache				= "S" + xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               						stTache.nNumSprintCreation		= xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               						stTache.nNumSprintRealisation	= stTache.nNumSprintCreation
               						stTache.nNumSprintPrevision		= stTache.nNumSprintCreation
               						//stTache.nNumSprintDemarage = stTache.nNumSprintCreation
               						stTache.nIDUserStorie			= nIdUS
               						stTache.sDescription			= xlsDonnée(IdFichierXLS,i,nCol_nom)
               						
               						SI (SansEspace(xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel)) = "" _OU_ SansEspace(xlsDonnée(IdFichierXLS,i,nCol_numSprint)) = "") _et_ pas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A" ALORS
               							Trace(Scr_Projet.Nom,TAB,stTache.sCodeTache,TAB,stTache.sDescription,TAB,"Poids : " + xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel),TAB,"Sprint : " + xlsDonnée(IdFichierXLS,i,nCol_numSprint))						
               						FIN		
               						
               						//Si poids pas indiqué --> null
               						SI xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel) <> "" ALORS
               							stTache.nPoids = xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel)
               							stTache.nPoids_Prevision = xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel)
               						SINON
               							stTache.nPoids = Null
               							stTache.nPoids_Prevision = Null
               						FIN
               						
               						SELON Vrai
               							CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "x" 
               								si xlsDonnée(IdFichierXLS,i,nCol_Poids) <> 0 alors
               									stTache.bDemarree = Vrai
               									stTache.bAnnulee = Faux
               									stTache.bTermine = Vrai
               									stTache.nNumSprintFin = stTache.nNumSprintCreation 
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               									
               								sinon
               									stTache.bAnnulee = Vrai
               									stTache.bDemarree = Faux
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								fin
               								
               							CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "C"
               								stTache.bDemarree = Vrai
               								stTache.bAnnulee = Faux	
               								stTache.nNumSprintFin = 0
               								stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               							CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A"
               								stTache.bAnnulee = Vrai
               								stTache.bDemarree = Faux
               								stTache.nNumSprintFin = 0
               								stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               							AUTRE CAS
               								stTache.bAnnulee = Faux
               								stTache.bDemarree = Faux
               								stTache.nNumSprintFin = 0
               								stTache.nNumSprintDemarage = 0
               						FIN
               						
               						
               						stTache.nOrdre = 1
               						Taches_Ajout(stTache)
               					fin
               				FIN
               			FIN
               		FIN
               	FIN
               	
               SINON
               	Erreur(ErreurInfo(errComplet))
               FIN
               
               xlsFerme(IdFichierXLS)
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Import_Vieux_Stock
          identifier : 0x2cbf07b804d4a9c9
          internal_properties : BgAAAAYAAAB9W09UwL06QRSsDhXdfrhTnjIDfoHD9yObjsQfzdA/MuWb6V49ninARUt3HyU7x/pY+kd69I/raCfedvBsRJEteskJmfsnrUvI9u2DXlG0NU20tz0SUTXjRh45byF+XtW16pls/uGo/X7sZAzSQNWP4g5BvEsQZEM8bcT872TfR+NAjizjFnOPvkvO4lHiE9fKbpZA6MHectJgX90V5Vkdbi4Rg+VCW/VkSlv7cHttv6oK3Y9TF6rKDvQhyLwXQcc4HExTbeB1LwA1K2/xiaVgJYLmK82tRMrcz3QKVg0t1U2eiMD6lXXdj6wJvX81OUn6oKcw6F7WiiXfbiYEfzsMOdV8GL3z/UoSMlenkd9166XXi7+txbiTXo/fWDdsBOjjsQ3UHhdRfGp/Nz/aBqUGNW0b2ulgXvdz6T6mrZkKyDbaKNzxsem0hZhk8UxWlyuAmO4KGZpv3YlYpmkPHcBTC115ZFzfEyOlz6oSXgfo9qrh+T5qYk0dFY9e+HigsxUgo+j3BfiPzwYWSzKCTO6XNqv06SvKDWTKX7MKsGknCXiyB+Fif0/MtJc7T1PoWqRihqYCF+yhi8fyPyiMTv6QhdhcCGI+/oJbjg8e3GEUYPeYYdr/XtA+Ms9ui9DjH69ys2s5gFuPE9qB0EXNwjDc8L2L0UbVbPmvMtlot3pGZNKMDg5lyFQwGPImmEQvu5PPP3FUWloMso8LjdioSgjq+wlt9RzPtFlsO3QX8n55vZ4dQ2KIFw==
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1-
               IdFichierXLS est un xlsDocument
               Xlsnbligne_ est un entier
               i est un entier
               sFichier est une chaîne
               
               nPremiereligne est un entier = 4
               
               //Déclaration VAriables
               nIdUS est un entier
               //nIdProjet est un entier
               stTache est une STR_Tache
               stUS est une STR_UserStorie
               
               
               nCol_codeTache est un entier = 1
               nCol_nom est un entier = 4
               nCol_TacheParente est un entier = 5
               nCol_PoidsPrevisionnel est un entier = 15
               nCol_numSprint est un entier = 16
               
               nCol_fin est un entier = 17
               
               nCol_Poids est un entier = 18
               
               nOrdre Est un entier
               
               oPrj est un ClProjet <- oProjetDeNom("Vieux Stock")
               
               
               ////Création du projet
               //HRAZ(Scr_Projet)
               ////Scr_Projet.IDSrc_Usr = 1
               //Scr_Projet.Nom = "Vieux Stock"
               //SI PAS HAjoute(Scr_Projet) ALORS
               //	Erreur(ErreurInfo(errComplet))
               //FIN
               //nIdProjet = Scr_Projet.IDScr_Projet //On récupère son ID
               
               // Ouvre le sélecteur de fichiers
               
               sFichier = Dupplication_Fichier_Avant_Import("L:\Service informatique\Procedures\Dev_logiciel\Vieux Stock\Vieux Stocks - Phases et Taches.xlsx")
               
               SI sFichier <> "" ALORS
               	
               	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               	
               	SI ErreurDétectée = Faux ALORS 
               		
               		SI xlsFeuilleEnCours(IdFichierXLS, 2) ALORS	
               			
               			Xlsnbligne_ =xlsNbLigne(IdFichierXLS,Vrai)
               			
               			POUR i = nPremiereligne _À_ Xlsnbligne_
               				
               				SI xlsDonnée(IdFichierXLS,i,nCol_nom) <> "" ET i <> 6 et i <> 11 et i <> 29 ALORS
               					
               
               					//Si la col 2 = "*" => c'est une US
               					SI xlsDonnée(IdFichierXLS,i,2) = sansespace("*") ALORS
               						stUS.sCodeUserStorie = "V" + xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               						stUS.sEnTantQue = "Historique"
               						stUS.sBesoinUserStorie = xlsDonnée(IdFichierXLS,i,nCol_nom)
               						stUS.nIDProjet = oPrj.Get_IdUnique()
               						stUS.nIDResponsable = oPrj.p_oUsr_ChefProjet.Get_IdUnique()
               						
               						SI xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T" ALORS
               							stUS.bAtester = Vrai
               							stUS.eEtatUserStorie = ClUserStory.ECompteNbUS.En_test_fonctionnel
               						FIN
               						
               						nOrdre = 0
               						
               						nIdUS = User_Story_ajout(stUS)
               						
               						//si la ligne suivante est une us alors on l'enregistre aussi en tant que tache
               						SI xlsDonnée(IdFichierXLS,i+1,2) = SansEspace("*") OU i = 4 ou i = 28 OU i = 31 ALORS
               							stTache.sCodeTache = "V" + xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               							stTache.nNumSprintCreation = xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               							stTache.nNumSprintRealisation = stTache.nNumSprintCreation
               							stTache.nNumSprintPrevision = stTache.nNumSprintCreation
               							//stTache.nNumSprintDemarage = stTache.nNumSprintCreation
               							stTache.nIDUserStorie = nIdUS
               							stTache.sDescription = xlsDonnée(IdFichierXLS,i,nCol_nom)
               							
               							SI SansEspace(xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel)) = "" _OU_ SansEspace(xlsDonnée(IdFichierXLS,i,nCol_numSprint)) = "" ALORS
               								Trace(Scr_Projet.Nom,TAB,stTache.sCodeTache,TAB,stTache.sDescription,TAB,"Poids : " + xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel),TAB,"Sprint : " + xlsDonnée(IdFichierXLS,i,nCol_numSprint))						
               							FIN		
               							
               							//Si poids pas indiqué --> null
               							SI xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel) <> "" ALORS
               								stTache.nPoids = xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel)
               								stTache.nPoids_Prevision = xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel)
               							SINON
               								stTache.nPoids = Null
               								stTache.nPoids_Prevision = Null
               							FIN
               							
               							SELON Vrai
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "x" 
               									stTache.bDemarree = Vrai
               									stTache.bTermine = Vrai
               									stTache.bAnnulee = Faux
               									stTache.nNumSprintFin = stTache.nNumSprintCreation 
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "C"
               									stTache.bDemarree = Vrai
               									stTache.bAnnulee = Faux	
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A"
               									stTache.bAnnulee = Vrai
               									stTache.bDemarree = Faux
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								AUTRE CAS
               									stTache.bAnnulee = Faux
               									stTache.bDemarree = Faux
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = 0
               							FIN
               							
               							stTache.nOrdre = 1
               							Taches_Ajout(stTache)
               							
               						FIN
               						
               						
               					SINON //sinon c'est une tache 
               							
               							stTache.sCodeTache = "V" + xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               							stTache.nNumSprintCreation = xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               							stTache.nNumSprintRealisation = stTache.nNumSprintCreation
               							stTache.nNumSprintPrevision = stTache.nNumSprintCreation
               							//stTache.nNumSprintDemarage = stTache.nNumSprintCreation
               							stTache.nIDUserStorie = nIdUS
               							stTache.sDescription = xlsDonnée(IdFichierXLS,i,nCol_nom)
               						//Si poids pas indiqué --> null
               						SI xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel) <> "" ALORS
               							stTache.nPoids = xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel)
               							stTache.nPoids_Prevision = xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel)
               						SINON
               							stTache.nPoids = Null
               							stTache.nPoids_Prevision = Null
               						FIN
               							
               							SELON Vrai
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "x" 
               									stTache.bDemarree = Vrai
               									stTache.bAnnulee = Faux
               									stTache.nNumSprintFin = stTache.nNumSprintCreation 
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "C"
               									stTache.bDemarree = Vrai
               									stTache.bAnnulee = Faux	
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A"
               									stTache.bAnnulee = Vrai
               									stTache.bDemarree = Faux
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								AUTRE CAS
               									stTache.bAnnulee = Faux
               									stTache.bDemarree = Faux
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = 0
               							FIN
               							nOrdre++
               							stTache.nOrdre = nOrdre
               							Taches_Ajout(stTache)
               						FIN
               					FIN
               				FIN
               			FIN
               			
               			
               		SINON
               			Erreur(ErreurInfo(errComplet))
               		FIN
               	SINON
               		Erreur(ErreurInfo(errComplet))
               	FIN
               
               xlsFerme(IdFichierXLS)
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Import_Pool
          identifier : 0x2cbf0a0004d793b5
          internal_properties : BgAAAAYAAACKL8T7BOu/ttANUeaSk6oDJHX6y00CTfFnpPiiprxNSlhnXkqj0IipIJgKJqN2jmRN3/j6tQuPIucuKY936u7UpPSobGYFpn14dyIAyxz0U0clTcYVLBIU9P0SRVvy1TME3smVNV5HMvmuEiD4v/YwTmmZ+PaF+SKnADpT+qw+liunL65lirgJycMrbRiRhuKt4DdOgyvPmpRnnVzhP7TKyFsnN1MzHRWh9R41eDWHFtspVeNk7of417ZvsoMSsVr8MrMtEqg8v4ftkcGMbkGcF+1tOnnrvOkBskBoPX7p3Huo7bXmSo0CLEw9Afm4zBT+xkonLin9rXsrGs4H04bkNwegM5YYWITgYiLd9NhNkx6nAIfvsIX0vRL+Ya0QuqOxeFLIJ4d3opdZT2qZ3xiwt0kr1yELnkhDsPXbWDGBg25rNxDM12VgxeBCs3BQHit2QOqB/yGh5zgQoFgVDzuL1SSsMTJcfwU1NjFBx9mg9neaAp4Y0v+n9M15LtADRm1lC7643p68KJ5xYk0jcC5adiljeTSmQ9L6pQZDY5dFO5k3xK3nQYP/LzBBRuKSpnwXJyj1bhKUyBBYxCPu5pjuJLXXwcmGPTohvgQLJ+V3KUPVlzJNm5eVP29eKmcZRqZYCgrpIa+CGo6XmLGPOwu1lYNg17cLMWYwEw6FKFLeIz43m4hGR3JD8fvShT4CnTnFe2Hf1WUgI+lm3SJutRT4GOgjcknV0rybbkxL
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               IdFichierXLS est un xlsDocument
               Xlsnbligne_ est un entier
               i est un entier
               sFichier est une chaîne
               
               nPremiereligne est un entier = 4
               
               //Déclaration VAriables
               nIdUS est un entier
               //nIdProjetPoolV1 est un entier
               //nIdProjetPoolV2 est un entier
               sProjet est une chaîne
               stTache est une STR_Tache
               stUS est une STR_UserStorie
               
               
               nCol_codeTache est un entier = 1
               nCol_nom est un entier = 4
               nCol_TacheParente est un entier = 5
               nCol_PoidsPrevisionnel est un entier = 15
               nCol_numSprint est un entier = 16
               
               nCol_fin est un entier = 17
               
               nCol_Poids est un entier = 18
               nOrdre est un entier
               
               oPrjPool1 est un ClProjet <- oProjetDeNom("PoolV1")
               oPrjPool2 est un ClProjet <- oProjetDeNom("PoolV2")
               
               
               ////Création du projet Pool v1
               //HRAZ(Scr_Projet)
               ////Scr_Projet.IDSrc_Usr = 1
               //Scr_Projet.Nom = "PoolV1"
               //SI PAS HAjoute(Scr_Projet) ALORS
               //	Erreur(ErreurInfo(errComplet))
               //FIN
               //nIdProjetPoolV1 = Scr_Projet.IDScr_Projet //On récupère son ID
               //
               ////Création du projet Pool v2
               //HRAZ(Scr_Projet)
               ////Scr_Projet.IDSrc_Usr = 1
               //Scr_Projet.Nom = "PoolV2"
               //SI PAS HAjoute(Scr_Projet) ALORS
               //	Erreur(ErreurInfo(errComplet))
               //FIN
               //nIdProjetPoolV2 = Scr_Projet.IDScr_Projet //On récupère son ID
               
               sFichier = Dupplication_Fichier_Avant_Import("L:\Service informatique\Procedures\Dev_logiciel\Pool transport\Pool - Phases et Taches.xlsx")
               
               SI sFichier <> "" ALORS
               	
               	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               	
               	SI ErreurDétectée = Faux ALORS 
               		
               		SI xlsFeuilleEnCours(IdFichierXLS, 2) ALORS	
               			
               			Xlsnbligne_ = Xlsnbligne(IdFichierXLS,vrai)
               			
               			POUR i = nPremiereligne _À_ Xlsnbligne_
               				
               				
               				SI xlsDonnée(IdFichierXLS,i,nCol_nom) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_TacheParente) <> SansEspace("") ET xlsDonnée(IdFichierXLS,i,nCol_TacheParente) <> SansEspace("0001") et PAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "G" ALORS
               					
               					//Si la colonne 2 = "*" => c'est une US
               					SI xlsDonnée(IdFichierXLS,i,2) = sansespace("*") ALORS
               						
               						VariableRAZ(stUS)
               						
               						stUS.sCodeUserStorie = "P" + xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               						stUS.sEnTantQue = "Historique"
               						stUS.sBesoinUserStorie = xlsDonnée(IdFichierXLS,i,nCol_nom)
               						
               						//Si 
               						si i < 97 alors
               							stUS.nIDProjet = oPrjPool1.Get_IdUnique()
               							sProjet = "Pool V1"
               							stUS.nIDResponsable = oPrjPool1.p_oUsr_ChefProjet.Get_IdUnique()
               						sinon
               							stUS.nIDProjet = oPrjPool2.Get_IdUnique()
               							sProjet = "Pool V2"
               							stUS.nIDResponsable = oPrjPool2.p_oUsr_ChefProjet.Get_IdUnique()
               						fin
               						
               						SI xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T" ALORS
               							stUS.bAtester = Vrai
               							stUS.eEtatUserStorie = ClUserStory.ECompteNbUS.En_test_fonctionnel
               						FIN
               						
               						nOrdre = 0 
               						nIdUS = User_Story_ajout(stUS)
               						
               						//si stUS.sCodeUserStorie = "P0180" alors stop
               						
               						//Si la ligne d'apres est aussi une US, on enregistre l'US en tant que tache aussi 
               						SI xlsDonnée(IdFichierXLS,i+1,2) = SansEspace("*") OU xlsDonnée(IdFichierXLS,i+1,nCol_TacheParente) ~= SansEspace("") ou Majuscule(xlsDonnée(IdFichierXLS,i+1,nCol_fin)) ~= "G" ALORS
               								
               								VariableRAZ(stTache)
               								
               								stTache.sCodeTache = "P" + xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               								stTache.nNumSprintCreation = xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               								stTache.nNumSprintRealisation = stTache.nNumSprintCreation
               								stTache.nNumSprintPrevision = stTache.nNumSprintCreation
               								//stTache.nNumSprintDemarage = stTache.nNumSprintCreation
               								stTache.nIDUserStorie = nIdUS
               								stTache.sDescription = xlsDonnée(IdFichierXLS,i,nCol_nom)
               								
               								SI (SansEspace(xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel)) = "" _OU_ SansEspace(xlsDonnée(IdFichierXLS,i,nCol_numSprint)) = "") ET PAS Majuscule(xlsDonnée(IdFichierXLS,i,nCol_fin)) ~= "A" ALORS
               									Trace(sProjet,TAB,stTache.sCodeTache,TAB,stTache.sDescription,TAB,"Poids : " + xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel),TAB,"Sprint : " + xlsDonnée(IdFichierXLS,i,nCol_numSprint))						
               //									Trace(sProjet,TAB,stTache.sCodeTache,tab,xlsDonnée(IdFichierXLS,i,nCol_fin),TAB,stTache.sDescription,TAB,"Poids : " + xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel),TAB,"Sprint : " + xlsDonnée(IdFichierXLS,i,nCol_numSprint))						
               								FIN		
               								
               								//Si poids pas indiqué --> null
               								SI xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel) <> "" ALORS
               									stTache.nPoids = xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel)
               									stTache.nPoids_Prevision = xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel)
               								SINON
               									stTache.nPoids = Null
               									stTache.nPoids_Prevision = Null
               								FIN
               								
               								SELON Vrai
               									CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "x"
               										stTache.bDemarree = Vrai
               										stTache.bAnnulee = Faux
               										stTache.bTermine = vrai
               										stTache.nNumSprintFin = stTache.nNumSprintRealisation 
               										stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               									CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T"
               										stTache.bDemarree = Vrai
               										stTache.bAnnulee = Faux
               										stTache.bTermine = vrai
               										stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               									CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "C"
               										stTache.bDemarree = Vrai
               										stTache.bAnnulee = Faux	
               										stTache.nNumSprintFin = 0
               										stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               									CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A"
               										stTache.bAnnulee = Vrai
               										stTache.bDemarree = Faux
               										stTache.nNumSprintFin = 0
               										stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               									AUTRE CAS
               										stTache.bAnnulee = Faux
               										stTache.bDemarree = Faux
               										stTache.nNumSprintFin = 0
               										stTache.nNumSprintDemarage = 0
               								FIN
               								stTache.nordre = 1
               								Taches_Ajout(stTache)
               							FIN
               						
               						
               					SINON //sinon c'est une tache 
               						
               							
               							stTache.sCodeTache = "P" + xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               							stTache.nNumSprintCreation = xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               							stTache.nNumSprintRealisation = stTache.nNumSprintCreation
               							stTache.nNumSprintPrevision = stTache.nNumSprintCreation
               							//stTache.nNumSprintDemarage = stTache.nNumSprintCreation
               							stTache.nIDUserStorie = nIdUS
               							stTache.sDescription = xlsDonnée(IdFichierXLS,i,nCol_nom)
               							
               						SI (SansEspace(xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel)) = "" _OU_ SansEspace(xlsDonnée(IdFichierXLS,i,nCol_numSprint)) = "") ET PAS Majuscule(xlsDonnée(IdFichierXLS,i,nCol_fin)) ~= "A" ALORS
               							Trace(sProjet,TAB,stTache.sCodeTache,TAB,stTache.sDescription,TAB,"Poids : " + xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel),TAB,"Sprint : " + xlsDonnée(IdFichierXLS,i,nCol_numSprint))						
               //							Trace(sProjet,TAB,stTache.sCodeTache,TAB,xlsDonnée(IdFichierXLS,i,nCol_fin),TAB,stTache.sDescription,TAB,"Poids : " + xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel),TAB,"Sprint : " + xlsDonnée(IdFichierXLS,i,nCol_numSprint))						
               						FIN			
               							
               							//Si poids pas indiqué --> null
               							SI xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel) <> "" ALORS
               								stTache.nPoids = xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel)
               								stTache.nPoids_Prevision = xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel)
               							SINON
               								stTache.nPoids = Null
               								stTache.nPoids_Prevision = Null
               							FIN
               							
               							SELON Vrai
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "x" 
               									stTache.bDemarree = Vrai
               									stTache.bAnnulee = Faux
               									stTache.bTermine = Vrai
               									stTache.nNumSprintFin = stTache.nNumSprintRealisation 
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T"
               									stTache.bDemarree = Vrai
               									stTache.bAnnulee = Faux
               									stTache.bTermine = Vrai
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "C"
               									stTache.bDemarree = Vrai
               									stTache.bAnnulee = Faux	
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A"
               									stTache.bAnnulee = Vrai
               									stTache.bDemarree = Faux
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								AUTRE CAS
               									stTache.bAnnulee = Faux
               									stTache.bDemarree = Faux
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = 0
               							FIN
               							nOrdre++
               							stTache.nOrdre = nOrdre
               							Taches_Ajout(stTache)
               						
               					fin
               				FIN
               			FIN
               			
               			
               			
               		SINON
               			Erreur(ErreurInfo(errComplet))
               		FIN
               	SINON
               		Erreur(ErreurInfo(errComplet))
               	FIN
               fin
               
               xlsFerme(IdFichierXLS)
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Importer_Evols_android
          identifier : 0x2d70bda0213e4d18
          internal_properties : BgAAAAYAAAAPV0IQs1HMeuhEDpv+HQ2LMgk6PsFRM0NzN8dpSiJX2I7Ts2mExXiFUQ5EurGWJMly2ePzxsL+p9VWOOshvOhWSvtw6szDwCtwB44I8/QeYJBmILkbGhpZVBOR2pJ20ynNGzMfUv2XvlP4mZo9cELeToL04owx3aKgME0QI/FWIhoaR9rw0vWly3mgtYv4Ag3FjVaN1+sjhvrW38A2v7TIWRlImusaQHGlE+lsSguz4fsVxxX6dvytC6XKh5yzYOsspLyMT3h/AYog18LcYd4uFIQ4JASzOD9R8F1TBqqEX1YsTN6DhBVii00sCgQkEy7T/o/uBh/FXKvM5CRv59sNo2xKzcKPE7ckrGdoasKTOjU7mFEMNwXDUL3lnlLlp75+lN0bsLF4pM/Lj/9qStqiXjYbI90s8+/6AUK+d9ev0Gk1kAuB6dKKONJC06r+hrH93SiBbRw8qdSKpB/h8ceHatwt+fZ5PL2G93Y6Np+JQmG4wYf+9FapBN0AImgW6nnT/kjgBfq8XwV0VTjICJ2pYc7Ecm+YrvTbQbEc7jcEk93vxbCVJnl39oqayHjfmNe+egdYhAkrrJk99uVXekC89ReumNY0fUqMyqXhnfkVtfdXyHddhtHVNujzwWyR52QWERH03VSL4G4k91BaiksklVrTtLpY6MZ3A1tzsxO1fUioh5Yw6+G4NX1AEyGYh8bT5OWi9sM7hEDeRu9fHeO4eyoyeMQ9d1tTDfbwl2fcxTFhwQ+7EEQy/NKo0HQ=
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               IdFichierXLS est un xlsDocument
               Xlsnbligne_ est un entier
               i est un entier
               sFichier est une chaîne
               
               nPremiereligne est un entier = 2
               
               //Déclaration VAriables
               nIdUS est un entier
               //nIdProjet est un entier
               stTache est une STR_Tache
               stUS est une STR_UserStorie
               
               nCol_codeUS est un entier = 2
               nCol_codeTache est un entier = 2
               nCol_numSprint est un entier = 4
               nCol_Poids est un entier = 5
               nCol_fin est un entier = 6
               nCol_nom est un entier = 3
               nCol_Besoin est un entier = 3
               //nCol_AfinDe est un entier = 4
               nCol_commentaire est un entier = 17
               
               oPrj est un ClProjet <- oProjetDeNom("Androïd V2")
               
               //HLitRecherche(Scr_Projet,Nom,"Androïd V2")
               //si htrouve(Scr_Projet)
               //	nIdProjet = Scr_Projet.IDScr_Projet
               //sinon
               //	HRAZ(Scr_Projet)
               //	//Scr_Projet.IDSrc_Usr = 1
               //	Scr_Projet.Nom = "Androïd V2"
               //	Si pas Hajoute(Scr_Projet) alors
               //		info("erreur dans l'ajout du projet Androïd V2", ErreurInfo())
               //	FIN
               //	nIdProjet = Scr_Projet.IDScr_Projet //On recupère son ID
               //fin
               nNumeroOrdre est une entier = 0
               // Ouvre le sélecteur de fichiers
               
               
               sFichier = Dupplication_Fichier_Avant_Import("L:\Service informatique\Procedures\Dev_logiciel\Pistolet Android\Pistolet Android V2.xlsx")
               
               SI sFichier <> "" ALORS
               	
               	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               	
               	SI ErreurDétectée = Faux ALORS 
               		
               		SI xlsFeuilleEnCours(IdFichierXLS, 1) ALORS	
               			
               			Xlsnbligne_ =xlsNbLigne(IdFichierXLS,Vrai)
               			
               			POUR i = nPremiereligne _À_ Xlsnbligne_
               				
               				//Si le champ code de la tache est vide => c'est une US
               //				Si xlsDonnée(IdFichierXLS,i,nCol_codeTache) = "" alors
               					si xlsDonnée(IdFichierXLS,i,nCol_codeUS) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_Besoin) <> "" alors
               						VariableRAZ(stUS)
               						stUS.sCodeUserStorie = xlsDonnée(IdFichierXLS,i,nCol_codeUS)
               						stUS.sEnTantQue = "Historique"
               						stUS.sBesoinUserStorie = xlsDonnée(IdFichierXLS,i,nCol_Besoin)
               						stUS.sAfindeUserStorie = ""	//xlsDonnée(IdFichierXLS,i,nCol_AfinDe)
               						stUS.nIDProjet = oPrj.Get_IdUnique()
               						stUS.nIDResponsable = oPrj.p_oUsr_ChefProjet.Get_IdUnique()
               						
               						Si xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T" alors
               							stUS.bAtester = vrai
               							stUS.eEtatUserStorie = ClUserStory.ECompteNbUS.En_test_fonctionnel
               						FIN
               						
               						nIdUS = User_Story_ajout(stUS)
               						
               						nNumeroOrdre = 0
               //					fin
               //					
               //				sinon //sinon c'est une tache
               //					
               //					si PAS (xlsDonnée(IdFichierXLS,i,nCol_nom) = SansEspace("") ET xlsDonnée(IdFichierXLS,i,nCol_numSprint) = SansEspace("")) alors
               						VariableRAZ(stTache)
               						stTache.sCodeTache = xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               						stTache.nNumSprintCreation = xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               						stTache.nNumSprintRealisation = stTache.nNumSprintCreation
               						stTache.nNumSprintPrevision = stTache.nNumSprintCreation
               						//stTache.nNumSprintDemarage = stTache.nNumSprintCreation
               						stTache.nIDUserStorie = nIdUS
               						stTache.sDescription = xlsDonnée(IdFichierXLS,i,nCol_nom)
               						
               						//affectation du num d'ordre
               						nNumeroOrdre++
               						stTache.nOrdre = nNumeroOrdre
               						
               						SI SansEspace(xlsDonnée(IdFichierXLS,i,nCol_Poids)) = "" _OU_ SansEspace(xlsDonnée(IdFichierXLS,i,nCol_numSprint)) = "" ALORS
               							Trace(Scr_Projet.Nom,TAB,stTache.sCodeTache,TAB,stTache.sDescription,TAB,"Poids : " + xlsDonnée(IdFichierXLS,i,nCol_Poids),TAB,"Sprint : " + xlsDonnée(IdFichierXLS,i,nCol_numSprint))						
               						FIN
               						
               						//Si le poids n'est pas indiqué --> null
               						Si xlsDonnée(IdFichierXLS,i,nCol_Poids) <> "" alors
               							stTache.nPoids = xlsDonnée(IdFichierXLS,i,nCol_Poids)
               							stTache.nPoids_Prevision = stTache.nPoids
               						sinon
               							stTache.nPoids = null
               							stTache.nPoids_Prevision = null
               						fin
               						
               						Selon Vrai
               							cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "x"
               								stTache.bDemarree = vrai
               								stTache.bAnnulee = faux
               								stTache.bTermine = vrai
               								stTache.nNumSprintFin = stTache.nNumSprintCreation 
               								stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               							cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T"
               								stTache.bDemarree = vrai
               								stTache.bAnnulee = faux
               								stTache.bTermine = vrai
               								stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               							CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "C"
               								stTache.bDemarree = Vrai
               								stTache.bAnnulee = Faux	
               								stTache.nNumSprintFin = 0
               								stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               							cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A"
               								stTache.bAnnulee = vrai
               								stTache.bDemarree = faux
               								stTache.nNumSprintFin = 0
               								stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               							AUTRE CAS
               								stTache.bAnnulee = Faux
               								stTache.bDemarree = Faux
               								stTache.nNumSprintFin = 0
               								stTache.nNumSprintDemarage = 0
               						FIN
               						Taches_Ajout(stTache)
               					fin
               //				FIN
               				
               			FIN
               			
               		SINON
               			Erreur(ErreurInfo(errComplet))
               		FIN
               	sinon
               		erreur(erreurinfo(errComplet))
               	FIN
               FIN
               
               xlsFerme(IdFichierXLS)
               
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Importer_PxF
          identifier : 0x2d70c6712140bb2e
          internal_properties : BgAAAAYAAACA8udL3bX4RNTwws2bPTfA0F77gDWmawTAgMacLzKor9cfQCClBK6p2HQ0UU+1FwsyhlhCCnHK6qAJxlMTHq+e57Qu6UVWeh8g73fopR7HmmyKS7PhQGyf0y0Ws06YFlkQtaYm4M41ugQx5RHptL+fG/gFanUgsx38TpCs5my9vAM++Ua8eJH1XWW+lUGANRsfWFdzzTlMeh/MaUJftosfq8pltXGc18wjm3HTTeXGFQPz2rEDOK+qTtFI5wk8cz3rGddt+eCeT5vyXadSuLnGvdq9ekjMzWswzCLzkf07yuBSJhG0EzGGbGdkL7qW5PeBfGO9rBZ54Ks6yHQGSvwcnkb1cRfu0nnysa1mzyYAQZTYxeOPYn6Nb39xPirLBnDN7kXXm9cYrk4m0nFZwflU2VKFc9jw4QVlIkOo5IIeZhJ3yPUQFy7k/7V9MVn1jZdOZS5d+hgGkRf/2bGiDszRTfQL3WPxHkv9GH/A4fLYNOYOGQ3XjFAbbbIV/Jf31wvKrv78cHq6hdD9hggb6TYldvA0Ml64+FzCqLB44X4Dp6bpySR64qeLY7PLpr1AzZtLdB+cuwefBqTmL4eMYYcMKO+QVJte0fjfAZQrQvSUCXrvotdiQmcVz4FMFSmgGiA12UsaYHQ5PtVXIh6P6DdWa3LGiQ4/7T+lpwB1f1LHWWmVAiVK3TeGJGmOZ9suEvt2HNKwuIMXCFh2s5/KhKlwpT1NDXDpBo6FHKn+nW46j4I=
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               IdFichierXLS est un xlsDocument
               Xlsnbligne_ est un entier
               i est un entier
               sFichier est une chaîne
               
               nPremiereligne est un entier = 2
               
               //Déclaration VAriables
               nIdUS est un entier
               //nIdProjet est un entier
               stTache est une STR_Tache
               stUS est une STR_UserStorie
               
               nCol_codeUS est un entier = 1
               nCol_codeTache est un entier = 1
               nCol_numSprint est un entier = 7
               nCol_Poids est un entier = 8
               nCol_fin est un entier = 9
               nCol_Role est un entier = 2
               nCol_nom est un entier = 3
               nCol_Besoin est un entier = 3
               nCol_AfinDe est un entier = 4
               //nCol_commentaire est un entier = 17
               
               
               oPrj est un ClProjet <- oProjetDeNom("Paiement 3/4 fois")
               
               //HLitRecherche(Scr_Projet,Nom,"Paiement 3/4 fois")
               //si htrouve(Scr_Projet)
               //	nIdProjet = Scr_Projet.IDScr_Projet
               //sinon
               //	HRAZ(Scr_Projet)
               //	//Scr_Projet.IDSrc_Usr = 1
               //	Scr_Projet.Nom = "Paiement 3/4 fois"
               //	Si pas Hajoute(Scr_Projet) alors
               //		info("erreur dans l'ajout du projet Paiement 3/4 fois", ErreurInfo())
               //	FIN
               //	nIdProjet = Scr_Projet.IDScr_Projet //On récupère son ID
               //fin
               nNumeroOrdre est une entier = 0
               // Ouvre le sélecteur de fichiers
               
               
               sFichier = Dupplication_Fichier_Avant_Import("\\prod-vm-file01\UnionMat\Service informatique\Procedures\Dev_logiciel\paiement 3x et 4x\User stories Paiement 3x et 4x V2.xlsx")
               
               SI sFichier <> "" ALORS
               	
               	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               	
               	SI ErreurDétectée = Faux ALORS 
               		
               		SI xlsFeuilleEnCours(IdFichierXLS, 1) ALORS	
               			
               			Xlsnbligne_ =xlsNbLigne(IdFichierXLS,Vrai)
               			
               			POUR i = nPremiereligne _À_ Xlsnbligne_
               				
               				//ON ne prend que les lignes qui ont un code et une description.
               				SI xlsDonnée(IdFichierXLS,i,nCol_codeUS) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_Besoin) <> "" ALORS
               					
               					//Si le champ role est vide => c'est une tache
               					Si xlsDonnée(IdFichierXLS,i,nCol_Role) <> "" alors
               //						//On saute les US annulées
               						SI pas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A" ALORS
               							VariableRAZ(stUS)
               							stUS.sCodeUserStorie = xlsDonnée(IdFichierXLS,i,nCol_codeUS)
               							stUS.sEnTantQue = xlsDonnée(IdFichierXLS,i,nCol_Role)
               							stUS.sBesoinUserStorie = xlsDonnée(IdFichierXLS,i,nCol_Besoin)
               							stUS.sAfindeUserStorie = xlsDonnée(IdFichierXLS,i,nCol_AfinDe)
               							stUS.nIDProjet = oPrj.Get_IdUnique()
               							stUS.nIDResponsable = oPrj.p_oUsr_ChefProjet.Get_IdUnique()
               							
               							Si xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T" alors
               								stUS.bAtester = vrai
               								stUS.eEtatUserStorie = ClUserStory.ECompteNbUS.En_test_fonctionnel
               							FIN
               							
               							nIdUS = User_Story_ajout(stUS)
               							
               							nNumeroOrdre = 0
               						fin
               						
               					sinon //sinon c'est une tache
               						
               						si PAS (xlsDonnée(IdFichierXLS,i,nCol_nom) = SansEspace("") ET xlsDonnée(IdFichierXLS,i,nCol_numSprint) = SansEspace("")) alors
               							
               							stTache.sCodeTache = xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               							stTache.nNumSprintCreation = xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               							stTache.nNumSprintRealisation = stTache.nNumSprintCreation
               							stTache.nNumSprintPrevision = stTache.nNumSprintCreation
               							//stTache.nNumSprintDemarage = stTache.nNumSprintCreation
               							stTache.nIDUserStorie = nIdUS
               							stTache.sDescription = xlsDonnée(IdFichierXLS,i,nCol_nom)
               							
               							//affectation du num d'ordre
               							nNumeroOrdre++
               							stTache.nOrdre = nNumeroOrdre
               							
               							SI SansEspace(xlsDonnée(IdFichierXLS,i,nCol_Poids)) = "" _OU_ SansEspace(xlsDonnée(IdFichierXLS,i,nCol_numSprint)) = "" ALORS
               								Trace(Scr_Projet.Nom,TAB,stTache.sCodeTache,TAB,stTache.sDescription,TAB,"Poids : " + xlsDonnée(IdFichierXLS,i,nCol_Poids),TAB,"Sprint : " + xlsDonnée(IdFichierXLS,i,nCol_numSprint))						
               							FIN
               							
               							//Si le poids n'est pas indiqué --> null
               							Si xlsDonnée(IdFichierXLS,i,nCol_Poids) <> "" alors
               								stTache.nPoids = xlsDonnée(IdFichierXLS,i,nCol_Poids)
               								stTache.nPoids_Prevision = stTache.nPoids
               							sinon
               								stTache.nPoids = null
               								stTache.nPoids_Prevision = null
               							fin
               							
               							Selon Vrai
               								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "X" 
               									stTache.bDemarree = vrai
               									stTache.bAnnulee = faux
               									stTache.bTermine = Vrai
               									stTache.nNumSprintFin = stTache.nNumSprintCreation 
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T" 
               									stTache.bDemarree = vrai
               									stTache.bAnnulee = faux
               									stTache.bTermine = Vrai
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "C"
               									stTache.bDemarree = Vrai
               									stTache.bAnnulee = Faux	
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A"
               									stTache.bAnnulee = vrai
               									stTache.bDemarree = faux
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								AUTRE CAS
               									stTache.bAnnulee = Faux
               									stTache.bDemarree = Faux
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = 0
               							FIN
               							Taches_Ajout(stTache)
               						fin
               					FIN
               				fin
               			FIN
               			
               		SINON
               			Erreur(ErreurInfo(errComplet))
               		FIN
               	sinon
               		erreur(erreurinfo(errComplet))
               	FIN
               FIN
               
               xlsferme(IdFichierXLS)
               
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Importer_Automat
          identifier : 0x2d971f5200b7ad88
          internal_properties : BgAAAAYAAAA2aVg89IRJJT1XZf2ebsnDsTtI7tx+F+QEWuClSPaHMeluasWRIjodzQnxI9BBhQDMGwGTdj2L595nIasWV8bIMmOYqjGPl/FO/1wJ1ixHRs2CtSY2/VNlaG74Tchq1Icg4I2xcMCQq9M5w5QqPCmeejweJDY5qp94uvECriM24Epgk8IHDzJhWWDHIyA+rqm6RBL30fHBYmWm4SbWkXGCdjbQYa/zvdxOmDCEmxue4FLQqg9RNwqWrIsBbUZgpg/XnFhq8CdtIgesCa595PNAr2qCEZvDmeSqjZavbwzqREJG54bR+/v9qttJnONmYhw2jizWSr9K+CLlXBus0zhgdn7uFuomULiHEAbw9suG+xv7KZlCramZfI/yB6ALNgXDdimCB8QplSi59ySJYenJG47tpl6jAMhX+XztjsDQERyNMjRGAh0r5Xwi8JsBESKolQootGNRermE1JTcSkCa02pFBq2m06JX9dYNubYUiRquxfyzkdXgS1EuaYnRXQxIlrpjaD/TxOJWmWEtd1CkFkYOOZJZeYV0jQtHKxRVIKwhffUwo+CgO5Jg1Rvm98xZqA+nK0qOUXa1kGPx0lx4ZdrPhviS62bcBxwXxa/rW0EOJX2dRO+R5ps0f9gB07Ig2B46tbJRhpw1qk6UKmHYfW6S3RFv/xtCl+vwG8RdIuBFQLJ+eAJNIp+BSiTPQ5YiKZw/Zh/z4wdv9bo0xy5b+NDcAgdoMOZW5NABgXQC6Yww5aWR
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               IdFichierXLS est un xlsDocument
               Xlsnbligne_ est un entier
               i est un entier
               sFichier est une chaîne
               
               nPremiereligne est un entier = 2
               
               //Déclaration VAriables
               nIdUS est un entier
               //nIdProjet est un entier
               stTache est une STR_Tache
               stUS est une STR_UserStorie
               
               nCol_codeUS est un entier = 1
               nCol_codeTache est un entier = 1
               nCol_numSprint est un entier = 7
               nCol_Poids est un entier = 8
               nCol_fin est un entier = 9
               nCol_Role est un entier = 2
               nCol_nom est un entier = 3
               nCol_Besoin est un entier = 3
               nCol_Afinde est un entier = 4
               //nCol_commentaire est un entier = 17
               
               
               
               oPrj est un ClProjet <- oProjetDeNom("AutoMat")
               
               
               
               //HLitRecherche(Scr_Projet,Nom,"AutoMat",hIdentique+hLimiteParcours)
               //si htrouve(Scr_Projet)
               //	nIdProjet = Scr_Projet.IDScr_Projet
               //sinon
               //	HRAZ(Scr_Projet)
               //	Scr_Projet.Nom = "AutoMat"
               //	Si pas Hajoute(Scr_Projet) alors
               //		info("erreur dans l'ajout du projet AutoMat", ErreurInfo())
               //	FIN
               //	nIdProjet = Scr_Projet.IDScr_Projet //On récupère son ID
               //fin
               nNumeroOrdre est une entier = 0
               // Ouvre le sélecteur de fichiers
               
               
               sFichier = Dupplication_Fichier_Avant_Import("\\prod-vm-file01\UnionMat\Service informatique\Procedures\Dev_logiciel\AutoMat\User stories.xlsx")
               
               SI sFichier <> "" ALORS
               	
               	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               	
               	SI ErreurDétectée = Faux ALORS 
               		
               		SI xlsFeuilleEnCours(IdFichierXLS, 1) ALORS	
               			
               			Xlsnbligne_ =xlsNbLigne(IdFichierXLS,Vrai)
               			
               			POUR i = nPremiereligne _À_ Xlsnbligne_
               				
               				//ON ne prend que les lignes qui ont un code et une description.
               				SI xlsDonnée(IdFichierXLS,i,nCol_codeUS) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_Besoin) <> "" ALORS
               					
               					//Si le champ role est vide => c'est une tache
               					Si xlsDonnée(IdFichierXLS,i,nCol_Role) <> "" alors
               //						si xlsDonnée(IdFichierXLS,i,nCol_codeUS) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_Besoin) <> "" alors
               							VariableRAZ(stUS)
               							stUS.sCodeUserStorie = xlsDonnée(IdFichierXLS,i,nCol_codeUS)
               							stUS.sEnTantQue = xlsDonnée(IdFichierXLS,i,nCol_Role)
               							stUS.sBesoinUserStorie = xlsDonnée(IdFichierXLS,i,nCol_Besoin)
               							stUS.sAfindeUserStorie = xlsDonnée(IdFichierXLS,i,nCol_Afinde)
               							stUS.nIDProjet = oPrj.Get_IdUnique()
               							stUS.nIDResponsable = oPrj.p_oUsr_ChefProjet.Get_IdUnique()
               							
               							Si xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T" alors
               								stUS.bAtester = vrai
               								stUS.eEtatUserStorie = ClUserStory.ECompteNbUS.En_test_fonctionnel
               							FIN
               							
               							nIdUS = User_Story_ajout(stUS)
               							
               							nNumeroOrdre = 0
               //						fin
               						
               					sinon //sinon c'est une tache
               						
               						si PAS (xlsDonnée(IdFichierXLS,i,nCol_nom) = SansEspace("") ET xlsDonnée(IdFichierXLS,i,nCol_numSprint) = SansEspace("")) alors
               							VariableRAZ(stTache)
               							stTache.sCodeTache = xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               							stTache.nNumSprintCreation = xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               							stTache.nNumSprintRealisation = stTache.nNumSprintCreation
               							stTache.nNumSprintPrevision = stTache.nNumSprintCreation
               							//stTache.nNumSprintDemarage = stTache.nNumSprintCreation
               							stTache.nIDUserStorie = nIdUS
               							stTache.sDescription = xlsDonnée(IdFichierXLS,i,nCol_nom)
               							
               							//affectation du num d'ordre
               							nNumeroOrdre++
               							stTache.nOrdre = nNumeroOrdre
               							
               							SI SansEspace(xlsDonnée(IdFichierXLS,i,nCol_Poids)) = "" _OU_ SansEspace(xlsDonnée(IdFichierXLS,i,nCol_numSprint)) = "" ALORS
               								Trace(Scr_Projet.Nom,TAB,stTache.sCodeTache,TAB,stTache.sDescription,TAB,"Poids : " + xlsDonnée(IdFichierXLS,i,nCol_Poids),TAB,"Sprint : " + xlsDonnée(IdFichierXLS,i,nCol_numSprint))						
               							FIN
               							
               							//Si le poids n'est pas indiqué --> null
               							Si xlsDonnée(IdFichierXLS,i,nCol_Poids) <> "" alors
               								stTache.nPoids = xlsDonnée(IdFichierXLS,i,nCol_Poids)
               								stTache.nPoids_Prevision = stTache.nPoids
               							sinon
               								stTache.nPoids = null
               								stTache.nPoids_Prevision = null
               							fin
               							
               							Selon Vrai
               								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "x"
               									stTache.bDemarree = vrai
               									stTache.bAnnulee = faux
               									stTache.bTermine = vrai 
               									stTache.nNumSprintFin = stTache.nNumSprintCreation 
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T"
               									stTache.bDemarree = vrai
               									stTache.bAnnulee = faux
               									stTache.bTermine = vrai 
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "C"
               									stTache.bDemarree = Vrai
               									stTache.bAnnulee = Faux	
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A"
               									stTache.bAnnulee = vrai
               									stTache.bDemarree = faux
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								AUTRE CAS
               									stTache.bAnnulee = Faux
               									stTache.bDemarree = Faux
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = 0
               							FIN
               							Taches_Ajout(stTache)
               						fin
               					FIN
               				fin
               			FIN
               			
               		SINON
               			Erreur(ErreurInfo(errComplet))
               		FIN
               	sinon
               		erreur(erreurinfo(errComplet))
               	FIN
               	
               	xlsferme(IdFichierXLS)
               	
               FIN
               
               
               
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Importer_DEB_LAD_RAD
          identifier : 0x2e3942af2f182c44
          internal_properties : BgAAAAYAAAAsGw0+kBpvAPMAOCyIj0RdgE1bqLfEbscStWClfmPRIYMOuRi2IaKgkf+ybghv+hRvtHH+4Dqm0PtROOXmxzYFKZzVc4LgEA9WtKM2D6j0ZawssSN/80QhQGhV+o8w+wekhhR52uAlOkjbenTy2Yb2JptD1VBe6xWHZfP+mWQcmuq9eLP/EAUuROTKqG/FI5SOZszNrhayUiBsq1y12o9YzBxGDf1jfVce4NYPcWLPj/cUVGV3rImrSR9bANzhcSZ6VCC6Xd0cHR6wWoN3p48s5Gd7rBzI2WBq2g3n0NrcRsCFfLTcIzFE3tSMXYmH57zFShKgcBE8fJhp0Nl42SaQjyczOOrLLCHudBetDmoBx0t64mq0JXJDyjSE/1gyNtvusAANcK4FoR2eNVcnlitfAo5aj5tBlFyMbvROUv1icTePV4ljEDnZIlkkrx+6T/I5hc2vAyP7iBjzYp8Ax/SQWsj2U0CAy1rUgrpwYSVurV/SStlyLQuG/sRAqNs2wbgjUgkClRGLHHntIyg7oJ6Mtc6P2t0dp6EjnAM4UdXd8mu5euRyRlvf0P0mU8O0n37WOIsBSJ40NUkgFKHy+UkydezGOtH1sFmop7swub3aw2x5wiWJ8xBPa5QG9VeRkFvKJ2WThfvW5bLPZxPGvRdYk6p+lMKIkqcCFufgQPy0GXAnE63xv/j7syBG0ZrA0vkip310hnVsSY5SIFEAU0DBnJOU9PpIxjzDuhgg8BaNMM9GRzyCS8UE
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               IdFichierXLS est un xlsDocument
               Xlsnbligne_ est un entier
               i est un entier
               sFichier est une chaîne
               
               nPremiereligne est un entier = 2
               
               //Declatration VAriables
               nIdUS est un entier
               //nIdProjet est un entier
               stTache est une STR_Tache
               stUS est une STR_UserStorie
               
               nCol_codeUS est un entier = 1
               nCol_codeTache est un entier = 1
               nCol_numSprint est un entier = 7
               nCol_Poids est un entier = 8
               nCol_fin est un entier = 9
               nCol_Role est un entier = 2
               nCol_nom est un entier = 3
               nCol_Besoin est un entier = 3
               nCol_AfinDe est un entier = 4
               nCol_commentaire est un entier = 5
               
               oPrj est un ClProjet <- oProjetDeNom("DEB / LAD / RAD")
               
               //HLitRecherche(Scr_Projet,Nom,"DEB / LAD / RAD")
               //si htrouve(Scr_Projet)
               //	nIdProjet = Scr_Projet.IDScr_Projet
               //sinon
               //	HRAZ(Scr_Projet)
               //	//Scr_Projet.IDSrc_Usr = 1
               //	Scr_Projet.Nom = "DEB / LAD / RAD"
               //	Si pas Hajoute(Scr_Projet) alors
               //		info("erreur dans l'ajout du projet DEB / LAD / RAD", ErreurInfo())
               //	FIN
               //	nIdProjet = Scr_Projet.IDScr_Projet //On recupère son ID
               //fin
               nNumeroOrdre est une entier = 0
               // Ouvre le sélecteur de fichiers
               
               
               sFichier = Dupplication_Fichier_Avant_Import("\\prod-vm-file01\UnionMat\Service informatique\Procedures\Dev_logiciel\DEB 2020\User stories Paiement DEB LAD RAD.xlsx")
               
               SI sFichier <> "" ALORS
               	
               	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               	
               	SI ErreurDétectée = Faux ALORS 
               		
               		SI xlsFeuilleEnCours(IdFichierXLS, 1) ALORS	
               			
               			Xlsnbligne_ =xlsNbLigne(IdFichierXLS,Vrai)
               			
               			POUR i = nPremiereligne _À_ Xlsnbligne_
               				
               				//ON ne prend que les lignes qui ont un code et une description.
               				SI xlsDonnée(IdFichierXLS,i,nCol_codeUS) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_Besoin) <> "" ALORS
               					
               					//Si le champ role n'est pas vide => c'est une US
               					Si xlsDonnée(IdFichierXLS,i,nCol_Role) <> "" alors
               //						si xlsDonnée(IdFichierXLS,i,nCol_codeUS) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_Besoin) <> "" alors
               							VariableRAZ(stUS)
               							stUS.sCodeUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_codeUS)
               							stUS.sEnTantQue			= xlsDonnée(IdFichierXLS,i,nCol_Role)
               							stUS.sBesoinUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_Besoin)
               							stUS.sAfindeUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_AfinDe)
               							stUS.sCmtrTest			= xlsDonnée(IdFichierXLS,i,nCol_commentaire)
               							stUS.nIDProjet			= oPrj.Get_IdUnique()
               							stUS.nIDResponsable		= oPrj.p_oUsr_ChefProjet.Get_IdUnique()
               							
               							Si xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T" alors
               								stUS.bAtester = vrai
               								stUS.eEtatUserStorie = ClUserStory.ECompteNbUS.En_test_fonctionnel
               							FIN
               							
               							nIdUS = User_Story_ajout(stUS)
               							
               							nNumeroOrdre = 0
               //						fin
               						
               					sinon //sinon c'est une tache
               						
               						si PAS (xlsDonnée(IdFichierXLS,i,nCol_nom) = SansEspace("") ET xlsDonnée(IdFichierXLS,i,nCol_numSprint) = SansEspace("")) alors
               							VariableRAZ(stTache)
               							stTache.sCodeTache				= xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               							stTache.nNumSprintCreation		= xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               							stTache.nNumSprintRealisation	= stTache.nNumSprintCreation
               							stTache.nNumSprintPrevision		= stTache.nNumSprintCreation
               							stTache.nIDUserStorie			= nIdUS
               							stTache.sDescription			= xlsDonnée(IdFichierXLS,i,nCol_nom)
               							stTache.sCommentaire			= xlsDonnée(IdFichierXLS,i,nCol_commentaire)
               							
               							//affectation du num d'ordre
               							nNumeroOrdre++
               							stTache.nOrdre = nNumeroOrdre
               							
               							SI SansEspace(xlsDonnée(IdFichierXLS,i,nCol_Poids)) = "" _OU_ SansEspace(xlsDonnée(IdFichierXLS,i,nCol_numSprint)) = "" ALORS
               								Trace(Scr_Projet.Nom,TAB,stTache.sCodeTache,TAB,stTache.sDescription,TAB,"Poids : " + xlsDonnée(IdFichierXLS,i,nCol_Poids),TAB,"Sprint : " + xlsDonnée(IdFichierXLS,i,nCol_numSprint))						
               							FIN
               							
               							//Si le poids n'est pas indiqué --> null
               							Si xlsDonnée(IdFichierXLS,i,nCol_Poids) <> "" alors
               								stTache.nPoids = xlsDonnée(IdFichierXLS,i,nCol_Poids)
               								stTache.nPoids_Prevision = stTache.nPoids
               							sinon
               								stTache.nPoids = null
               								stTache.nPoids_Prevision = null
               							fin
               							
               							Selon Vrai
               								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "x"
               									stTache.bDemarree = vrai
               									stTache.bAnnulee = faux
               									stTache.bTermine = vrai
               									stTache.nNumSprintFin = stTache.nNumSprintCreation
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T" 
               									stTache.bDemarree = vrai
               									stTache.bAnnulee = faux
               									stTache.bTermine = vrai
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "C"
               									stTache.bDemarree = Vrai
               									stTache.bAnnulee = Faux	
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A"
               									stTache.bAnnulee = vrai
               									stTache.bDemarree = faux
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								AUTRE CAS
               									stTache.bAnnulee = Faux
               									stTache.bDemarree = Faux
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = 0
               							FIN
               							Taches_Ajout(stTache)
               						fin
               					FIN
               				fin
               			FIN
               			
               		SINON
               			Erreur(ErreurInfo(errComplet))
               		FIN
               	sinon
               		erreur(erreurinfo(errComplet))
               	FIN
               	
               	xlsferme(IdFichierXLS)
               	
               FIN
               
               Import_Process(oPrj.Get_IdUnique(), sFichier)
               
               
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Importer_ControleHebdoBL
          identifier : 0x2e9552f730806e1e
          internal_properties : BgAAAAYAAADg6WwdlXxWzeUQHL3k2P893O14Y1cMEEo6V2jsbjvA7muj2YXiN76M8G01QH2EMudS0ISZzuStUrc/kXT/qinPOqXEvZMm+5Blf+6QXXbMja1a9HyHf7VANvVnrSjgjRcc2n3Tm6Zdk8viMMMOMlq4DBJ9GKGVQAGk0xGcBun6s9I+yI0Hgt0bM1Bqh2ZvbTiQc/rIUjwDmajZo4Hpi2/+EqJqMPRGSdddteGbKS2S9bGuMx4x1/Gb8WCJCyBoEvX+Sv4BqBISGNOxDTkJqCdpTlnuwjERn9+Ek8tDmameG7CIVkkx3E5I9GvIaQkI3PK+oWzZdVUkKdfi5DIypCEh/lhsUP7lBqevLnqFMC5kDBmnceCjnWrXipghlVTQQdYK8NIMg2+v7uVArZA1Drt8m6fkWFDYCncy0gTbklOarPyEU2BwB0mwki++XgsM8a2ANG9AtMaNZ1b3mi5WW74Jz22mcIv5Y1fceFZDK9HimHZJziZ9Rk/Lqk6Ald0aWWucYzkBwBqH4/mbE08hFJ47eIEn8y4Yi3YZVPOfD7h0gENpE7jGDhaB++LjN16bNhj6BN5rhiSp3aLkwRoeasddtyNISH/JCmonwZs0PBKpTpcTP9nYWivGjl/reheSD9E84eT2CFRyvv9YShQ5xSPJkWDl2iLd0MC9IvtY/9WfdnlCW6Qzd+Xz6o5mbhJSXJjoWzzTjHJr54YokL2FyPCuKKub+QPrrXaMeix7YQn9KJMvXDx+FpwziXmp5LSfYxSreO2a
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               IdFichierXLS est un xlsDocument
               Xlsnbligne_ est un entier
               i est un entier
               sFichier est une chaîne
               
               nPremiereligne est un entier = 2
               
               //Declatration VAriables
               nIdUS est un entier
               //nIdProjet est un entier
               stTache est une STR_Tache
               stUS est une STR_UserStorie
               
               nCol_codeUS est un entier = 1
               nCol_codeTache est un entier = 1
               nCol_numSprint est un entier = 7
               nCol_Poids est un entier = 8
               nCol_fin est un entier = 9
               nCol_Role est un entier = 2
               nCol_nom est un entier = 3
               nCol_Besoin est un entier = 3
               nCol_AfinDe est un entier = 4
               //nCol_commentaire est un entier = 17
               
               
               
               oPrj est un ClProjet <- oProjetDeNom("Controle hebdo BL")
               
               
               //HLitRecherche(Scr_Projet,Nom,"Controle hebdo BL")
               //si htrouve(Scr_Projet)
               //	nIdProjet = Scr_Projet.IDScr_Projet
               //sinon
               //	HRAZ(Scr_Projet)
               //	//Scr_Projet.IDSrc_Usr = 1
               //	Scr_Projet.Nom = "Controle hebdo BL"
               //	Si pas Hajoute(Scr_Projet) alors
               //		info("erreur dans l'ajout du projet Controle hebdo BL", ErreurInfo())
               //	FIN
               //	nIdProjet = Scr_Projet.IDScr_Projet //On recupère son ID
               //fin
               nNumeroOrdre est une entier = 0
               // Ouvre le sélecteur de fichiers
               sFichier = Dupplication_Fichier_Avant_Import("\\prod-vm-file01\UnionMat\Service informatique\Procedures\Dev_logiciel\Contrôle hebdomadaire des bons de livraison\User stories Controle Marge hebdo.xlsx")
               
               SI sFichier <> "" ALORS
               	
               	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               	
               	SI ErreurDétectée = Faux ALORS 
               		
               		SI xlsFeuilleEnCours(IdFichierXLS, 1) ALORS	
               			
               			Xlsnbligne_ =xlsNbLigne(IdFichierXLS,Vrai)
               			
               			POUR i = nPremiereligne _À_ Xlsnbligne_
               				
               				//ON ne prend que les lignes qui ont un code et une description.
               				SI xlsDonnée(IdFichierXLS,i,nCol_codeUS) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_Besoin) <> "" ALORS
               					
               					//Si le champ role n'est pas vide => c'est une US
               					Si xlsDonnée(IdFichierXLS,i,nCol_Role) <> "" alors
               //						si xlsDonnée(IdFichierXLS,i,nCol_codeUS) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_Besoin) <> "" alors
               							VariableRAZ(stUS)
               							stUS.sCodeUserStorie = xlsDonnée(IdFichierXLS,i,nCol_codeUS)
               							stUS.sEnTantQue = xlsDonnée(IdFichierXLS,i,nCol_Role)
               							stUS.sBesoinUserStorie = xlsDonnée(IdFichierXLS,i,nCol_Besoin)
               							stUS.sAfindeUserStorie = xlsDonnée(IdFichierXLS,i,nCol_AfinDe)
               							stUS.nIDProjet = oPrj.Get_IdUnique()
               							stUS.nIDResponsable = oPrj.p_oUsr_ChefProjet.Get_IdUnique()
               							
               							Si xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T" alors
               								stUS.bAtester = vrai
               								stUS.eEtatUserStorie = ClUserStory.ECompteNbUS.En_test_fonctionnel
               							FIN
               							
               							nIdUS = User_Story_ajout(stUS)
               							
               							nNumeroOrdre = 0
               //						fin
               						
               					sinon //sinon c'est une tache
               						
               						si PAS (xlsDonnée(IdFichierXLS,i,nCol_nom) = SansEspace("") ET xlsDonnée(IdFichierXLS,i,nCol_numSprint) = SansEspace("")) alors
               							variableraz(stTache)
               							stTache.sCodeTache = xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               							stTache.nNumSprintCreation = xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               							stTache.nNumSprintRealisation = stTache.nNumSprintCreation
               							stTache.nNumSprintPrevision = stTache.nNumSprintCreation
               							//stTache.nNumSprintDemarage = stTache.nNumSprintCreation
               							stTache.nIDUserStorie = nIdUS
               							stTache.sDescription = xlsDonnée(IdFichierXLS,i,nCol_nom)
               							
               							//affectation du num d'ordre
               							nNumeroOrdre++
               							stTache.nOrdre = nNumeroOrdre
               							
               							SI SansEspace(xlsDonnée(IdFichierXLS,i,nCol_Poids)) = "" _OU_ SansEspace(xlsDonnée(IdFichierXLS,i,nCol_numSprint)) = "" ALORS
               								Trace(Scr_Projet.Nom,TAB,stTache.sCodeTache,TAB,stTache.sDescription,TAB,"Poids : " + xlsDonnée(IdFichierXLS,i,nCol_Poids),TAB,"Sprint : " + xlsDonnée(IdFichierXLS,i,nCol_numSprint))						
               							FIN
               							
               							//Si le poids n'est pas indiqué --> null
               							Si xlsDonnée(IdFichierXLS,i,nCol_Poids) <> "" alors
               								stTache.nPoids = xlsDonnée(IdFichierXLS,i,nCol_Poids)
               								stTache.nPoids_Prevision = stTache.nPoids
               							sinon
               								stTache.nPoids = null
               								stTache.nPoids_Prevision = null
               							fin
               							
               							Selon Vrai
               								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "x"
               									stTache.bDemarree = vrai
               									stTache.bAnnulee = faux
               									stTache.bTermine = vrai
               									stTache.nNumSprintFin = stTache.nNumSprintCreation 
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T"
               									stTache.bDemarree = vrai
               									stTache.bAnnulee = faux
               									stTache.bTermine = vrai 
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "C"
               									stTache.bDemarree = Vrai
               									stTache.bAnnulee = Faux	
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A"
               									stTache.bAnnulee = vrai
               									stTache.bDemarree = faux
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								AUTRE CAS
               									stTache.bAnnulee = Faux
               									stTache.bDemarree = Faux
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = 0
               							FIN
               							Taches_Ajout(stTache)
               						fin
               					FIN
               				fin
               			FIN
               			
               		SINON
               			Erreur(ErreurInfo(errComplet))
               		FIN
               	sinon
               		erreur(erreurinfo(errComplet))
               	FIN
               	
               	xlsferme(IdFichierXLS)
               	
               FIN
               
               
               
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Importer_ControleHebdoBL1
          identifier : 0x2efc2e4d0136a3e0
          internal_properties : BgAAAAYAAADQih5Q0o2Xyu+7laIkNXBY+BYsaBRJek/rRaXNscSt8HDB/E2pwshwBxwcgYBVPRiCIOtWIpahACH6h/VEV+oq9otQ25ihmTHV5G712MsF4ajZXfO2czZupd5k+C2G23Yp9urSgliFj/4aQGvfOYcjyAdEtoYlRntGIB7fI2s1gAAzb4lYaJPYfKeIVyBXlQpgbxiwFlKCkSq0MNF+TZJj9fiGcuLkjNjHPqZV8XppVrNCdk86pkyme/2GJxybvpWWvns4OiBSl9vtT2XfsWZBITiEcTnQlfbyt37sl88fDVuF3pqXxU6yUZB/izSt7ixbGNzoY7qlnoaH56TJXn1PUP9S30EsNoLb1ysseTDaWErUU67oa7CGOupqOl0l7WtzIB8tWo+I+hveu/FDJhTdf/l+s0c5mNv/omcg7J4On7apGmxNPECS1YmRFw6RBRDuO1+9gmnNUefTwz39dXAwngHup1W/AOWOqXCGd5xTWxa69bqvNh1OeYwwLme/B8u43RAdZdt6nX6lZQuQ4H6Q7qwppzwN2X8H014gDGzp0ryPhjkuWPfWxlgzG10JF4zW1N/eNShfABGeUVTq6SScVAihYMBrpF1jwywc9jKq5qrqpga8NiKgyainzWjpHMfrJtNIuQmIJqI8l4Dx7CAPliS6+fQNygEQCjV+1hEhkPPuAxpXdQFCq+ryRmm0vKYgQcgGRwOZdKwGhhV6rpRJ8WKbcIUbDty8Zr+x3r+Qp5NauQpgdMM=
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               IdFichierXLS est un xlsDocument
               Xlsnbligne_ est un entier
               i est un entier
               sFichier est une chaîne
               
               nPremiereligne est un entier = 2
               
               //Declatration VAriables
               nIdUS est un entier
               //nIdProjet est un entier
               stTache est une STR_Tache
               stUS est une STR_UserStorie
               
               nCol_codeUS est un entier = 1
               nCol_codeTache est un entier = 1
               nCol_numSprint est un entier = 7
               nCol_Poids est un entier = 8
               nCol_fin est un entier = 9
               nCol_Role est un entier = 2
               nCol_nom est un entier = 3
               nCol_Besoin est un entier = 3
               nCol_AfinDe est un entier = 4
               //nCol_commentaire est un entier = 17
               
               oPrj est un ClProjet <- oProjetDeNom("Borne info prix")
               
               //HLitRecherche(Scr_Projet,Nom,"Borne info prix")
               //si htrouve(Scr_Projet)
               //	nIdProjet = Scr_Projet.IDScr_Projet
               //sinon
               //	HRAZ(Scr_Projet)
               //	//Scr_Projet.IDSrc_Usr = 1
               //	Scr_Projet.Nom = "Borne info prix"
               //	Si pas Hajoute(Scr_Projet) alors
               //		info("erreur dans l'ajout du projet Borne info prix", ErreurInfo())
               //	FIN
               //	nIdProjet = Scr_Projet.IDScr_Projet //On recupère son ID
               //fin
               nNumeroOrdre est une entier = 0
               // Ouvre le sélecteur de fichiers
               sFichier = Dupplication_Fichier_Avant_Import("\\prod-vm-file01\UnionMat\Service informatique\Procedures\Dev_logiciel\Borne Info et prix - Android\User stories BorneInfoPrix.xlsx")
               
               SI sFichier <> "" ALORS
               	
               	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               	
               	SI ErreurDétectée = Faux ALORS 
               		
               		SI xlsFeuilleEnCours(IdFichierXLS, 1) ALORS	
               			
               			Xlsnbligne_ =xlsNbLigne(IdFichierXLS,Vrai)
               			
               			POUR i = nPremiereligne _À_ Xlsnbligne_
               				
               				//ON ne prend que les lignes qui ont un code et une description.
               				SI xlsDonnée(IdFichierXLS,i,nCol_codeUS) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_Besoin) <> "" ALORS
               					
               					//Si le champ role n'est pas vide => c'est une US
               					Si xlsDonnée(IdFichierXLS,i,nCol_Role) <> "" alors
               //						si xlsDonnée(IdFichierXLS,i,nCol_codeUS) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_Besoin) <> "" alors
               							VariableRAZ(stUS)
               							stUS.sCodeUserStorie = xlsDonnée(IdFichierXLS,i,nCol_codeUS)
               							stUS.sEnTantQue = xlsDonnée(IdFichierXLS,i,nCol_Role)
               							stUS.sBesoinUserStorie = xlsDonnée(IdFichierXLS,i,nCol_Besoin)
               							stUS.sAfindeUserStorie = xlsDonnée(IdFichierXLS,i,nCol_AfinDe)
               							stUS.nIDProjet = oPrj.Get_IdUnique()
               							stUS.nIDResponsable = oPrj.p_oUsr_ChefProjet.Get_IdUnique()
               							
               							Si xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T" alors
               								stUS.bAtester = vrai
               								stUS.eEtatUserStorie = ClUserStory.ECompteNbUS.En_test_fonctionnel
               							FIN
               							
               							nIdUS = User_Story_ajout(stUS)
               							
               							nNumeroOrdre = 0
               //						fin
               						
               					sinon //sinon c'est une tache
               						
               						si PAS (xlsDonnée(IdFichierXLS,i,nCol_nom) = SansEspace("") ET xlsDonnée(IdFichierXLS,i,nCol_numSprint) = SansEspace("")) alors
               							VariableRAZ(stTache)
               							stTache.sCodeTache = xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               							stTache.nNumSprintCreation = xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               							stTache.nNumSprintRealisation = stTache.nNumSprintCreation
               							stTache.nNumSprintPrevision = stTache.nNumSprintCreation
               							//stTache.nNumSprintDemarage = stTache.nNumSprintCreation
               							stTache.nIDUserStorie = nIdUS
               							stTache.sDescription = xlsDonnée(IdFichierXLS,i,nCol_nom)
               							
               							//affectation du num d'ordre
               							nNumeroOrdre++
               							stTache.nOrdre = nNumeroOrdre
               							
               							SI SansEspace(xlsDonnée(IdFichierXLS,i,nCol_Poids)) = "" _OU_ SansEspace(xlsDonnée(IdFichierXLS,i,nCol_numSprint)) = "" ALORS
               								Trace(Scr_Projet.Nom,TAB,stTache.sCodeTache,TAB,stTache.sDescription,TAB,"Poids : " + xlsDonnée(IdFichierXLS,i,nCol_Poids),TAB,"Sprint : " + xlsDonnée(IdFichierXLS,i,nCol_numSprint))						
               							FIN
               							
               							//Si le poids n'est pas indiqué --> null
               							Si xlsDonnée(IdFichierXLS,i,nCol_Poids) <> "" alors
               								stTache.nPoids = xlsDonnée(IdFichierXLS,i,nCol_Poids)
               								stTache.nPoids_Prevision = stTache.nPoids
               							sinon
               								stTache.nPoids = null
               								stTache.nPoids_Prevision = null
               							fin
               							
               							Selon Vrai
               								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "x"
               									stTache.bDemarree = vrai
               									stTache.bAnnulee = faux
               									stTache.bTermine = vrai
               									stTache.nNumSprintFin = stTache.nNumSprintCreation 
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T"
               									stTache.bDemarree = vrai
               									stTache.bAnnulee = faux
               									stTache.bTermine = vrai 
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "C"
               									stTache.bDemarree = Vrai
               									stTache.bAnnulee = Faux	
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A"
               									stTache.bAnnulee = vrai
               									stTache.bDemarree = faux
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								AUTRE CAS
               									stTache.bAnnulee = Faux
               									stTache.bDemarree = Faux
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = 0
               							FIN
               							Taches_Ajout(stTache)
               						fin
               					FIN
               				fin
               			FIN
               			
               		SINON
               			Erreur(ErreurInfo(errComplet))
               		FIN
               	sinon
               		erreur(erreurinfo(errComplet))
               	FIN
               	
               	xlsferme(IdFichierXLS)
               	
               FIN
               
               
               
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Controles
          identifier : 0x2f4bf0190ef94014
          internal_properties : BgAAAAYAAAD2pN8+L3P+r/BlYUBSmLtbb1/w6l5xzBt6auZ3YiE9AmBXScs44Uu9ZN9T8Yp9LToib4xGq9vFFrT7W18Mc7wxUjOgCd0Vwnu/di0bn6W2EKNUXxBF3H9mmpTdUI16GEc52OLQXu+OspB6IPO72SuEX9OhhMxa+UjDbNR3zuWGMRmIA+tbvmp+ioAIzGGb8zZSa/mA8Nbz+4tebEpXA+FigKCkTBP2a/jIMFx/w3nf5sDPHprcPVVV2hxE7jREZYvpW0WJyN0xvUP/YMqzx6WQUxymrElWHirp6Ab4YKJJely/3z8rYHd+JpZFidhfirkIWKluAsZQShigo23d24hCysGq+zfoLhZYNWRZ5xz9Np52GSR/uHWPaOKsHJ8ov0ysGoNNbv3UbrVhTTmCQmIUkHDRXZuoP+WMkbJWOcmt1mdLAnlJbWbEFnKCk1QY3BtPfxIVxQRkxcCmQIMvGQ9JpFavBc4FwL2WWaA4iu2rUlEoORdufB7vrre6qJrOwr2v0kj20ZRK+dMExYx2mJ2ZOVZ4zAF2OIKlG0t60n88u317BQCiK3ttmGyswmal0ovK/tOOZlE7rDnibS2ZeNI+T0lMchRaX5wCyEMzKTdHW10dMh2lHmkHVHwXrXyvQdqUJ4DDLwLFUKWziisiNMcRAi3QS/+yjFFOkKGl4D3my3aLcMX7HecX+CNQAgVCHX7U8meZAbXhAi6Ot51fK17uUAMwebXvV/FiMwlx5Q==
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1-
               nPointsTotal est un entier
               nPointsProjet est un entier
               
               oPrj est un ClProjet dynamique
               oUS est un ClUserStory dynamique
               oTache est un ClTache dynamique
               
               
               pour tout element oPrj de ClProjet.aoListeProjets(vrai)
               	nPointsProjet = 0
               	POUR TOUT ELEMENT oUS DE oPrj.aoListeUS(Faux)
               		POUR TOUT ELEMENT oTache DE oUS.aoListeTaches()
               			nPointsTotal += oTache.p_nPoids
               			nPointsProjet += oTache.p_nPoids
               		FIN
               	FIN
               	trace(oPrj.p_sNom + " : " + nPointsProjet)
               FIN
               Trace("Total : " + nPointsTotal)
               
               trace("-------------------------------------")
               
               oSprint est un ClSprint dynamique
               pour tout element oSprint de ClSprint.aoListeSprint()
               	trace(oSprint.Get_IdUnique() + " - " + oSprint.nGetNbPointsRealises() + " - " + oSprint.p_nVelociteMoyenneRes)
               FIN
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Importer_Inventaire_tournant
          identifier : 0x2efeecb60fe46e56
          internal_properties : BgAAAAYAAABNQlT8vi0xvxwezfGGhqOeK2gUlizk+DSheOl77PLmOO+HqED9TPNey0XpnZteEAqhyTlpztIVwSM5Pc/J8KfLn8Rlmt0SJFYW9uDm6s+S7cnc7sS5pLJfZiwSqwZsTsrQsISffzHxLLMT6+Sh9C7IOnHx4veUCbt/oo1Awwzhy7yyseF25YfF6wDPTUXsQ1PYQuC+yGdo0oo4evqS/fkqT8thAGHSqoXkVi99G4lo3S8WfxEdPWW2F4m8lMOKvpWW5ze2H5I2C+22tMRwwP+zCz0JQ5yTylok8LtzbqabVOlzlg/Bs1UQWZYdxmgOLMd0QN0fOKl8cWK2FHlCqUSgvSHnV28e1UZin5nCRKi+YUYBVta9sCr7OaaPgotmyS4d0KcJVU2qwojYHE8PBfWAJeCLbdJOT+1zWEmu4gScDORHGCvuYXjInz+/5zcf8wEkUQILgHIsL9dFn0ECWMqXrzbFo+lb/Kkd2vFEfc7seOoOGR0HvMgtHcjzfjFXX8v0FFQkGNIqddiJKrItT5Cn7G46LlJ8EMxkCGiWxxr/82IjY6qBi1qcs1dhYxN3BTe3UDBdWw9/PNpAkFJTIYigNfNiGxPvZvH+cEVPyKNXu3CUYBhj3T6hoSF83C5V0SM4IMOk7demB8qyze5sCovnu7uNmJfgw5rs7OTVsUDhMb9yh7PBI8WSXqL7ymnqyZmrJ3qpSQn1YJ7r/rTL8/oIeLrDWCs2cHjcA3SbyGXkLF2MeQ1UgOvIujHaGFu6qkDB
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               IdFichierXLS est un xlsDocument
               Xlsnbligne_ est un entier
               i est un entier
               sFichier est une chaîne
               
               nPremiereligne est un entier = 2
               
               //Declatration VAriables
               nIdUS est un entier
               //nIdProjet est un entier
               stTache est une STR_Tache
               stUS est une STR_UserStorie
               
               nCol_codeUS est un entier = 1
               nCol_codeTache est un entier = 1
               nCol_numSprint est un entier = 7
               nCol_Poids est un entier = 8
               nCol_fin est un entier = 9
               nCol_Role est un entier = 2
               nCol_nom est un entier = 3
               nCol_Besoin est un entier = 3
               nCol_AfinDe est un entier = 4
               //nCol_commentaire est un entier = 17
               
               oPrj est un ClProjet <- oProjetDeNom("Inventaire tournant")
               
               
               //HLitRecherche(Scr_Projet,Nom,"Inventaire tournant")
               //si htrouve(Scr_Projet)
               //	nIdProjet = Scr_Projet.IDScr_Projet
               //sinon
               //	HRAZ(Scr_Projet)
               //	//Scr_Projet.IDSrc_Usr = 1
               //	Scr_Projet.Nom = "Inventaire tournant"
               //	Si pas Hajoute(Scr_Projet) alors
               //		info("erreur dans l'ajout du projet Inventaire tournant", ErreurInfo())
               //	FIN
               //	nIdProjet = Scr_Projet.IDScr_Projet //On recupère son ID
               //fin
               nNumeroOrdre est une entier = 0
               // Ouvre le sélecteur de fichiers
               sFichier = Dupplication_Fichier_Avant_Import("\\prod-vm-file01\UnionMat\Service informatique\Procedures\Dev_logiciel\Inventaire tournant\User stories Invent tournant.xlsx")
               
               SI sFichier <> "" ALORS
               	
               	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               	
               	SI ErreurDétectée = Faux ALORS 
               		
               		SI xlsFeuilleEnCours(IdFichierXLS, 1) ALORS	
               			
               			Xlsnbligne_ =xlsNbLigne(IdFichierXLS,Vrai)
               			
               			POUR i = nPremiereligne _À_ Xlsnbligne_
               				
               				//ON ne prend que les lignes qui ont un code et une description.
               				SI xlsDonnée(IdFichierXLS,i,nCol_codeUS) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_Besoin) <> "" ALORS
               					
               					//Si le champ role n'est pas vide => c'est une US
               					Si xlsDonnée(IdFichierXLS,i,nCol_Role) <> "" alors
               //						si xlsDonnée(IdFichierXLS,i,nCol_codeUS) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_Besoin) <> "" alors
               							VariableRAZ(stUS)
               							stUS.sCodeUserStorie = xlsDonnée(IdFichierXLS,i,nCol_codeUS)
               							stUS.sEnTantQue = xlsDonnée(IdFichierXLS,i,nCol_Role)
               							stUS.sBesoinUserStorie = xlsDonnée(IdFichierXLS,i,nCol_Besoin)
               							stUS.sAfindeUserStorie = xlsDonnée(IdFichierXLS,i,nCol_AfinDe)
               							stUS.nIDProjet = oPrj.Get_IdUnique()
               							stUS.nIDResponsable = oPrj.p_oUsr_ChefProjet.Get_IdUnique()
               							
               							Si xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T" alors
               								stUS.bAtester = vrai
               								stUS.eEtatUserStorie = ClUserStory.ECompteNbUS.En_test_fonctionnel
               							FIN
               							
               							nIdUS = User_Story_ajout(stUS)
               							
               							nNumeroOrdre = 0
               //						fin
               						
               					sinon //sinon c'est une tache
               						
               						si PAS (xlsDonnée(IdFichierXLS,i,nCol_nom) = SansEspace("") ET xlsDonnée(IdFichierXLS,i,nCol_numSprint) = SansEspace("")) alors
               							VariableRAZ(stTache)
               							stTache.sCodeTache = xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               							stTache.nNumSprintCreation = xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               							stTache.nNumSprintRealisation = stTache.nNumSprintCreation
               							stTache.nNumSprintPrevision = stTache.nNumSprintCreation
               							//stTache.nNumSprintDemarage = stTache.nNumSprintCreation
               							stTache.nIDUserStorie = nIdUS
               							stTache.sDescription = xlsDonnée(IdFichierXLS,i,nCol_nom)
               							
               							//affectation du num d'ordre
               							nNumeroOrdre++
               							stTache.nOrdre = nNumeroOrdre
               							
               							SI SansEspace(xlsDonnée(IdFichierXLS,i,nCol_Poids)) = "" _OU_ SansEspace(xlsDonnée(IdFichierXLS,i,nCol_numSprint)) = "" ALORS
               								Trace(Scr_Projet.Nom,TAB,stTache.sCodeTache,TAB,stTache.sDescription,TAB,"Poids : " + xlsDonnée(IdFichierXLS,i,nCol_Poids),TAB,"Sprint : " + xlsDonnée(IdFichierXLS,i,nCol_numSprint))						
               							FIN
               							
               							//Si le poids n'est pas indiqué --> null
               							Si xlsDonnée(IdFichierXLS,i,nCol_Poids) <> "" alors
               								stTache.nPoids = xlsDonnée(IdFichierXLS,i,nCol_Poids)
               								stTache.nPoids_Prevision = stTache.nPoids
               							sinon
               								stTache.nPoids = null
               								stTache.nPoids_Prevision = null
               							fin
               							
               							Selon Vrai
               								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "x"
               									stTache.bDemarree = vrai
               									stTache.bAnnulee = faux
               									stTache.bTermine = vrai
               									stTache.nNumSprintFin = stTache.nNumSprintCreation 
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T"
               									stTache.bDemarree = vrai
               									stTache.bAnnulee = faux
               									stTache.bTermine = vrai 
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "C"
               									stTache.bDemarree = Vrai
               									stTache.bAnnulee = Faux	
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A"
               									stTache.bAnnulee = vrai
               									stTache.bDemarree = faux
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								AUTRE CAS
               									stTache.bAnnulee = Faux
               									stTache.bDemarree = Faux
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = 0
               							FIN
               							Taches_Ajout(stTache)
               						fin
               					FIN
               				fin
               			FIN
               			
               		SINON
               			Erreur(ErreurInfo(errComplet))
               		FIN
               	sinon
               		erreur(erreurinfo(errComplet))
               	FIN
               	
               	xlsferme(IdFichierXLS)
               	
               FIN
               
               
               
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Importer_Base_V2
          identifier : 0x2efef02c0ff0f53a
          internal_properties : BgAAAAYAAACo3qrOteolR9OILBHwlZHkcxwRdhlrk20CH3zxAv3smoazzzrOG7lNPBV0NN9cmo7iJwBOpppuHWH7OlrZDnqgZbYc03xhdo9eaFgKSZtG0dOzQIX+HRZzn4XnfbVQ6MPfP1deYekz061eIz/PYgSl9lbDGQPVf71zN7MFx5axxOZWEdVIH77SxlK6LM6bUGLATVA8H2l6mKs5nP11FhtGwALf9GWurmmaN8xHe/XWAbkUtnDa437P3F55FT0tmBz6oCQiSKqJYNvVD0hBXDiOiN1KMb1GZ+xDCKNr12w9+FFO9fQFD7xT9qqANYDg1jcZkgfvxPaDymsl3UWEPv06FXubLH7uW06Ug0ADbLgAAMaONJcWUJVDT85Xo922ENC9h/5JxnmR2MwN4ET27Lc4bTlMy2HgBnuF90npn4d6TEbW79sVETGY9Vx9hgh6CfU4xIQAZPgisg+77uUnOr9mEZfKRJnYOTNX07cOV6hp0HydYFDn/NH96IrDM5xhA36v3FLydjFehksmT2xTr8JNsvmkthrZOIareLRmp1Wpy7LiBY3bp+Xco7Dowb+gGaNF2imXVOQzNByj0feECXK/8pHTwhR6d5FnRtHJy8RMQ7JwgfnFP5OXsesbDYeoJTHWyj8Lu8SQXJW2KLLsnDCdEhG25nRl7KLcwws9Wb5S5LLb7qxIkAM+IvAudEo/cyfSzPsSxPZdIS6GYlViPmQ3jNOEVgOmkcXA3msRG3w=
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               IdFichierXLS			est un xlsDocument
               Xlsnbligne_				est un entier
               i						est un entier
               sFichier				est une chaîne
               
               nPremiereligne			est un entier	= 2
               
               nIdUS					est un entier
               stTache					est une STR_Tache
               stUS					est une STR_UserStorie
               
               nCol_codeUS				est un entier	= 1
               nCol_codeTache			est un entier	= 1
               nCol_numSprint			est un entier	= 7
               nCol_Poids				est un entier	= 8
               nCol_fin				est un entier	= 9
               nCol_Role				est un entier	= 2
               nCol_nom				est un entier	= 3
               nCol_Besoin				est un entier	= 3
               nCol_AfinDe				est un entier	= 4
               nCol_commentaire		est un entier	= 5
               nCol_numSprintCrea		est un entier	= 10
               nCol_Epic				est un entier	= 11
               nCol_commentaire_Test	est un entier	= 12
               
               
               oPrj est un ClProjet <- oProjetDeNom("Base V2")
               oPrjBV1 est un ClProjet <- oProjetDeNom("Base log")
               
               
               nNumeroOrdre est une entier = 0
               // Ouvre le sélecteur de fichiers
               sFichier = Dupplication_Fichier_Avant_Import("\\prod-vm-file01\UnionMat\Service informatique\Procedures\Dev_logiciel\Base Logistique\Base V2\User stories Base V2.xlsx")
               
               SI sFichier <> "" ALORS
               	
               	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               	
               	SI ErreurDétectée = Faux ALORS 
               		
               		SI xlsFeuilleEnCours(IdFichierXLS, 1) ALORS	
               			
               			Xlsnbligne_ =xlsNbLigne(IdFichierXLS,Vrai)
               			
               			POUR i = nPremiereligne _À_ Xlsnbligne_
               				
               				//ON ne prend que les lignes qui ont un code et une description.
               				SI xlsDonnée(IdFichierXLS,i,nCol_codeUS) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_Besoin) <> "" ALORS
               					
               					//Si le champ role n'est pas vide => c'est une US
               					Si xlsDonnée(IdFichierXLS,i,nCol_Role) <> "" alors
               
               						VariableRAZ(stUS)
               						stUS.sCodeUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_codeUS)
               						stUS.sEnTantQue			= xlsDonnée(IdFichierXLS,i,nCol_Role)
               						stUS.sBesoinUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_Besoin)
               						stUS.sAfindeUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_AfinDe)
               						stUS.sCmtrGeneral		= xlsDonnée(IdFichierXLS,i,nCol_commentaire)
               						stUS.sCmtrTest			= xlsDonnée(IdFichierXLS,i,nCol_commentaire_Test)
               						stUS.nIDProjet			= oPrj.Get_IdUnique()
               						stUS.nIDResponsable		= oPrj.p_oUsr_ChefProjet.Get_IdUnique()
               						
               						Si xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T" alors
               							stUS.bAtester = vrai
               							stUS.eEtatUserStorie = ClUserStory.ECompteNbUS.En_test_fonctionnel
               						FIN
               						
               						//Ajout de l'epic, si présent
               						stUS.nIdEpic = nCreeEpicSiBesoin(oPrj, xlsDonnée(IdFichierXLS,i,nCol_Epic))
               						
               						nIdUS = User_Story_ajout(stUS)
               						
               						nNumeroOrdre = 0
               						
               					sinon //sinon c'est une tache
               						
               						si PAS (xlsDonnée(IdFichierXLS,i,nCol_nom) = SansEspace("") ET xlsDonnée(IdFichierXLS,i,nCol_numSprint) = SansEspace("")) alors
               							VariableRAZ(stTache)
               							stTache.sCodeTache				= xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               							stTache.nNumSprintCreation		= xlsDonnée(IdFichierXLS,i,nCol_numSprintCrea)
               							stTache.nNumSprintRealisation	= xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               							stTache.nNumSprintPrevision		= stTache.nNumSprintRealisation
               							stTache.nIDUserStorie			= nIdUS
               							stTache.sDescription			= xlsDonnée(IdFichierXLS,i,nCol_nom)
               							stTache.sCommentaire			= xlsDonnée(IdFichierXLS,i,nCol_commentaire)
               							
               							//affectation du num d'ordre
               							nNumeroOrdre++
               							stTache.nOrdre					= nNumeroOrdre
               							
               							
               							//Si le poids n'est pas indiqué --> null
               							Si xlsDonnée(IdFichierXLS,i,nCol_Poids) <> "" alors
               								stTache.nPoids = xlsDonnée(IdFichierXLS,i,nCol_Poids)
               								stTache.nPoids_Prevision = stTache.nPoids
               							sinon
               								stTache.nPoids = null
               								stTache.nPoids_Prevision = null
               							fin
               							
               							Selon Vrai
               								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "x"
               									stTache.bDemarree = vrai
               									stTache.bAnnulee = faux
               									stTache.bTermine = vrai
               									stTache.nNumSprintFin = stTache.nNumSprintCreation 
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T"
               									stTache.bDemarree = vrai
               									stTache.bAnnulee = faux
               									stTache.bTermine = vrai 
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "C"
               									stTache.bDemarree = Vrai
               									stTache.bAnnulee = Faux	
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A"
               									stTache.bAnnulee = vrai
               									stTache.bDemarree = faux
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								AUTRE CAS
               									stTache.bAnnulee = Faux
               									stTache.bDemarree = Faux
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = 0
               							FIN
               							Taches_Ajout(stTache)
               						fin
               					FIN
               				fin
               			FIN
               			
               		SINON
               			Erreur(ErreurInfo(errComplet))
               		FIN
               	sinon
               		erreur(erreurinfo(errComplet))
               	FIN
               	
               	xlsferme(IdFichierXLS)
               	
               FIN
               
               
               
               // import des critères d'acceptations
               Import_Des_Criteres_Acceptation(oPrj.Get_IdUnique(), sFichier)
               Import_Process(oPrj.Get_IdUnique(), sFichier)
               
               
               oUs		est un ClUserStory dynamique
               pour tout element oUs de oPrj.aoListeUS(Vrai)
               	SI Gauche(oUs.p_sCodeUserStory, 3) = "BV1" ALORS
               		oUs.p_oProjetParent = oPrjBV1
               		oUs.Enregistre()
               	fin
               fin
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Import_taches_techniques
          identifier : 0x2032cac3393858bf
          internal_properties : BgAAAAYAAABUItEYYP7iJDyAhZZRMbVyPg0n6s+wDVBZDhTzQ4ECO9mQcXTvWxPt781e1u8k4GnEK22+ygaz4ZOQy1WKLy56aNkPnJm4c6lL2DUA66motmO2ioIcJbyZixZK1Z9e2z+aEocsrP0Xv8pdCca8GZPpKAPZSfHytOMCRnvsxO91+846MwlHaf8l8AV/EfHvEUc4/mzDQxUoJj4r1BSa/7IU+OnZ+CaU9BQ946pE9MENJptiBpHoyQCuA7GHJHOsLT8ckPAgEuRREZF+zNX85dE5vpp6OKgGj1ySQZCIPoyNFre2ccUAK+Te/0dW7Ac9k2mZWIcibRgNLd0MhboJbl+n7hQqKJBXb0J0KQtH8/Bv+oU0j4XYO6aWo5gPoOB0j/Ghuu60YDX4FpHc1az84Cj/t5ySvIH8l6tqbtYxPR8zK0ihEdCL37D45uN+vh5osD4m8e1yF8Tw6VChThprhccwM1qsoqiFZIEeAgC/AI89FXikhL54UMajxn78PQAgTAjSCHVZ1R4Et8EXy4kkhEUcdByxRwP+5LgbOlEbLPN0YD7Ci7pIE6BwXsVsRn6ulKrzzmn0etvlZmUSpntUYJOfOznx9DwXTM3FiorqEypeqkCck2UQ34qHjukpZZc2fFYcKjo5AqV+//KnVXuRAwzgLBADeTh0SpIRARtsjGUywv3ajs2asHFkDTjA8itQsI9VU61u90/srX17nOib54HI8wFk0Q4DYsUI65mk3KC1/QwJ6qpTiER5qVfT
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               IdFichierXLS est un xlsDocument
               Xlsnbligne_ est un entier
               i est un entier
               sFichier est une chaîne
               
               
               nCol_codeTache	est un entier	= 1
               nCol_IndoBlocage	est un entier	= 2
               
               oTache est un ClTache dynamique
               sCodeTache est une chaîne
               
               
               sFichier = Dupplication_Fichier_Avant_Import("L:\Service informatique\Service Développement\Test projet Scrum\utilisateurs Scrum.xlsx")
               
               SI sFichier <> "" ALORS
               	
               	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               	
               	SI ErreurDétectée = Faux ALORS
               		
               		SI xlsFeuilleEnCours(IdFichierXLS, 5) ALORS	
               			
               			Xlsnbligne_ = xlsNbLigne(IdFichierXLS,Vrai)
               			
               			POUR i = 2 _À_ Xlsnbligne_
               				
               				
               				sCodeTache  = xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               				SI sCodeTache <> "" ALORS
               					HLitRecherche(Scr_Tache,CodeTache,sCodeTache,hIdentique+hLimiteParcours)
               					SI HTrouve(Scr_Tache) ALORS
               						oTache <- ClTache.GetObj(Scr_Tache.IDScr_Tache)
               						oTache.p_bTache_tech = Vrai
               						oTache.Enregistre()
               					fin
               				fin
               			fin
               		SINON
               			Erreur(ErreurInfo(errComplet))
               		FIN
               		
               		
               		SI xlsFeuilleEnCours(IdFichierXLS, 6) ALORS	
               			
               			Xlsnbligne_ = xlsNbLigne(IdFichierXLS,Vrai)
               			
               			POUR i = 2 _À_ Xlsnbligne_
               				
               				
               				sCodeTache  = xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               				SI sCodeTache <> "" ALORS
               					HLitRecherche(Scr_Tache,CodeTache,sCodeTache,hIdentique+hLimiteParcours)
               					SI HTrouve(Scr_Tache) ALORS
               						oTache <- ClTache.GetObj(Scr_Tache.IDScr_Tache)
               						oTache.p_nStatut		= ClTache.cstStatut_Suspendu
               						oTache.p_sCMTR_Blocage	= xlsDonnée(IdFichierXLS,i,nCol_IndoBlocage)
               						oTache.Enregistre()
               					fin
               				fin
               			fin
               		SINON
               			Erreur(ErreurInfo(errComplet))
               		FIN	
               	SINON
               		Erreur(ErreurInfo(errComplet))
               	FIN
               
               	xlsFerme(IdFichierXLS)	
               	
               FIN
               
               ClSprint.Calcul_Velocite_Moyenne()
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Importer_Cerebro
          identifier : 0x2f5d37b627b4f9de
          internal_properties : BgAAAAYAAAC/H77zPCxrSxXCKg+Xf1oiQO2XXJlmU4JxvXKpYya6n7NSrly3iuwgM6r6volK1nOVQOXfcjSw7X/ewtbmaCXc2Gy1jHGMVNIUpeDjR01vtRoR+KCA4MyEP73Q9fyxZo917RoD0LBcRfd31sVJydvgXTkfrShrZc8CSGDcUGFdXyRhTKM01Me9SKjb2E8pSxtcYvregTchPWQ5VfDdPVJcpFChI8GW7aDpj/TB/TxSb8RpVyov5SNwAtlAaDoBEU2HUi3d/n1MyUeABHJ8BWnZYpzye6heZ59n+JtoANZRKrxji49ToMc6DrIVCVhjYtEALL1+Wq6A7giM8/W9l/BiQsX2098IVmIAOSw5T1jVro46TZTn8Nf1gvR+Bk1e8XZ+pOFnTNu2ZO+r52vAeEQGIhJvt0nGUXsW4wToh2cPoFn18HNP03gisFzERTpOJuVRCasknPifgBxFpy4dmoRYynwlUM+alJfEDSpV21qUzMkuS6JTCEj9u4L68ojhWAZICc1Aft2/MFQUvBE/28EfCbQJLl6Ra8iuviGrT/My/f/TiJuPsVY0CHp7XAN2iDNCi1wHMAD+AHkb4FLK29VdoVwUBLIoYH0yJsg8aWq573ulaFm7b5A3tDmAiiUCOodjoybX40xcR7d9IMWRoVD8ZJ9uq532CGt0SMlN/j12XahVpv2ZGSHLnI1iOls6JQBQTjtbNYe/WsappE0JkwYERok+aTcaxPixRpjoHA==
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               IdFichierXLS est un xlsDocument
               Xlsnbligne_ est un entier
               i est un entier
               sFichier est une chaîne
               
               nPremiereligne est un entier = 2
               
               //Declatration VAriables
               nIdUS est un entier
               //nIDProjet est un entier
               stTache est une STR_Tache
               stUS est une STR_UserStorie
               
               nCol_codeUS est un entier = 1
               nCol_codeTache est un entier = 1
               nCol_numSprint est un entier = 7
               nCol_Poids est un entier = 8
               nCol_fin est un entier = 9
               nCol_Role est un entier = 2
               nCol_nom est un entier = 3
               nCol_Besoin est un entier = 3
               nCol_AfinDe est un entier = 4
               nCol_commentaire est un entier = 5
               nCol_numSprintCrea		est un entier	= 10
               nCol_Epic				est un entier	= 11
               nCol_commentaire_Test	est un entier	= 12
               
               
               oPrj est un ClProjet <- oProjetDeNom("Cerebro")
               nNumeroOrdre est une entier = 0
               
               // Ouvre le sélecteur de fichiers
               sFichier = Dupplication_Fichier_Avant_Import("\\prod-vm-file01\UnionMat\Service informatique\Procedures\Dev_logiciel\Cerebro\User stories B2X.xlsx")
               
               SI sFichier <> "" ALORS
               	
               	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               	
               	SI ErreurDétectée = Faux ALORS 
               		
               		SI xlsFeuilleEnCours(IdFichierXLS, 1) ALORS	
               			
               			Xlsnbligne_ =xlsNbLigne(IdFichierXLS,Vrai)
               			
               			POUR i = nPremiereligne _À_ Xlsnbligne_
               				
               				//ON ne prend que les lignes qui ont un code et une description.
               				SI xlsDonnée(IdFichierXLS,i,nCol_codeUS) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_Besoin) <> "" ALORS
               					
               					//Si le champ role n'est pas vide => c'est une US
               					Si xlsDonnée(IdFichierXLS,i,nCol_Role) <> "" alors
               
               						VariableRAZ(stUS)
               						stUS.sCodeUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_codeUS)
               						stUS.sEnTantQue			= xlsDonnée(IdFichierXLS,i,nCol_Role)
               						stUS.sBesoinUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_Besoin)
               						stUS.sAfindeUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_AfinDe)
               						stUS.sCmtrGeneral		= xlsDonnée(IdFichierXLS,i,nCol_commentaire)
               						stUS.sCmtrTest			= xlsDonnée(IdFichierXLS,i,nCol_commentaire_Test)
               						stUS.nIDProjet			= oPrj.Get_IdUnique()
               						stUS.nIDResponsable		= oPrj.p_oUsr_ChefProjet.Get_IdUnique()
               						
               						Si xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T" alors
               							stUS.bAtester = vrai
               							stUS.eEtatUserStorie = ClUserStory.ECompteNbUS.En_test_fonctionnel
               						FIN
               						
               						//Ajout de l'epic, si présent
               						stUS.nIdEpic = nCreeEpicSiBesoin(oPrj, xlsDonnée(IdFichierXLS,i,nCol_Epic))
               						
               						nIdUS = User_Story_ajout(stUS)
               						
               						nNumeroOrdre = 0
               						
               						//si stUS.sCodeUserStorie = "B2X017" alors stop
               						
               					sinon //sinon c'est une tache
               						
               						si PAS (xlsDonnée(IdFichierXLS,i,nCol_nom) = SansEspace("") ET xlsDonnée(IdFichierXLS,i,nCol_numSprint) = SansEspace("")) alors
               							VariableRAZ(stTache)
               							stTache.sCodeTache				= xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               							stTache.nNumSprintCreation		= xlsDonnée(IdFichierXLS,i,nCol_numSprintCrea)
               							stTache.nNumSprintRealisation	= xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               							stTache.nNumSprintPrevision		= stTache.nNumSprintRealisation
               							//stTache.nNumSprintDemarage = stTache.nNumSprintCreation
               							stTache.nIDUserStorie			= nIdUS
               							stTache.sDescription			= xlsDonnée(IdFichierXLS,i,nCol_nom)
               							stTache.sCommentaire			= xlsDonnée(IdFichierXLS,i,nCol_commentaire)
               							
               							//affectation du num d'ordre
               							nNumeroOrdre++
               							stTache.nOrdre = nNumeroOrdre
               							
               							//Si le poids n'est pas indiqué --> null
               							Si xlsDonnée(IdFichierXLS,i,nCol_Poids) <> "" alors
               								stTache.nPoids				= xlsDonnée(IdFichierXLS,i,nCol_Poids)
               								stTache.nPoids_Prevision	= stTache.nPoids
               							sinon
               								stTache.nPoids				= null
               								stTache.nPoids_Prevision	= null
               							fin
               							
               							Selon Vrai
               								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "x"
               									stTache.bDemarree			= vrai
               									stTache.bAnnulee			= faux
               									stTache.bTermine			= vrai
               									stTache.nNumSprintFin		= stTache.nNumSprintCreation 
               									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T"
               									stTache.bDemarree			= vrai
               									stTache.bAnnulee			= faux
               									stTache.bTermine			= vrai 
               									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "C"
               									stTache.bDemarree			= Vrai
               									stTache.bAnnulee			= Faux	
               									stTache.nNumSprintFin		= 0
               									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A"
               									stTache.bAnnulee			= vrai
               									stTache.bDemarree			= faux
               									stTache.nNumSprintFin		= 0
               									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               								AUTRE CAS
               									stTache.bAnnulee			= Faux
               									stTache.bDemarree			= Faux
               									stTache.nNumSprintFin		= 0
               									stTache.nNumSprintDemarage	= 0
               							FIN
               							Taches_Ajout(stTache)
               						fin
               					FIN
               				fin
               			FIN
               			
               		SINON
               			Erreur(ErreurInfo(errComplet))
               		FIN
               	sinon
               		erreur(erreurinfo(errComplet))
               	FIN
               	
               	xlsferme(IdFichierXLS)
               	
               FIN
               
               Import_Des_Criteres_Acceptation(oPrj.Get_IdUnique(), sFichier)
               Import_Process(oPrj.Get_IdUnique(), sFichier)
               
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Import_Docs
          identifier : 0x2faf06d41432e512
          internal_properties : BgAAAAYAAACCOTF9o66dxTsILdgi2/oDG+6EmmHFv20N0NXhuR/HFxoT6iawowbfizkKaPyd7lLMQ/zi/Pou20VjyHuCz6pNogXfNyaKdvEoqiU7JRCvYT3OAoRe8L8iTeCV7asBvrvekS3wmM2KZc9OfWfQvHEIL1IMQLV5LElqKYOyosax4rcYc9b2nbwG88Pgbau/jFR1q7ezyVwj/NtmfdQzRtu1KqxLE3himlWUJLF5dUNheI6+XsfiFMhbPUKeCXftMyZU/GlumujJKdH/ThYvpeKOYfJqT4Sfq7EE0IvsPThd2B0KFbQLP8zHGv6Op7YEPn9FzotrFpLPjk9pZ6MOTokGfctzPAASK/70qw555igYkEoSuIvUcJWelGN2FEa3Vyli7JtYk74GD6k6n+2vXQL1Vlq9qoalo4467CSWDOxlSUOLxDZCDpZ3Nv0U3+XfSDbxdR5E0tW+VkCbzsN+gh8IHFI50u8+fG4QnpY804C1naOe+RzPnaSWotiiVlc7YKwbgqoDhhlY6l2hG2ApgzdyxRZiIfRhAq9xernCdchgrNt4CpI/UnBbpvNk7Xvz+nwMtv40qYD11Uf+92bVKfmx4kn4vu/4qIhzouCDitOGQv2ClrPVWJSm5j/5Yu5zIw9kQezaPPlh+QdmQNseQ7iHQ5tDmVna459DUmR8yCu9kdCQ8QlH6iHjxWOXLDZDPjkE8pnyTVSHg/L6xI4nLQzII7pCO66p8qR9ycty8ZY=
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1-
               //
               RechDoc("L:\Service informatique\Procedures\Dev_logiciel")
               
               procédure interne RechDoc(sChemin_P est une chaîne)
               	
               	
               	sFic est une chaîne
               	pour toute chaine sFic de fListeFichier(ComplèteRep(sChemin_P) + "*.*",frNonRécursif) separee par RC
               		rechfic(sFic)
               	FIN
               	sRep est une chaîne
               	pour toute chaine sRep de fListeRépertoire(ComplèteRep(sChemin_P),frNonRécursif ) separee par RC
               		si pas sRep ~= "archive" alors
               			RechDoc(sRep)
               		FIN
               	FIN
               fin
               
               
               PROCÉDURE INTERNE RechFic (sChemin_P est une chaîne)
               
               sCode est une chaîne
               
               si Position(sChemin_P, "-") = 0 alors retour
               
               sCode = fExtraitChemin(sChemin_P,fFichier)
               sCode = ExtraitChaîne(sCode, 1, "-")
               sCode = SansEspace(sCode)
               si taille(sCode) <= 7 alors
               
               	HLitRecherche(Scr_UserStory,CodeUserStory,sCode,hIdentique+hLimiteParcours)
               	SI HTrouve(Scr_UserStory) ALORS
               		AddDoc(sChemin_P, Scr_UserStory.IDScr_UserStory)
               	sinon
               		HLitRecherche(Scr_Tache,CodeTache,sCode,hIdentique+hLimiteParcours)
               		SI HTrouve(Scr_Tache) ALORS
               			AddDoc(sChemin_P, Scr_Tache.IDScr_UserStory)
               		sinon
               			trace(sChemin_P)
               		FIN
               	FIN
               FIN
               
               
               FIN
               
               procédure interne AddDoc(sChemin_P est une chaîne, nIdUS_P est un entier)
               
               	hraz(Scr_UserStory_Doc)
               	Scr_UserStory_Doc.Chemin = sChemin_P
               	Scr_UserStory_Doc.IDScr_UserStory = nIdUS_P
               	HAjoute(Scr_UserStory_Doc)
               fin
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Importer_nv_planning_trp
          identifier : 0x2f7cd81a10cd9658
          internal_properties : BgAAAAYAAACXyXX+Y6fpkO4tTp8wi6SYTKnPqi5/y4L7eGTfXpYMCTNp/x8enDAEhLt3htHT/cvjcM7u1TW+spTf4IXkC39oehzwmz2Gk/PNqTK6LrONZ7xNl96VXOUuw/xKPxcmrazHvs7kv9iaRCIR21wpDwVmfazg70r9jWQH5VtZIgCLoi15/nq6WFmxPgMpsU5Qe1cHw41P7fOvHCvvW3/AV38TXGeVYIHJqzI7n7pTsxhE88gV926c5FdGVBAFDX9axL2zlXG1v3hDx/Aty7OtSt0XrwvBAxykxvjBa4CvCsIa00DJIfamfcYg7uItGMUOkes86R6yLzU2b2w9e9XQ1thqmsEqbR5lsy5XuKw7WbH0Odoc6swGnxU1fXzWfpxP2ax0l74qvhpmuhFz71HPdQyYrAXgVotXebvm5cYI/uhDEGlgwTSXguwgclqSdRMFRuVRpISxHHOJRAA9B8COLZpI0if6Aymh+IcEsY5L1GnIoPVn+u1bQ/xZF+iAGqvAmsDC0khtisIlAMRAAB9GLkmNl5WoB1TSZWYoeOtjdafl0ioXMusSP3+n79tk+QMwqVgpN64lOd5hsf5Cx2Xmk8wW8OBCfm/ar3BhrZ/fLdT6guR91vkcrfXh0lnQpGJv9jm9doOai6vJkjuxNHNnmwcCc1od2OfGm6spngJ6cK+5JC5qnfh1GafyczHKCSjV+V5a4hGrXAMr/Djd0gvIRP0WOnK6kblK8f2VuR5j1zg84Rvgb8MZswQ=
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               IdFichierXLS			est un xlsDocument
               i						est un entier
               sFichier				est une chaîne
               
               nPremiereligne			est un entier	= 2
               
               //Declatration VAriables
               nIdUS					est un entier
               stTache					est une STR_Tache
               stUS					est une STR_UserStorie
               
               nCol_codeUS				est un entier	= 1
               nCol_codeTache			est un entier	= 1
               nCol_numSprint			est un entier	= 7
               nCol_Poids				est un entier	= 8
               nCol_fin				est un entier	= 9
               nCol_Role				est un entier	= 2
               nCol_nom				est un entier	= 3
               nCol_Besoin				est un entier	= 3
               nCol_AfinDe				est un entier	= 4
               nCol_commentaire		est un entier	= 5
               nCol_numSprintCrea		est un entier	= 10
               nCol_Epic				est un entier	= 11
               nCol_commentaire_Test	est un entier	= 12
               
               
               oPrj est un ClProjet <- oProjetDeNom("Planning transport")
               
               nNumeroOrdre est une entier = 0
               // Ouvre le sélecteur de fichiers
               sFichier = Dupplication_Fichier_Avant_Import("\\prod-vm-file01\UnionMat\Service informatique\Procedures\Dev_logiciel\Nouveau planning\User stories planning transport V2.xlsx")
               
               SI sFichier <> "" ALORS
               	
               	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               	
               	SI ErreurDétectée = Faux ALORS 
               		
               		SI xlsFeuilleEnCours(IdFichierXLS, 1) ALORS	
               			
               			
               			POUR i = nPremiereligne _À_ xlsNbLigne(IdFichierXLS,Vrai)
               				
               				//ON ne prend que les lignes qui ont un code et une description.
               				SI xlsDonnée(IdFichierXLS,i,nCol_codeUS) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_Besoin) <> "" ALORS
               					
               					//Si le champ role n'est pas vide => c'est une US
               					Si xlsDonnée(IdFichierXLS,i,nCol_Role) <> "" alors
               						VariableRAZ(stUS)
               						stUS.sCodeUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_codeUS)
               						stUS.sEnTantQue			= xlsDonnée(IdFichierXLS,i,nCol_Role)
               						stUS.sBesoinUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_Besoin)
               						stUS.sAfindeUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_AfinDe)
               						stUS.sCmtrGeneral		= xlsDonnée(IdFichierXLS,i,nCol_commentaire)
               						stUS.sCmtrTest			= xlsDonnée(IdFichierXLS,i,nCol_commentaire_Test)
               						stUS.nIDProjet			= oPrj.Get_IdUnique()
               						stUS.nIDResponsable		= oPrj.p_oUsr_ChefProjet.Get_IdUnique()
               						
               						Si xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T" alors
               							stUS.bAtester = vrai
               							stUS.eEtatUserStorie = ClUserStory.ECompteNbUS.En_test_fonctionnel
               						FIN
               						
               						//Ajout de l'epic, si présent
               						stUS.nIdEpic = nCreeEpicSiBesoin(oPrj, xlsDonnée(IdFichierXLS,i,nCol_Epic))
               
               						nIdUS = User_Story_ajout(stUS)
               						
               						nNumeroOrdre = 0
               						
               					sinon //sinon c'est une tache
               						
               						si PAS (xlsDonnée(IdFichierXLS,i,nCol_nom) = SansEspace("") ET xlsDonnée(IdFichierXLS,i,nCol_numSprint) = SansEspace("")) alors
               							VariableRAZ(stTache)
               							stTache.sCodeTache				= xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               							stTache.nNumSprintCreation		= xlsDonnée(IdFichierXLS,i,nCol_numSprintCrea)
               							stTache.nNumSprintRealisation	= xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               							stTache.nNumSprintPrevision		= stTache.nNumSprintRealisation
               							//stTache.nNumSprintDemarage = stTache.nNumSprintCreation
               							stTache.nIDUserStorie			= nIdUS
               							stTache.sDescription			= xlsDonnée(IdFichierXLS,i,nCol_nom)
               							stTache.sCommentaire			= xlsDonnée(IdFichierXLS,i,nCol_commentaire)
               							
               							//affectation du num d'ordre
               							nNumeroOrdre++
               							stTache.nOrdre					= nNumeroOrdre
               							
               							
               							//Si le poids n'est pas indiqué --> null
               							Si xlsDonnée(IdFichierXLS,i,nCol_Poids) <> "" alors
               								stTache.nPoids				= xlsDonnée(IdFichierXLS,i,nCol_Poids)
               								stTache.nPoids_Prevision	= stTache.nPoids
               							sinon
               								stTache.nPoids				= null
               								stTache.nPoids_Prevision	= null
               							fin
               							
               							Selon Vrai
               								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "x"
               									stTache.bDemarree			= vrai
               									stTache.bAnnulee			= faux
               									stTache.bTermine			= vrai
               									stTache.nNumSprintFin		= stTache.nNumSprintCreation 
               									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T"
               									stTache.bDemarree			= vrai
               									stTache.bAnnulee			= faux
               									stTache.bTermine			= vrai 
               									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "C"
               									stTache.bDemarree			= Vrai
               									stTache.bAnnulee			= Faux	
               									stTache.nNumSprintFin		= 0
               									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A"
               									stTache.bAnnulee			= vrai
               									stTache.bDemarree			= faux
               									stTache.nNumSprintFin		= 0
               									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               								AUTRE CAS
               									stTache.bAnnulee			= Faux
               									stTache.bDemarree			= Faux
               									stTache.nNumSprintFin		= 0
               									stTache.nNumSprintDemarage	= 0
               							FIN
               							Taches_Ajout(stTache)
               						fin
               					FIN
               				fin
               			FIN
               			
               		SINON
               			Erreur(ErreurInfo(errComplet))
               		FIN
               	sinon
               		erreur(erreurinfo(errComplet))
               	FIN
               	
               	xlsferme(IdFichierXLS)
               	
               FIN
               
               
               Import_Des_Criteres_Acceptation(oPrj.Get_IdUnique(), sFichier)
               Import_Process(oPrj.Get_IdUnique(), sFichier)
               
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Import_messages
          identifier : 0x2fa85fe200a2bd3a
          internal_properties : BgAAAAYAAAA2DudeXyWqcpA6H2WMW6WqhBduQ6w3Dgi28SqfjRP8tio0XhWnYFDnnX29u0/1WOC0eMt8xFikGJnNgZGJT3WvFL1VvSEqj/1itQVgR6qLmTHCwdXvROmxkjOYbZfE6rxSBB7YB01khHpd0/5IXAhFDpEHNKm+kNZF5/X9hb/Wp32txE3MOt1i3MAhjf8HJQAVVCo7SjGsCZq8RWmZKLrBmRmNXn1uHKtGhexS9U0nU7eLztc1XZ0X7vqFpShWWToIouV+1s0KdrlNJWc6/isk7cxqkuK6E8SN5eGiOB2KlmHW7G8pPEmReiyZoHx850UvDanl3UzhgR0iv6iR64Tgo6eYBSQYdyyzq2BiOUIQRw8E3g+XutloFpXwSknHCyFZTl5/RBKbbChYcxnmufa1sWDS5wuJ6u2xJHrAP5phGaKPzyGJEr1eo+l0Hzj7/O5mS23PJy+lgbt/nlslWMvgC/zqvyayF0m5QOYMdpqJTeTWmEs2ITVTD/BEpKg7yADSQgc0qVUtv1BxlX6gqYGUgPK/6vGpCcas1jvACnJOcnTS+4kO2ln0bYl4CaozrmR1rlPpLoiY8DbU1+buU3n1gb1PcVLkryPO2gbtGZcKqmioR3B2drPJ36fN9ncnb18/UxWjQWesGJ8pm+iwgdfJG6Ifzz6jnUVj0w3F/XcjJ62Izmp4F1dR8asmKq3vAM4OqSU9KTNiNs3bCiD4rWX17V3Azn8J1x62cv1FDrKMAQsf
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               IdFichierXLS est un xlsDocument
               Xlsnbligne_ est un entier
               i est un entier
               sFichier est une chaîne
               
               
               nCol_NomUsr		est un entier	= 1
               nCol_codeUS		est un entier	= 2
               nCol_codeTache	est un entier	= 3
               nCol_Cmtr		est un entier	= 4
               nCol_Visible	est un entier	= 5
               nCol_UsrReponse	est un entier	= 6
               nCol_Reponse	est un entier	= 7
               
               oMsg est un ClMessage dynamique
               oMsgRep est un ClMessage dynamique
               
               sCodeTache est une chaîne
               sCodeUS est une chaîne
               sNomUsr est une chaîne
               sNomUsrRep est une chaîne
               bTrouve est un booléen
               
               
               sFichier = Dupplication_Fichier_Avant_Import("L:\Service informatique\Service Développement\Test projet Scrum\utilisateurs Scrum.xlsx")
               
               SI sFichier <> "" ALORS
               	
               	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               	
               	SI ErreurDétectée = Faux ALORS
               		
               		SI xlsFeuilleEnCours(IdFichierXLS, 4) ALORS	
               			
               			Xlsnbligne_ =xlsNbLigne(IdFichierXLS,Vrai)
               			
               			POUR i = 2 _À_ Xlsnbligne_
               				
               				sNomUsr = xlsDonnée(IdFichierXLS,i,nCol_NomUsr)
               				si sNomUsr <> "" alors
               					oMsg = allouer un ClMessage
               					
               					bTrouve = Faux
               					
               					HLitRecherche(Scr_Usr,nom, sNomUsr,hLimiteParcours+hIdentique)
               					si pas htrouve(Scr_Usr) ALORS
               						ExceptionDéclenche(1, ChaîneConstruit("Impossible d'identifier l'utilisateur %1", sNomUsr))
               					FIN
               					
               					
               					oMsg.p_oUsr = ClUsr.GetObj(Scr_Usr.IDScr_Usr)
               					
               					
               					sCodeTache  = xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               					si sCodeTache <> "" ALORS
               						HLitRecherche(Scr_Tache,CodeTache,sCodeTache,hIdentique+hLimiteParcours)
               						si htrouve(Scr_Tache) ALORS
               							oMsg.p_oTache = ClTache.GetObj(scr_Tache.IDScr_Tache)
               							bTrouve = vrai
               						FIN
               					FIN
               					
               					sCodeUS = xlsDonnée(IdFichierXLS,i,nCol_codeUS)
               					SI sCodeUS <> "" ALORS
               						HLitRecherche(Scr_UserStory,CodeUserStory,sCodeUS,hIdentique+hLimiteParcours)
               						SI HTrouve(Scr_UserStory) ALORS
               							oMsg.p_oUserStory = ClUserStory.GetObj(Scr_UserStory.IDScr_UserStory)
               							bTrouve = vrai
               						FIN
               					FIN
               					
               					
               					si bTrouve alors
               						oMsg.p_sCMTR = xlsDonnée(IdFichierXLS,i,nCol_Cmtr)
               						
               						si xlsDonnée(IdFichierXLS,i,nCol_Visible) ~= "x" ALORS
               							oMsg.p_bTop_Visible = vrai
               						FIN
               						
               						oMsg.enregistre()
               						
               						
               						////////////////////////////////////
               						
               						sNomUsrRep = xlsDonnée(IdFichierXLS,i,nCol_UsrReponse)
               						si sNomUsrRep <> "" ALORS
               							
               							oMsgRep = allouer un ClMessage
               							
               							oMsgRep.m_oMsgparent <- oMsg
               							
               							HLitRecherche(Scr_Usr,Nom, sNomUsrRep,hLimiteParcours+hIdentique)
               							SI PAS HTrouve(Scr_Usr) ALORS
               								ExceptionDéclenche(1, ChaîneConstruit("Impossible d'identifier l'utilisateur %1", sNomUsrRep))
               							FIN
               							
               							oMsgRep.p_oUsr = ClUsr.GetObj(Scr_Usr.IDScr_Usr)
               							oMsgRep.p_sCMTR = xlsDonnée(IdFichierXLS,i,nCol_Reponse)
               							oMsgRep.Enregistre()
               							
               						FIN
               					fin
               				fin
               			fin
               		SINON
               			Erreur(ErreurInfo(errComplet))
               		FIN	
               	SINON
               		Erreur(ErreurInfo(errComplet))
               	FIN
               
               	xlsFerme(IdFichierXLS)	
               	
               FIN
               
               ClSprint.Calcul_Velocite_Moyenne()
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Taches_MAJ_Str_et_Adaptation
          identifier : 0x2cd53f2d030b21e8
          internal_properties : BgAAAAYAAADqltun62DrtmnCdjJUQ63tB4t+P+uQwow9YfLMaDE1u2TTYzItGVaWpF7CuQI9JbVSKp9eszTxhgKAyBERRMv42bnpjseblXdQzxR0CO3TfCrOeoEmn47Ua8Vga3sEl3PUE6HYflcT59XthEV1JH/t9FiPMqrsyxbpw+Hod9tvKs2hQC4si+MPhtwAPSN5PjKSB8y9URAtNRJqQKEwubGF+lVgCF01vXwICYBLnsZQ4cBxNqa9lxLn/F4HIa4ddjN+Zgv6xMn+c+MnUPd+D886UfrLxCM8BR9J5acEQOq9yxtpzOg1EX7T0V4QMFSCsxTMZ1yzGXZ/n/0v9Iyspe30MKUOTnuusHBqN55Ld5R15G1j1PyZ+sLuAnacSm53z92GrDtA9CgS6Ij4FJAlezryEzoaynnj9XnaT4/weljvxOY7DbEAScLWlbI6iCZbjB1yv9VJkYaxbhvaXESGFrextEY+Xgm7VBv1Jx0XqXvrO/0sZNMBpjd0SkkN65FeAzZHghT2lP7Z5clKxKjWb4Dk1BQIngszVdrbZGjGe3kA35yF0HpTd9jQ6Kl1a2XlMD/PxIVRrdkbwqAS4615Z7v2OLg4d2WJHMNHc7l570fLv/oq/1WXydaa1W1hfdRNJYCxsdF35iy6XwQLke3H17xZtTTO2IuxaOAG6RQeAVNW9Asj96jqSHsE9t9l8xVPQC3nXmYo7MRh6HzkSAEzmiQxsVQ2NjbT/2fDBLgUgGqfhPkJOl7ZhsLNqk+PsTmL42Q=
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               stTacheMaj est une STR_Tache
               stTacheAdaptation est une STR_Tache
               
               
               
               nIdProjet est un entier = 3
               nIdUSMaj est un entier
               nIDUSAdaptation est un entier
               
               
               stUSMaj est un STR_UserStorie
               stUSAdaptation est un STR_UserStorie
               
               stUSMaj.sCodeUserStorie			= "SM45"
               stUSAdaptation.sCodeUserStorie	= "SA118"
               
               stUSMaj.sEnTantQue				= "Historique"
               stUSAdaptation.sEnTantQue		= "Historique"
               
               stUSMaj.sBesoinUserStorie		= "Maj structures de données"
               stUSAdaptation.sBesoinUserStorie	= "Adaptations des taches exécutées dans l'assistant" 
               
               stUSMaj.nIDProjet				= nIdProjet
               stUSAdaptation.nIDProjet		= nIdProjet
               
               stUSMaj.nIDResponsable			= 1
               stUSAdaptation.nIDResponsable	= 1
               
               nIdUSMaj						= User_Story_ajout(stUSMaj)
               nIDUSAdaptation					= User_Story_ajout(stUSAdaptation)
               
               POUR i = 1 _a_ 12
               	 stTacheMaj.sCodeTache = "SM45" + "-" + NumériqueVersChaîne(i)
               	 stTacheMaj.sDescription = "Maj structures de données"
               	 stTacheMaj.nIDUserStorie = nIdUSMaj
               	 stTacheMaj.nPoids = 5	
                	 stTacheMaj.nPoids_Prevision = 5	
                	 stTacheMaj.bDemarree = vrai
                	 stTacheMaj.bTermine = vrai
                	
               	 stTacheAdaptation.sCodeTache = "SA118" + "-" + NumériqueVersChaîne(i)
               	 stTacheAdaptation.sDescription ="Adaptations des taches exécutées dans l'assistant"
               	 stTacheAdaptation.nIDUserStorie = nIDUSAdaptation	
               	 stTacheAdaptation.nPoids = 5
               	 stTacheAdaptation.nPoids_Prevision = 5
               	 stTacheAdaptation.bDemarree = vrai
               	 stTacheAdaptation.bTermine = vrai
               	 
               	SELON i
               		cas 1 
               			stTacheMaj.nNumSprintCreation = 1
               			stTacheMaj.nNumSprintDemarage = 1
               			stTacheMaj.nNumSprintPrevision = 1
               			stTacheMaj.nNumSprintRealisation = 1
               			stTacheMaj.nNumSprintFin = 1
               			
               			stTacheAdaptation.nNumSprintCreation = 4
               			stTacheAdaptation.nNumSprintDemarage = 4
               			stTacheAdaptation.nNumSprintPrevision = 4
               			stTacheAdaptation.nNumSprintRealisation = 4
               			stTacheAdaptation.nNumSprintFin = 4
               			
               		cas 2
               			stTacheMaj.nNumSprintCreation = 1
               			stTacheMaj.nNumSprintDemarage = 1
               			stTacheMaj.nNumSprintPrevision = 1
               			stTacheMaj.nNumSprintRealisation = 1
               			stTacheMaj.nNumSprintFin = 1
               			
               			stTacheAdaptation.nNumSprintCreation = 5
               			stTacheAdaptation.nNumSprintDemarage = 5
               			stTacheAdaptation.nNumSprintPrevision = 5
               			stTacheAdaptation.nNumSprintRealisation = 5
               			stTacheAdaptation.nNumSprintFin = 5
               		
               		cas 3
               			stTacheMaj.nNumSprintCreation = 2
               			stTacheMaj.nNumSprintDemarage = 2
               			stTacheMaj.nNumSprintPrevision = 2
               			stTacheMaj.nNumSprintRealisation = 2
               			stTacheMaj.nNumSprintFin = 2
               			
               			stTacheAdaptation.nNumSprintCreation = 5
               			stTacheAdaptation.nNumSprintDemarage = 5
               			stTacheAdaptation.nNumSprintPrevision = 5
               			stTacheAdaptation.nNumSprintRealisation = 5
               			stTacheAdaptation.nNumSprintFin = 5
               		cas 4
               			stTacheMaj.nNumSprintCreation = 2
               			stTacheMaj.nNumSprintDemarage = 2
               			stTacheMaj.nNumSprintPrevision = 2
               			stTacheMaj.nNumSprintRealisation = 2
               			stTacheMaj.nNumSprintFin = 2
               			
               			stTacheAdaptation.nNumSprintCreation = 5
               			stTacheAdaptation.nNumSprintDemarage = 5
               			stTacheAdaptation.nNumSprintPrevision = 5
               			stTacheAdaptation.nNumSprintRealisation = 5
               			stTacheAdaptation.nNumSprintFin = 5
               		cas 5
               			stTacheMaj.nNumSprintCreation = 3
               			stTacheMaj.nNumSprintDemarage = 3
               			stTacheMaj.nNumSprintPrevision = 3
               			stTacheMaj.nNumSprintRealisation = 3
               			stTacheMaj.nNumSprintFin = 3
               			
               			stTacheAdaptation.nNumSprintCreation = 5
               			stTacheAdaptation.nNumSprintDemarage = 5
               			stTacheAdaptation.nNumSprintPrevision = 5
               			stTacheAdaptation.nNumSprintRealisation = 5
               			stTacheAdaptation.nNumSprintFin = 5
               			
               		cas 6
               			stTacheMaj.nNumSprintCreation = 4
               			stTacheMaj.nNumSprintDemarage = 4
               			stTacheMaj.nNumSprintPrevision = 4
               			stTacheMaj.nNumSprintRealisation = 4
               			stTacheMaj.nNumSprintFin = 4
               			
               			stTacheAdaptation.nNumSprintCreation = 6
               			stTacheAdaptation.nNumSprintDemarage = 6
               			stTacheAdaptation.nNumSprintPrevision = 6
               			stTacheAdaptation.nNumSprintRealisation = 6
               			stTacheAdaptation.nNumSprintFin = 6
               			
               		cas 7
               			stTacheMaj.nNumSprintCreation = 5
               			stTacheMaj.nNumSprintDemarage = 5
               			stTacheMaj.nNumSprintPrevision = 5
               			stTacheMaj.nNumSprintRealisation = 5
               			stTacheMaj.nNumSprintFin = 5
               			
               			stTacheAdaptation.nNumSprintCreation = 6
               			stTacheAdaptation.nNumSprintDemarage = 6
               			stTacheAdaptation.nNumSprintPrevision = 6
               			stTacheAdaptation.nNumSprintRealisation = 6
               			stTacheAdaptation.nNumSprintFin = 6
               			
               		cas 8
               			stTacheMaj.nNumSprintCreation = 5
               			stTacheMaj.nNumSprintDemarage = 5
               			stTacheMaj.nNumSprintPrevision = 5
               			stTacheMaj.nNumSprintRealisation = 5
               			stTacheMaj.nNumSprintFin = 5
               			
               			stTacheAdaptation.nNumSprintCreation = 7
               			stTacheAdaptation.nNumSprintDemarage = 7
               			stTacheAdaptation.nNumSprintPrevision = 7
               			stTacheAdaptation.nNumSprintRealisation = 7
               			stTacheAdaptation.nNumSprintFin = 7
               			
               		cas 9
               			stTacheMaj.nNumSprintCreation = 5
               			stTacheMaj.nNumSprintDemarage = 5
               			stTacheMaj.nNumSprintPrevision = 5
               			stTacheMaj.nNumSprintRealisation = 5
               			stTacheMaj.nNumSprintFin = 5
               			
               			stTacheAdaptation.nNumSprintCreation = 7
               			stTacheAdaptation.nNumSprintDemarage = 7
               			stTacheAdaptation.nNumSprintPrevision = 7
               			stTacheAdaptation.nNumSprintRealisation = 7
               			stTacheAdaptation.nNumSprintFin = 7
               			
               		cas 10
               			stTacheMaj.nNumSprintCreation = 6
               			stTacheMaj.nNumSprintDemarage = 6
               			stTacheMaj.nNumSprintPrevision = 6
               			stTacheMaj.nNumSprintRealisation = 6
               			stTacheMaj.nNumSprintFin = 6
               			
               			stTacheAdaptation.nNumSprintCreation = 7
               			stTacheAdaptation.nNumSprintDemarage = 7
               			stTacheAdaptation.nNumSprintPrevision = 7
               			stTacheAdaptation.nNumSprintRealisation = 7
               			stTacheAdaptation.nNumSprintFin = 7
               			
               		cas 11
               			stTacheMaj.nNumSprintCreation = 6
               			stTacheMaj.nNumSprintDemarage = 6
               			stTacheMaj.nNumSprintPrevision = 6
               			stTacheMaj.nNumSprintRealisation = 6
               			stTacheMaj.nNumSprintFin = 6
               			
               			stTacheAdaptation.nNumSprintCreation = 8
               			stTacheAdaptation.nNumSprintDemarage = 8
               			stTacheAdaptation.nNumSprintPrevision = 8
               			stTacheAdaptation.nNumSprintRealisation = 8
               			stTacheAdaptation.nNumSprintFin = 8
               			
               		cas 12
               			stTacheMaj.nNumSprintCreation = 8
               			stTacheMaj.nNumSprintDemarage = 8
               			stTacheMaj.nNumSprintPrevision = 8
               			stTacheMaj.nNumSprintRealisation = 8
               			stTacheMaj.nNumSprintFin = 8
               			
               			stTacheAdaptation.nNumSprintCreation = 8
               			stTacheAdaptation.nNumSprintDemarage = 8
               			stTacheAdaptation.nNumSprintPrevision = 8
               			stTacheAdaptation.nNumSprintRealisation = 8
               			stTacheAdaptation.nNumSprintFin = 8
               	FIN
               	
               	Taches_Ajout(stTacheMaj)
               	Taches_Ajout(stTacheAdaptation)
               	 
               FIN
               
               
               
               
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Importer_piloting
          identifier : 0x2fd0d0f624a369dd
          internal_properties : BgAAAAYAAADIyFHADeDdLWdCOtpX+O1+aEeMgPL1Sn6DYPPc5VdBFVcdYEI5PdhHX97EC4ByJunVhKHPRrje0RPOQT7r6PTOexhVDuBjC3T8saXsyW5oCPTF5mzyUH6CYYlEU3LTgL+Pwdg/Hlzad9ETCt+rHwWwg9mxfQ47Q+lYHOwCr/8D1doHQiXaxs3rXn41jmUnKfHZuHo45XV5NXA3A0RZNZpqyEZFie1EdawtzfKV0YAaSSgPL1Q3U+d8PidWUALNlRs3pNUHNmfUBZfSKtLs1dErMlZ26RQMD3PLhp00bF5hDJhpk9FbSttSjtxvdRSrIgfs+slEKnhgTvAGeWEpY4A05jsiEY9Oto6gk36Vm6R9bEqICbpnGiCeqy9hb5hNEBWXPXJQb/7TXbRiHnj3E6PlGxt0uBwh7gjjOtN1HvKKI9JOcQya9qWDIUvDVhVlGdDiqjyZ80/w5aHYikMsLevHG33mHf5xLbAtpHFCii2r27bTODfi52lOKLWdPwcMJ10pSoK9BayApennF8KauvA+ZklS19GsuCH3SaQALfVAj2m14sklMxzqksw1UmnQtk01tntuuVVJzxhkCXkjlKKuEKN7I4sNSwi5O033bpd6LE5Ql7BERGvyE0KhYTbx1RyeFqHq4ucY8muvntOo8gD8ocSaWy1uDtGSLhe7cP1eBc/z6uGlUELh5odcNzYBrV+xewSIe0Ten4mGkqlBC/cA/JJH0t69IUXCV6mfyw==
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               IdFichierXLS			est un xlsDocument
               i						est un entier
               sFichier				est une chaîne
               
               nPremiereligne			est un entier	= 2
               
               //Declatration VAriables
               nIdUS					est un entier
               stTache					est une STR_Tache
               stUS					est une STR_UserStorie
               
               nCol_codeUS				est un entier	= 1
               nCol_codeTache			est un entier	= 1
               nCol_numSprint			est un entier	= 7
               nCol_numSprintCrea		est un entier	= 10
               nCol_Poids				est un entier	= 8
               nCol_fin				est un entier	= 9
               nCol_Role				est un entier	= 2
               nCol_nom				est un entier	= 3
               nCol_Besoin				est un entier	= 3
               nCol_AfinDe				est un entier	= 4
               nCol_commentaire		est un entier	= 5
               nCol_Epic				est un entier	= 11
               nCol_commentaire_Test	est un entier	= 12
               
               
               oPrj est un ClProjet <- oProjetDeNom("Piloting")
               
               nNumeroOrdre est une entier = 0
               // Ouvre le sélecteur de fichiers
               sFichier = Dupplication_Fichier_Avant_Import("\\prod-vm-file01\UnionMat\Service informatique\Procedures\Dev_logiciel\Piloting\User stories Piloting V2.xlsx")
               
               SI sFichier <> "" ALORS
               	
               	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               	
               	SI ErreurDétectée = Faux ALORS 
               		
               		SI xlsFeuilleEnCours(IdFichierXLS, 1) ALORS	
               			
               			
               			POUR i = nPremiereligne _À_ xlsNbLigne(IdFichierXLS,Vrai)
               				
               				//ON ne prend que les lignes qui ont un code et une description.
               				SI xlsDonnée(IdFichierXLS,i,nCol_codeUS) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_Besoin) <> "" ALORS
               					
               					//Si le champ role n'est pas vide => c'est une US
               					Si xlsDonnée(IdFichierXLS,i,nCol_Role) <> "" alors
               						VariableRAZ(stUS)
               						stUS.sCodeUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_codeUS)
               						stUS.sEnTantQue			= xlsDonnée(IdFichierXLS,i,nCol_Role)
               						stUS.sBesoinUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_Besoin)
               						stUS.sAfindeUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_AfinDe)
               						stUS.sCmtrGeneral		= xlsDonnée(IdFichierXLS,i,nCol_commentaire)
               						stUS.sCmtrTest			= xlsDonnée(IdFichierXLS,i,nCol_commentaire_Test)
               						stUS.nIDProjet			= oPrj.Get_IdUnique()
               						stUS.nIDResponsable		= oPrj.p_oUsr_ChefProjet.Get_IdUnique()
               						
               						Si xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T" alors
               							stUS.bAtester = vrai
               							stUS.eEtatUserStorie = ClUserStory.ECompteNbUS.En_test_fonctionnel
               						FIN
               						
               						//Ajout de l'epic, si présent
               						stUS.nIdEpic = nCreeEpicSiBesoin(oPrj, xlsDonnée(IdFichierXLS,i,nCol_Epic))
               
               						nIdUS = User_Story_ajout(stUS)
               						
               						nNumeroOrdre = 0
               						
               					sinon //sinon c'est une tache
               						
               						si PAS (xlsDonnée(IdFichierXLS,i,nCol_nom) = SansEspace("") ET xlsDonnée(IdFichierXLS,i,nCol_numSprint) = SansEspace("")) alors
               							VariableRAZ(stTache)
               							stTache.sCodeTache				= xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               							stTache.nNumSprintCreation		= xlsDonnée(IdFichierXLS,i,nCol_numSprintCrea)
               							stTache.nNumSprintRealisation	= xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               							stTache.nNumSprintPrevision		= stTache.nNumSprintRealisation
               							//stTache.nNumSprintDemarage = stTache.nNumSprintCreation
               							stTache.nIDUserStorie			= nIdUS
               							stTache.sDescription			= xlsDonnée(IdFichierXLS,i,nCol_nom)
               							stTache.sCommentaire			= xlsDonnée(IdFichierXLS,i,nCol_commentaire)
               							
               							//affectation du num d'ordre
               							nNumeroOrdre++
               							stTache.nOrdre					= nNumeroOrdre
               							
               							
               							//Si le poids n'est pas indiqué --> null
               							Si xlsDonnée(IdFichierXLS,i,nCol_Poids) <> "" alors
               								stTache.nPoids				= xlsDonnée(IdFichierXLS,i,nCol_Poids)
               								stTache.nPoids_Prevision	= stTache.nPoids
               							sinon
               								stTache.nPoids				= null
               								stTache.nPoids_Prevision	= null
               							fin
               							
               							Selon Vrai
               								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "x"
               									stTache.bDemarree			= vrai
               									stTache.bAnnulee			= faux
               									stTache.bTermine			= vrai
               									stTache.nNumSprintFin		= stTache.nNumSprintCreation 
               									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T"
               									stTache.bDemarree			= vrai
               									stTache.bAnnulee			= faux
               									stTache.bTermine			= vrai 
               									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "C"
               									stTache.bDemarree			= Vrai
               									stTache.bAnnulee			= Faux	
               									stTache.nNumSprintFin		= 0
               									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A"
               									stTache.bAnnulee			= vrai
               									stTache.bDemarree			= faux
               									stTache.nNumSprintFin		= 0
               									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               								AUTRE CAS
               									stTache.bAnnulee			= Faux
               									stTache.bDemarree			= Faux
               									stTache.nNumSprintFin		= 0
               									stTache.nNumSprintDemarage	= 0
               							FIN
               							Taches_Ajout(stTache)
               						fin
               					FIN
               				fin
               			FIN
               			
               		SINON
               			Erreur(ErreurInfo(errComplet))
               		FIN
               	sinon
               		erreur(erreurinfo(errComplet))
               	FIN
               	
               	xlsferme(IdFichierXLS)
               	
               FIN
               
               
               Import_Des_Criteres_Acceptation(oPrj.Get_IdUnique(), sFichier)
               Import_Process(oPrj.Get_IdUnique(), sFichier)
               
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Affecter_Projets
          identifier : 0x2ce801ac044bf5e8
          internal_properties : BgAAAAYAAACbcbVOpvWCvSRcvsmZ5sz7dhqfSisNSe3d8OiBPx4BYHOJ76DTXEfuC4kllafJ8ZAOSP0kutW5BnXsHL42avs7yBcvS/+Fd40LAtpoS0zFYAcgIIOIj8Mc5KwZ5xFgXqHXPPMiQr8cwege/PRKSu0DrfBvHpmadnH+nw5gmXYfQcVpFv8jJvmMUdyjrhWLJQ1+waAY8TvaNnheE7Wlhw1dcGBXzTXsZxGaaG+LwL2Nz6wc26FbgfY+yMZhyCSpjRMuOpoF3RoBEwLHx/t132XYL7TIUdFDWPLq1TiCNifhGSfAKi6Wm3XZVeqxhQ/X0Z1EKulm1EyO1mMl9qqItXP0z5PWPmXN5cqoeM8Djc2tP4NtHeVxy7yvrA3Xh4BR383YrvChP4TOaxOgiMo335hzgjLSW275/4bwlvv1frZ1te8jbw16Lrbz0p0ZbFkP8oDZYS2Tem/8eBphfxToMuM4AGoMIeEAdILa9A+Vezgnvx9u9COPGyaEsqw7kzE9Wga1yPPsFv0sWuN7cHFHjfXQA+g3xgxv6rMboATNcbZ+qhU+teeDyJTbwovhBoPbsuCgNpGfi6xdjcnMF0RgRjKE/WDUuP7nZ2101xhVidLjcfiZ6KsAa8XFm3gXMtnoWSWI6W3K6/rAqEMo7/A+lni4eJdth4Tn2lf5tAvmrWxMZlQOACQrsjqWskRodrLZOdWxaSP66JSCqLHl54pyeEKoOT+b71J1ep+yCbL1MBw3vwyDOXxifQ==
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               IdFichierXLS			est un xlsDocument
               Xlsnbligne_				est un entier
               i						est un entier
               sFichier				est une chaîne
               
               nPremiereligne			est un entier	= 2
               
               //Déclaration Structure
               //stUsrProjet				est un STR_Usr_Projet
               
               nCol_login				est un entier	= 1
               nCol_nom				est un entier	= 2
               nCol_Projet				est un entier	= 3
               
               nCol_Fini				est un entier	= 4
               nCol_Prio				est un entier	= 5
               nCol_Situation			est un entier	= 6
               nCol_TopDirection		est un entier	= 7
               nCol_Groupement			est un entier	= 8
               nCol_OrdreGroupement	est un entier	= 9
               nCol_Provision			est un entier	= 10
               
               
               
               nIdUsr					est un entier
               nIDProjet				est un entier
               oPrj					est un ClProjet dynamique
               
               sFichier = Dupplication_Fichier_Avant_Import("L:\Service informatique\Service Développement\Test projet Scrum\utilisateurs Scrum.xlsx")		
               
               
               SI sFichier <> "" ALORS
               	
               	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               	
               	SI ErreurDétectée = Faux ALORS
               		
               		SI xlsFeuilleEnCours(IdFichierXLS, 2) ALORS	
               			
               			Xlsnbligne_ =xlsNbLigne(IdFichierXLS,Vrai)
               			
               			//Réinitialisation de toutes les instance, pour éviter les desynchro
               			ClObjDB.LibereInstancesMemo()
               			
               			POUR i = nPremiereligne _À_ Xlsnbligne_
               				
               				SI xlsDonnée(IdFichierXLS,i,nCol_nom) <> "" ALORS
               					
               					//Recherche de l'ID de l'utilisateur
               					HLitRecherche(Scr_Usr,Nom,xlsDonnée(IdFichierXLS,i,nCol_nom),hIdentique+hLimiteParcours)
               					si Htrouve(Scr_Usr)
               						nIdUsr = Scr_Usr.IDScr_Usr
               					sinon
               						erreur(xlsDonnée(IdFichierXLS,i,nCol_nom) + " Introuvable")
               					fin
               					
               					//recherche de l'ID du projet
               					HLitRecherche(Scr_Projet,Nom,xlsDonnée(IdFichierXLS,i,nCol_Projet),hIdentique+hLimiteParcours)
               					SI pas HTrouve(Scr_Projet) ALORS
               //						hraz(Scr_Projet)
               //						Scr_Projet.Nom = xlsDonnée(IdFichierXLS,i,nCol_Projet)
               //						HAjoute(Scr_Projet)
               						oPrj <- allouer un ClProjet
               						oPrj.p_sNom = xlsDonnée(IdFichierXLS,i,nCol_Projet)
               					sinon
               						oPrj <- ClProjet.GetObj(nIDProjet)
               					fin
               					oPrj.p_sGroupement				= xlsDonnée(IdFichierXLS, i, nCol_Groupement)
               					oPrj.p_nOrdreGrp				= xlsDonnée(IdFichierXLS, i, nCol_OrdreGroupement)
               					oPrj.p_nChargeProvisionelle		= xlsDonnée(IdFichierXLS, i, nCol_Provision)					
               					SI xlsDonnée(IdFichierXLS, i, nCol_TopDirection) ~= "x" ALORS
               						oPrj.p_bTop_Direction		= Vrai
               					FIN
               					
               //					nIDProjet						= Scr_Projet.IDScr_Projet
               //					Scr_Projet.Groupement			= xlsDonnée(IdFichierXLS, i, nCol_Groupement)
               //					Scr_Projet.Ordre				= xlsDonnée(IdFichierXLS, i, nCol_OrdreGroupement)
               //					Scr_Projet.ChargeProvisionelle	= xlsDonnée(IdFichierXLS, i, nCol_Provision)					
               //					SI xlsDonnée(IdFichierXLS, i, nCol_TopDirection) ~= "x" ALORS
               //						Scr_Projet.Top_EstDirection = Vrai
               //					FIN
               //					HModifie(Scr_Projet)
               					
               					
               					//trace(Scr_Usr.Nom + " -> " + Scr_Projet.Nom)
               					
               //					stUsrProjet.nIDProjet		= nIDProjet
               //					stUsrProjet.nIDUsr			= nIdUsr
               //					stUsrProjet.bChefdeProjet	= 1
               //					stUsrProjet.bInvite			= 0
               					
               					
               //					HRAZ(Scr_Usr_Projet)
               					
               					oPrj.p_oUsr_ChefProjet = ClUsr.GetObj(nIdUsr)
               					oPrj.Enregistre()
               					oPrj.ReaffecteToutesUsAuCDP()
               					
               
               					//COL_Scrum.Affectation_Projet_Deprecated(stUsrProjet)
               					
               					
               					si xlsDonnée(IdFichierXLS,i,nCol_Prio) <> "" ou  xlsDonnée(IdFichierXLS,i,nCol_Situation) <> "" ALORS
               						hraz(Scr_Projet_Situation)
               						Scr_Projet_Situation.Num_Sprint			= goapp.m_nNumeroDuSprintActuel
               						Scr_Projet_Situation.IDScr_Projet		= oPrj.Get_IdUnique()
               						Scr_Projet_Situation.Top_Prioritaire	= (xlsDonnée(IdFichierXLS,i,nCol_Prio) <> "")
               						Scr_Projet_Situation.CMTR				= xlsDonnée(IdFichierXLS,i,nCol_Situation)
               						HAjoute(Scr_Projet_Situation)
               					FIN
               					
               				FIN
               			FIN
               			
               			xlsFerme(IdFichierXLS)
               			
               		SINON
               			Erreur(ErreurInfo(errComplet))
               		FIN
               		
               		sReq				est une chaîne
               		sdPrjNonAffectes	est une source de données
               		sReq = [
               		SELECT
               			Scr_Projet.Nom
               		FROM Scr_Projet
               			LEFT OUTER JOIN Scr_Usr_Projet ON (Scr_Usr_Projet.IDScr_Projet = Scr_Projet.IDScr_Projet)
               		WHERE Scr_Usr_Projet.IDScr_Projet IS NULL
               		]
               		si goapp.Rsql(sdPrjNonAffectes,sReq) ALORS
               			pour tout sdPrjNonAffectes
               				trace(ChaîneConstruit("Le projet %1 n'est affecté à personne", sdPrjNonAffectes.Nom))
               			FIN
               		FIN
               		
               		
               		
               		
               		//Affectation des invités sur les projets
               		
               		SI xlsFeuilleEnCours(IdFichierXLS, 3) ALORS	
               			
               			Xlsnbligne_ =xlsNbLigne(IdFichierXLS,Vrai)
               			
               			
               			POUR i = nPremiereligne _À_ Xlsnbligne_
               				
               				SI xlsDonnée(IdFichierXLS,i,nCol_nom) <> "" ALORS
               					
               					//Recherche de l'ID de l'utilisateur
               					HLitRecherche(Scr_Usr,Nom,xlsDonnée(IdFichierXLS,i,nCol_nom),hIdentique+hLimiteParcours)
               					SI HTrouve(Scr_Usr)
               						nIdUsr = Scr_Usr.IDScr_Usr
               					SINON
               						Erreur(xlsDonnée(IdFichierXLS,i,nCol_nom) + " Introuvable")
               					FIN
               					
               					//recherche de l'ID du projet
               					HLitRecherche(Scr_Projet,Nom,xlsDonnée(IdFichierXLS,i,nCol_Projet),hIdentique+hLimiteParcours)
               					SI HTrouve(Scr_Projet)
               						nIDProjet = Scr_Projet.IDScr_Projet
               					SINON
               						Erreur(xlsDonnée(IdFichierXLS,i,nCol_Projet) + " Introuvable")
               					FIN
               					
               					//trace(Scr_Usr.Nom + " -> " + Scr_Projet.Nom)
               					
               					oPrj <- ClProjet.GetObj(nIDProjet)
               					oPrj.Invite_Ajoute(ClUsr.GetObj(nIdUsr))
               					oPrj.enregistre()
               //					stUsrProjet.nIDProjet		= nIDProjet
               //					stUsrProjet.nIDUsr			= nIdUsr
               //					stUsrProjet.bChefdeProjet	= 0
               //					stUsrProjet.bInvite			= 1
               //					
               //					
               //					COL_Scrum.Affectation_Projet_Deprecated(stUsrProjet)
               				fin
               			fin
               		fin
               	SINON
               		Erreur(ErreurInfo(errComplet))
               	FIN	
               	
               	xlsferme(IdFichierXLS)
               FIN
               
               
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Importer_CRM
          identifier : 0x20082edb35427784
          internal_properties : BgAAAAYAAABwN+d4BI4JVWQ4lq60cHmFWkOkmRrt/Vsswi0oilh+TSOOmZBt1daBhh1JxlQkMwZVNhWYt6JYayLpQZdZYFEPiocjPcfKUOej3Mp66Fos2tPq1p5gu5ZzGVwAEVWXnzGo63LStsxGsxN7OH71dwh8v1Z04HF3YqllmuWtSqlWO9o1yjIDXlVsHEqtYcCET9g5PkMGQFSGWphWLKxBFuQlRVVbw0Z/T3Fp8LUwkywDwOOZBf1/cH7jUnrnc8NKsCoZUeZAHVLX08Bb72arbGFGjicHGXXXcNZrMIM10wAv83IHqBACLGvFk9TcnhSyhS1VR8PFvG06im44MqICaaAFQf69jbYbfHy3sNJxqq3sOEFZhPollMGami60IwtV9i18vaDcdHueHZX/x6hcczHDjENa3pfk4yC6UxjNPcwi75vyX7B/BXaVutj0drIxj4xxWv7HbgQTJzYHtTentwe52COaD5GU0hwofW5mcd9fZ7HdXHch9tq+n0wQ9Wzil5dQgowdBh2P76R2mmDRHgIoiWGArW5dny2M4rkiei+UOwxjureywPdkiStYTv6izgE6uPd6MoLsKfORsuP6YrqUyVuJPfL85PbUCph7N2d4gl8oFcDHaX4fHQKVSETaDBU+K8wh1KUxeGXusiCX7M3CI2EYBZghq3L8UK1GJmQjlikp5qX/KK3mSo/z+ojcfgYVYdCmIp53CWj9xIFAEysJ0Pqh8507nZK4
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               IdFichierXLS			est un xlsDocument
               i						est un entier
               sFichier				est une chaîne
               
               nPremiereligne			est un entier	= 2
               
               //Declatration VAriables
               nIdUS					est un entier
               stTache					est une STR_Tache
               stUS					est une STR_UserStorie
               
               nCol_codeUS				est un entier	= 1
               nCol_codeTache			est un entier	= 1
               nCol_numSprint			est un entier	= 7
               nCol_numSprintCrea		est un entier	= 10
               nCol_Poids				est un entier	= 8
               nCol_fin				est un entier	= 9
               nCol_Role				est un entier	= 2
               nCol_nom				est un entier	= 3
               nCol_Besoin				est un entier	= 3
               nCol_AfinDe				est un entier	= 4
               nCol_commentaire		est un entier	= 5
               nCol_Epic				est un entier	= 11
               nCol_commentaire_Test	est un entier	= 12
               
               
               oPrj est un ClProjet <- oProjetDeNom("CRM")
               
               nNumeroOrdre est une entier = 0
               // Ouvre le sélecteur de fichiers
               sFichier = Dupplication_Fichier_Avant_Import("\\prod-vm-file01\UnionMat\Service informatique\Procedures\Dev_logiciel\CRM\User stories CRM.xlsx")
               
               SI sFichier <> "" ALORS
               	
               	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               	
               	SI ErreurDétectée = Faux ALORS 
               		
               		SI xlsFeuilleEnCours(IdFichierXLS, 1) ALORS	
               			
               			
               			POUR i = nPremiereligne _À_ xlsNbLigne(IdFichierXLS,Vrai)
               				
               				//ON ne prend que les lignes qui ont un code et une description.
               				SI xlsDonnée(IdFichierXLS,i,nCol_codeUS) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_Besoin) <> "" ALORS
               					
               					//Si le champ role n'est pas vide => c'est une US
               					Si xlsDonnée(IdFichierXLS,i,nCol_Role) <> "" alors
               						VariableRAZ(stUS)
               						stUS.sCodeUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_codeUS)
               						stUS.sEnTantQue			= xlsDonnée(IdFichierXLS,i,nCol_Role)
               						stUS.sBesoinUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_Besoin)
               						stUS.sAfindeUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_AfinDe)
               						stUS.sCmtrGeneral		= xlsDonnée(IdFichierXLS,i,nCol_commentaire)
               						stUS.sCmtrTest			= xlsDonnée(IdFichierXLS,i,nCol_commentaire_Test)
               						stUS.nIDProjet			= oPrj.Get_IdUnique()
               						stUS.nIDResponsable		= oPrj.p_oUsr_ChefProjet.Get_IdUnique()
               						
               						Si xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T" alors
               							stUS.bAtester = vrai
               							stUS.eEtatUserStorie = ClUserStory.ECompteNbUS.En_test_fonctionnel
               						FIN
               						
               						//Ajout de l'epic, si présent
               						stUS.nIdEpic = nCreeEpicSiBesoin(oPrj, xlsDonnée(IdFichierXLS,i,nCol_Epic))
               
               						nIdUS = User_Story_ajout(stUS)
               						
               						nNumeroOrdre = 0
               						
               					sinon //sinon c'est une tache
               						
               						si PAS (xlsDonnée(IdFichierXLS,i,nCol_nom) = SansEspace("") ET xlsDonnée(IdFichierXLS,i,nCol_numSprint) = SansEspace("")) alors
               							VariableRAZ(stTache)
               							stTache.sCodeTache				= xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               							stTache.nNumSprintCreation		= xlsDonnée(IdFichierXLS,i,nCol_numSprintCrea)
               							stTache.nNumSprintRealisation	= xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               							stTache.nNumSprintPrevision		= stTache.nNumSprintRealisation
               							//stTache.nNumSprintDemarage = stTache.nNumSprintCreation
               							stTache.nIDUserStorie			= nIdUS
               							stTache.sDescription			= xlsDonnée(IdFichierXLS,i,nCol_nom)
               							stTache.sCommentaire			= xlsDonnée(IdFichierXLS,i,nCol_commentaire)
               							
               							//affectation du num d'ordre
               							nNumeroOrdre++
               							stTache.nOrdre					= nNumeroOrdre
               							
               							
               							//Si le poids n'est pas indiqué --> null
               							Si xlsDonnée(IdFichierXLS,i,nCol_Poids) <> "" alors
               								stTache.nPoids				= xlsDonnée(IdFichierXLS,i,nCol_Poids)
               								stTache.nPoids_Prevision	= stTache.nPoids
               							sinon
               								stTache.nPoids				= null
               								stTache.nPoids_Prevision	= null
               							fin
               							
               							Selon Vrai
               								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "x"
               									stTache.bDemarree			= vrai
               									stTache.bAnnulee			= faux
               									stTache.bTermine			= vrai
               									stTache.nNumSprintFin		= stTache.nNumSprintCreation 
               									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T"
               									stTache.bDemarree			= vrai
               									stTache.bAnnulee			= faux
               									stTache.bTermine			= vrai 
               									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "C"
               									stTache.bDemarree			= Vrai
               									stTache.bAnnulee			= Faux	
               									stTache.nNumSprintFin		= 0
               									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A"
               									stTache.bAnnulee			= vrai
               									stTache.bDemarree			= faux
               									stTache.nNumSprintFin		= 0
               									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               								AUTRE CAS
               									stTache.bAnnulee			= Faux
               									stTache.bDemarree			= Faux
               									stTache.nNumSprintFin		= 0
               									stTache.nNumSprintDemarage	= 0
               							FIN
               							Taches_Ajout(stTache)
               						fin
               					FIN
               				fin
               			FIN
               			
               		SINON
               			Erreur(ErreurInfo(errComplet))
               		FIN
               	sinon
               		erreur(erreurinfo(errComplet))
               	FIN
               	
               	xlsferme(IdFichierXLS)
               	
               FIN
               
               
               Import_Des_Criteres_Acceptation(oPrj.Get_IdUnique(), sFichier)
               Import_Process(oPrj.Get_IdUnique(), sFichier)
               
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Maj_etats
          identifier : 0x2ea9a7fd747c137a
          internal_properties : BgAAAAYAAAB8WqXwFe1UJUbTS74wnrlRdV3ulFxzwhlw0JQzTYOH/Ko5+/kan43HZunxw6xHPwQEEaacFak/GP6NgekmdSbr/KUS+bGN3jVZyQqpeZWP2S6+2UKzvs1YoM7P5rMEPtVPqpyaLEnsVD7kKoHRMwniVdcxzELMtyY5spalDLvUr2+uYZW5Um10BvbEeRFrA2ai64kwcCZT20sOLJqX40HC4LBkbOMWm4hYsCw/M4lvdpAPLoq8TXU12gyEPvSEpSupiwXJ2H0hjRO/8Irj9/VAw3z2nOmGnmqJmAboAKJperzPf38boEfulvY1SQjP2il4+LmegjZQSpgwo519O2gC6lGqu2eofobo9VSZlywt5q426ZS/6N3ngErUJJfgd/Q08pvFBsVchs3JlYHaWloc2OiplVPwhx3EWdoesYGFHm+jGtHBlY68DvpKO8ywVIMXd2rNPYysPViOyCuHsQexDE6HnUaNSNXuYajAosVjmhlgcY8G5IbHRh/iEHKGeoWXSiAOyfzysYtMjTTu0NVhoe7QxBkeINqdA/OCSrcUo0We5j2ZwB8rWlaO2EwPWA10wBXEFJu5Sps+56UduJIC+018yqBqdyCm1Jcj9b8/T6mxgkWhvkHTYEgDhWqX2WIUh4+FaTCN6h0BQFUEUpFP2Iu+9TlwhtvEDgcHAhsQ8RQJji9146lJDjH2XB84JwSSgD2z+7PjBCyMtZ9ZIWDsruEWAz9lwVuY+U8rXw==
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               
               
               oPrj				est un ClProjet dynamique
               oUS					est un ClUserStory dynamique
               //bEstTesté est un booléen
               nNbreUsFinies		est un entier
               nNbreTacheRestantes	est un entier
               
               sFiltrePrj			est une chaîne	//= "Mini Maxi"
               sFiltreUS			est une chaîne	//= "Pi001"
               
               pour tout element oPrj de ClProjet.aoListeProjets()
               	
               	si oPrj.p_sNom = sFiltrePrj ou sFiltrePrj = "" alors
               		
               		nNbreUsFinies = 0
               		
               		//		Trace("----------------------------------")
               		//		Trace("Projet : " + oPrj.m_sNom)
               		
               		pour tout element oUS de oPrj.aoListeUS(Vrai)
               			
               			si oUS.p_sCodeUserStory = sFiltreUS ou sFiltreUS = "" alors
               				
               				//				Trace("US : " + oUS.m_sCodeUserStory + " - "+ oUS.m_sJaiBesoinDe)
               				
               				oUS.p_oUsrResponsable	= oUS.p_oProjetParent.p_oUsr_ChefProjet
               				
               				oUS.aoListeTaches(Vrai)
               				oUS.User_Story_Etat()
               				
               				//				trace("Nbre taches à faire : " + oUS.Get_NbreTache(ClUserStory.ECompteNbTache.A_faire))
               				//				trace("Nbre taches en cours : " + oUS.Get_NbreTache(ClUserStory.ECompteNbTache.EnCours))
               				//				trace("Nbre total de taches : " + oUS.Get_NbreTache(ClUserStory.ECompteNbTache.Toutes))
               				
               				nNbreTacheRestantes = oUS.Get_NbreTache(ClUserStory.ECompteNbTache.A_faire) + ...
               					oUS.Get_NbreTache(ClUserStory.ECompteNbTache.EnCours)
               				
               				//
               				SI nNbreTacheRestantes = 0 et oUS.Get_NbreTache(ClUserStory.ECompteNbTache.Toutes) > 0 ALORS
               					//Il n'y a plus de taches à réaliser : 
               					
               					si oUS.bToutesTachesValidees() ALORS
               						oUS.p_bEstTestéParLeDemandeur	= Vrai
               						oUS.p_dDateMiseEnProd			= "20200101"
               						oUS.p_bTermine					= Vrai
               						nNbreUsFinies++
               					sinon
               						oUS.p_bEstTestéParLeDemandeur	= Faux
               						oUS.p_bTermine					= faux
               					FIN
               					
               					oUS.p_bEstTestéParEquipeDev			= Vrai
               					oUS.p_nIDSrc_Environnement_Test		= 1
               					oUS.p_dDateMiseADispo_EnTest		= "20200101"
               					oUS.p_oUsr_Test_Dev					= goApp.m_oUsrCnx
               				SINON
               					
               					SI oUS.Get_NbreTache(ClUserStory.ECompteNbTache.Toutes) = oUS.Get_NbreTache(ClUserStory.ECompteNbTache.Annulée) et oUS.Get_NbreTache(ClUserStory.ECompteNbTache.Toutes) >= 1 ALORS
               						oUS.p_bAnnule	= Vrai
               						oUS.p_bTermine	= Vrai
               					sinon
               						oUS.p_bEstTestéParLeDemandeur	= Faux
               						oUS.p_bEstTestéParEquipeDev		= Faux
               						oUS.p_bTermine					= Faux
               					FIN
               					oUS.p_dDateMiseADispo_EnTest = ""
               				FIN
               				
               				
               				
               				oUS.Enregistre()
               				
               				
               				//				Trace("Est testé dev : " + oUS.m_bEstTestéParEquipeDev)
               				//				Trace("Est testé fct : " + oUS.m_bEstTestéParLeDemandeur)
               				//				Trace("Est terminé : " + oUS.m_bTermine)
               			FIN
               		FIN
               		
               		si sFiltreUS = "" alors
               			//			trace("Projet : Nbre US finies : " + nNbreUsFinies)
               			//			trace("Projet : Nbre US totale : " + TableauOccurrence(oPrj.aoListeUS()))
               			
               			si nNbreUsFinies = TableauOccurrence(oPrj.aoListeUS()) et TableauOccurrence(oPrj.aoListeUS()) > 0 ALORS
               				oPrj.p_bTop_Termine = vrai
               				oPrj.Enregistre()
               			FIN
               		FIN
               	FIN
               FIN
               
               
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Importer_Espace_Cli
          identifier : 0x203658ed1132ad1d
          internal_properties : BgAAAAYAAAAGd9ZyDvXUAeiusBqXERvUcNT/YlRF0x4NMgJ+T2LRHmZuLkjJQy+o9h5Yb4KjiTK7FEj+3N7qCgaDaQ6RNGmdIf8GnTUUrAZgD0ispN0el/aNYfYIgYF1Vux+/fSUNJcfEE2rZN93/qCQX+M1a5vSABqPSsLCaeTkMmitL/zjlVr3NSGl5q6jgf1Pa4ikRdtXuj9Ow6xxhJy93brIsRRNqaBSO99aKAuNC8mt4vCmV5nwocYzFmagf2UWbqUrISE3vjuTnUeYAfdAXOO4IQVGIMwDyTtaA2yV4Gtk74FA8rSKjrEw4x3CYGsQlwYO4MddbOttwMYVDBce3IQyuoC0Ev5VMfOmbj3+vSG+6+bEGajwpfurqrIxueUXdGC9vJ7vzKt1oYmCkGA0OP/fy7+S4xizWSbiK883kHFmuqTUjCSlfkPO8VB+WZsTpycH831QYyvoa9LnZrWcptxgy1mO2QgbvvSc3OfhrsuBqBWPJAROoYLgfHq17E9n8AMI56hV8Z/KV4e7tFODi9mm1lCBGPAzyn+J9Vzro46HKCZlHcrzoVKfnZkfSUUe88ehsKH4NpkEuJm9HFZHwoa+tTeUd+dgYwMrWVoyT+8kZP4yUbginsjkE3OxNTLxbhYrDIAzhg357k4+u7IR/HjzHs9LXry0H3aOk/+jGXru4HmGjrlkPQw6vTmY6tCmPtaZAd8ZTim7JBumO876k5SisgcUbdVlZWBChW16LuOgMsC/DQA=
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               IdFichierXLS			est un xlsDocument
               i						est un entier
               sFichier				est une chaîne
               nPremiereligne			est un entier	= 2
               //Declatration VAriables
               nIdUS					est un entier
               stTache					est une STR_Tache
               stUS					est une STR_UserStorie
               
               nCol_codeUS				est un entier	= 1
               nCol_codeTache			est un entier	= 1
               nCol_numSprint			est un entier	= 7
               nCol_numSprintCrea		est un entier	= 10
               nCol_Poids				est un entier	= 8
               nCol_fin				est un entier	= 9
               nCol_Role				est un entier	= 2
               nCol_nom				est un entier	= 3
               nCol_Besoin				est un entier	= 3
               nCol_AfinDe				est un entier	= 4
               nCol_commentaire		est un entier	= 5
               nCol_Epic				est un entier	= 11
               nCol_commentaire_Test	est un entier	= 12
               
               
               oPrj est un ClProjet <- oProjetDeNom("Cerebro")
               
               nNumeroOrdre est une entier = 0
               // Ouvre le sélecteur de fichiers
               sFichier = Dupplication_Fichier_Avant_Import("\\prod-vm-file01\UnionMat\Projets\Informatique\Developpement\B2B\User stories Esp.xlsx")
               
               SI sFichier <> "" ALORS
               	
               	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               	
               	SI ErreurDétectée = Faux ALORS 
               		
               		SI xlsFeuilleEnCours(IdFichierXLS, 1) ALORS	
               			
               			
               			POUR i = nPremiereligne _À_ xlsNbLigne(IdFichierXLS,Vrai)
               				
               				//ON ne prend que les lignes qui ont un code et une description.
               				SI xlsDonnée(IdFichierXLS,i,nCol_codeUS) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_Besoin) <> "" ALORS
               					
               					//Si le champ role n'est pas vide => c'est une US
               					SI xlsDonnée(IdFichierXLS,i,nCol_Role) <> "" ALORS
               						VariableRAZ(stUS)
               						stUS.sCodeUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_codeUS)
               						stUS.sEnTantQue			= xlsDonnée(IdFichierXLS,i,nCol_Role)
               						stUS.sBesoinUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_Besoin)
               						stUS.sAfindeUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_AfinDe)
               						stUS.sCmtrGeneral		= xlsDonnée(IdFichierXLS,i,nCol_commentaire)
               						stUS.sCmtrTest			= xlsDonnée(IdFichierXLS,i,nCol_commentaire_Test)
               						stUS.nIDProjet			= oPrj.Get_IdUnique()
               						stUS.nIDResponsable		= oPrj.p_oUsr_ChefProjet.Get_IdUnique()
               						
               						SI xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T" ALORS
               							stUS.bAtester = Vrai
               							stUS.eEtatUserStorie = ClUserStory.ECompteNbUS.En_test_fonctionnel
               						FIN
               						
               						//Ajout de l'epic, si présent
               						stUS.nIdEpic = nCreeEpicSiBesoin(oPrj, xlsDonnée(IdFichierXLS,i,nCol_Epic))
               						
               						nIdUS = User_Story_ajout(stUS)
               						
               						nNumeroOrdre = 0
               						
               					SINON //sinon c'est une tache
               						
               						SI PAS (xlsDonnée(IdFichierXLS,i,nCol_nom) = SansEspace("") ET xlsDonnée(IdFichierXLS,i,nCol_numSprint) = SansEspace("")) ALORS
               							VariableRAZ(stTache)
               							stTache.sCodeTache				= xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               							stTache.nNumSprintCreation		= xlsDonnée(IdFichierXLS,i,nCol_numSprintCrea)
               							stTache.nNumSprintRealisation	= xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               							stTache.nNumSprintPrevision		= stTache.nNumSprintRealisation
               							//stTache.nNumSprintDemarage = stTache.nNumSprintCreation
               							stTache.nIDUserStorie			= nIdUS
               							stTache.sDescription			= xlsDonnée(IdFichierXLS,i,nCol_nom)
               							stTache.sCommentaire			= xlsDonnée(IdFichierXLS,i,nCol_commentaire)
               							
               							//affectation du num d'ordre
               							nNumeroOrdre++
               							stTache.nOrdre					= nNumeroOrdre
               							
               							
               							//Si le poids n'est pas indiqué --> null
               							SI xlsDonnée(IdFichierXLS,i,nCol_Poids) <> "" ALORS
               								stTache.nPoids				= xlsDonnée(IdFichierXLS,i,nCol_Poids)
               								stTache.nPoids_Prevision	= stTache.nPoids
               							SINON
               								stTache.nPoids				= Null
               								stTache.nPoids_Prevision	= Null
               							FIN
               							
               							SELON Vrai
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "x"
               									stTache.bDemarree			= Vrai
               									stTache.bAnnulee			= Faux
               									stTache.bTermine			= Vrai
               									stTache.nNumSprintFin		= stTache.nNumSprintCreation 
               									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T"
               									stTache.bDemarree			= Vrai
               									stTache.bAnnulee			= Faux
               									stTache.bTermine			= Vrai 
               									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "C"
               									stTache.bDemarree			= Vrai
               									stTache.bAnnulee			= Faux	
               									stTache.nNumSprintFin		= 0
               									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A"
               									stTache.bAnnulee			= Vrai
               									stTache.bDemarree			= Faux
               									stTache.nNumSprintFin		= 0
               									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               								AUTRE CAS
               									stTache.bAnnulee			= Faux
               									stTache.bDemarree			= Faux
               									stTache.nNumSprintFin		= 0
               									stTache.nNumSprintDemarage	= 0
               							FIN
               							Taches_Ajout(stTache)
               						fin
               					FIN
               				fin
               			FIN
               			
               		SINON
               			Erreur(ErreurInfo(errComplet))
               		FIN
               	sinon
               		erreur(erreurinfo(errComplet))
               	FIN
               	
               	xlsferme(IdFichierXLS)
               	
               FIN
               
               
               Import_Des_Criteres_Acceptation(oPrj.Get_IdUnique(), sFichier)
               Import_Process(oPrj.Get_IdUnique(), sFichier)
               
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Importer_Fusion_UM_GM
          identifier : 0x208272c700991b3e
          internal_properties : BgAAAAYAAAAGeUtnd2qju9gfMXkqCmU/9XHltkzCpVjU5K9Lfs2GCMGXe1oe2H10oKrMpiMGUvVznpYW4Z4a9ons6Ijf1yfFv70zZ1Q+1k2G9Du6x6v7IVTUf7CD8sU0e385gx/lAGk+1K87HXHp6u2aP4YeVsY/m5tcOVGnxG8Zkz3hYP9CV2daudLGKBT2bFKotTQub5uj1hpvCW8p0Sz1hPhJqlnWZz+xJQkVWjSybuU5k+O2wrt5tuv9zIvHEEMAAYfQkA7Dd+YU+E6jwC8Pa3qDis7o45moeRYXE4lryQjaSIhzieBMNrZrnadfhC9h6jX6hsiEJlrGZGkenhyhJPnGv6z0JM4wuvz0MEpdeGrq5L/aV5kLv4lcmyl7+vdhEk1cZ7oWR3oxwA0A3COkDk/2EkbKat8GwfMQ8z8WKDc03539wq8eWxtXMzw6/MP1h0Ruog93Uq52aDTHbNSAdAYjTD5mnHnovjV6EPlmQrl11/AKFKUljKCrEDzDEQNt6rSp7EoIFPYO0IdxxPzHIcHfP8nXjQW0kvQl0/rYdWpPEkjDQlDL7e2FbNAqC1ap6GtdjPQ6r556GQfNiHURtpIHFiQ4yoCVVWTtkdh796VW24VdeQPZ6Wbp/43r6DRl/GFA2XSydyopC56kT1LN7u5T7k/cg3rSTm42KNE02YHweYAZyBb1uDLcOEJ73Ik3MiLLx4XVdF+kArl5H5uUunfLdjFG4VMIrJ2WUoTwbgbDiImv4LIl9ZWh
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               IdFichierXLS			est un xlsDocument
               i						est un entier
               sFichier				est une chaîne
               nPremiereligne			est un entier	= 2
               //Declatration VAriables
               nIdUS					est un entier
               stTache					est une STR_Tache
               stUS					est une STR_UserStorie
               
               nCol_codeUS				est un entier	= 1
               nCol_codeTache			est un entier	= 1
               nCol_numSprint			est un entier	= 7
               nCol_numSprintCrea		est un entier	= 10
               nCol_Poids				est un entier	= 8
               nCol_fin				est un entier	= 9
               nCol_Role				est un entier	= 2
               nCol_nom				est un entier	= 3
               nCol_Besoin				est un entier	= 3
               nCol_AfinDe				est un entier	= 4
               nCol_commentaire		est un entier	= 5
               nCol_Epic				est un entier	= 11
               nCol_commentaire_Test	est un entier	= 12
               
               
               oPrj est un ClProjet <- oProjetDeNom("Fusion UM GM")
               
               nNumeroOrdre est une entier = 0
               // Ouvre le sélecteur de fichiers
               sFichier = Dupplication_Fichier_Avant_Import("L:\Service informatique\Procedures\Dev_logiciel\Fusion_UM_GM\User stories Fusion.xlsx")
               
               SI sFichier <> "" ALORS
               	
               	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               	
               	SI ErreurDétectée = Faux ALORS 
               		
               		SI xlsFeuilleEnCours(IdFichierXLS, 1) ALORS	
               			
               			
               			POUR i = nPremiereligne _À_ xlsNbLigne(IdFichierXLS,Vrai)
               				
               				//ON ne prend que les lignes qui ont un code et une description.
               				SI xlsDonnée(IdFichierXLS,i,nCol_codeUS) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_Besoin) <> "" ALORS
               					
               					//Si le champ role n'est pas vide => c'est une US
               					SI xlsDonnée(IdFichierXLS,i,nCol_Role) <> "" ALORS
               						VariableRAZ(stUS)
               						stUS.sCodeUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_codeUS)
               						stUS.sEnTantQue			= xlsDonnée(IdFichierXLS,i,nCol_Role)
               						stUS.sBesoinUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_Besoin)
               						stUS.sAfindeUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_AfinDe)
               						stUS.sCmtrGeneral		= xlsDonnée(IdFichierXLS,i,nCol_commentaire)
               						stUS.sCmtrTest			= xlsDonnée(IdFichierXLS,i,nCol_commentaire_Test)
               						stUS.nIDProjet			= oPrj.Get_IdUnique()
               						stUS.nIDResponsable		= oPrj.p_oUsr_ChefProjet.Get_IdUnique()
               						
               						SI xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T" ALORS
               							stUS.bAtester = Vrai
               							stUS.eEtatUserStorie = ClUserStory.ECompteNbUS.En_test_fonctionnel
               						FIN
               						
               						//Ajout de l'epic, si présent
               						stUS.nIdEpic = nCreeEpicSiBesoin(oPrj, xlsDonnée(IdFichierXLS,i,nCol_Epic))
               						
               						nIdUS = User_Story_ajout(stUS)
               						
               						nNumeroOrdre = 0
               						
               					SINON //sinon c'est une tache
               						
               						SI PAS (xlsDonnée(IdFichierXLS,i,nCol_nom) = SansEspace("") ET xlsDonnée(IdFichierXLS,i,nCol_numSprint) = SansEspace("")) ALORS
               							VariableRAZ(stTache)
               							stTache.sCodeTache				= xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               							stTache.nNumSprintCreation		= xlsDonnée(IdFichierXLS,i,nCol_numSprintCrea)
               							stTache.nNumSprintRealisation	= xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               							stTache.nNumSprintPrevision		= stTache.nNumSprintRealisation
               							//stTache.nNumSprintDemarage = stTache.nNumSprintCreation
               							stTache.nIDUserStorie			= nIdUS
               							stTache.sDescription			= xlsDonnée(IdFichierXLS,i,nCol_nom)
               							stTache.sCommentaire			= xlsDonnée(IdFichierXLS,i,nCol_commentaire)
               							
               							//affectation du num d'ordre
               							nNumeroOrdre++
               							stTache.nOrdre					= nNumeroOrdre
               							
               							
               							//Si le poids n'est pas indiqué --> null
               							SI xlsDonnée(IdFichierXLS,i,nCol_Poids) <> "" ALORS
               								stTache.nPoids				= xlsDonnée(IdFichierXLS,i,nCol_Poids)
               								stTache.nPoids_Prevision	= stTache.nPoids
               							SINON
               								stTache.nPoids				= Null
               								stTache.nPoids_Prevision	= Null
               							FIN
               							
               							SELON Vrai
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "x"
               									stTache.bDemarree			= Vrai
               									stTache.bAnnulee			= Faux
               									stTache.bTermine			= Vrai
               									stTache.nNumSprintFin		= stTache.nNumSprintCreation 
               									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T"
               									stTache.bDemarree			= Vrai
               									stTache.bAnnulee			= Faux
               									stTache.bTermine			= Vrai 
               									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "C"
               									stTache.bDemarree			= Vrai
               									stTache.bAnnulee			= Faux	
               									stTache.nNumSprintFin		= 0
               									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A"
               									stTache.bAnnulee			= Vrai
               									stTache.bDemarree			= Faux
               									stTache.nNumSprintFin		= 0
               									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               								AUTRE CAS
               									stTache.bAnnulee			= Faux
               									stTache.bDemarree			= Faux
               									stTache.nNumSprintFin		= 0
               									stTache.nNumSprintDemarage	= 0
               							FIN
               							Taches_Ajout(stTache)
               						fin
               					FIN
               				fin
               			FIN
               			
               		SINON
               			Erreur(ErreurInfo(errComplet))
               		FIN
               	sinon
               		erreur(erreurinfo(errComplet))
               	FIN
               	
               	xlsferme(IdFichierXLS)
               	
               FIN
               
               
               Import_Des_Criteres_Acceptation(oPrj.Get_IdUnique(), sFichier)
               Import_Process(oPrj.Get_IdUnique(), sFichier)
               
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Importer_Menuiserie_2021
          identifier : 0x208272ca009b238b
          internal_properties : BgAAAAYAAAAIT85SJEp77dxS1Rn/oZXRH75nrHM+g2m3K59jvIN/ezM+hZ/3yQrpOadz17BWH6gPoNjkw3Rxo8Mzm88E68g86JTdvZ2pC1QHguahUe01lxt+gs3yc/ee98AwcTmFNbQPXdeeTX4+R/jZWwGwGuXg//mv5IFPSxaZxRZ0zALvb2/QVmzbMULVGGCvniSRt9xp+Y4OaN3uMDAJrprkerlvEtPW3MMSDNiu7yjFom1cSRXv5Cy2ivZVtr5J7L5qL339V3pxJXofdzAXLqUZJKWf06IdN/DB3qxep+tTUIGgxTxdTvHxo1JVfYrygftQEfDXQXBZT0eLRRS8D8E3wite/9RzMupT25uCdP61zxLch7kdmCSJYMlnQWHO5ZXqHWgo4NC03Gc6x0B0KxTAkuLY5Hru9D3GkUixeOTHNzN71s/Z6YLpXQ6Ls8+euga84Nt/DcKH3kIlu/0UkT+3RCLAKjJuxS9EMmYN9ByGWcr0YldyAgfB3iJIXHHuzfwDXlaQA4SR4r+dowFfWE7HFz3X+dboS4y1z2uvp8tQz5lkU9+NCotkdwFIj9fRFPToVyn1Mj4niZX7aYgpsytvmrRoVvv/PFDX2zM4sdKD9/WJiY8SY501g2VOjbbCQR0+1+6Qajo6Sz4Xp4WZx2aYDqWijViVLEMX800wGgV8WBfkJVHN8xxlizuVyPKfClf+zgACdFC43fKk90lFyEEgM6ZJ5GyC2h1uFmvGjU3g931Z4fkn6w==
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               IdFichierXLS			est un xlsDocument
               i						est un entier
               sFichier				est une chaîne
               nPremiereligne			est un entier	= 2
               //Declatration VAriables
               nIdUS					est un entier
               stTache					est une STR_Tache
               stUS					est une STR_UserStorie
               
               nCol_codeUS				est un entier	= 1
               nCol_codeTache			est un entier	= 1
               nCol_numSprint			est un entier	= 7
               nCol_numSprintCrea		est un entier	= 10
               nCol_Poids				est un entier	= 8
               nCol_fin				est un entier	= 9
               nCol_Role				est un entier	= 2
               nCol_nom				est un entier	= 3
               nCol_Besoin				est un entier	= 3
               nCol_AfinDe				est un entier	= 4
               nCol_commentaire		est un entier	= 5
               nCol_Epic				est un entier	= 11
               nCol_commentaire_Test	est un entier	= 12
               
               
               oPrj est un ClProjet <- oProjetDeNom("Menuiserie FP")
               
               nNumeroOrdre est une entier = 0
               // Ouvre le sélecteur de fichiers
               sFichier = Dupplication_Fichier_Avant_Import("L:\Service informatique\Procedures\Dev_logiciel\Menuiserie FP\User stories Meuiserie.xlsx")
               
               SI sFichier <> "" ALORS
               	
               	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               	
               	SI ErreurDétectée = Faux ALORS 
               		
               		SI xlsFeuilleEnCours(IdFichierXLS, 1) ALORS	
               			
               			
               			POUR i = nPremiereligne _À_ xlsNbLigne(IdFichierXLS,Vrai)
               				
               				//ON ne prend que les lignes qui ont un code et une description.
               				SI xlsDonnée(IdFichierXLS,i,nCol_codeUS) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_Besoin) <> "" ALORS
               					
               					//Si le champ role n'est pas vide => c'est une US
               					SI xlsDonnée(IdFichierXLS,i,nCol_Role) <> "" ALORS
               						VariableRAZ(stUS)
               						stUS.sCodeUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_codeUS)
               						stUS.sEnTantQue			= xlsDonnée(IdFichierXLS,i,nCol_Role)
               						stUS.sBesoinUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_Besoin)
               						stUS.sAfindeUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_AfinDe)
               						stUS.sCmtrGeneral		= xlsDonnée(IdFichierXLS,i,nCol_commentaire)
               						stUS.sCmtrTest			= xlsDonnée(IdFichierXLS,i,nCol_commentaire_Test)
               						stUS.nIDProjet			= oPrj.Get_IdUnique()
               						stUS.nIDResponsable		= oPrj.p_oUsr_ChefProjet.Get_IdUnique()
               						
               						SI xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T" ALORS
               							stUS.bAtester = Vrai
               							stUS.eEtatUserStorie = ClUserStory.ECompteNbUS.En_test_fonctionnel
               						FIN
               						
               						//Ajout de l'epic, si présent
               						stUS.nIdEpic = nCreeEpicSiBesoin(oPrj, xlsDonnée(IdFichierXLS,i,nCol_Epic))
               						
               						nIdUS = User_Story_ajout(stUS)
               						
               						nNumeroOrdre = 0
               						
               					SINON //sinon c'est une tache
               						
               						SI PAS (xlsDonnée(IdFichierXLS,i,nCol_nom) = SansEspace("") ET xlsDonnée(IdFichierXLS,i,nCol_numSprint) = SansEspace("")) ALORS
               							VariableRAZ(stTache)
               							stTache.sCodeTache				= xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               							stTache.nNumSprintCreation		= xlsDonnée(IdFichierXLS,i,nCol_numSprintCrea)
               							stTache.nNumSprintRealisation	= xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               							stTache.nNumSprintPrevision		= stTache.nNumSprintRealisation
               							//stTache.nNumSprintDemarage = stTache.nNumSprintCreation
               							stTache.nIDUserStorie			= nIdUS
               							stTache.sDescription			= xlsDonnée(IdFichierXLS,i,nCol_nom)
               							stTache.sCommentaire			= xlsDonnée(IdFichierXLS,i,nCol_commentaire)
               							
               							//affectation du num d'ordre
               							nNumeroOrdre++
               							stTache.nOrdre					= nNumeroOrdre
               							
               							
               							//Si le poids n'est pas indiqué --> null
               							SI xlsDonnée(IdFichierXLS,i,nCol_Poids) <> "" ALORS
               								stTache.nPoids				= xlsDonnée(IdFichierXLS,i,nCol_Poids)
               								stTache.nPoids_Prevision	= stTache.nPoids
               							SINON
               								stTache.nPoids				= Null
               								stTache.nPoids_Prevision	= Null
               							FIN
               							
               							SELON Vrai
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "x"
               									stTache.bDemarree			= Vrai
               									stTache.bAnnulee			= Faux
               									stTache.bTermine			= Vrai
               									stTache.nNumSprintFin		= stTache.nNumSprintCreation 
               									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T"
               									stTache.bDemarree			= Vrai
               									stTache.bAnnulee			= Faux
               									stTache.bTermine			= Vrai 
               									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "C"
               									stTache.bDemarree			= Vrai
               									stTache.bAnnulee			= Faux	
               									stTache.nNumSprintFin		= 0
               									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A"
               									stTache.bAnnulee			= Vrai
               									stTache.bDemarree			= Faux
               									stTache.nNumSprintFin		= 0
               									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               								AUTRE CAS
               									stTache.bAnnulee			= Faux
               									stTache.bDemarree			= Faux
               									stTache.nNumSprintFin		= 0
               									stTache.nNumSprintDemarage	= 0
               							FIN
               							Taches_Ajout(stTache)
               						fin
               					FIN
               				fin
               			FIN
               			
               		SINON
               			Erreur(ErreurInfo(errComplet))
               		FIN
               	sinon
               		erreur(erreurinfo(errComplet))
               	FIN
               	
               	xlsferme(IdFichierXLS)
               	
               FIN
               
               
               Import_Des_Criteres_Acceptation(oPrj.Get_IdUnique(), sFichier)
               Import_Process(oPrj.Get_IdUnique(), sFichier)
               
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_LANCER_F_P
          identifier : 0x20c271c72ef31027
          internal_properties : BgAAAAYAAACxClMtoApe0wHyb41PO2Doyln1lPCd/U6U/ZYMZCQ760+0SYo4tyTtiG5hDLEYVUbX04oSsee8jzVZIIZTWPMG1rY+OC8JKgVfLX2wHpkA/fxXHkJYCPciU1EtacJpd4ddW1J/r1KCoC3RblV9+76whMpBWA98VCIXUkJ+mzGZbEiKIB5br1ELlDEFYy3s3h34xfb6WR0iIEWPxYhHuB7p5pcgxpZY5Oie3dqQ3uXZ7TrGDkKjUrH2Z07iXMDJGRlbcJErYlmUc8bElCotxPlkEvUbdjJ6swCouFAysGY8ckyQhICudn8PaThkyvISAQkXyNpIPHHrEll1KPfJV70Ym1hiuqE1ct/9eufv5S1nYavHAYUX5hgVc4bc/LUY0PwHDe+CIBU96JYjq/u4Uslixd0L+vXQLLUvVfoWt4tysP4i4OSp7QtWcfTQZXjkT2v+P/Ls3bPhV6o6OL1cP+BZwuRyynLN6PzYcFFukkk0wdMg+D7i57wSD02hrYpsyWHYUqD8FRJXTVRR7GnOamBIObav8xdy5sKWIwhZwa7KoFlVs4Gq9syY0ySxKmvyo73eL+3HhctQ55FMrd0NvCmcF7qPiANdVgI6XUutEr+TsN/RZesMrFDmajfy/GAvrGLTnQMhoC2OzvGiprj/i5OlKEKRATKjDF+R1MK38RSmZJYy31l5tk4LuynCI7SliFgTytWQHbFm9N1br/DGLAyb+nFWTU5V
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1-
               nPosActu	est un entier	= 0
               nPosMax		est un entier	= 36
               jauge(nInc(),nPosMax)
               
               //AnalyseurDébut()
               
               ClObjDB.Purge_cache_obj()
               
               ExécuteTraitement(BTN_Vider_tt_les_tables,trtClic)
               
               //Import des utilisateurs.
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Enregistrer_utilisateurs,trtClic)
               
               
               //Paramétrage des types de messages
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Creer_les_types_de_message,trtClic)
               
               // Paramétrage des états des critères et les composants type
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_RemplirLesTables,trtClic)
               
               //Chargement des sprints
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Enregister_les_sprints,trtClic)
               
               //Association des projets aux responsables de projets.
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Affecter_Projets,trtClic)
               
               ////Intégration des projets
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Importer_credit_V3,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Import_NF_203,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Import_Migration,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Import_Vieux_Stock,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Import_pool,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Importer_PxF,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Importer_Evols_android,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Importer_Automat,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Importer_DEB_LAD_RAD,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Importer_ControleHebdoBL,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Importer_ControleHebdoBL1,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Importer_Inventaire_tournant,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Importer_Base_V2,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Importer_Cerebro,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Importer_nv_planning_trp,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Importer_piloting,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Importer_CRM,trtClic)
               //Jauge(nInc(),nPosMax)
               ////ExécuteTraitement(BTN_Importer_Espace_Cli,trtClic)
               //Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_Menuiserie_2021,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Importer_Fusion_UM_GM,trtClic)
               
               ////Intégration des taches tierces
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Enregistrer_fichier_2,trtClic)
               
               
               
               //Intégration des docs
               Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Import_Docs,trtClic)
               
               
               
               //jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Taches_MAJ_Str_et_Adaptation,trtClic)
               
               //Chargement des rétrospecives.
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Import_retrospective,trtClic)
               
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Import_taches_techniques,trtClic)
               //
               //jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Maj_etats,trtClic)
               //
               //jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Import_messages,trtClic)
               
               
               jauge()
               
               //Purge de tous les éléments en mémoire
               clobjdb.purge_cache_obj()
               
               
               goApp.m_nNumeroDuSprintActuel = ClSprint.Sprint_Num_Actuel()
               ClSprint.Calcul_Velocite_Moyenne()
               
               
               HRéindexe(Scr_Historique, hNdxCompactage+hNdxSuppression+hVérifieMémo+hFTX )
               HRéindexe(Scr_Tache, hNdxCompactage+hNdxSuppression+hVérifieMémo+hFTX )
               HRéindexe(Scr_UserStory, hNdxCompactage+hNdxSuppression+hVérifieMémo+hFTX )
               
               
               //AnalyseurFin()
               
               si pas EnModeTestAutomatique() ALORS
               	Info("Chargement terminé.")
               FIN
               
               
               
               	Procédure interne nInc()
               	nPosActu++
               	renvoyer nPosActu
               	fin
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_LANCER_TOUT_ss_trello
          identifier : 0x20ce4fa1138a7821
          internal_properties : BgAAAAYAAAAcao3FYcA9tKN/ukzBkAYPOfuKeL5L/ksjh0pHpJAzavZNlGtjh+BWW7XNJpZRXoRK0CUOWIQWWNvHD2tDcZov9E5LVXlQ1UuqVppTMyFHHP7B/lGOkkEC8mHz64R++ynBF7P2m+P8Xe/Ne7TgdMvpTlOtjQQJJvlMu0bAI9nSuHhi2kohh2VtVqv0kj+seSvpvUoX4snKsBJJ2nzNWl8BqXOooHGtOl/N/6L4F2JQ6jpxCK134OtIAj/3mVGSJH5CElCCdm+pgh+fl2i8bETe02FEJscLKx7unAFRv2Nog1Zm3G8ZTOmBipzJUPzM92WfbSn13ayRQR0C/wgB6yRQQ/co5TQI9zwDezCyGTJA51+EPt9XGsmoNo2YohFfc9lBZkaXLGqDRPCQO1GusX7tmZjaX3NhckXZHML4pxLp8cqnN9nRygUWayFct+AT5AYums/zrWTnL7iRYNsGyFOWyk19i5ZurG44l7l88GD7auWDB2uSnu5eZaZRW8S5YHrK8/U7t5m7C1q63j28Hadh51f2oIl5OtgRBVMWjIA4tBvlY+31+fGx+3UF3hrozqoIenrQudfATT/qnpMEeJ1X7d3PLNHWTM97W6Xrui31pfdDyH1W+CyYkbbOSoruRc0r2TMIkn4D58ufyZqSsSk3xDSPUH2qlrba3MDI4q5gMtYPmaf/SySiBJjKbBJqwT3Yg1tWpbdyDvsedsjwA1/Y/UPcooULbQw+hIIwjddsTfEF
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1-
               nPosActu	est un entier	= 0
               nPosMax		est un entier	= 36
               jauge(nInc(),nPosMax)
               
               //AnalyseurDébut()
               
               ClObjDB.Purge_cache_obj()
               
               ExécuteTraitement(BTN_Vider_tt_les_tables,trtClic)
               
               //Import des utilisateurs.
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Enregistrer_utilisateurs,trtClic)
               
               
               //Paramétrage des types de messages
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Creer_les_types_de_message,trtClic)
               
               // Paramétrage des états des critères et les composants type
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_RemplirLesTables,trtClic)
               
               //Chargement des sprints
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Enregister_les_sprints,trtClic)
               
               //Association des projets aux responsables de projets.
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Affecter_Projets,trtClic)
               
               //Intégration des projets
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_credit_V3,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Import_NF_203,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Import_Migration,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Import_Vieux_Stock,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Import_pool,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_PxF,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_Evols_android,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_Automat,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_DEB_LAD_RAD,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_ControleHebdoBL,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_ControleHebdoBL1,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_Inventaire_tournant,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_Base_V2,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_Cerebro,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_nv_planning_trp,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_piloting,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_CRM,trtClic)
               Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Importer_Espace_Cli,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_Menuiserie_2021,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_Fusion_UM_GM,trtClic)
               
               //Intégration des taches tierces
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Enregistrer_fichier_2,trtClic)
               
               
               
               //Intégration des docs
               Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Import_Docs,trtClic)
               
               
               
               jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Taches_MAJ_Str_et_Adaptation,trtClic)
               
               //Chargement des rétrospecives.
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Import_retrospective,trtClic)
               
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Import_taches_techniques,trtClic)
               
               jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Maj_etats,trtClic)
               
               jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Import_messages,trtClic)
               
               
               jauge()
               
               //Purge de tous les éléments en mémoire
               clobjdb.purge_cache_obj()
               
               
               goApp.m_nNumeroDuSprintActuel = ClSprint.Sprint_Num_Actuel()
               ClSprint.Calcul_Velocite_Moyenne()
               
               //
               //ExécuteTraitement(BTN_Recup_listes,trtClic)
               //ExécuteTraitement(BTN_Recup_tout,trtClic)
               
               
               HRéindexe(Scr_Historique, hNdxCompactage+hNdxSuppression+hVérifieMémo+hFTX )
               HRéindexe(Scr_Tache, hNdxCompactage+hNdxSuppression+hVérifieMémo+hFTX )
               HRéindexe(Scr_UserStory, hNdxCompactage+hNdxSuppression+hVérifieMémo+hFTX )
               
               
               //AnalyseurFin()
               
               si pas EnModeTestAutomatique() ALORS
               	Info("Chargement terminé.")
               FIN
               
               
               
               	Procédure interne nInc()
               	nPosActu++
               	renvoyer nPosActu
               	fin
              type : 18
            -
              type : 161
              enabled : false
     -
       internal_properties : BgAAAAYAAACZCX6FZ5tqCvfyn3D0KL1+pimULBnYCSgLCXsmwiiP7lGlhAu1O/c6fWfZmBd50aWgHBgosDUs0QI9q0vJ3/kr++T5rKd8antA2Ie40c7BKHgWNyjByQ7FSilYfuAY+njZI1HYB65BLUj9jsr1KYQlNmRnJn1Fgg==
       controls :
        -
          name : TBL_Tableaux
          identifier : 0x20b7e47b28a91d71
          internal_properties : BgAAAAYAAAAM7R1xlQN6xSH0vduP7p0n9P2OtX2oCteHqMuA2mdse+zUgOLnELKv8iSW0F2lAx8BIfacAnYqiMMWbKjFq2K3AyRalJfyzy2XDj80MGcwZn4M/2Foyz5sCkNWJmpmwxVjL/u3yMYcYXALpvfLlKDEJrqxBq4dtiqVXyzfw5rrrfN/I5B1VPOHCIPU1zYN3RAvOJ0l2ZAK9mXjZVDhz8w5qhUvuSZ+u1uDOWnlHlXW9ISVm91EB1MeAdVA8hlAYzlYmjNc5B+61Eu7B69YIXnk80rzc9o3kQK/Quqwc545JnjrkuMTr9CXjUgb0LaVW8/w5ZZnhNFmyWGLKtsOv5UClTaILjHBYPw1vuaysAchUlsdR8V7XopQUDFsc0yTjPUvaTrQt9QxccG6+AmvHLXJ68K9uFDVoN2CvNKrWyPO9xZryQS0yBNdVeDxtdd0FiEt1bx0RneK+voFuwv/DmRQZzD8vA9K/LzIyOwQXqfCdE5JiW2HDdBqkTNuEHO713zGTVTA1RJf5qNNEhT0PaXj56GXlOFckhMGPbOK1XCu26dJAwNy4AcnEzgxirAiEYf7FfnPnrNDbhBFYVU3UOF6Lq9icGuKrQdUZtUG4u6IfjddxHAuwplkHkNto2s6K1/ANqDY1KhUX+VZgUeDts80t0mqLDRd1TKmq+wFU6GL0XpxhqMhbmn1eXneUfOTkRYRvTvM4zYWcwCvRGFRob3V8T76bptv2mjqsnCaQsPvPVLBHsHPGzCbTcChK3aphh4OoXvoP4/FlY3Pdblk/goYie4pplhnHyxcmNeObn3vYxE/BdfRiialRBnqHEYGsbR/d3/MNqzCdww1b8OnEHIjx2LtEJIzeAOi3eaQ32BxPtuaK5SKbno4H2dSD7OZi4ACsKEq2LYyO2HcZYn2nf5S1y0sCF9nF3VtEkXUzKHPYo20rGhX/p+/TIuuQqEgX2KI7qcuM2YSM9Shmsjh+hUvSykDqALkn8a+ApYUD023TsBu/9OvEVUdBQL9luHCCbElHbNi0eKDSVWnMVshInYvhY+UyiE8riqZf1D629zusAnI0VoquE4tzZ1rNuENqP2rSFF61+OXOhjLABbUMNmBzPXk110bk4Oa2npB4vrTlpelrSWa+Efai7lOH5gb5sPM/zTxilqFLPF5aU0SjKhKPdlW5enlNZPnzL/8hgEWsgeMwf3vZuQGLWza9MB7YMvTd+4YdtTXW96zAyoGBXKp2ssC6AtrCfka2tCvm5lDGh3qXCZtq/uN4HLCb30+a/VDvR8MBNvA9VBd/Il3oIRroWEX2qrP04Sneg6hHynkvXPPWCyVUdx9ZqzqQ/LhiEWx1aIepZ8AHjqxGMk+45wpPTgeH1LoHHyx26TQ3VxujAKGJvqNAqlPi/Oi9r87dNeTzsLpOWKkb6zXtFX2p9kmqKGN3s2060aM1rMYvIR+ZYL9PxbdEIyl+/Vgg+MByHX33DyuMFtqVo9i92SChc14OKzU+sTJfMKriADtiDFuewa9SlIuBGTEP5ZSa3pYZQzCJNnK1i3t6C1a5rKGCSw/u5WbWxqDk2MXOIz/WwS+IMAY1DEbEQx6IYIAjecJs4lAqkH31rYc/M7wLs2CsM/L8H3r+gQIiYPEU3X66p16jgMXfIuD8kpZRbrYC1scONY7T5Jc4w8ACdZG5rcp12JbteNCIt0hU3xCBzOlkPPIfAxRu4VpNKMoZzFXzIkh0IBqG+Zq7OVn4r5qiBJBEk3PkYml1/j2NnCSpIj4z1wfp1+5iKYLoodZ198JP+xzPiiIETumyQk5yCG+unxgex6BtxN97ATqL+rVD9VTS+ZXFuPsXKcxiCYpz5JkNV3MVku7lZJKfHZLcJ7jZADo55sBweNkHQR6mbxxjYfPo8dORLLqhl2JKnRcflxnnNG08JXzr+xPTZZ3i4mi/VPP9zq19oqMg4pXE94z2xI9JhTFJmC9WdrZfDYHKLfkQg6PVXmLm1LBedpsO5MvLSd4hVXgHFEDlh4vQrpcoGjKI4NsWVlX27MdsKuYgrEWZSpjOBTE1pSihucvv79O5Oj8O/OYhQeBo1axXdeWJKltQEAugrUdEgdBkNvL3unzdh9XstZyqn5M918no2sDmwhLTp9fQHhZNIkjYrCOGKekQnRzeg0/FsdNIHwY5vj20BCSBqlIDqHhTWM83BFU1ft6Go+7gkx4ZGoD2V1xXl7xBrEzcJUtvffEhjrxtTZv0YwEBKDinC7XsMySPKyY8O28S1wz3xzbzTd5/4TdEO5NDz9WWlQ9+h1SdCtbcN4Uct777WjhiWAXBACmssSOMQ7CK3U8hfbnkGbpNjRUUhFZyvNfcjAmsrq6wZarUOLwUBr7YMlP/Th+goIcGxg8iJJ05sxjGnOBjX+r7EEMGB1r4aovXQuGbTGyFHLFUKo5vbC76KAKEw0w6QPCCx/RkaZNlHCYyVFg/4ejZpykqtuvyfcfQp3kaKXXC51Kd6TC5seR3lQiTFQYtMGu7ZbMVUV0TMyloQyHEhIEmJcZ1CQ0QWuwxuSz+Pt1Y9fzbis8Go3kaW2r6XfGq7uW7f/hnyIi7e3QKkXveXmq7b1gPw85WMnC5KEbROzlWstvpGosL/M1EDhGEN+KUhcpnJEFaeJwfB2DoFGQWredoCF4ccov+ghskSKjitsC/wKx243mZKcGsOJMXMfukx7e9UEvl5v1dhbMDvRDJT4Md728ne3dlYFdo/G+OEBE98k6UZ5CmJwM+WOEUztHQNI3mUqLQsuOjLBQho8QQsqYECwkKrx/B61T1yEI5Wz4AfkbfEFI7b8fmj4OM6PWX27Kq8oa7DnVf/MKbYCp3VhOEKRWt7KSncCkgpWpRsRO2pMiy/ehrmD55lzCxbg+Hlq9Fs7ZDWMaJ5FGjeRuyb29OaoobK4CPYAA2pXBgf8U/xXUiRAj/FYX04kYQRhjlXQlaZ1oqnzNGqF6Vo7WfYNP0G7l9UCDS6uJoO81w4kKJX5eLLmjUidpmJPTBSCAl5NKFrStteCis287uphFbyrlYJ8pceFzXHyi2EbRt84Lo9MLeZjjnOt3zrwj1eaoTHxNG9Zcg/qNCpllQy2afOudST3YGJGpSIc1iW6sjhz/rXqJz7xYKr1290cmMkybSEa6ejQeb4QNcl/xz3MpzLfpKVH8MPtnfcZV2rDuocRMgWlI9BDbfTdoMWq04LEC1f5xeSfEdptkRmjvy/dVdBlUAB7ppeMH1YxzdCRRBGlw9UFtiXZKidSisukDTlMvF6vpoOlsDjkjQbJzOat/taNqTnPmG2PGucxOMFvu769mZ+33hA5txyoAGE7mg8PKsCLjHbVQRFPeKy58HfQn4bx6DZoLFtf+N3ldh+89OMUl6vwK/Ml7b7dvLWzCfpQeu9JAGhTMBXZjfTsfwCYLywtHfZ9/VqI7Zj1PqKQDtdGzAmFaO43PGQe9kAN+igsVktdva55YuJlYe3EQJXeQnrwYYT8jDk2REtGjpNsoYWewmJ6cgHhQ0Em1c7exvLLw4DKtoXwGQC4d/L8l+p4nS2SAmXFCAVqtE5SENPOxmnwXIO1t6XRxej7zBXAEIa0IrL6WT9J6gkJZHtpXHv0IptkuP3VD+G8NhuE+koKI0TwMrpBhFwmlhoP/iQUcvw0gVz1Mpq7pUuL0tTobclpfK7h0/33eeWMZ7sMPARiiyR7tXt2DXbSpg8wwdja11LvCkDWHc0xE7Ld2Mh8ssA7gbQQJXf+CcfrCoytDfWNYB0WJnIeE2lckpFxXXzuHlsVtkbNbh+rQ+xAy4rZyL06/CmDL9aTFuAUO97Qig5JOHRMLJO2pZEG8+GlzTZ0AHUBCyOmoljc6tIMz+ZxfjGsVYR64uhAFSUqDMLjqXsnO3XSPXXfG2vgylpj6EIclKN/5u8ufhqyD5iLJuBOxy83SToAUg18DMO/eu3+cXBmomuWiFCIIatk02Ay+uPX73nVKEEyGEJ8YlJ8DotanvQG0Pb1lfNUfnP8MM1Flykeq4V3VaOgZEagl/4FZeTd+rbH48IxGIIf2ULq33Zs6R5GmoNz/XgpanmT4lm5z1PVhAp3vfBBu69+aVjB4Pi5rOYzxt++U7SFtzDSs/YQPLHt5YZs9wG7Ii8hZqcG6fIZ9HAHIWqmd00QQutJezEHhP6mCeStCcNqgwLpmRTfjjvaytLMbwo9738udfWBON8mNRKifQCtlgby111TC4MiY9rP2goCpmPTsDRvDtAqMFO5qbHg9/cgKTTXtJiuzKjGcK6+j29neWcjZ+qMVtO+tABPhQmhoDrVkB7Amix/QLPKCriF4zJ+U5igax0gLhTJxuofrLhgLIS4IFP6FqkwVFKZI188IPnjbUbkAcDqe0C0ZEWs3idLXE0yS0ab4qSZjSRJ8ripWMxv8MO38TPs9n8fbL8hQHpBHIUVDo7kmVNjoLnyF0BBFEuuGyqxIDrV1xw9pagpsevcaxwUgfkodRBNnC5fTsD8C1Hp0Ne/OMANYU15Mdsn6lPPbX/bVTL6zarC9HMWrdcfic6BXPpS4ezM8NdAYP+qp1nlJp/+Ydrjho9WLEAMb0b7woKGA9//W9KVsOlphJtKrQbfSm+RMjhh1lLM/+R/gylOqZ5118/yIH2Mm1SirOdd3m/3uuiaI8Z97uB0JDhIb1n1mitOWzSOuA0YUFA2XNlip8rcD1dLZu8Dzu0MSHH0WSK9IuA0ommvpN3+vTHaMV394KQI8hhuR1Oclsp8VBjCd0AXcB6YjwbjjFTHhVjjIQOPdXKwz020gCyu7kiz1Z8qrii3i2IoUiMfF6jqrLRZqU9/Mf7MSNfr/oY++KX8P81iTDiIvyG57+VC3Ua/7J20wG9fO+y3C05lJe9EB1hf/mSPsbDIPVOYilde5NeoYiOzGqCYV7Qp2V9mGOq5SWMX3i7/541u3y1/fpD6dkpMwS/fq4CARmxO6dfk0j9oe3ntO9ujIVt43nXStV3Fep1kuL2x35nMy+H/I+qHpdgxkGaEhrkBelfuiwgGWmOM77CpaLBJQ7slnHqUXRGLtBzEjIEUMT3YUHcjeNTiPBGIY7pTTTdEV0q/mnJqWcJMbE4hcZcNq0MLCNDn+nbBU+VW1I8RkshUjeBdu3atN9aNFRsrYQhcMV6S5AwyBq0T4fAPe+4ng5nfgGccigVxXHuccv73jpQG1mIReLYCHNTNmULoqsnwmmQzPU2mVV3OYDK4OhgBjMfBLSh0k5ZSHr0FHjS9YdRBokZxtqtoC346XXwwBfXmb3Vzt08+XARYQ5Cu2Ysj6aM2JDz5t6EU4pj5Y/RX5UzYA0jt4cX/NYsHXXUj4WqXgyLXFhgA+H7Mw+xz/GRhsHQ8rYsH7RnUNN9VZ2x3o4yABXsj8cO9+5c1vkNtEQ95ZEcCX3EmmOwa3+kLBPVVzPEUIa3cUqpofg1DkE9kb76qt+GfT6k5EjbN1xflnh9zZ+Ab0fbXdSOaGtSS93N1t/fgeylCXfn00YKCuMy6NWNJ7wNOc4qDIVh6XgKoLTKKDazzKT/O7cmIW08Im9jhkr4jSec8+9vmETHrjFRqyWb6Wyml8RifKyZcYlcFHPlFLR0cOEs9cD0Ii5NWaVpNr3BMfamyYPPMAfo9w5LbKac1VlKYYMWXMmydvI7xVf1Nkp/mTJTVpePBHZJAg0Bfk9K2+CEkz1bJOgIULCFl4vxxDE4z4GsarT+/iQ0O7fhOfB8TPDqc68WKymrv8u2cfGh9gQ1O2TAh352zDIX/RoDMMzNooqgoOzLlz2oRJWnaEHh11wEdaG23gsadNivTk6ZV7X28NjZpA1BI+Zt4BqMK+CLAwZg5rgt6fOA==
          columns :
           -
             name : COL_Liste
             identifier : 0x20b7e47b28aa1d71
             internal_properties : BgAAAAYAAAC5/Ae2SnSAZmOLilBrAIhQk/gQXMDNRPMEJtnCfwTaN7CP9ct+7DaIxhcrh7XZqtWDA1XxYzcz/1ZM0dZOInwwSEVWvZED27/PEmi+fKS/5vmB1Dt6Rzqnl7CFOWhCOlv2htqJ3svti5DY2bflkqbJ7vFE0OxCNX7Um1NxfZNKR4QpMDc=
             type : 2
             content :
              internal_properties : BgAAAAYAAADzouO8QePHx96vcNPC4vXEz+qJ6z7NkeE+RUyyQDTEzHsPZEijUAM2ucE6RKCZ73YI1C5OfOGCqzrID7IvaWb3O99ePwfexhn3rK+3/CpSzRqZ35yvuyUDiukMPUvCBB2s6XyNjTmv3sBZMi0oNcT1OuOEe3YbFW3cJkUm5/oEUYNTcV+E8qIrxyCJQJxTdK/+y4vhULHh9qjsC03zcugLVrp17klp7mDcdeQVwgnewSItduZ2Wpvdf/AsyGsub9CGkWnZyYvJmcszOJIk/hJ1baruZtPhazgTD0/nJU/nQVrUlLtaSl6TRb+CgrEP9W5CJ+BJ0GF1GXiCM3jm6JTVoIasDfVA7tmqs6RyNuxzstIzTwW3mzGbEL+h1gETrkZydH8YP3McU3C7WMlj3lMYHl2OOc4jcBO3VWv4ilSFdTK5aLVn/3DKLaqThVyJkeVztG9RL+4Wih6dHuAZzPhvOJpZRWKZ3E5YZNj77EmP/hZ3kn83scS6yFy0lntFdeeme9NXJTg5EHFZ+8EMXt/0LUkG/TJn8cN+y0W2M9QSDUXE5q+zN8HGD1rDR+4OqjOx8uSOBPcm9U2KNWFV6hlF9y8OF/W+ZydzNAORQKHjzGu/xE9P4IbA80oqQF04+7s6l9CTQ0LCOmx4iCOCTraBwev4gIgNnDEX5JJgJajBDoq7gm9lZYDBTU8t1EHrtIJ1vD1FKJWXoUvacMn2n5EfZiO4odd0u9tyX4o5N+ZZQ8X0epKYMmNfBjR7KzTVOl3MCh7tWBeTY88zorjITK6MBjAiglyg7W40GkhN8VHwmPfL6V0Lt2ae/lO7EYg/
              type : 2
             code_elements :
              internal_properties : BgAAAAYAAAD2Rkbx+OjeaV6cz3eLdX7jB0Jgs6WDDXWz15HdSBZm9oeZQ2BKnjRAOa1wH4EQ9d5x
              type_code : 3
              p_codes :
               -
                 type : 276
                 enabled : false
               -
                 type : 277
                 enabled : false
               -
                 type : 278
                 enabled : false
           -
             name : COL_Id
             identifier : 0x20b7e47b28ab1d71
             internal_properties : BgAAAAYAAABDRl0YbAxoWQRfDxOcXVJKfd9pbrdhjPKpy+wxGdC3akLoV+7jaeFEZ9kSExoeCjEzgRpBH5DrAd4pdZJU+GxZKd3xldpnQ7SkKrvdWriD579qtxjLFSFgQcRSV4fjLCtaNyADabjsjV44pP0Y4smRezk3OihWV4EwkvWvhI70
             type : 2
             content :
              internal_properties : BgAAAAYAAADzouO8QePHx96vcNPC4vXEz+qJ6z7NkeE+RUyyQDTEzHsPZEijUAM2ucE6RKCZ73YI1C5OfOGCqzrID7IvaWb3O99ePwfexhn3rK+3/CpSzRqZ35yvuyUDiukMPUvCBB2s6XyNjTmv3sBZMi0oNcT1OuOEe3YbFW3cJkUm5/oEUYNTcV+E8qIrxyCJQJxTdK/+y4vhULHh9qjsC03zcugLVrp17klp7mDcdeQVwgnewSItduZ2Wpvdf/AsyGsub9CGkWnZyYvJmcszOJIk/hJ1baruZtPhazgTD0/nJU/nQVrUlLtaSl6TRb+CgrEP9W5CJ+BJ0GF1GXiCM3jm6JTVoIasDfVA7tmqs6RyNuxzstIzTwW3mzGbEL+h1gETrkZydH8YP3McU3C7WMlj3lMYHl2OOc4jcBO3VWv4ilSFdTK5aLVn/3DKLaqThVyJkeVztG9RL+4Wih6dHuAZzPhvOJpZRWKZ3E5YZNj77EmP/hZ3kn83scS6yFy0lntFdeeme9NXJTg5EHFZ+8EMXt/0LUkG/TJn8cN+y0W2M9QSDUXE5q+zN8HGD1rDR+4OqjOx8uSOBPcm9U2KNWFV6hlF9y8OF/W+ZydzNAORQKHjzGu/xE9P4IbA80oqQF04+7s6l9CTQ0LCOmx4iCOCTraBwev4gIgNnDEX5JJgJajBDoq7gm9lZYDBTU8t1EHrtIJ1vD1FKJWXoUvacMn2n5EfZiO4odd0u9tyX4o5N+ZZQ8X0epKYMmNfBjR7KzTVOl3MCh7tWBeTY88zorjITK6MBjAiglyg7W40GkhN8VHwmPfL6V0Lt2ae/lO7EYg/
              type : 2
             code_elements :
              internal_properties : BgAAAAYAAAD2Rkbx+OjeaV6cz3eLdX7jB0Jgs6WDDXWz15HdSBZm9oeZQ2BKnjRAOa1wH4EQ9d5x
              type_code : 3
              p_codes :
               -
                 type : 276
                 enabled : false
               -
                 type : 277
                 enabled : false
               -
                 type : 278
                 enabled : false
          type : 9
          controls : []
          code_elements :
           type_code : 9
           p_codes :
            -
              type : 35
              enabled : false
            -
              type : 22
              enabled : false
            -
              type : 24
              enabled : false
            -
              type : 23
              enabled : false
            -
              type : 25
              enabled : false
            -
              type : 230
              enabled : false
            -
              type : 241
              enabled : false
            -
              type : 263
              enabled : false
            -
              type : 262
              enabled : false
            -
              type : 222
              enabled : false
            -
              type : 223
              enabled : false
            -
              type : 224
              enabled : false
        -
          name : BTN_Recup_listes
          identifier : 0x20b7e47b28af1da0
          internal_properties : BgAAAAYAAACrbuSsauWkKR9alEovNO5kQd3vWJeEjNsad6ZoZsiYwbXrS0I0XEhRRUNWKl4bRrLAZdSWPSyTeJt3WQgXcEzEMDDA6oHXCYKKwwXNKK95eg9ndVlHNm7tdKTQMHYpinEsvHxvYLQZ2A4jJ0QBF/4ihOBYZvn6wGLoFIjwlnHo+eXd1D4Q46lgVXJDHPOJT5Chrq+ypxWvRPe/HMZz8kjUVyy7A4haCFXZ31Op7E8yHikBqU3nN5mFOSsPAdEO9hivGI+qA7fIn/Si1edWBnZ9jYb3XZhyFGecBf4uHnVlM0lun2abc97HSthnYjQ9UUzzpxUfnJjV+lVk3TPoB72Y5TSIXobl7MAe+3vJXHpEfoUrycMGlvR+xj8+tXI1fRQrJtq1QPyP5LN/RKzV+T1UdbH9cMWWrKQdBhohH0yCSUkSwAuvTDzOyrEl2cZXgWGqaW5VWk40/oQHw77YrPq/VhOnEb48YlNTL+IZgEa36y0aBlz+nB5H2HmFD9IYnD77YC1OPFZ0Cz4R8Dsgc03rgrmU6H6e6MFoq9UTbpclPJerWr40dNYFYyasmKrehAcyZwN3fuIX5wXhk+5gAhPHYh29btsSolGry8zGXufLmoHdf0RjcfOk7OjQ2FigeFPiBoyO8nZ35rQEHkLGoVt+WykANpZ0xFScM0THpp5aA1lheHzT2y5KJgD8HsLAtdYdyDERsSETkPPFXWE4bd2LjrUccAP+ips=
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               
               sReponse est une chaîne
               vRep est un variant
               vList est un variant
               nLigne est un entier
               
               
               
               //récupération des listes du tableau
               HTTPRequête(ChaîneConstruit("https://api.trello.com/1/boards/%1/lists%2", cst_TableauScrum, sAuth))
               sReponse = HTTPDonneRésultat()
               
               vRep = JSONVersVariant(sReponse)
               TableSupprimeTout(TBL_Tableaux)
               pour tout vList de vRep
               	nLigne = TableAjouteLigne(TBL_Tableaux)
               	TBL_Tableaux[nLigne].COL_Id		= vList.id
               	TBL_Tableaux[nLigne].COL_Liste	= vList.name
               FIN
               
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Recup_USR
          identifier : 0x20b7e47b28b11da0
          internal_properties : BgAAAAYAAAAdZo6JZuCcHC76W7DSU35a/gH8ZGuerCfV35w5vRkorxWvYkVdGNY/nPIoxcEfV0a11z+gB1wIf0CQLIxTEoidRlEkwTBKVC5Hh1FF/UAcshPPiW6ygR6hs5oJMFY/GWVy36Rvg4UQRNLUlnJdfm0qpbOfzgXBnqUtkBrGGKQEiSlHx9T1mXh7rX0ar2FhPRvvMJqcEfuOA3R83OxKFYIp07LBQ9E257xpICOaMi+e23lVGC7lh+DKoV1CVz3wH04nTyIKn7q4QkNK/IMPAbdbWJt/2PWsd2Lx1ANDWna21S1CIkcYQbQ/aDAtJCcn1ks1HnSBrC2UbdKTKS2nAkxOMzbUTncUrpXwQJt5gWJViEpTkqsqwxq5B+z6QwtBq1tmPY80cv0pYc6uQCoeg+cRtLwC5/+NvmcIXeCV9kzCtORJg6Q3LexDuwaLNRUjMSo16NlOZOV2NdFIJ/xzfJREyfKARFDB8DKk7M4vg2Y3jsC5z4+sMerw6V7XR114qHvmv3olZnd4fJfGaG1tV+OwlaBhZwZpFoD3HkWlQ6lnCWqa15V0Z4y4PpW6HHMoHsirtj4oN/4xH7dXBv3gRUSRSFNZDxneFb0N3NlTDqkgwQw1RGFaVU7mQrILS1hbTsxvjXNi/SagkTK7YtYml0MVJlG+dM06O6LEj6yukCk5ANGLqhZ+zO8Odgia3IyXuD6bjGxjW3AFzUjLNC9h7s22Rz4hqeL5
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               
               sReponse est une chaîne
               vRep est un variant
               vList est un variant
               nLigne est un entier
               
               
               
               //récupération des listes du tableau
               HTTPRequête(ChaîneConstruit("https://api.trello.com/1/boards/%1/members%2", cst_TableauScrum, sAuth))
               sReponse = HTTPDonneRésultat()
               
               vRep = JSONVersVariant(sReponse)
               TableSupprimeTout(TBL_Users)
               pour tout vList de vRep
               	nLigne = TableAjouteLigne(TBL_Users)
               	TBL_Users[nLigne].COL_Id			= vList.id
               	TBL_Users[nLigne].COL_Utilisateur	= vList.fullName
               FIN
               
              type : 18
            -
              type : 161
              enabled : false
        -
          name : TBL_Cartes
          identifier : 0x20b7e47b28b91db0
          internal_properties : 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
          columns :
           -
             name : COL_Liste
             identifier : 0x20b7e47b28ba1db0
             internal_properties : BgAAAAYAAAAs/2qLLRfVK5jWx604/SWNxqsngdswaZBptbp/HCU7EGs2jIxFA59hZzYIuNpCAzYiovQSPko899wKAVi4vCqGzj8nInwY7AbW9ckro81kCZoidZoZ4NE8eNGm2M/rkzIvv4NQBewMqP11ZiIIf7PUmyZxI5+XgMth6CCssEAnomEOLco=
             type : 2
             content :
              internal_properties : BgAAAAYAAADzouO8QePHx96vcNPC4vXEz+qJ6z7NkeE+RUyyQDTEzHsPZEijUAM2ucE6RKCZ73YI1C5OfOGCqzrID7IvaWb3O99ePwfexhn3rK+3/CpSzRqZ35yvuyUDiukMPUvCBB2s6XyNjTmv3sBZMi0oNcT1OuOEe3YbFW3cJkUm5/oEUYNTcV+E8qIrxyCJQJxTdK/+y4vhULHh9qjsC03zcugLVrp17klp7mDcdeQVwgnewSItduZ2Wpvdf/AsyGsub9CGkWnZyYvJmcszOJIk/hJ1baruZtPhazgTD0/nJU/nQVrUlLtaSl6TRb+CgrEP9W5CJ+BJ0GF1GXiCM3jm6JTVoIasDfVA7tmqs6RyNuxzstIzTwW3mzGbEL+h1gETrkZydH8YP3McU3C7WMlj3lMYHl2OOc4jcBO3VWv4ilSFdTK5aLVn/3DKLaqThVyJkeVztG9RL+4Wih6dHuAZzPhvOJpZRWKZ3E5YZNj77EmP/hZ3kn83scS6yFy0lntFdeeme9NXJTg5EHFZ+8EMXt/0LUkG/TJn8cN+y0W2M9QSDUXE5q+zN8HGD1rDR+4OqjOx8uSOBPcm9U2KNWFV6hlF9y8OF/W+ZydzNAORQKHjzGu/xE9P4IbA80oqQF04+7s6l9CTQ0LCOmx4iCOCTraBwev4gIgNnDEX5JJgJajBDoq7gm9lZYDBTU8t1EHrtIJ1vD1FKJWXoUvacMn2n5EfZiO4odd0u9tyX4o5N+ZZQ8X0epKYMmNfBjR7KzTVOl3MCh7tWBeTY88zorjITK6MBjAiglyg7W40GkhN8VHwmPfL6V0Lt2ae/lO7EYg/
              type : 2
             code_elements :
              internal_properties : BgAAAAYAAAD2Rkbx+OjeaV6cz3eLdX7jB0Jgs6WDDXWz15HdSBZm9oeZQ2BKnjRAOa1wH4EQ9d5x
              type_code : 3
              p_codes :
               -
                 type : 276
                 enabled : false
               -
                 type : 277
                 enabled : false
               -
                 type : 278
                 enabled : false
           -
             name : COL_Id
             identifier : 0x20b7e47b28bb1db0
             internal_properties : BgAAAAYAAABCR14hZyVxEnF0rPb/uK+RlKRWA1LCOW+6xP3AqENIcTnxaNe6Jqq5RP63hoXt90i6Bu+2SvUgG/irZ/aCZBo4hky4jqs89KFRN0hIzTUMbiTXJKsm8gRFeo2rPq7MxUJzyLHyeKnb+svVwZjzByJoUBYU3YsrIspJe+62g4/1
             type : 2
             content :
              internal_properties : BgAAAAYAAADzouO8QePHx96vcNPC4vXEz+qJ6z7NkeE+RUyyQDTEzHsPZEijUAM2ucE6RKCZ73YI1C5OfOGCqzrID7IvaWb3O99ePwfexhn3rK+3/CpSzRqZ35yvuyUDiukMPUvCBB2s6XyNjTmv3sBZMi0oNcT1OuOEe3YbFW3cJkUm5/oEUYNTcV+E8qIrxyCJQJxTdK/+y4vhULHh9qjsC03zcugLVrp17klp7mDcdeQVwgnewSItduZ2Wpvdf/AsyGsub9CGkWnZyYvJmcszOJIk/hJ1baruZtPhazgTD0/nJU/nQVrUlLtaSl6TRb+CgrEP9W5CJ+BJ0GF1GXiCM3jm6JTVoIasDfVA7tmqs6RyNuxzstIzTwW3mzGbEL+h1gETrkZydH8YP3McU3C7WMlj3lMYHl2OOc4jcBO3VWv4ilSFdTK5aLVn/3DKLaqThVyJkeVztG9RL+4Wih6dHuAZzPhvOJpZRWKZ3E5YZNj77EmP/hZ3kn83scS6yFy0lntFdeeme9NXJTg5EHFZ+8EMXt/0LUkG/TJn8cN+y0W2M9QSDUXE5q+zN8HGD1rDR+4OqjOx8uSOBPcm9U2KNWFV6hlF9y8OF/W+ZydzNAORQKHjzGu/xE9P4IbA80oqQF04+7s6l9CTQ0LCOmx4iCOCTraBwev4gIgNnDEX5JJgJajBDoq7gm9lZYDBTU8t1EHrtIJ1vD1FKJWXoUvacMn2n5EfZiO4odd0u9tyX4o5N+ZZQ8X0epKYMmNfBjR7KzTVOl3MCh7tWBeTY88zorjITK6MBjAiglyg7W40GkhN8VHwmPfL6V0Lt2ae/lO7EYg/
              type : 2
             code_elements :
              internal_properties : BgAAAAYAAAD2Rkbx+OjeaV6cz3eLdX7jB0Jgs6WDDXWz15HdSBZm9oeZQ2BKnjRAOa1wH4EQ9d5x
              type_code : 3
              p_codes :
               -
                 type : 276
                 enabled : false
               -
                 type : 277
                 enabled : false
               -
                 type : 278
                 enabled : false
           -
             name : COL_IdCarte
             identifier : 0x20b7e47b28bc1db0
             internal_properties : BgAAAAYAAABMaNeM2O+VtV0PfFhUWv6TJ2JKDBGrEbGVxxSnfjQuLbBYFpes4Pi8EAyE4lmW37ArKWt4GhRwPL7dtcB+QmA9+LWeSihzDoV1Ws1r6aZ81syziJV9/wxXiO5eXUMKa53QbmbvMxgyr7w76gv+UiWx89nvnL1YDSVnOE38ek1ty0Z2HMdj
             type : 2
             content :
              internal_properties : BgAAAAYAAADzouO8QePHx96vcNPC4vXEz+qJ6z7NkeE+RUyyQDTEzHsPZEijUAM2ucE6RKCZ73YI1C5OfOGCqzrID7IvaWb3O99ePwfexhn3rK+3/CpSzRqZ35yvuyUDiukMPUvCBB2s6XyNjTmv3sBZMi0oNcT1OuOEe3YbFW3cJkUm5/oEUYNTcV+E8qIrxyCJQJxTdK/+y4vhULHh9qjsC03zcugLVrp17klp7mDcdeQVwgnewSItduZ2Wpvdf/AsyGsub9CGkWnZyYvJmcszOJIk/hJ1baruZtPhazgTD0/nJU/nQVrUlLtaSl6TRb+CgrEP9W5CJ+BJ0GF1GXiCM3jm6JTVoIasDfVA7tmqs6RyNuxzstIzTwW3mzGbEL+h1gETrkZydH8YP3McU3C7WMlj3lMYHl2OOc4jcBO3VWv4ilSFdTK5aLVn/3DKLaqThVyJkeVztG9RL+4Wih6dHuAZzPhvOJpZRWKZ3E5YZNj77EmP/hZ3kn83scS6yFy0lntFdeeme9NXJTg5EHFZ+8EMXt/0LUkG/TJn8cN+y0W2M9QSDUXE5q+zN8HGD1rDR+4OqjOx8uSOBPcm9U2KNWFV6hlF9y8OF/W+ZydzNAORQKHjzGu/xE9P4IbA80oqQF04+7s6l9CTQ0LCOmx4iCOCTraBwev4gIgNnDEX5JJgJajBDoq7gm9lZYDBTU8t1EHrtIJ1vD1FKJWXoUvacMn2n5EfZiO4odd0u9tyX4o5N+ZZQ8X0epKYMmNfBjR7KzTVOl3MCh7tWBeTY88zorjITK6MBjAiglyg7W40GkhN8VHwmPfL6V0Lt2ae/lO7EYg/
              type : 2
             code_elements :
              internal_properties : BgAAAAYAAAD2Rkbx+OjeaV6cz3eLdX7jB0Jgs6WDDXWz15HdSBZm9oeZQ2BKnjRAOa1wH4EQ9d5x
              type_code : 3
              p_codes :
               -
                 type : 276
                 enabled : false
               -
                 type : 277
                 enabled : false
               -
                 type : 278
                 enabled : false
          type : 9
          controls : []
          code_elements :
           type_code : 9
           p_codes :
            -
              type : 35
              enabled : false
            -
              type : 22
              enabled : false
            -
              type : 24
              enabled : false
            -
              type : 23
              enabled : false
            -
              type : 25
              enabled : false
            -
              type : 230
              enabled : false
            -
              type : 241
              enabled : false
            -
              type : 263
              enabled : false
            -
              type : 262
              enabled : false
            -
              type : 222
              enabled : false
            -
              type : 223
              enabled : false
            -
              type : 224
              enabled : false
        -
          name : TBL_Users
          identifier : 0x20b7e47b28c41dde
          internal_properties : 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
          columns :
           -
             name : COL_Utilisateur
             identifier : 0x20b7e47b28c51dde
             internal_properties : BgAAAAYAAAAOYV7U3d3yvZgS2H320hrJ6Zt9QZyVgKMo/6v+rhJPh0eZ9KWW1h5srd4lDfQPqJ17rcWTED+mjm9LBVnWqKcMmI9IT9R9MISt7c4MOQMnaYL+w3kKIM+Jh6FzaTPx5ORQX7rU1sxOs+YY6abRBnIcedcdsTUqG2aZ6x5K1s1u23tGza148sfMpg==
             type : 2
             content :
              internal_properties : BgAAAAYAAADzouO8QePHx96vcNPC4vXEz+qJ6z7NkeE+RUyyQDTEzHsPZEijUAM2ucE6RKCZ73YI1C5OfOGCqzrID7IvaWb3O99ePwfexhn3rK+3/CpSzRqZ35yvuyUDiukMPUvCBB2s6XyNjTmv3sBZMi0oNcT1OuOEe3YbFW3cJkUm5/oEUYNTcV+E8qIrxyCJQJxTdK/+y4vhULHh9qjsC03zcugLVrp17klp7mDcdeQVwgnewSItduZ2Wpvdf/AsyGsub9CGkWnZyYvJmcszOJIk/hJ1baruZtPhazgTD0/nJU/nQVrUlLtaSl6TRb+CgrEP9W5CJ+BJ0GF1GXiCM3jm6JTVoIasDfVA7tmqs6RyNuxzstIzTwW3mzGbEL+h1gETrkZydH8YP3McU3C7WMlj3lMYHl2OOc4jcBO3VWv4ilSFdTK5aLVn/3DKLaqThVyJkeVztG9RL+4Wih6dHuAZzPhvOJpZRWKZ3E5YZNj77EmP/hZ3kn83scS6yFy0lntFdeeme9NXJTg5EHFZ+8EMXt/0LUkG/TJn8cN+y0W2M9QSDUXE5q+zN8HGD1rDR+4OqjOx8uSOBPcm9U2KNWFV6hlF9y8OF/W+ZydzNAORQKHjzGu/xE9P4IbA80oqQF04+7s6l9CTQ0LCOmx4iCOCTraBwev4gIgNnDEX5JJgJajBDoq7gm9lZYDBTU8t1EHrtIJ1vD1FKJWXoUvacMn2n5EfZiO4odd0u9tyX4o5N+ZZQ8X0epKYMmNfBjR7KzTVOl3MCh7tWBeTY88zorjITK6MBjAiglyg7W40GkhN8VHwmPfL6V0Lt2ae/lO7EYg/
              type : 2
             code_elements :
              internal_properties : BgAAAAYAAAD2Rkbx+OjeaV6cz3eLdX7jB0Jgs6WDDXWz15HdSBZm9oeZQ2BKnjRAOa1wH4EQ9d5x
              type_code : 3
              p_codes :
               -
                 type : 276
                 enabled : false
               -
                 type : 277
                 enabled : false
               -
                 type : 278
                 enabled : false
           -
             name : COL_Id
             identifier : 0x20b7e47b28c61dde
             internal_properties : BgAAAAYAAAAHmhFsmHi0VTCr6z+wyV5Gedt1WrsVsPat3yAFZeTrLgYs2yIfRR3gg7V+vy6zVvnV+WxJ71Fsz+Q3d86OjGIO/MbiFGX62otHiTpc6fkKZkz2y3Rvqb38LfAOk/uf6GcWa+w3JcTwkVIsqPEU5s2Vf8VLFkxqY40MvqH7yEqw
             type : 2
             content :
              internal_properties : BgAAAAYAAADzouO8QePHx96vcNPC4vXEz+qJ6z7NkeE+RUyyQDTEzHsPZEijUAM2ucE6RKCZ73YI1C5OfOGCqzrID7IvaWb3O99ePwfexhn3rK+3/CpSzRqZ35yvuyUDiukMPUvCBB2s6XyNjTmv3sBZMi0oNcT1OuOEe3YbFW3cJkUm5/oEUYNTcV+E8qIrxyCJQJxTdK/+y4vhULHh9qjsC03zcugLVrp17klp7mDcdeQVwgnewSItduZ2Wpvdf/AsyGsub9CGkWnZyYvJmcszOJIk/hJ1baruZtPhazgTD0/nJU/nQVrUlLtaSl6TRb+CgrEP9W5CJ+BJ0GF1GXiCM3jm6JTVoIasDfVA7tmqs6RyNuxzstIzTwW3mzGbEL+h1gETrkZydH8YP3McU3C7WMlj3lMYHl2OOc4jcBO3VWv4ilSFdTK5aLVn/3DKLaqThVyJkeVztG9RL+4Wih6dHuAZzPhvOJpZRWKZ3E5YZNj77EmP/hZ3kn83scS6yFy0lntFdeeme9NXJTg5EHFZ+8EMXt/0LUkG/TJn8cN+y0W2M9QSDUXE5q+zN8HGD1rDR+4OqjOx8uSOBPcm9U2KNWFV6hlF9y8OF/W+ZydzNAORQKHjzGu/xE9P4IbA80oqQF04+7s6l9CTQ0LCOmx4iCOCTraBwev4gIgNnDEX5JJgJajBDoq7gm9lZYDBTU8t1EHrtIJ1vD1FKJWXoUvacMn2n5EfZiO4odd0u9tyX4o5N+ZZQ8X0epKYMmNfBjR7KzTVOl3MCh7tWBeTY88zorjITK6MBjAiglyg7W40GkhN8VHwmPfL6V0Lt2ae/lO7EYg/
              type : 2
             code_elements :
              internal_properties : BgAAAAYAAAD2Rkbx+OjeaV6cz3eLdX7jB0Jgs6WDDXWz15HdSBZm9oeZQ2BKnjRAOa1wH4EQ9d5x
              type_code : 3
              p_codes :
               -
                 type : 276
                 enabled : false
               -
                 type : 277
                 enabled : false
               -
                 type : 278
                 enabled : false
          type : 9
          controls : []
          code_elements :
           type_code : 9
           p_codes :
            -
              type : 35
              enabled : false
            -
              type : 22
              enabled : false
            -
              type : 24
              enabled : false
            -
              type : 23
              enabled : false
            -
              type : 25
              enabled : false
            -
              type : 230
              enabled : false
            -
              type : 241
              enabled : false
            -
              type : 263
              enabled : false
            -
              type : 262
              enabled : false
            -
              type : 222
              enabled : false
            -
              type : 223
              enabled : false
            -
              type : 224
              enabled : false
        -
          name : BTN_Recup_tout
          identifier : 0x20b7e47b28ca1dfe
          internal_properties : BgAAAAYAAAB++ir+1poeVfUiqeq7RR4xW17GopfSpdkAlvOn6Rp2rcuMFJv7g7Pau/NYfAn2tGBsvReOZ0FN9rplRLHvBEellPIOnh2zBBS9T02iqACuMOUtx24ASP3w75ncHy2HEgJ48bD27Al2U+nuEDdxndfbZILi3+ELXngX+QqGD5zRn9aKQZrO5FvnCEc6eVHaKfc0Brbo1LK5piAoAwtqpFB9fUaST+hbPRG3d/sGyIbcfar0zoJ4frJ6iNcIxYye5WGwq9753R3jlI4Sp3DMjZJkDMRgkNAddA0eOYcgYzAkZ5J9DS1eixhl9FjGavIcyID44nYyZdTJrAKx7CzGimgKpyadW3nluGhWlnhXaERQqE+tKOs98zLtyOOsrtovhZU8v+DOKfdjR41HVg170fNhRBDdo0ah4DVJ0CB+2RDamGZPqvIky5QHqIFDCIIF6aajCuxIgxHGseypS1tyrCKCb+RTdCuzAhjtn6486rK/AkwRdg0Hz4J0QkmvqFAEGsUojf2rTckM9LhlIqBsofuc5fSWc1+hCJ5Ci1YZuoxi3BHKraJeSYrDicRzxA65XvRH4xKlBChwy+JgRE4rxa7RGsXu2l+qXxZfYQBnZH89+czwfgb4ak/pvo09/mEnCWMkgM/RWs5y7A++iCGjfYXHFmWt6uBubGDdlm42Tuu3HsMgENuT3k6HWGJqDvDcG+si37SM+iHSnCus8JerQuT6GFvT5A==
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               nInd est un entier
               
               JAUGE_SansNom2..BorneMax = TBL_Tableaux..Occurrence
               JAUGE_SansNom2 = 0
               
               pour nInd = 1 _a_ TBL_Tableaux..Occurrence
               	JAUGE_SansNom2++
               	TableSelectPlus(TBL_Tableaux, nInd)
               	ExécuteTraitement(BTN_Recup_cartes,trtClic)
               FIN
              type : 18
            -
              type : 161
              enabled : false
        -
          name : TBL_Actions
          identifier : 0x20b7e47b28d41dfe
          internal_properties : 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
          columns :
           -
             name : COL_Data
             identifier : 0x20b7e47b28d51dfe
             internal_properties : BgAAAAYAAADfmlmeuKyXy2gLLjt/p5j5ZXCgEIkijwhIKAnhG7HSTii9AdswSJ7uO276h3g3UMveFYKivhn1sd2Wx9hw/BEiGk8U10ITeuAO9iQkEWwqdjDGhrQdFZogX2EVtkKrlBUoE1T5wtib92J7OtudJQGewuJArtRXqSTQjkSJigr5nvDSWg==
             type : 2
             content :
              internal_properties : BgAAAAYAAADzouO8QePHx96vcNPC4vXEz+qJ6z7NkeE+RUyyQDTEzHsPZEijUAM2ucE6RKCZ73YI1C5OfOGCqzrID7IvaWb3O99ePwfexhn3rK+3/CpSzRqZ35yvuyUDiukMPUvCBB2s6XyNjTmv3sBZMi0oNcT1OuOEe3YbFW3cJkUm5/oEUYNTcV+E8qIrxyCJQJxTdK/+y4vhULHh9qjsC03zcugLVrp17klp7mDcdeQVwgnewSItduZ2Wpvdf/AsyGsub9CGkWnZyYvJmcszOJIk/hJ1baruZtPhazgTD0/nJU/nQVrUlLtaSl6TRb+CgrEP9W5CJ+BJ0GF1GXiCM3jm6JTVoIasDfVA7tmqs6RyNuxzstIzTwW3mzGbEL+h1gETrkZydH8YP3McU3C7WMlj3lMYHl2OOc4jcBO3VWv4ilSFdTK5aLVn/3DKLaqThVyJkeVztG9RL+4Wih6dHuAZzPhvOJpZRWKZ3E5YZNj77EmP/hZ3kn83scS6yFy0lntFdeeme9NXJTg5EHFZ+8EMXt/0LUkG/TJn8cN+y0W2M9QSDUXE5q+zN8HGD1rDR+4OqjOx8uSOBPcm9U2KNWFV6hlF9y8OF/W+ZydzNAORQKHjzGu/xE9P4IbA80oqQF04+7s6l9CTQ0LCOmx4iCOCTraBwev4gIgNnDEX5JJgJajBDoq7gm9lZYDBTU8t1EHrtIJ1vD1FKJWXoUvacMn2n5EfZiO4odd0u9tyX4o5N+ZZQ8X0epKYMmNfBjR7KzTVOl3MCh7tWBeTY88zorjITK6MBjAiglyg7W40GkhN8VHwmPfL6V0Lt2ae/lO7EYg/
              type : 2
             code_elements :
              internal_properties : BgAAAAYAAAD2Rkbx+OjeaV6cz3eLdX7jB0Jgs6WDDXWz15HdSBZm9oeZQ2BKnjRAOa1wH4EQ9d5x
              type_code : 3
              p_codes :
               -
                 type : 276
                 enabled : false
               -
                 type : 277
                 enabled : false
               -
                 type : 278
                 enabled : false
           -
             name : COL_IdUsr
             identifier : 0x20b7e47b28d61dfe
             internal_properties : BgAAAAYAAABvCulOCNxHG5j73qvP1+gJ9eAwgBkSv9g4WLkRK+Hinvjt0QsAzsshhi1W2wSrlEdKo4LublGJpTUiS+gApLVKAt0G2cyNuP50RP4GK554wKq+zhw1LWrAd7BtUdz7xMV446QpkgjLp9LrqqutNXEOUnLQHmTHGZRAPvTZ2tqpzoBi6g==
             type : 2
             content :
              internal_properties : BgAAAAYAAADzouO8QePHx96vcNPC4vXEz+qJ6z7NkeE+RUyyQDTEzHsPZEijUAM2ucE6RKCZ73YI1C5OfOGCqzrID7IvaWb3O99ePwfexhn3rK+3/CpSzRqZ35yvuyUDiukMPUvCBB2s6XyNjTmv3sBZMi0oNcT1OuOEe3YbFW3cJkUm5/oEUYNTcV+E8qIrxyCJQJxTdK/+y4vhULHh9qjsC03zcugLVrp17klp7mDcdeQVwgnewSItduZ2Wpvdf/AsyGsub9CGkWnZyYvJmcszOJIk/hJ1baruZtPhazgTD0/nJU/nQVrUlLtaSl6TRb+CgrEP9W5CJ+BJ0GF1GXiCM3jm6JTVoIasDfVA7tmqs6RyNuxzstIzTwW3mzGbEL+h1gETrkZydH8YP3McU3C7WMlj3lMYHl2OOc4jcBO3VWv4ilSFdTK5aLVn/3DKLaqThVyJkeVztG9RL+4Wih6dHuAZzPhvOJpZRWKZ3E5YZNj77EmP/hZ3kn83scS6yFy0lntFdeeme9NXJTg5EHFZ+8EMXt/0LUkG/TJn8cN+y0W2M9QSDUXE5q+zN8HGD1rDR+4OqjOx8uSOBPcm9U2KNWFV6hlF9y8OF/W+ZydzNAORQKHjzGu/xE9P4IbA80oqQF04+7s6l9CTQ0LCOmx4iCOCTraBwev4gIgNnDEX5JJgJajBDoq7gm9lZYDBTU8t1EHrtIJ1vD1FKJWXoUvacMn2n5EfZiO4odd0u9tyX4o5N+ZZQ8X0epKYMmNfBjR7KzTVOl3MCh7tWBeTY88zorjITK6MBjAiglyg7W40GkhN8VHwmPfL6V0Lt2ae/lO7EYg/
              type : 2
             code_elements :
              internal_properties : BgAAAAYAAAD2Rkbx+OjeaV6cz3eLdX7jB0Jgs6WDDXWz15HdSBZm9oeZQ2BKnjRAOa1wH4EQ9d5x
              type_code : 3
              p_codes :
               -
                 type : 276
                 enabled : false
               -
                 type : 277
                 enabled : false
               -
                 type : 278
                 enabled : false
           -
             name : COL_IdList
             identifier : 0x20b7e47b28d71dfe
             internal_properties : BgAAAAYAAAAC2XBxi74OkDOTKOxrzNCAx7Ss0kPIFcDxFRIH8A3vzIvm6ASV/4HmzuAT+6mlDQdfAvZOqr+bd3za0VD0bH661te9mPbmulRgQ6cZddNQZTaM3+39sJS+32tMQUPZFVBNhY0Kk26GanO3UCRGMQ2y+x4JrSML7vGLmog+CBiRCMf0C+w=
             type : 2
             content :
              internal_properties : BgAAAAYAAADzouO8QePHx96vcNPC4vXEz+qJ6z7NkeE+RUyyQDTEzHsPZEijUAM2ucE6RKCZ73YI1C5OfOGCqzrID7IvaWb3O99ePwfexhn3rK+3/CpSzRqZ35yvuyUDiukMPUvCBB2s6XyNjTmv3sBZMi0oNcT1OuOEe3YbFW3cJkUm5/oEUYNTcV+E8qIrxyCJQJxTdK/+y4vhULHh9qjsC03zcugLVrp17klp7mDcdeQVwgnewSItduZ2Wpvdf/AsyGsub9CGkWnZyYvJmcszOJIk/hJ1baruZtPhazgTD0/nJU/nQVrUlLtaSl6TRb+CgrEP9W5CJ+BJ0GF1GXiCM3jm6JTVoIasDfVA7tmqs6RyNuxzstIzTwW3mzGbEL+h1gETrkZydH8YP3McU3C7WMlj3lMYHl2OOc4jcBO3VWv4ilSFdTK5aLVn/3DKLaqThVyJkeVztG9RL+4Wih6dHuAZzPhvOJpZRWKZ3E5YZNj77EmP/hZ3kn83scS6yFy0lntFdeeme9NXJTg5EHFZ+8EMXt/0LUkG/TJn8cN+y0W2M9QSDUXE5q+zN8HGD1rDR+4OqjOx8uSOBPcm9U2KNWFV6hlF9y8OF/W+ZydzNAORQKHjzGu/xE9P4IbA80oqQF04+7s6l9CTQ0LCOmx4iCOCTraBwev4gIgNnDEX5JJgJajBDoq7gm9lZYDBTU8t1EHrtIJ1vD1FKJWXoUvacMn2n5EfZiO4odd0u9tyX4o5N+ZZQ8X0epKYMmNfBjR7KzTVOl3MCh7tWBeTY88zorjITK6MBjAiglyg7W40GkhN8VHwmPfL6V0Lt2ae/lO7EYg/
              type : 2
             code_elements :
              internal_properties : BgAAAAYAAAD2Rkbx+OjeaV6cz3eLdX7jB0Jgs6WDDXWz15HdSBZm9oeZQ2BKnjRAOa1wH4EQ9d5x
              type_code : 3
              p_codes :
               -
                 type : 276
                 enabled : false
               -
                 type : 277
                 enabled : false
               -
                 type : 278
                 enabled : false
           -
             name : COL_Date
             identifier : 0x20b7e47b28d81dfe
             internal_properties : BgAAAAYAAABPEBr2uRpMXINyAom/LyiZjAZWUaaHR2nn+syKAuo7hQfixSIWqQZoDeWX19tH4VsSBj99zdav88qtBjXjWLZpVaa3349ZSIzdvWUCYvpL9h4/U/wa94zopuRKMNYMdv3qTe/WwxRaZBAGM3dqhje2kB1exJYwzXypW79EvXoxWlfd
             type : 2
             content :
              internal_properties : BgAAAAYAAADzouO8QePHx96vcNPC4vXEz+qJ6z7NkeE+RUyyQDTEzHsPZEijUAM2ucE6RKCZ73YI1C5OfOGCqzrID7IvaWb3O99ePwfexhn3rK+3/CpSzRqZ35yvuyUDiukMPUvCBB2s6XyNjTmv3sBZMi0oNcT1OuOEe3YbFW3cJkUm5/oEUYNTcV+E8qIrxyCJQJxTdK/+y4vhULHh9qjsC03zcugLVrp17klp7mDcdeQVwgnewSItduZ2Wpvdf/AsyGsub9CGkWnZyYvJmcszOJIk/hJ1baruZtPhazgTD0/nJU/nQVrUlLtaSl6TRb+CgrEP9W5CJ+BJ0GF1GXiCM3jm6JTVoIasDfVA7tmqs6RyNuxzstIzTwW3mzGbEL+h1gETrkZydH8YP3McU3C7WMlj3lMYHl2OOc4jcBO3VWv4ilSFdTK5aLVn/3DKLaqThVyJkeVztG9RL+4Wih6dHuAZzPhvOJpZRWKZ3E5YZNj77EmP/hZ3kn83scS6yFy0lntFdeeme9NXJTg5EHFZ+8EMXt/0LUkG/TJn8cN+y0W2M9QSDUXE5q+zN8HGD1rDR+4OqjOx8uSOBPcm9U2KNWFV6hlF9y8OF/W+ZydzNAORQKHjzGu/xE9P4IbA80oqQF04+7s6l9CTQ0LCOmx4iCOCTraBwev4gIgNnDEX5JJgJajBDoq7gm9lZYDBTU8t1EHrtIJ1vD1FKJWXoUvacMn2n5EfZiO4odd0u9tyX4o5N+ZZQ8X0epKYMmNfBjR7KzTVOl3MCh7tWBeTY88zorjITK6MBjAiglyg7W40GkhN8VHwmPfL6V0Lt2ae/lO7EYg/
              type : 2
             code_elements :
              internal_properties : BgAAAAYAAAD2Rkbx+OjeaV6cz3eLdX7jB0Jgs6WDDXWz15HdSBZm9oeZQ2BKnjRAOa1wH4EQ9d5x
              type_code : 3
              p_codes :
               -
                 type : 276
                 enabled : false
               -
                 type : 277
                 enabled : false
               -
                 type : 278
                 enabled : false
          type : 9
          controls : []
          code_elements :
           type_code : 9
           p_codes :
            -
              type : 35
              enabled : false
            -
              type : 22
              enabled : false
            -
              type : 24
              enabled : false
            -
              type : 23
              enabled : false
            -
              type : 25
              enabled : false
            -
              type : 230
              enabled : false
            -
              type : 241
              enabled : false
            -
              type : 263
              enabled : false
            -
              type : 262
              enabled : false
            -
              type : 222
              enabled : false
            -
              type : 223
              enabled : false
            -
              type : 224
              enabled : false
        -
          name : BTN_Recup_Labels
          identifier : 0x20b7e47b28dc1e1d
          internal_properties : BgAAAAYAAAAXaDX+xV1Kp+wzjRHe6vuP7uIEvtTsmrnEKGyFfpVaNeQbNR7KeNsxs5mi1xitwTy2BWhdjsZX/cN7rpAuHCwN2/005/Vs0s05PItJdhgXGGCfdTqjv94f28DtAdZPEgVtvDNU5odJuRuOs8siPJxnkjxaZfy98TV+7BwEQf7HY6ABjp5lf5Fjdj9KF3DDNi2gICqUak1EhX0Ly4Ivq3D8m1IgR2zIySX/BWfJH1SYN6Sd3vXi7EYHakiAz9bUN3Wr55N50O7mcByo54EmocUirwi3SQjMopuW7+kcYxUvuS/0xAHn973AhuZxqvRdWLbnZwfz/Frg3A/bW6hvOQhjq8jjSTkiOATSy16s0JUg2+b9qfpdkWN9DKOSTru/sqBweny4bDX4uzWXfD3G9ea22DvFTx3ln9VVpGhunLCZ2dIUqPhdB0ebyFGplImrJFOF1XYcYGGj51pLiS1faDHTOzcRLuRL/bQ9OzB49xQuU86c3tuGSXsOLGv1Aj2S6xTQbN9JGLtdZrJnfA7T5+BHqQmIQ/gvKZY2X2d0DBCrSd/079rHdjZhUj+VAuy3dP7ANO7nVjfdTsfltRd/rE77rwXBvDyDa5Q/8JqJwfjsaendwCwbxkT70PfxyFgh+2OpFu39bi+EeFtSGgBkjM+dYWGPHl3EtIzDuBQtcdoPN6mD9YDmHfyOh1u8Ka1gcJmDC4ehUQQme0l9hcz363xgVimZyZ0iIhJdHhY=
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               
               sReponse est une chaîne
               vRep est un variant
               vList est un variant
               nLigne est un entier
               
               
               
               //récupération des listes du tableau
               HTTPRequête(ChaîneConstruit("https://api.trello.com/1/boards/%1/labels%2", cst_TableauScrum, sAuth))
               sReponse = HTTPDonneRésultat()
               
               vRep = JSONVersVariant(sReponse)
               TableSupprimeTout(TBL_Labels)
               pour tout vList de vRep
               	nLigne = TableAjouteLigne(TBL_Labels)
               	TBL_Labels[nLigne].COL_Id		= vList.id
               	TBL_Labels[nLigne].COL_Label	= vList.name
               FIN
               
              type : 18
            -
              type : 161
              enabled : false
        -
          name : TBL_Labels
          identifier : 0x20b7e47b28e21e1d
          internal_properties : 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
          columns :
           -
             name : COL_Label
             identifier : 0x20b7e47b28e31e1d
             internal_properties : BgAAAAYAAAA6eOYMjH/59rv7QghG+84A9bfCgkPuHmRuth4suPKLyOxI2SFEghxUFb4CCkVAcBmIGuAgBboBVJZk6lNciuL9+TyU8nkFv8zoqidUz9o7MR3DVPZLPPJT4EhOe5aZUbcW4TDF/W/EyH6m3g9tGVjczMrUBwDR319lTeygoI8G1xvyRyiqBoE=
             type : 2
             content :
              internal_properties : BgAAAAYAAADzouO8QePHx96vcNPC4vXEz+qJ6z7NkeE+RUyyQDTEzHsPZEijUAM2ucE6RKCZ73YI1C5OfOGCqzrID7IvaWb3O99ePwfexhn3rK+3/CpSzRqZ35yvuyUDiukMPUvCBB2s6XyNjTmv3sBZMi0oNcT1OuOEe3YbFW3cJkUm5/oEUYNTcV+E8qIrxyCJQJxTdK/+y4vhULHh9qjsC03zcugLVrp17klp7mDcdeQVwgnewSItduZ2Wpvdf/AsyGsub9CGkWnZyYvJmcszOJIk/hJ1baruZtPhazgTD0/nJU/nQVrUlLtaSl6TRb+CgrEP9W5CJ+BJ0GF1GXiCM3jm6JTVoIasDfVA7tmqs6RyNuxzstIzTwW3mzGbEL+h1gETrkZydH8YP3McU3C7WMlj3lMYHl2OOc4jcBO3VWv4ilSFdTK5aLVn/3DKLaqThVyJkeVztG9RL+4Wih6dHuAZzPhvOJpZRWKZ3E5YZNj77EmP/hZ3kn83scS6yFy0lntFdeeme9NXJTg5EHFZ+8EMXt/0LUkG/TJn8cN+y0W2M9QSDUXE5q+zN8HGD1rDR+4OqjOx8uSOBPcm9U2KNWFV6hlF9y8OF/W+ZydzNAORQKHjzGu/xE9P4IbA80oqQF04+7s6l9CTQ0LCOmx4iCOCTraBwev4gIgNnDEX5JJgJajBDoq7gm9lZYDBTU8t1EHrtIJ1vD1FKJWXoUvacMn2n5EfZiO4odd0u9tyX4o5N+ZZQ8X0epKYMmNfBjR7KzTVOl3MCh7tWBeTY88zorjITK6MBjAiglyg7W40GkhN8VHwmPfL6V0Lt2ae/lO7EYg/
              type : 2
             code_elements :
              internal_properties : BgAAAAYAAAD2Rkbx+OjeaV6cz3eLdX7jB0Jgs6WDDXWz15HdSBZm9oeZQ2BKnjRAOa1wH4EQ9d5x
              type_code : 3
              p_codes :
               -
                 type : 276
                 enabled : false
               -
                 type : 277
                 enabled : false
               -
                 type : 278
                 enabled : false
           -
             name : COL_Id
             identifier : 0x20b7e47b28e41e1d
             internal_properties : BgAAAAYAAACIHeSf7Y8XNBdKChyRpr2nmrpU+VjEL3kwQntGKimuV0fXTv2IcPhLaszlLB8Axc4auKMITNjjVRLNvXJQCNwzs3MXXzjJjVoWSHkdqjhVM7tlugXYABZXSNt5aJDqJyBRLi90+i9lBMHbx5L1BSx2XiQqNy1JROyvEXQoPcU/
             type : 2
             content :
              internal_properties : BgAAAAYAAADzouO8QePHx96vcNPC4vXEz+qJ6z7NkeE+RUyyQDTEzHsPZEijUAM2ucE6RKCZ73YI1C5OfOGCqzrID7IvaWb3O99ePwfexhn3rK+3/CpSzRqZ35yvuyUDiukMPUvCBB2s6XyNjTmv3sBZMi0oNcT1OuOEe3YbFW3cJkUm5/oEUYNTcV+E8qIrxyCJQJxTdK/+y4vhULHh9qjsC03zcugLVrp17klp7mDcdeQVwgnewSItduZ2Wpvdf/AsyGsub9CGkWnZyYvJmcszOJIk/hJ1baruZtPhazgTD0/nJU/nQVrUlLtaSl6TRb+CgrEP9W5CJ+BJ0GF1GXiCM3jm6JTVoIasDfVA7tmqs6RyNuxzstIzTwW3mzGbEL+h1gETrkZydH8YP3McU3C7WMlj3lMYHl2OOc4jcBO3VWv4ilSFdTK5aLVn/3DKLaqThVyJkeVztG9RL+4Wih6dHuAZzPhvOJpZRWKZ3E5YZNj77EmP/hZ3kn83scS6yFy0lntFdeeme9NXJTg5EHFZ+8EMXt/0LUkG/TJn8cN+y0W2M9QSDUXE5q+zN8HGD1rDR+4OqjOx8uSOBPcm9U2KNWFV6hlF9y8OF/W+ZydzNAORQKHjzGu/xE9P4IbA80oqQF04+7s6l9CTQ0LCOmx4iCOCTraBwev4gIgNnDEX5JJgJajBDoq7gm9lZYDBTU8t1EHrtIJ1vD1FKJWXoUvacMn2n5EfZiO4odd0u9tyX4o5N+ZZQ8X0epKYMmNfBjR7KzTVOl3MCh7tWBeTY88zorjITK6MBjAiglyg7W40GkhN8VHwmPfL6V0Lt2ae/lO7EYg/
              type : 2
             code_elements :
              internal_properties : BgAAAAYAAAD2Rkbx+OjeaV6cz3eLdX7jB0Jgs6WDDXWz15HdSBZm9oeZQ2BKnjRAOa1wH4EQ9d5x
              type_code : 3
              p_codes :
               -
                 type : 276
                 enabled : false
               -
                 type : 277
                 enabled : false
               -
                 type : 278
                 enabled : false
          type : 9
          controls : []
          code_elements :
           type_code : 9
           p_codes :
            -
              type : 35
              enabled : false
            -
              type : 22
              enabled : false
            -
              type : 24
              enabled : false
            -
              type : 23
              enabled : false
            -
              type : 25
              enabled : false
            -
              type : 230
              enabled : false
            -
              type : 241
              enabled : false
            -
              type : 263
              enabled : false
            -
              type : 262
              enabled : false
            -
              type : 222
              enabled : false
            -
              type : 223
              enabled : false
            -
              type : 224
              enabled : false
        -
          name : TBL_TachesAFaire
          identifier : 0x20b7e47b28ec1e4c
          internal_properties : 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
          columns :
           -
             name : COL_aFaire
             identifier : 0x20b7e47b28ed1e4c
             internal_properties : BgAAAAYAAAAD2nF4nKZSsB1dWCK5cloKXc7CLpL/lo1+sKd8BS48GWItb3UYNujyiBFB4RO71O/12bnb5XSCpw5UUd6aYqCE2F2MSzvJia0pcM4Ursr7og1LLlFQqZgFMRp/Bz6cYH2YIHxXDOUDofpyYy0TRHQbQEMWjiIUA0zmbaUnK8WYEc7zCu0=
             type : 2
             content :
              internal_properties : BgAAAAYAAADzouO8QePHx96vcNPC4vXEz+qJ6z7NkeE+RUyyQDTEzHsPZEijUAM2ucE6RKCZ73YI1C5OfOGCqzrID7IvaWb3O99ePwfexhn3rK+3/CpSzRqZ35yvuyUDiukMPUvCBB2s6XyNjTmv3sBZMi0oNcT1OuOEe3YbFW3cJkUm5/oEUYNTcV+E8qIrxyCJQJxTdK/+y4vhULHh9qjsC03zcugLVrp17klp7mDcdeQVwgnewSItduZ2Wpvdf/AsyGsub9CGkWnZyYvJmcszOJIk/hJ1baruZtPhazgTD0/nJU/nQVrUlLtaSl6TRb+CgrEP9W5CJ+BJ0GF1GXiCM3jm6JTVoIasDfVA7tmqs6RyNuxzstIzTwW3mzGbEL+h1gETrkZydH8YP3McU3C7WMlj3lMYHl2OOc4jcBO3VWv4ilSFdTK5aLVn/3DKLaqThVyJkeVztG9RL+4Wih6dHuAZzPhvOJpZRWKZ3E5YZNj77EmP/hZ3kn83scS6yFy0lntFdeeme9NXJTg5EHFZ+8EMXt/0LUkG/TJn8cN+y0W2M9QSDUXE5q+zN8HGD1rDR+4OqjOx8uSOBPcm9U2KNWFV6hlF9y8OF/W+ZydzNAORQKHjzGu/xE9P4IbA80oqQF04+7s6l9CTQ0LCOmx4iCOCTraBwev4gIgNnDEX5JJgJajBDoq7gm9lZYDBTU8t1EHrtIJ1vD1FKJWXoUvacMn2n5EfZiO4odd0u9tyX4o5N+ZZQ8X0epKYMmNfBjR7KzTVOl3MCh7tWBeTY88zorjITK6MBjAiglyg7W40GkhN8VHwmPfL6V0Lt2ae/lO7EYg/
              type : 2
             code_elements :
              internal_properties : BgAAAAYAAAD2Rkbx+OjeaV6cz3eLdX7jB0Jgs6WDDXWz15HdSBZm9oeZQ2BKnjRAOa1wH4EQ9d5x
              type_code : 3
              p_codes :
               -
                 type : 276
                 enabled : false
               -
                 type : 277
                 enabled : false
               -
                 type : 278
                 enabled : false
           -
             name : COL_Id
             identifier : 0x20b7e47b28ee1e4c
             internal_properties : BgAAAAYAAAC84eiT+RuTsJPWlqgl0skz9kbgtSyY4z10Fi96dp0CW1vrUuHkbORHZtgRGBNnccokkHng3GxbG3jrJ7aC5FpYJuyYbgsc1MFxSVp+O6eS8KZRrhHMFCJjRMdVVITmIxytgvs4JvspSAWfG0ahaUAK8rC+o7HNwGgrnYAkMfEL
             type : 2
             content :
              internal_properties : BgAAAAYAAADzouO8QePHx96vcNPC4vXEz+qJ6z7NkeE+RUyyQDTEzHsPZEijUAM2ucE6RKCZ73YI1C5OfOGCqzrID7IvaWb3O99ePwfexhn3rK+3/CpSzRqZ35yvuyUDiukMPUvCBB2s6XyNjTmv3sBZMi0oNcT1OuOEe3YbFW3cJkUm5/oEUYNTcV+E8qIrxyCJQJxTdK/+y4vhULHh9qjsC03zcugLVrp17klp7mDcdeQVwgnewSItduZ2Wpvdf/AsyGsub9CGkWnZyYvJmcszOJIk/hJ1baruZtPhazgTD0/nJU/nQVrUlLtaSl6TRb+CgrEP9W5CJ+BJ0GF1GXiCM3jm6JTVoIasDfVA7tmqs6RyNuxzstIzTwW3mzGbEL+h1gETrkZydH8YP3McU3C7WMlj3lMYHl2OOc4jcBO3VWv4ilSFdTK5aLVn/3DKLaqThVyJkeVztG9RL+4Wih6dHuAZzPhvOJpZRWKZ3E5YZNj77EmP/hZ3kn83scS6yFy0lntFdeeme9NXJTg5EHFZ+8EMXt/0LUkG/TJn8cN+y0W2M9QSDUXE5q+zN8HGD1rDR+4OqjOx8uSOBPcm9U2KNWFV6hlF9y8OF/W+ZydzNAORQKHjzGu/xE9P4IbA80oqQF04+7s6l9CTQ0LCOmx4iCOCTraBwev4gIgNnDEX5JJgJajBDoq7gm9lZYDBTU8t1EHrtIJ1vD1FKJWXoUvacMn2n5EfZiO4odd0u9tyX4o5N+ZZQ8X0epKYMmNfBjR7KzTVOl3MCh7tWBeTY88zorjITK6MBjAiglyg7W40GkhN8VHwmPfL6V0Lt2ae/lO7EYg/
              type : 2
             code_elements :
              internal_properties : BgAAAAYAAAD2Rkbx+OjeaV6cz3eLdX7jB0Jgs6WDDXWz15HdSBZm9oeZQ2BKnjRAOa1wH4EQ9d5x
              type_code : 3
              p_codes :
               -
                 type : 276
                 enabled : false
               -
                 type : 277
                 enabled : false
               -
                 type : 278
                 enabled : false
          type : 9
          controls : []
          code_elements :
           type_code : 9
           p_codes :
            -
              code : |1+
               
               aoTaches est un tableau de ClTache dynamique <- ClTache.Taches_a_faire(ClTache.Toutes)
               oTache est un ClTache dynamique
               nLigne est un entier
               
               
               pour tout element oTache de aoTaches
               	si oTache.p_nNum_Sprint_Realisation = goapp.m_nNumeroDuSprintActuel ALORS
               		
               		nLigne = TableAjouteLigne(TBL_TachesAFaire)
               		TBL_TachesAFaire[nLigne].COL_Id		= oTache.Get_IdUnique()
               		TBL_TachesAFaire[nLigne].COL_aFaire	= oTache.p_sCodeTache + " - " + oTache.p_sDescription
               	FIN
               FIN
               
              type : 14
            -
              type : 35
              enabled : false
            -
              type : 22
              enabled : false
            -
              type : 24
              enabled : false
            -
              type : 23
              enabled : false
            -
              type : 25
              enabled : false
            -
              type : 230
              enabled : false
            -
              type : 241
              enabled : false
            -
              type : 263
              enabled : false
            -
              type : 262
              enabled : false
            -
              type : 222
              enabled : false
            -
              type : 223
              enabled : false
            -
              type : 224
              enabled : false
        -
          name : BTN_Recup_cartes
          identifier : 0x20b7e47b28f21e6b
          internal_properties : BgAAAAYAAAB/UqjQTiHIHdNO+N5TUIoAXQnrJBNYeOe2k9Kk4vwcBXl/DxZoyNwFmTeq7mIHMh6sAXCieTBvNOdjlWQDxCCo9DSUHmWzMToutd8XugnXJIX5nxPpjFBvds6KCnCDQFOfnFQ3ooJ/APbTObTLwbrcjsZUsveCGjjOXcHTXhZSxGAT7Soe0Ahkj0riDdGJK4hpPgeK112nPEdn3OaTQuh0NzSLE6AK6GWBD4vBNAfa9nEBQeVHD/GNqVMPgREe5giP0D+qm8fobxyC7V/+/s7lVbbf1Zj6jD+8fQ4OnvX1o2mWb7bjYz4XMuifKnwV6VS7xy0nTLDdghU8XcN4J21IxQzI3u6lLIBWK+PhNLIsRk1LIVvq8lBqMisqeX7R0eBv6hbZpOgrAJ/rIICR5eHQyQVp9Nmi+BDJYuZlWxhmtc2mXM/jaEjqNj2xXfID1T2urZqpfkoQqnADz7J0mI77+oeDNQLoTl/Pq27NLNKbx6FeQuBieDoz9EXRM05UUBrvpEmS4OLwd4rdzK+cX9F3Nu2Q/NJqBB106wV1R22TGJvMuCiQm7mTBEkyiulAZc5bfISWR9H83GiUwLEtRbxo417cT35fL9fVpRb8dBGBLJMvaQopS8matiKaFv4q1j/m2rjSPuIbyujIUlYStc/ybwVkUoo4wBAYP1CzCvoGr6X1BOD/t0KeCiSQQm70eRoB9GVt1YW//C+Bme1MOQm3mvl4lO/KXu8=
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               sReponse est une chaîne
               vRep est un variant
               vList est un variant
               nLigne est un entier
               sReqHTTP est une chaîne
               sCodeTache est une chaîne
               oTache est un ClTache dynamique
               anUSARecalculer est un tableau d'entiers
               nIdUs est un entier
               oUsrDev est un ClUsr dynamique
               vLabel est un variant
               aOUS est un tableau de ClUserStory dynamique
               nInd est un entier
               
               
               //récupération des listes du tableau
               sReqHTTP = ChaîneConstruit("https://api.trello.com/1/lists/%1/cards%2", TBL_Tableaux.COL_Id, sAuth)
               HTTPRequête(sReqHTTP)
               sReponse = HTTPDonneRésultat()
               vRep = JSONVersVariant(sReponse)
               TableSupprimeTout(TBL_Cartes)
               
               //JAUGE_SansNom1.BorneMax = vRep..Occurrence
               //JAUGE_SansNom1 = 0
               
               pour tout vList de vRep
               	
               //	JAUGE_SansNom1++
               	nInd++
               	Jauge(nInd, vRep..Occurrence)
               	
               	
               	sCodeTache = SansEspace(ExtraitChaîne(vList.name,1,"-"))
               	
               	//SI sCodeTache DANS ("T0768") ALORS STOP
               	
               	oTache <- ClTache.GetObj_de_code(sCodeTache)
               	
               	nLigne = TableAjouteLigne(TBL_Cartes)
               	si oTache = Null ALORS
               		TBL_Cartes[nLigne].COL_Id		= "!!!" + sCodeTache + "!!!"
               	sinon
               		TBL_Cartes[nLigne].COL_Id		= oTache.Get_IdUnique()
               		
               		
               		SI oTache.p_bAnnule ALORS
               			oTache = Null
               		FIN
               	FIN
               
               	TBL_Cartes[nLigne].COL_Liste	= vList.name
               	TBL_Cartes[nLigne].COL_IdCarte	= vList.id
               	
               	si vList.idMembers[1] <> null ALORS
               		HLitRecherche(Scr_Usr_Trello,IdTrello,vList.idMembers[1],hIdentique+hLimiteParcours)
               		si HTrouve(Scr_Usr_Trello) ALORS
               			oUsrDev <- ClUsr.GetObj(Scr_Usr_Trello.IDScr_Usr)
               		sinon
               			stop
               		FIN
               	sinon
               		oUsrDev = goapp.m_oUsrCnx
               	FIN
               	
               	
               	
               	SI oTache <> Null ALORS
               		
               	 	 SI TBL_Tableaux.COL_Id DANS(cst_List_ID_A_faire, cst_List_ID_A_faire_tester_par_DEV2, cst_List_ID_Test_unitaire) ALORS
               	 	 	
               	 	 	oTache.p_nStatut = ClTache.cstStatut_en_cours
               			
               			POUR TOUT vLabel DE vList.idLabels
               				SI vLabel dans(cst_Label_Suspend, cst_Label_Attente) ALORS
               					oTache.p_nStatut = ClTache.cstStatut_Suspendu
               				FIN
               			FIN
               		SINON
               			oTache.p_nStatut = ClTache.cstStatut_en_cours
               		FIN
               		
               		si TBL_Tableaux.COL_Id = cst_List_ID_A_faire ALORS
               			oTache.p_oUsr_Dev				= NULL
               			oTache.p_nNum_Sprint_Demarrage	= 0
               			oTache.p_bEstRealise			= faux
               		sinon
               			oTache.p_oUsr_Dev				= oUsrDev
               			oTache.p_nNum_Sprint_Demarrage	= oTache.p_nNum_Sprint_Realisation
               		FIN
               		
               		SI TBL_Tableaux.COL_Id dans(cst_List_ID_Test_fonctionnel, cst_List_ID_A_livrer_en_prod, cst_List_ID_Fini, cst_List_ID_Fini_sprint_précédents) ALORS
               			oTache.p_bEstRealise			= vrai
               		sinon
               			oTache.p_bEstRealise			= faux
               		fin
               		
               		SI TBL_Tableaux.COL_Id DANS(cst_List_ID_A_livrer_en_prod, cst_List_ID_Fini, cst_List_ID_Fini_sprint_précédents) ALORS
               			oTache.p_nNum_Sprint_Fin		= oTache.p_nNum_Sprint_Realisation
               		FIN
               		
               		
               		
               		
               		
               		//////////////////////////////////////////////////////////////////////////////////////////////////////////////
               		
               		vRepEvts est un variant
               		vEvts est un variant
               		oMessage est un ClMessage dynamique
               		
               		dhEvt est une dateheure
               		oSpr est un ClSprint dynamique
               		
               		//récupération des actions de la carte
               		sReqHTTP = ChaîneConstruit("https://api.trello.com/1/cards/%1/actions%2", vList.id, sAuth)
               		HTTPRequête(sReqHTTP)
               		sReponse = HTTPDonneRésultat()
               		vRepEvts = JSONVersVariant(sReponse)
               		TableSupprimeTout(TBL_Actions)
               		POUR TOUT vEvts DE vRepEvts
               			
               			nLigne = TableAjouteLigne(TBL_Actions)
               
               
               			HLitRecherche(Scr_Usr_Trello,IdTrello,vEvts.idMemberCreator,hIdentique+hLimiteParcours)
               			SI HTrouve(Scr_Usr_Trello) ALORS
               				oUsrDev							<- ClUsr.GetObj(Scr_Usr_Trello.IDScr_Usr)
               				TBL_Actions[nLigne].COL_IdUsr	= oUsrDev.p_sNom
               			FIN
               
               
               			dhEvt = dh_FormatRFC3339_Vers_DateHeure(vEvts.date)
               			
               			
               			SI vEvts.data.text <> Null ALORS
               				TBL_Actions[nLigne].COL_Data	= vEvts.data.text
               				
               				oMessage						= allouer un ClMessage()
               				oMessage.p_oTache				= oTache
               				oMessage.p_oUsr					= oUsrDev
               				oMessage.p_sCMTR				= vEvts.data.text
               				oMessage.p_dhDteCreation		= dhEvt
               				oMessage.Enregistre()
               			FIN
               			
               			oSpr <- ClSprint.oGet_SprintDeDate(dhEvt..PartieDate)
               			TBL_Actions[nLigne].COL_Date		= oSpr.sSprint_Date()
               			
               			
               			SI vEvts.data.listAfter <> Null ALORS
               				TBL_Actions[nLigne].COL_IdList	= vEvts.data.listAfter.id
               				
               				SELON vEvts.data.listAfter.id
               					CAS cst_List_ID_Dev_en_cours
               						TBL_Actions[nLigne].COL_IdList = "En cours"
               						
               					CAS cst_List_ID_A_faire_tester_par_DEV2
               						TBL_Actions[nLigne].COL_IdList = "Dev 2"
               						
               					CAS cst_List_ID_Test_unitaire
               						TBL_Actions[nLigne].COL_IdList = "TU"
               						
               					CAS cst_List_ID_A_livrer_en_pré_prod
               						TBL_Actions[nLigne].COL_IdList = "Liv pré prod"
               						
               					CAS cst_List_ID_Test_fonctionnel
               						TBL_Actions[nLigne].COL_IdList = "TF"
               						
               						si oTache.p_oUserStoryParent.p_dDateMiseADispo_EnTest < dhEvt..PartieDate alors
               							oTache.p_oUserStoryParent.p_dDateMiseADispo_EnTest = dhEvt..PartieDate
               						fin
               						
               					CAS cst_List_ID_A_livrer_en_prod
               						TBL_Actions[nLigne].COL_IdList = "Liv Prod"
               						
               						
               						SI oTache.p_bEstRealise ALORS
               							oTache.p_nNum_Sprint_Fin	= oSpr.Get_IdUnique()
               						FIN
               						
               						SI oTache.p_oUserStoryParent.p_dDateMiseADispo_EnTest < dhEvt..PartieDate ALORS
               							oTache.p_oUserStoryParent.p_dDateMiseADispo_EnTest = dhEvt..PartieDate
               						FIN
               						
               						SI oTache.p_oUserStoryParent.p_dDateMiseEnProd < dhEvt..PartieDate ALORS
               							oTache.p_oUserStoryParent.p_dDateMiseEnProd = dhEvt..PartieDate
               						FIN
               						
               					CAS cst_List_ID_Fini
               						TBL_Actions[nLigne].COL_IdList = "Fin"
               						
               						si oTache.p_oUserStoryParent.p_dDateMiseADispo_EnTest = "" ALORS
               							oTache.p_oUserStoryParent.p_dDateMiseADispo_EnTest = datesys()
               						FIN
               						
               						si oTache.p_oUserStoryParent.p_dDateMiseEnProd < dhEvt..PartieDate alors
               							oTache.p_oUserStoryParent.p_dDateMiseEnProd = dhEvt..PartieDate
               						fin
               						
               						si oTache.p_bEstRealise alors
               							oTache.p_nNum_Sprint_Fin	= oSpr.Get_IdUnique()
               						FIN
               						
               					CAS cst_List_ID_Fini_sprint_précédents
               						TBL_Actions[nLigne].COL_IdList = "Prec"
               						
               						oTache.p_nNum_Sprint_Fin		= oSpr.Get_IdUnique()
               		
               					AUTRE CAS
               						
               				FIN
               			FIN
               		FIN
               
               		//Correction du N° de print de réalisation, si fini avant
               		SI oTache.p_nNum_Sprint_Realisation > oTache.p_nNum_Sprint_Fin ET oTache.p_nNum_Sprint_Fin <> 0 ET PAS oTache.p_bAnnule ALORS
               			oTache.p_nNum_Sprint_Realisation = oTache.p_nNum_Sprint_Fin
               			oTache.p_nNum_Sprint_Previsionnel = oTache.p_nNum_Sprint_Fin
               		FIN
               		SI oTache.p_nNum_Sprint_Creation > oTache.p_nNum_Sprint_Realisation ET oTache.p_nNum_Sprint_Realisation <> 0 ALORS
               			oTache.p_nNum_Sprint_Creation = oTache.p_nNum_Sprint_Realisation
               		FIN
               
               		
               		oTache.Enregistre()
               		
               		
               //		//On mémorise les US à recalculer
               //		TableauAjouteRéférence(aOUS,oTache.p_oUserStoryParent)
               		
               		
               		//On mémorise les US à recalculer
               		nIdUs = oTache.p_oUserStoryParent.Get_IdUnique()
               		SI TableauCherche(anUSARecalculer,tcLinéaire,nIdUs) = -1 ALORS
               //			si nIdUs = 684 alors stop
               			TableauAjoute(anUSARecalculer,nIdUs)
               		FIN
               	FIN
               FIN
               
               
               oUs est un ClUserStory dynamique
               //pour tout oUs de aOUS
               //	trace(oUs.m_sCodeUserStory + "#" + oUs.m_dDateMiseEnProd)
               //	oUs.RecalcEtatUS()
               //FIN
               pour tout nIdUs de anUSARecalculer
               	oUs <- ClUserStory.GetObj(nIdUs)
               	
               	si oUs.p_bTermine et oUs.p_dDateMiseEnProd = "" ALORS
               		oUs.p_dDateMiseEnProd = DateSys()
               	FIN
               	
               	Trace(oUs.p_sCodeUserStory + "#" + oUs.p_dDateMiseEnProd)
               	oUs.RecalcEtatUS()
               FIN
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Recup_infos
          identifier : 0x20b7e47b28f41e6b
          internal_properties : BgAAAAYAAACmbzF4Ma3G69JNDw1MYmYIaUAm6dxguii0mFyd/fYr10DtGXkIlQJNqbP/Hrvq4SiVCkAC6heEDZaNLx+ZzLJvGaOxFr4ch+zPrd/6NVRFdFW/tWo1b9QyeS0tc3tjlDecQmFwD0C7y/5lFZ31JcjfDWFEK9BcUNE7eL/Fjx75aT/hpNhFqgFuNOKRSc14BBXu9vEgkqSW7WVuCnNKl9ZvELjFqaAIu7ZJXLq9PpBDtc4lQ8u0+1/1RL2ZRbZzqz83ALtlOxFolpNqZBwqJHF/pHHfoBkOEZRQUpDzbtqU1+angINFqIrZ4qbBNlITJEerHliFK7MQbKjYXKdgV/p0shfpG4cwaGGHjy/KEemOxrxU+XHd5gq/WSlX74Dttgn2Ou1l/Sajkc4Thf6TVWQ7cFsCrrAMXCPUWJvX6USbJL7gCcXOHuxZScX6s8yX0vA7o/trGzbq10GJqABObEfyJRuQC/X0OFTMX0FVcDj0gp4E65Qb9pLORU+YiyIOycsc8IouIThUMluX2fVms9pYbSsDWMGM4ChZzaS9Pkvox2J1kRav8lZQlM4DmqgqCe6NXxYZhEM9WZ/QP6VZvxvhymbLWGSzLwGLt6TvC2FPYbDcXGT/1vjWrrCJOPxAUNsQHee/nDscegUsLw+2mHEuL/+6bTjhywKiDiv1hvotfKimIOfpvDJzl033gxeF4eRklLPhOhm1jxyWXsnwEjHeC6etniezxURu
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               sReponse est une chaîne
               sReqHTTP est une chaîne
               oUsrDev est un ClUsr dynamique
               
               vRepEvts est un variant
               vEvts est un variant
               nLigne est un entier
               
               dhEvt est une dateheure
               oSpr est un ClSprint dynamique
               
               //récupération des actions de la carte
               sReqHTTP = ChaîneConstruit("https://api.trello.com/1/cards/%1/actions%2", TBL_Cartes.COL_IdCarte, sAuth)
               HTTPRequête(sReqHTTP)
               sReponse = HTTPDonneRésultat()
               vRepEvts = JSONVersVariant(sReponse)
               TableSupprimeTout(TBL_Actions)
               pour tout vEvts de vRepEvts
               	
               	
               	nLigne = TableAjouteLigne(TBL_Actions)
               	si vEvts.data.text <> Null alors
               		TBL_Actions[nLigne].COL_Data	= vEvts.data.text
               	fin
               	
               	dhEvt = dh_FormatRFC3339_Vers_DateHeure(vEvts.date)
               	oSpr <- ClSprint.oGet_SprintDeDate(dhEvt..PartieDate)
               	TBL_Actions[nLigne].COL_Date	= oSpr.sSprint_Date()
               	
               	HLitRecherche(Scr_Usr_Trello,IdTrello,vEvts.idMemberCreator,hIdentique+hLimiteParcours)
               	SI HTrouve(Scr_Usr_Trello) ALORS
               		oUsrDev <- ClUsr.GetObj(Scr_Usr_Trello.IDScr_Usr)
               		TBL_Actions[nLigne].COL_IdUsr	= oUsrDev.p_sNom
               	fin
               	
               	si vEvts.data.listAfter <> Null ALORS
               		TBL_Actions[nLigne].COL_IdList	= vEvts.data.listAfter.id
               		selon vEvts.data.listAfter.id
               			cas cst_List_ID_Dev_en_cours
               				TBL_Actions[nLigne].COL_IdList = "En cours"
               			CAS cst_List_ID_A_faire_tester_par_DEV2
               				TBL_Actions[nLigne].COL_IdList = "Dev 2"
               			CAS cst_List_ID_Test_unitaire
               				TBL_Actions[nLigne].COL_IdList = "TU"
               			CAS cst_List_ID_A_livrer_en_pré_prod
               				TBL_Actions[nLigne].COL_IdList = "Liv pré prod"
               			CAS cst_List_ID_Test_fonctionnel
               				TBL_Actions[nLigne].COL_IdList = "TF"
               			CAS cst_List_ID_A_livrer_en_prod
               				TBL_Actions[nLigne].COL_IdList = "Liv Prod"
               			CAS cst_List_ID_Fini
               				TBL_Actions[nLigne].COL_IdList = "Fin"
               			CAS cst_List_ID_Fini_sprint_précédents
               				TBL_Actions[nLigne].COL_IdList = "Prec"
               
               			AUTRE CAS
               				
               		FIN
               	FIN
               	
               	
               //	
               //	si vList.idMembers[1] <> null ALORS
               //		HLitRecherche(Scr_Usr_Trello,IdTrello,vList.idMembers[1],hIdentique+hLimiteParcours)
               //		si HTrouve(Scr_Usr_Trello) ALORS
               //			oUsrDev <- ClUsr.GetObj(Scr_Usr_Trello.IDScr_Usr)
               //		sinon
               //			stop
               //		FIN
               //	sinon
               //		oUsrDev = goapp.m_oUsrCnx
               //	FIN
               	
               	
               	
               	
               FIN
              type : 18
            -
              type : 161
              enabled : false
        -
          name : JAUGE_SansNom2
          identifier : 0x20b7e47b28f61e7b
          internal_properties : BgAAAAYAAABOVI40aefYl+mb+q/6juF1iXhTta26iiWzj7+n6NJjk4vyPczvoVcjfSt+3alX/yS9dxJhrjzU8Voy5l1YZeDDlZWGJNNm8IFqruo9XnRRsozf7LVF4C339z5pkM1bqIKBgFtI9cEKdouypuiqjoqsW+NXUv4E2YQdSkVv+YkW7uzV/f3b0Ns/t1/eqT0YXSCxtk2FCMNyFCEAWWov/pDDgtvOLDftuRp1NRj38jciq5EwGjcTVmo/pcdZIZ1sKunuFhJxYhR0XjQ1NJSJ8dP1N9jwEyXwnGb4qlqo0Up5FAG1KvJNY+R74+Rr6sjbaFXgkPps4ieuIQ7AeXikU4oFRx1kvJpDdNym6rQ2TsG1+cUqv3tSVec1WVcHOZkbfxAnIqVtHlsvykFMyrFNXq/feVnlir4Ec7oz+65w5kXgPtqxOHYHon5KzHLS13Mv2KQUvpTEvFXeA6YdoGu3cn/WfXDP10WqHCfiwJ8eAwz5o7H1QTHjG52j000NXEAaecB8fujKcVQQ6Q5DANpPI75DVgiZkpxRMCuwRr5dou97EwnuDym3jTDv2NWktSOLqdD+C5h5bcYD3DnAukTOacvJkcWLhiOxv1PjjPkYOhskXCKdeviCL4yA9h/fFpyBWECMPmMNuHa+ufq6EhF7UDWTJqR2mTLnBTr/HkcPOM2KcbSjTL7P4aP2jk1nzSEXsBH05FueoMXHPmP2bRAg/AXmDmfJZ8MjP8ktSHWnbQfQycKUVJtho+NoyUwyb1nBUKOJf0bk+D/pf1alMKsywxxnt4EwBKcwwypRlX8I5+zeyN68y8UBVFRq6ezMfakVWBhu/KaPp0L7fm89r8falj7En7LNBxE9OhPfXb2j8uQEiU9DB3GnWjYIoAxv2kCJlouhH+TFYQ==
          type : 10
          code_elements :
           type_code : 17
           p_codes : []
        -
          name : BTN_Créer_la_carte
          identifier : 0x20b7e47b28fa1e9a
          internal_properties : BgAAAAYAAADI34UWfZdZRx4hMmUFpjv6o66XKfRBPDLpaXR4AC7BfVymI7RI69+WrDyUKGBatKgqzBIp1FmVSNaIclmUDQ2c2iY3UmE1ymhAxBRPElDjba+W8gY6nR5P7DzqMvXAd5Abcx6MD0+X8GH+as2Y3MEFdKrrvYb3Q4UaROEcfFQfrLuFiTB+62iHLfh/GffDAOr39LNFk6+PsoDjGlEIWzTgcGgVZI7XxqPo52YSZxMkHHbbPCYj3GWsTiS0aOB4H6As/c5mAgULkPYigpiR9WYe6P4kplQI3hxia0xoR5enDvtKeDuoLFQp+XpOxCgkMffMQfAUyhvO5pq2hb/Ja+PcKY8thr83H7BC5Fd/cIoIBzY1PZ6XxGeEFSKzNLbbEJOoT29kzFqIl8Rs68H9/yKN4rJOg60oiYdq5ynGMTCPfjbb7WobFjU7jSD4IhJFFM4dcKWiMtjP56WUpodsktGCm/xuPlCEcVhWnp2ipj7K2HTFmc1sFBV4Fwz4mBi0u+sCAwhPgiYVSp0ca/ROf/ourfiFkyTymbQRoKg8yEkmxRyULW9Amp8OfpVdI1AWWSYHc4Ob9hJ3FHiggPWSsg5ET5peiraweyjl5PI0sQdhAQ7nNBEcUq0ui0NNF3JSYHsgcD5U8/fFaC1CKjWLtMenGIwxJcCMyWw6LTnzqmhDupNvYXMsulkwptAa0wAo8t6FEZUI1oStOlVJHfGhpkzLCEsghK/B3x6FjTWTHuzHRA==
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1-
               
               sReponse est une chaîne
               sParams est une chaîne
               sReq est une chaîne
               oTache est un ClTache dynamique
               oPrj est un ClProjet dynamique
               
               
               
               oTache <- ClTache.GetObj(TBL_TachesAFaire.COL_Id)
               oPrj <- oTache.p_oUserStoryParent.p_oProjetParent
               
               sParams += "&idList=" + cst_List_ID_A_faire
               sParams += "&name=" + Encode(oTache.p_sCodeTache + " - " + oPrj.p_sNom + " - " + oTache.p_sDescription, encodeURLDepuisAnsi)
               sParams += "&desc=" + Encode(oTache.p_sCMTR, encodeURLDepuisAnsi)
               sParams += "&pos=bottom"
               
               si oPrj.p_bTop_Prioritaire ALORS
               	sParams += "&idLabels=" + cst_Label_Prioritaire
               FIN
               
               sReq = ChaîneConstruit("https://api.trello.com/1/cards%1%2", sAuth, sParams)
               
               //récupération des listes du tableau
               HTTPRequête(sReq,"","","POST")
               sReponse = HTTPDonneRésultat(httpEntête)
               trace(sReponse)
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Créer_tout
          identifier : 0x20b7e47b28fc1eaa
          internal_properties : BgAAAAYAAADk2yFZYW/OkcN2brxxZqquU6/H4NBJceYXXK372UXX2MC2Hn2hsQVcGlChwX3IGeV/3HtFaoUoJ+wYDOfmqVefNxfv+eioezR4ss6uxudmdqqU23seRioZH3omyuwIX+IgNEQqrqvpsqc1u+8e1dmQRA0HlGVg7FIKZsayoKOWXx+PZoCqYQOqRzzTX00Ta64PiP8ilYchKG/HDjC9dEymsZpfL26ckik57xWXwlVatE9jPdH1GUPJlZ/pj0fEXr4JprNmybny1/TCSwmIYKJHM6Qr4fJQckPIQWSEhONRnSe8s2KZVajjGuhNeCIT6QKBvXV/lhYbRlUM6+kW1YH6vybwftBD0kwKDwlzVuTo6EORGcuHfd1LvSYXXLnqoD+W0Q/QJS+wSe4q+TeIRgyLBMC+L57tReHwWe8UCnGBaEDR8br4UwlfhXxyVInEPJwRyM/0P/HNKzNGlPVnWWnOIa48/Mtfy9xKVovwH/vWonzpZ9v/w5+IW+xyEg3po+UaDz6tXXV5IA3QMcIvRPQSrWxBuy8thV73zlI2IFPhXNN3Sr40VLI9t8o80NKisNeU+9O1ODW7E5d+YKCbN2rxRmWaKcEmIAVCsX+/byqCMOkXf5kk4jtdQb4UDAm64SzfJXP1sU9S39Fx9/FFlmQxsI4JzXW1V815IE3+Lau36kICtZ8mSIVvx2FZuZWhyvV+adaslixsDXbIUnwTmiRKadAh+3ZD1WQ=
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               nInd est un entier
               
               pour nInd = 1 _a_ TBL_TachesAFaire..Occurrence
               	TableSelectPlus(TBL_TachesAFaire, nInd)
               	ExécuteTraitement(BTN_Créer_la_carte,trtClic)
               FIN
              type : 18
            -
              type : 161
              enabled : false
    type : 16
    controls : []
    code_elements :
     type_code : 24
     p_codes :
      -
        type : 292
        enabled : false
      -
        type : 293
        enabled : false
 menu :
  name : _Menu
  identifier : 0x292573e513b5f221
  internal_properties : BgAAAAYAAABd4biPtdLQOwfUFiqrit8H4xfGqKyz9t6VLxCUnNZRQiLPVs82PZNE+UVdKRzjizyeuKyRur85gNMUfqplpmtNDnQWQla9zo+GH9+1EfUJ6w17Dn/egD/gv+Hhywk8c9unIdzEp7EHgaAqD28w7Agveg4u19PBcKGZtQ==
  options : []
 languages :
  - fr-FR
 popup_menus : []
 message_bar :
  internal_properties : BgAAAAYAAAA67fgqjL+BlNW0l7RVb9QHekfVEUcR8SpB62EFBVueAPYoi1/j/aXUAO/gLLyCTVuQazFai314Ui0SG0rWW0oZm0BFICoRFAhcTeX8
  controls :
   -
     name : CBM_SansNom
     identifier : 0x2cd16922055306a1
     internal_properties : BgAAAAYAAADhypj3DtZ044WjmFeq9+oDFW73RGb8+xoOxtxmTU4ShEJIQ2waxjclgw6IyWqi8SLCX6UbT5n/DVoz1ceipdbYF1rlV4MeiEk=
     code_elements :
      type_code : 62
      p_codes :
       -
         type : 15
         enabled : false
       -
         type : 16
         enabled : false
       -
         type : 39
         enabled : false
       -
         type : 17
         enabled : false
 code_elements :
  internal_properties : BgAAAAYAAABWIHrh1Yb2YcVvIfiiRDSu3aXMOSCmrRDPwCP2jtbUBEGFOv+qg2ayVXoCZujUnWzZv/mop+WO+JtZ1Q==
  type_code : 1
  p_codes :
   -
     code : |1+
      PROCÉDURE MaFenêtre()
      
      
      //https://developer.atlassian.com/cloud/trello/rest/api-group-cards/#api-cards-post
      
      CONSTANT
      	sAuth								= "?key=5b1c38be737f85f556604d643b571003&token=0c6e5cd1de31ab1fe63b8919526ab4884dbb1d7def9b4d85739ac9098675ed1b"
      	cst_TableauScrum					= "AcWZ1BSV"
      	cst_List_ID_A_faire					= "5e6f30b2e199570356971064"
      	cst_List_ID_Dev_en_cours			= "5e6f30c62a48854eb7642c3e"
      	cst_List_ID_A_faire_tester_par_DEV2	= "5e6f30de31befa31788b71d5"
      	cst_List_ID_Test_unitaire			= "5e6f30e807d6880a18b8314d"
      	cst_List_ID_A_livrer_en_pré_prod	= "5e6f310d215ade036fad954c"
      	cst_List_ID_Test_fonctionnel		= "5e6f30ec3182fc07d11df6d2"
      	cst_List_ID_A_livrer_en_prod		= "5e6f30fc13de16288ca8955e"
      	cst_List_ID_Fini					= "5e6f30ff28bd738d4e6a9e64"
      	cst_List_ID_Fini_sprint_précédents	= "5e969a2a7ee6e164742a03bf"
      	
      	cst_Label_Prioritaire				= "5e6f30a17669b2254985944b"
      	cst_Label_Suspend					= "5e6f30a17669b2254985944c"
      	cst_Label_Attente					= "5e6f30a17669b22549859449"
      FIN
   -
     code : |1+
      
      
     type : 34
   -
     code : |1+
      
      
     type : 234
   -
     code : |1+
      
      
     type : 165
   -
     code : |1+
      
      
     type : 177
   -
     code : |1+
      
      
     type : 180
   -
     type : 230
     enabled : false
   -
     code : |1+
      
      
     type : 2
  procedures :
   -
     name : RechDoc
     procedure_id : 2283051889852933629
     type_code : 14
     code : |1+
      
      
     type : 458752
   -
     name : stEnregistrerUsrStories
     procedure_id : 2064279793492242694
     type_code : 14
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] stEnregistrerUsrStories (<nIdUsr_P> est entier)
      //
      // Paramètres :
      //	nIdUsr_P (entier) : <indiquez ici le rôle de nIdUser_P>
      // Valeur de retour :
      // 	tableau : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      
      Procédure stEnregistrerUsrStories(LOCAL nIdUsr_P est un entier):tableau de STR_UserStorie 
      
      IdFichierXLS est un xlsDocument
      Xlsnbligne_ est un entier
      i est un entier
      sFichier est une chaîne
      //déclaration des structures
      stMaUs est un STR_UserStorie
      
      
      aMesUserStories est un tableau de STR_UserStorie 
      
      nPremiereligne est un entier = 2
      
      nCol_CodeUserStorie est un entier = 1
      
      // Ouvre le sélecteur de fichiers
      sFichier = Dupplication_Fichier_Avant_Import("L:\Service informatique\Service Développement\Test projet Scrum\User stories ScrUM.xlsx")
      
      SI sFichier <> "" ALORS
      	
      	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
      	
      	SI ErreurDétectée = Faux ALORS
      		
      		Xlsnbligne_ =xlsNbLigne(IdFichierXLS,Vrai)
      		
      		POUR i = nPremiereligne _À_ Xlsnbligne_
      			
      			stMaUs.sCodeUserStorie = xlsDonnée(IdFichierXLS,i, nCol_CodeUserStorie)
      			stMaUs.sBesoinUserStorie = xlsDonnée(IdFichierXLS,i,nCol_CodeUserStorie + 2)
      			stMaUs.sEnTantQue = xlsDonnée(IdFichierXLS,i,nCol_CodeUserStorie + 1)
      			stMaUs.sAfindeUserStorie = xlsDonnée(IdFichierXLS,i,nCol_CodeUserStorie + 3)
      			stMaUs.nPrioritéUserStorie = xlsDonnée(IdFichierXLS,i,nCol_CodeUserStorie + 4)
      			stMaUs.nIDResponsable = nIdUsr_P
      			TableauAjoute(aMesUserStories, stMaUs)
      			
      			
      		FIN
      		
      		xlsFerme(IdFichierXLS)
      		//Info("importation terminée !")
      		
      		
      	SINON
      		Erreur(ErreurInfo(errComplet))
      	FIN	
      	
      	xlsferme(IdFichierXLS)
      	
      FIN
      
      RENVOYER aMesUserStories
     type : 458752
   -
     name : Dupplication_Fichier_Avant_Import
     internal_properties : BgAAAAYAAADYuPST6CP+T+K2ZU37o7g3n8Kew/nVjSZD5G6OyRuT2Yo67DV/AZmlWI7RE7NW48hb
     procedure_id : 2256677341532509307
     type_code : 14
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] Dupplication_Fichier_Avant_Import (<sCheminFichier> est chaîne)
      //
      // Paramètres :
      //	sCheminFichier (chaîne ANSI) : <indiquez ici le rôle de sCheminFichier>
      // Valeur de retour :
      // 	chaîne ANSI : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      FONCTION Dupplication_Fichier_Avant_Import(local sCheminFichier est une chaine):chaîne
      
      sCheminDossier est une chaîne						// chemin fichier
      sCheminCopie est une chaine 						// chemin copie
      sCheminRetour est une chaine					 	// chemin soit du fichier dupliquer soit du fichier d'origine
      bDuplicationAutorisé est un booleen = vrai
      
      //trace("Fichier d'origine : " + sCheminFichier)
      
      // on obtient le chemin a l'endroit ou il faut créer le répertoire
      
      sCheminDossier = ComplèteRep(fRepExe())+"RepDuplication"
      
      //on regarde s'il existe, si non on le créer
      SI PAS fRépertoireExiste(sCheminDossier) ALORS
      	// si la création échoue on fait un msg d'erreur
      	SI PAS fRepCrée(sCheminDossier) = Vrai ALORS
      		Info(ErreurInfo(errComplet))	
      		bDuplicationAutorisé = faux
      	FIN
      FIN
      
      // Vérifier la présence d'une ancienne copie existante
      si bDuplicationAutorisé = vrai alors
      	
      	sCheminCopie = ComplèteRep(sCheminDossier) + fExtraitChemin(sCheminFichier,fFichier+fExtension)
      	
      	//vérifier si le fichier existe et le supprimer
      	SI fFichierExiste(sCheminCopie) = Vrai ALORS
      		
      		bDuplicationAutorisé = faux
      		
      		SI PAS fSupprime(sCheminCopie) ALORS
      			Info("Erreur lors de la tentative de suppression du fichier Excel dupliqué : " + sCheminCopie + rc + ErreurInfo(errComplet))
      		sinon
      			bDuplicationAutorisé = vrai
      		FIN
      		
      	FIN
      fin
      
      // Duplication du fichier Excel avant import
      si bDuplicationAutorisé = vrai alors
      	
      	SI PAS fCopieFichier(sCheminFichier, sCheminCopie) = Vrai ALORS
      		Info("Impossible de dupliquer le fichier d'origine : " + sCheminFichier + ErreurInfo(errComplet))
      		Ferme()
      		// renvoi le chemin du dossier d'origine
      		sCheminRetour = sCheminFichier
      	sinon
      		// Renvoi le chemin de la copie
      		sCheminRetour = sCheminCopie	
      	FIN
      	
      sinon
      	// renvoi le chemin du dossier d'origine
      	sCheminRetour = sCheminDossier	
      fin
      
      //Trace("Fichier importé : " + sCheminRetour)
      
      renvoyer sCheminRetour
     type : 458752
   -
     name : Import_Des_Criteres_Acceptation
     internal_properties : BgAAAAYAAADYuPST6CP+T+K2ZU37o7g3n8Kew/nVjSZD5G6OyRuT2Yo67DV/AZmlWI7RE7NW48hb
     procedure_id : 2258147771278417844
     type_code : 14
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //Import_Des_Criteres_Acceptation (<nIDScr_Projet_p> est entier, <FileName_p> est chaîne)
      //
      // Paramètres :
      //	nIDScr_Projet_p (entier) : <indiquez ici le rôle de nIDScr_Projet_p>
      //	FileName_p (chaîne ANSI) : <indiquez ici le rôle de FileName_p>
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE Import_Des_Criteres_Acceptation(local nIDScr_Projet est un entier, local Chemin_fichier est une chaine)
      
      
      nIDfichierXLS est un xlsDocument
      nNumFeuille_Critere_Acceptation est un entier
      sNom_Onglet_Feuille_Excel_Critères_Acceptations est une chaine = "Criteres acceptation"
      
      nNbLignes est un entier // Nombre de ligne total de la feuille
      nLigne est un entier	// Numéro de ligne de la feuille
      sCode_User_Storie est une chaine					// Code de la user storie en cours de traitement
      nIDUser_Storie_Eencours est un entier				// Identifiant de la User storie encours de traitement
      sLibelleEtat_Critere_Acceptation est une chaîne		// Libellé de l'état du critère d'acceptation
      nIDEtat_Critere_Acceptation est un entier			// Identifiant de l'état du critère d'acceptation
      cstIDEtat_Redaction_Encours est un entier = 1		// Rédaction encours 
      nID_Redacteur est un entier
      nID_Valideur est un entier
      //nID_Desactivation est un entier
      sNumero_Critere est une chaine
      sNameRedacteur est une chaine
      sNameUser est une chaine
      //sNomUserDesactivation est une chaîne
      bEnregistrementCritereComposant est un booléen	// défini si on doit enregistrer le comosant du critère d'acceptation
      sAuMomesntDe est une chaine
      sJAttend_que est une chaine 
      sEtant_Donne_que est une chaine
      
      
      
      //------------------------------------------Numero--Des--Colonnes---------------------------------------------------
      nColNumeroUserStory est un entier = 1
      nColNumero_Critere est un entier = 2
      nColTitre est un entier = 4
      nColNomRedac est un entier = 5
      nColCommentaireDemande est un entier = 13
      nColCommentaireDev est un entier = 14
      nColDateCreation est un entier = 6
      nColIDValideur est un entier = 11
      nColDateValidation est un entier = 12
      //nColIDDesactivation est un entier = 15
      //nColDateDesactivation est un entier = 16
      //nColCommDesactivation est un entier = 17
      nColIDCritAcceptEtat est un entier = 10
      nColIDCritAcceptAssoc est un entier = 3
      nColEtant_Donne_Que est un entier = 7
      nColAuMomentDe est un entier = 8
      nColJAttend_que est un entier = 9
      
      //------------------------------------------------------------------------------------------------------------------
      
      //Faire une requete pour aller chercher tous les composants types et remplir le tableau avec
      
      
      
      //------------------------------------------------------------------------------------------------------------------
      
      SI Chemin_fichier <>"" ALORS
      	nIDfichierXLS = xlsOuvre(Chemin_fichier,xlsEcriture)
      	SI ErreurDétectée = Faux ALORS
      		
      		// Recherche de la feuille des critères d'acceptation
      		
      		POUR i= 1 _A_ nIDfichierXLS..NombreFeuille
      			xlsFeuilleEnCours(nIDfichierXLS, i)
      			SI nIDfichierXLS..NomFeuille = sNom_Onglet_Feuille_Excel_Critères_Acceptations ALORS
      				//-----------------------------
      				nNumFeuille_Critere_Acceptation = i
      				SORTIR		// Une feuille à été trouvé				
      			FIN	
      		FIN		
      		
      		// Traitement de la feuille des critères d'acceptation
      		SI nNumFeuille_Critere_Acceptation <> 0 ALORS		
      			
      			// on Sélectionne la feuille qui correspond aux critères d'acceptation
      			xlsFeuilleEnCours(nIDfichierXLS, nNumFeuille_Critere_Acceptation)
      			
      			// Parcours de la feuilles Excel des critères sur nNbLignes
      			nNbLignes = xlsNbLigne(nIDfichierXLS, Vrai)
      			
      			// on lit pas la première ligne
      			POUR nLigne = 2 _À_ nNbLignes
      				
      				//----------------------------------------------------------
      				
      				// sert récupérer les composant dans les lignes		
      				bEnregistrementCritereComposant = Faux
      				
      				// ---------------------------------- Lecture du code de la User storie et recherche de l'identifiant de la user storie -------------------------------------- //
      				
      				sCode_User_Storie = xlsDonnée(nIDfichierXLS, nLigne, nColNumeroUserStory)
      				
      				SI sCode_User_Storie <> "" ALORS
      					
      					
      					// Recherche de l'identifiant de la user storie
      					nIDUser_Storie_Eencours = RechercheIdUserStorie(sCode_User_Storie, nIDScr_Projet)
      					
      					SI nIDUser_Storie_Eencours = 0 ALORS
      						Trace("user storie introuvable : " + sCode_User_Storie + " - id. projet " + nIDScr_Projet )
      					FIN
      					
      				FIN
      				
      				
      				// récupération du code du critère en cours d'enregistrement 
      				
      				sNumero_Critere = xlsDonnée(nIDfichierXLS, nLigne, nColNumero_Critere)	
      				
      				SI sNumero_Critere <> "" ALORS
      					
      					
      					// ---------------------------------- Lecture de l'état du critère d'acceptation et recherche de l'identifiant de l'état -------------------------------------- //
      					
      					sLibelleEtat_Critere_Acceptation = xlsDonnée(nIDfichierXLS, nLigne, nColIDCritAcceptEtat)	
      					
      					//recherche de l’état de la User Storie
      					SI sLibelleEtat_Critere_Acceptation <> "" ALORS
      						
      						nIDEtat_Critere_Acceptation = RechercheEtatUserStorie(sLibelleEtat_Critere_Acceptation)	
      						
      					SINON
      						nIDEtat_Critere_Acceptation = cstIDEtat_Redaction_Encours
      					FIN
      					
      					
      					// ---------------------------------- Lecture du nom du rédacteur et recherche de l'identifiant -------------------------------------- //
      					sNameRedacteur = xlsDonnée(nIDfichierXLS, nLigne, nColNomRedac)//------Info Manquante
      					
      					SI sNameRedacteur <> "" ALORS
      						nID_Redacteur = RechercheUSR(sNameRedacteur)
      					SINON
      						nID_Redacteur = Null
      					FIN
      					
      					// ---------------------------------- Lecture du nom de l'utilisateur et recherche de l'identifiant -------------------------------------- //
      					
      					sNameUser = xlsDonnée(nIDfichierXLS, nLigne, nColIDValideur)//----- Info Manquante
      					
      					SI sNameUser <> "" ALORS
      						nID_Valideur = RechercheUSR(sNameUser)
      					SINON
      						nID_Valideur = Null
      					FIN
      					
      					// ---------------------------------- Lecture du nom de l'utilisateur et recherche de l'identifiant -------------------------------------- //
      					
      //					sNomUserDesactivation = xlsDonnée(nIDfichierXLS, nLigne, nColIDDesactivation)//------Info Manquante
      //					SI sNomUserDesactivation <> "" ALORS
      //						nID_Desactivation = RechercheUSR(sNomUserDesactivation)
      //					SINON
      //						
      //						nID_Desactivation = Null
      //					FIN
      					
      					//---------------------------------- Ajout du critère d'acceptation Assoc --------------------------------------//     
      					
      					//				sNomCritereAssociation = xlsDonnée(nIDfichierXLS, nLigne, nColIDCritAcceptAssoc)
      					//				si sNomCritereAssociation <> "" alors
      					//					nID_Critere_Assoc = RechercheCritereAssoc(sNomCritereAssociation)
      					//				sinon
      					//					nID_Critere_Assoc = null					
      					//				FIN
      					
      					//-Ajout du Critere d'Acceptation
      					
      					
      					HRAZ(Scr_CritereAccept)					
      					Scr_CritereAccept.CommentaireDemand			= xlsDonnée(nIDfichierXLS, nLigne, nColCommentaireDemande)
      					Scr_CritereAccept.CommentaireDev			= xlsDonnée(nIDfichierXLS, nLigne, nColCommentaireDev)
      					Scr_CritereAccept.Titre						= xlsDonnée(nIDfichierXLS, nLigne, nColTitre)
      					Scr_CritereAccept.IDSrc_Usr_Valideur		= nID_Valideur
      //					Scr_CritereAccept.IDSrc_Usr_Desactivation	= nID_Desactivation
      					Scr_CritereAccept.DateCreation				= ChaîneVersDate(xlsDonnée(nIDfichierXLS, nLigne, nColDateCreation))
      					// null si vide
      					SI Scr_CritereAccept.DateCreation = "" ALORS
      						Scr_CritereAccept.DateCreation = Null
      					FIN
      					//----------------------------
      					Scr_CritereAccept.DateValidation = ChaîneVersDate(xlsDonnée(nIDfichierXLS, nLigne, nColDateValidation))
      					// null si vide 
      					SI Scr_CritereAccept.DateValidation = "" ALORS
      						Scr_CritereAccept.DateValidation = Null
      					FIN
      					//----------------------------------------------
      //					Scr_CritereAccept.DateDesactivation = ChaîneVersDate(xlsDonnée(nIDfichierXLS, nLigne, nColDateDesactivation))
      					// null si vide
      					SI Scr_CritereAccept.DateDesactivation = "" ALORS
      						Scr_CritereAccept.DateDesactivation = Null
      					FIN
      //					Scr_CritereAccept.CommentaireDesactivation	= xlsDonnée(nIDfichierXLS, nLigne, nColCommDesactivation)
      					Scr_CritereAccept.IDSrc_Usr_Redacteur		= nID_Redacteur
      					Scr_CritereAccept.IDScr_UserStory			= nIDUser_Storie_Eencours 				
      					Scr_CritereAccept.IDScr_CritereAccept_Etat	=  nIDEtat_Critere_Acceptation
      					Scr_CritereAccept.IDScr_CritereAccept_Asso	= 0	
      					
      					SI PAS HAjoute(Scr_CritereAccept) ALORS
      						Erreur(ErreurInfo(errComplet))
      					SINON
      						sEtant_Donne_que	= xlsDonnée(nIDfichierXLS, nLigne, nColEtant_Donne_Que)	
      						sAuMomesntDe		= xlsDonnée(nIDfichierXLS, nLigne, nColAuMomentDe)	
      						sJAttend_que		= xlsDonnée(nIDfichierXLS, nLigne, nColJAttend_que)	
      						
      						SI sEtant_Donne_que <> "" _OU_  sAuMomesntDe <> "" _OU_ sJAttend_que <> "" ALORS
      							bEnregistrementCritereComposant = Vrai
      						FIN
      					FIN
      				SINON
      					//on enregistre les trois composants types .
      					sEtant_Donne_que		= xlsDonnée(nIDfichierXLS, nLigne, nColEtant_Donne_Que)	
      					sAuMomesntDe			= "" // xlsDonnée(nIDfichierXLS, nLigne, nColAuMomentDe)	
      					sJAttend_que			= xlsDonnée(nIDfichierXLS, nLigne, nColJAttend_que)	
      					
      					SI sEtant_Donne_que <> "" _OU_  sAuMomesntDe <> "" _OU_ sJAttend_que <> "" ALORS
      						bEnregistrementCritereComposant = Vrai
      					FIN
      					
      				FIN
      				
      				
      				SI bEnregistrementCritereComposant = Vrai ALORS
      					
      					
      					SI sEtant_Donne_que <> "" ALORS
      						HRAZ(Scr_CritereAccept_Composant)
      						Scr_CritereAccept_Composant.Description							= sEtant_Donne_que 				
      						Scr_CritereAccept_Composant.IDScr_CritereAccept					= Scr_CritereAccept.IDScr_CritereAccept 
      						Scr_CritereAccept_Composant.IDScr_CritereAccept_Composant_Type	= cstComposant_Crit_Accept_EtantDonneQue 
      						SI PAS HAjoute(Scr_CritereAccept_Composant) ALORS
      							Erreur(ErreurInfo(errComplet))
      						FIN
      					FIN
      					
      					SI sAuMomesntDe <> "" ALORS
      						Scr_CritereAccept_Composant.Description							= sAuMomesntDe 				
      						Scr_CritereAccept_Composant.IDScr_CritereAccept					= Scr_CritereAccept.IDScr_CritereAccept
      						Scr_CritereAccept_Composant.IDScr_CritereAccept_Composant_Type	= cstComposant_Crit_Accept_AuMomentDe
      						
      						SI PAS HAjoute(Scr_CritereAccept_Composant) ALORS
      							Erreur(ErreurInfo(errComplet))
      						FIN
      					FIN
      					
      					SI sJAttend_que <> "" ALORS
      						Scr_CritereAccept_Composant.Description							= sJAttend_que
      						Scr_CritereAccept_Composant.IDScr_CritereAccept					= Scr_CritereAccept.IDScr_CritereAccept 
      						Scr_CritereAccept_Composant.IDScr_CritereAccept_Composant_Type	= cstComposant_Crit_Accept_JAttendQue
      						
      						SI PAS HAjoute(Scr_CritereAccept_Composant) ALORS
      							Erreur(ErreurInfo(errComplet))
      						FIN
      					FIN
      				FIN
      			FIN
      			
      			
      			
      		FIN
      		xlsFerme(nIDfichierXLS)
      	SINON
      		Info(ErreurInfo())
      	FIN
      fin
      
      
      
     type : 458752
   -
     name : RechercheEtatUserStorie
     internal_properties : BgAAAAYAAADYuPST6CP+T+K2ZU37o7g3n8Kew/nVjSZD5G6OyRuT2Yo67DV/AZmlWI7RE7NW48hb
     procedure_id : 2258147771278483708
     type_code : 14
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      // RechercheEtatUserStorie ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE RechercheEtatUserStorie(LOCAL sLibelleEtat est une chaine)
      nID_Etat_retour est un entier
      
      // Déclaration de la requête
      sdSourceEtat_Critere_Acceptation est une source de données
      sRequeteIDEtat_Critere_Accetation est une chaine  = chaineconstruit([
      	SELECT 
      		Scr_CritereAccept_Etat.IDScr_CritereAccept_Etat 
      		
      	FROM Scr_CritereAccept_Etat 
      	
      	WHERE Upper(Libelle) LIKE '%1' or  Upper(Libelle) LIKE '%2' or Upper(Libelle) LIKE '%3'
      	
      	ORDER BY len(Libelle)
      	
      ],"%" + Majuscule(sLibelleEtat), Majuscule(sLibelleEtat)+"%", "%" + Majuscule(sLibelleEtat)+"%")
      
      // Exécution de la requête
      SI goApp.Rsql(sdSourceEtat_Critere_Acceptation ,sRequeteIDEtat_Critere_Accetation) = Vrai ALORS
      	
      	// lecture du résultat de la requête
      	HLitPremier(sdSourceEtat_Critere_Acceptation)
      	SI HTrouve(sdSourceEtat_Critere_Acceptation) ALORS
      		
      		// Récupération de l'identifiant de la requête
      		nID_Etat_retour = sdSourceEtat_Critere_Acceptation.IDScr_CritereAccept_Etat
      		
      	FIN
      	
      SINON 
      	Info(HErreur(hErrPrincipal))
      FIN
      
      // Annulation de la requête
      HAnnuleDéclaration(sdSourceEtat_Critere_Acceptation)
      
      // Renvoie l'identifiant
      RENVOYER nID_Etat_retour
     type : 458752
   -
     name : RechercheIdUserStorie
     internal_properties : BgAAAAYAAADYuPST6CP+T+K2ZU37o7g3n8Kew/nVjSZD5G6OyRuT2Yo67DV/AZmlWI7RE7NW48hb
     procedure_id : 2258147775573517009
     type_code : 14
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      // RechercheIdUserStorie ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE RechercheIdUserStorie(sCode_User_Storie est une chaine, nIDScr_Projet est un entier)
      
      nIDUserStorie est un entier
      // déclaration de la requete
      sdSource_Recherche_Utilisateur est une source de données
      sRequete_Recherche_Utilisateur est une chaine = chaineconstruit([
      SELECT 
      	IDScr_UserStory 
      
      FROM Scr_UserStory 
      
      WHERE Scr_UserStory.CodeUserStory = '%1' 
      AND Scr_UserStory.IDScr_Projet = %2
      
      ], sCode_User_Storie, nIDScr_Projet)
      
      
      SI goApp.Rsql(sdSource_Recherche_Utilisateur,  sRequete_Recherche_Utilisateur) = Vrai ALORS
      	
      	HLitPremier(sdSource_Recherche_Utilisateur)
      	SI HTrouve(sdSource_Recherche_Utilisateur) ALORS// On lit le premier, s'il est trouvé, on l'affecte à la variable.
      		nIDUserStorie = sdSource_Recherche_Utilisateur.IDScr_UserStory
      	FIN
      FIN
      
      HAnnuleDéclaration(sdSource_Recherche_Utilisateur)
      // revoi de l'ID.
      RENVOYER nIDUserStorie
     type : 458752
   -
     name : RechercheUSR
     internal_properties : BgAAAAYAAACUmgjsDVMbsQop5HOx3zNgPpINzVE1A7E7zVS2CsD4/Ru+L19Gp9lyZv2pu5CPQpGucwXTyPluGNiB5Vu4LVvY
     procedure_id : 2258147775573583045
     type_code : 14
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      // RechercheUSR ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE RechercheUSR(sNom_redacteur est une chaine)
      
      nID_Redac_Retour est un entier
      
      //GetID_Usr est une requête SQL = 
      //[
      //SELECT IDScr_Usr FROM Scr_Usr WHERE Login_AD = {NomUser}	
      //]
      ////chercher id valider		
      //si HExécuteRequête(GetID_Usr, sNom_redacteur) = vrai alors
      //	HLitPremier(GetID_Usr)
      //	si HTrouve(GetID_Usr)alors
      //		nID_Redac_Retour = GetID_Usr.IDScr_Usr
      //	FIN
      //FIN
      //HAnnuleDéclaration(GetID_Usr)
      //renvoyer nID_Redac_Retour
      ...
      
      
      //déclaration de la requete
      Source_UserReaserch est une source de données
      RequeteUser est une chaine = chaineconstruit([
      SELECT 
      	IDScr_Usr 
      
      FROM Scr_Usr 
      
      WHERE Login_AD = '%1'
      ], sNom_redacteur)
      
      SI goApp.Rsql(Source_UserReaserch, RequeteUser) = Vrai ALORS
      	
      	HLitPremier(Source_UserReaserch)
      	SI HTrouve(Source_UserReaserch) ALORS// on lit le premier, s'il est trouvé on l'affecte
      		
      		nID_Redac_Retour = Source_UserReaserch.IDScr_Usr
      	FIN
      	
      	
      FIN
      
      HAnnuleDéclaration(Source_UserReaserch)
      //on revoi l'id
      RENVOYER nID_Redac_Retour
     type : 458752
   -
     name : Import_Process
     internal_properties : BgAAAAYAAADYuPST6CP+T+K2ZU37o7g3n8Kew/nVjSZD5G6OyRuT2Yo67DV/AZmlWI7RE7NW48hb
     procedure_id : 2260007719609282616
     type_code : 14
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //Import_Process (<nIDScr_Projet> est entier, <Chemin_fichier> est chaîne)
      //
      // Paramètres :
      //	nIDScr_Projet (entier) : <indiquez ici le rôle de nIDScr_Projet_p>
      //	Chemin_fichier (chaîne ANSI) : <indiquez ici le rôle de FileName_p>
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE Import_Process(local nIDScr_Projet est un entier, local Chemin_fichier est une chaine)
      
      
      nIDfichierXLS est un xlsDocument
      nNumFeuille_Process est un entier
      sNom_Onglet_Process est une chaine = "Process"
      nNbLignes est un entier // Nombre de ligne total de la feuille
      nLigne est un entier	// Numéro de ligne de la feuille
      
      
      nIdProcess est un entier
      nIdAxe est un entier
      nIdInter est un entier
      
      sProcess est une chaîne
      sAxe est une chaîne
      sInter est une chaîne
      sUS est une chaîne
      
      
      //------------------------------------------Numero--Des--Colonnes---------------------------------------------------
      nColProcess est un entier = 1
      nColAxe est un entier = 2
      nColInter est un entier = 3
      nColType est un entier = 4
      nColUS est un entier = 5
      nColLienCondErr est un entier = 6
      
      
      sReq est une chaîne
      nOrdre est un entier
      nOrdreInter est un entier
      
      
      STR_Cond_Lien est une structure
      	sNomInter est une chaîne
      	nIdProcess est un entier
      fin
      aStLiensErr est un tableau associatif de STR_Cond_Lien
      stLienErrTmp est un STR_Cond_Lien
      
      
      
      //------------------------------------------------------------------------------------------------------------------
      
      SI Chemin_fichier <>"" ALORS
      	nIDfichierXLS = xlsOuvre(Chemin_fichier,xlsEcriture)
      	SI ErreurDétectée = Faux ALORS
      		
      		// Recherche de la feuille des critères d'acceptation
      		
      		POUR i= 1 _A_ nIDfichierXLS..NombreFeuille
      			xlsFeuilleEnCours(nIDfichierXLS, i)
      			SI nIDfichierXLS..NomFeuille = sNom_Onglet_Process ALORS
      				//-----------------------------
      				nNumFeuille_Process = i
      				SORTIR		// Une feuille à été trouvé				
      			FIN	
      		FIN
      		
      		
      		// Traitement de la feuille des critères d'acceptation
      		SI nNumFeuille_Process <> 0 ALORS		
      			
      			// on Sélectionne la feuille qui correspond aux critères d'acceptation
      			xlsFeuilleEnCours(nIDfichierXLS, nNumFeuille_Process)
      			
      			// Parcours de la feuilles Excel des critères sur nNbLignes
      			nNbLignes = xlsNbLigne(nIDfichierXLS, Vrai)
      			
      			// on lit pas la première ligne
      			POUR nLigne = 2 _À_ nNbLignes
      				
      				
      				//----------------------------------------------------------
      				// process
      				sProcess = SansEspace(xlsDonnée(nIDfichierXLS, nLigne, nColProcess))
      				si sProcess <> "" ALORS
      					
      					//A t on déja traité un process ?
      					si nIdProcess <> 0 ALORS
      						//Oui : finalisation de celui ci.
      						CreeLiensconditions()
      					FIN
      					
      					
      					Scr_Process_Metier.Libelle		= sProcess
      					Scr_Process_Metier.IDScr_Projet	= nIDScr_Projet
      					si pas HAjoute(Scr_Process_Metier) ALORS
      						ExceptionDéclenche(1,HErreurInfo(hErrComplet))
      					FIN
      					nIdProcess = Scr_Process_Metier.IDScr_Process_Metier
      					nOrdre = 0
      					nOrdreInter = 0
      				FIN
      				
      				
      				//----------------------------------------------------------
      				// axe
      				sAxe = SansEspace(xlsDonnée(nIDfichierXLS, nLigne, nColAxe))
      				si sAxe <> "" ALORS
      					
      					sdGetIdAxe est une Source de Données
      					sReq = ChaîneConstruit([
      						SELECT 
      							Scr_Process_Metier_Axe.IDScr_Process_Metier_Axe
      						FROM Scr_Process_Metier_Axe
      						WHERE Scr_Process_Metier_Axe.Libelle like '%%%1%%'
      							AND Scr_Process_Metier_Axe.IDScr_Process_Metier = %2
      					], clapp.sFormateTexteSQL(sAxe), nIdProcess)
      					
      					SI goapp.RSQL(sdGetIdAxe,sReq) ALORS
      					
      						HLitPremier(sdGetIdAxe)
      						si HEnDehors(sdGetIdAxe) ALORS
      							nOrdre++
      							
      							Scr_Process_Metier_Axe.IDScr_Process_Metier	= nIdProcess
      							Scr_Process_Metier_Axe.Libelle				= sAxe
      							Scr_Process_Metier_Axe.Ordre				= nOrdre
      							si pas HAjoute(Scr_Process_Metier_Axe) ALORS
      								ExceptionDéclenche(1,HErreurInfo(hErrComplet))
      							FIN
      							nIdAxe = Scr_Process_Metier_Axe.IDScr_Process_Metier_Axe
      						sinon
      							nIdAxe = sdGetIdAxe.IDScr_Process_Metier_Axe
      						FIN
      						
      					FIN
      					HAnnuleDéclaration(sdGetIdAxe)
      				FIN
      				
      				
      				
      				//----------------------------------------------------------
      				// Inter
      				sInter = xlsDonnée(nIDfichierXLS, nLigne, nColInter)
      				si sInter <> "" ALORS
      					
      					nIdInter = sIdInterDeDesc(sInter, nIdProcess)
      					si nIdInter = 0 alors
      						hraz(Scr_Process_Metier_Intervenant)
      						selon xlsDonnée(nIDfichierXLS, nLigne, nColType)
      							cas "Action manuelle"
      								Scr_Process_Metier_Intervenant.IDScr_Process_Metier_Intervenant_Type = ClProcess_Metier_Intervenant.cstTypeInter_Action_manuelle
      							CAS "Action par intervenant"
      								Scr_Process_Metier_Intervenant.IDScr_Process_Metier_Intervenant_Type = ClProcess_Metier_Intervenant.cstTypeInter_Action_par_intervenant
      							CAS "Action automatique"
      								Scr_Process_Metier_Intervenant.IDScr_Process_Metier_Intervenant_Type = ClProcess_Metier_Intervenant.cstTypeInter_Action_automatique
      							CAS "Attente"
      								Scr_Process_Metier_Intervenant.IDScr_Process_Metier_Intervenant_Type = ClProcess_Metier_Intervenant.cstTypeInter_Attente
      							CAS "Sous process"
      								Scr_Process_Metier_Intervenant.IDScr_Process_Metier_Intervenant_Type = ClProcess_Metier_Intervenant.cstTypeInter_Sous_process
      							CAS "Condition"
      								Scr_Process_Metier_Intervenant.IDScr_Process_Metier_Intervenant_Type = ClProcess_Metier_Intervenant.cstTypeInter_Condition
      						fin
      						
      
      						nOrdreInter++
      						Scr_Process_Metier_Intervenant.IDScr_Process_Metier_Axe		= nIdAxe
      						Scr_Process_Metier_Intervenant.Description					= sInter
      						Scr_Process_Metier_Intervenant.OrdreAbsolu					= nOrdreInter
      						si pas HAjoute(Scr_Process_Metier_Intervenant) ALORS
      							ExceptionDéclenche(1,HErreurInfo(hErrComplet))
      						FIN
      						nIdInter = Scr_Process_Metier_Intervenant.IDScr_Process_Metier_Intervenant
      						
      						//Pour les conditions, on mémorise le lien de l'intervenant, pour la sortie en erreur
      						si Scr_Process_Metier_Intervenant.IDScr_Process_Metier_Intervenant_Type = ClProcess_Metier_Intervenant.cstTypeInter_Condition alors
      							VariableRAZ(stLienErrTmp)
      							stLienErrTmp.sNomInter	= xlsDonnée(nIDfichierXLS, nLigne, nColLienCondErr)
      							stLienErrTmp.nIdProcess	= nIdProcess
      							aStLiensErr[nIdInter]	= stLienErrTmp
      						fin
      					FIN
      				FIN
      				
      				
      				//----------------------------------------------------------
      				// Inter / US
      				sUS = xlsDonnée(nIDfichierXLS, nLigne, nColUS)
      				si sUS <> "" ALORS
      					
      					sdGetIdUS est une Source de Données
      					sReq = ChaîneConstruit([
      						SELECT 
      							Scr_UserStory.IDScr_UserStory
      						FROM Scr_UserStory
      						WHERE Scr_UserStory.CodeUserStory like '%%%1%%'
      							AND Scr_UserStory.IDScr_Projet = %2
      					], sUS, nIDScr_Projet)
      					
      					SI goapp.RSQL(sdGetIdUS,sReq) ALORS
      					
      						HLitPremier(sdGetIdUS)
      						si pas HEnDehors(sdGetIdUS) ALORS
      							hraz(Scr_UserStory_Scr_Process_Metier_Intervenant)
      							Scr_UserStory_Scr_Process_Metier_Intervenant.IDScr_Process_Metier_Intervenant	= nIdInter
      							Scr_UserStory_Scr_Process_Metier_Intervenant.IDScr_UserStory					= sdGetIdUS.IDScr_UserStory
      							si pas HAjoute(Scr_UserStory_Scr_Process_Metier_Intervenant) ALORS
      								ExceptionDéclenche(1,HErreurInfo(hErrComplet))
      							FIN
      						sinon
      							erreur("")
      						FIN
      						
      					FIN
      					HAnnuleDéclaration(sdGetIdUS)
      				FIN
      			fin
      			
      			
      			CreeLiensconditions()
      			
      		FIN
      		xlsFerme(nIDfichierXLS)
      	SINON
      		Info(ErreurInfo())
      	FIN
      fin
      
      
      procedure interne CreeLiensconditions()
      	sIdInter est une chaîne
      	pour tout stLienErrTmp, sIdInter de aStLiensErr
      		
      		HLitRecherche(Scr_Process_Metier_Intervenant,IDScr_Process_Metier_Intervenant,sIdInter,hIdentique+hLimiteParcours)
      		si HTrouve(Scr_Process_Metier_Intervenant) ALORS
      			
      			Scr_Process_Metier_Intervenant.IDScr_Process_Metier_Intervenant_Controle_Renvoi = ...
      				sIdInterDeDesc(stLienErrTmp.sNomInter, stLienErrTmp.nIdProcess)
      			
      			si Scr_Process_Metier_Intervenant.IDScr_Process_Metier_Intervenant_Controle_Renvoi = 0 ALORS
      				ExceptionDéclenche(1,"Intervenant non trouvé (liaison d'erreur)")
      			sinon
      				si pas hmodifie(Scr_Process_Metier_Intervenant) ALORS
      					ExceptionDéclenche(1,HErreurInfo(hErrComplet))
      				FIN
      			FIN
      			
      		sinon
      			ExceptionDéclenche(1,"Intervenant non trouvé")
      		FIN
      		
      	FIN
      FIN
      
      
      
      procédure interne sIdInterDeDesc(sDesc_p est une chaîne, nIdPrj_P est un entier):entier
      	nRetour est un entier
      	sdGetIdInter est une Source de Données
      	
      	sReq = ChaîneConstruit([
      		SELECT 
      			Scr_Process_Metier_Intervenant.IDScr_Process_Metier_Intervenant
      		FROM Scr_Process_Metier_Intervenant
      			INNER JOIN Scr_Process_Metier_Axe ON (Scr_Process_Metier_Axe.IDScr_Process_Metier_Axe = Scr_Process_Metier_Intervenant.IDScr_Process_Metier_Axe)
      		WHERE Scr_Process_Metier_Intervenant.Description = '%1'
      --		WHERE Scr_Process_Metier_Intervenant.Description like '%%%1%%'
      			AND Scr_Process_Metier_Axe.IDScr_Process_Metier = %2
      	], ClApp.sFormateTexteSQL(sDesc_p), nIdPrj_P)
      	
      	SI goApp.Rsql(sdGetIdInter,sReq) ALORS
      	
      		HLitPremier(sdGetIdInter)
      		SI pas HEnDehors(sdGetIdInter) ALORS
      			nRetour = sdGetIdInter.IDScr_Process_Metier_Intervenant
      		FIN
      	FIN
      	HAnnuleDéclaration(sdGetIdInter)
      	renvoyer nRetour
      fin
     type : 458752
   -
     name : oProjetDeNom
     procedure_id : 2278571440226310764
     type_code : 14
     code : |1+
      procédure oProjetDeNom(sNom_P est une chaîne):ClProjet
      
      oPrj est un ClProjet dynamique
      
      HLitRecherche(Scr_Projet,Nom,sNom_P,hIdentique+hLimiteParcours)
      si HTrouve(Scr_Projet) ALORS
      	oPrj <- ClProjet.GetObj(Scr_Projet.IDScr_Projet)
      FIN
      
      renvoyer oPrj
     type : 458752
   -
     name : Taches_Ajout
     internal_properties : BgAAAAYAAADYuPST6CP+T+K2ZU37o7g3n8Kew/nVjSZD5G6OyRuT2Yo67DV/AZmlWI7RE7NW48hb
     procedure_id : 1168615465491789369
     type_code : 14
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] Taches_Ajout (<stTache> est STR_Tache)
      //
      // Paramètres :
      //	stTache (STR_Tache) : <indiquez ici le rôle de stTache>
      // Valeur de retour :
      // 	entier : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE Taches_Ajout(LOCAL stTache est un STR_Tache):entier
      nIDTache est un entier
      
      
      
      //Ajout de la tache :
      HRAZ(Scr_Tache)
      Scr_Tache.CodeTache		= stTache.sCodeTache
      Scr_Tache.Description	= stTache.sDescription
      
      Si stTache.nPoids = Null alors
      	Scr_Tache.Poids..null = Vrai
      sinon
      	Scr_Tache.Poids = stTache.nPoids
      fin
      
      si stTache.nNumSprintFin = 0 ALORS
      	Scr_Tache.Num_Sprint_Fin..Null = Vrai 
      sinon
      	Scr_Tache.Num_Sprint_Fin = stTache.nNumSprintFin
      fin
      
      si stTache.nNumSprintDemarage = 0 ALORS
      	Scr_Tache.Num_Sprint_Demarrage..Null = vrai
      sinon
      	Scr_Tache.Num_Sprint_Demarrage = stTache.nNumSprintDemarage
      fin
      
      si stTache.nNumSprintRealisation = 0 ALORS
      	Scr_Tache.Num_Sprint_Realisation..Null = Vrai 
      sinon
      	Scr_Tache.Num_Sprint_Realisation = stTache.nNumSprintRealisation
      fin
      
      Scr_Tache.IDScr_Usr_createur		= goApp.m_oUsrCnx.Get_IdUnique()
      
      SI stTache.nNumSprintDemarage > 0 ALORS
      	Scr_Tache.IDScr_Usr_Dev			= goApp.m_oUsrCnx.Get_IdUnique()
      FIN
      
      Scr_Tache.Ordre						= stTache.nOrdre
      Scr_Tache.CMTR						= stTache.sCommentaire
      
      si stTache.nNumSprintCreation = 0 et stTache.nNumSprintDemarage <> 0 ALORS
      	//Scr_Tache.Num_Sprint_Creation		= goApp.m_nNumeroDuSprintActuel
      	stTache.nNumSprintCreation = stTache.nNumSprintDemarage
      	//	ExceptionDéclenche(1, "Sprint de création inexistant")
      sinon
      	Scr_Tache.Num_Sprint_Creation		= stTache.nNumSprintCreation
      FIN
      Scr_Tache.Num_Sprint_Previsionnel	= stTache.nNumSprintRealisation
      
      si stTache.nPoids = 0 et pas stTache.bAnnulee alors
      //si stTache.nPoids = 0 et pas stTache.bAnnulee ET PAS stTache.bTermine alors
      	Scr_Tache.Poids_Previsionnel = ClTache.cstPoidsEstimatifTacheNonCote
      sinon
      	Scr_Tache.Poids_Previsionnel = stTache.nPoids
      fin
      
      
      nPosDiez est un entier
      sNumTicket est une chaîne
      nPosDiez = Position(stTache.sDescription,"#")
      si nPosDiez > 0 ALORS
      	sNumTicket = stTache.sDescription[[nPosDiez + 1 sur 4]]
      	si VérifieExpressionRégulière(sNumTicket,"[0-9]{4}") ALORS
      		Scr_Tache.NumTicketIncident = sNumTicket
      	sinon
      		sNumTicket = stTache.sDescription[[nPosDiez + 1 SUR 3]]
      		SI VérifieExpressionRégulière(sNumTicket,"[0-9]{3}") ALORS
      			Scr_Tache.NumTicketIncident = sNumTicket
      		FIN
      	FIN
      FIN
      
      
      
      scr_tache.Top_Realise		= stTache.bTermine
      scr_tache.Top_Brouillon		= faux	//stTache.bBrouillon
      //Scr_Tache.Top_EstDemarree = stTache.bDemarree
      Scr_Tache.Top_Annule		= stTache.bAnnulee
      
      Scr_Tache.IDScr_UserStory	= stTache.nIDUserStorie
      
      SI PAS HAjoute(Scr_Tache) alors
      	Info("erreur dans l'ajout de la tache", erreurInfo(errComplet))
      FIN
      
      nIDTache = Scr_Tache.IDScr_Tache
      
      //On renvoie l'ID genéré automatiquement 
      renvoyer nIDTache
      
      
      
     type : 458752
   -
     name : User_Story_ajout
     internal_properties : BgAAAAYAAADGLvhEj417wjOY53sfgb/R0CSSmEKCHf2OGrc9P2/gi8qq4vk+90h91lDYz4g7KLaGGD6GTFS+olD+ahWXOvi74GCTMvBWKt4AbyIhMLsbD5hpp52HHKHC64+H
     procedure_id : 1168615469786823514
     type_code : 14
     code : |1-
      // Résumé : Ajoute une UserStory dans la base de données
      // Syntaxe :
      //[ <Résultat> = ] User_Story_ajout (<stUserStorie> est STR_UserStorie)
      //
      // Paramètres :
      //	stUserStorie (STR_UserStorie) : <indiquez ici le rôle de stUserStorie>
      // Valeur de retour :
      // 	entier : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE User_Story_ajout(stUserStorie est un STR_UserStorie):entier
      nIdUserStorie est un entier
      
      HRAZ(Scr_UserStory)
      Scr_UserStory.CodeUserStory			= stUserStorie.sCodeUserStorie
      Scr_UserStory.JAiBesoinDe			= stUserStorie.sBesoinUserStorie
      Scr_UserStory.AfinDe				= stUserStorie.sAfindeUserStorie
      Scr_UserStory.IDScr_Projet			= stUserStorie.nIDProjet
      Scr_UserStory.IDScr_Usr_Valideur	= stUserStorie.nIDResponsable
      Scr_UserStory.EntantQue				= stUserStorie.sEnTantQue
      Scr_UserStory.EstTesteParEquipeDev	= stUserStorie.bAtester
      Scr_UserStory.CMTR_Global			= stUserStorie.sCmtrGeneral
      Scr_UserStory.CMTR_RetourDeTest		= stUserStorie.sCmtrTest
      
      si stUserStorie.bAtester ALORS
      	Scr_UserStory.IDSrc_Environnement_Test = 1
      	Scr_UserStory.DateMiseADispo_enTestFonctionnel = DateSys()
      FIN
      
      si stUserStorie.nIdEpic = 0 ALORS
      	Scr_UserStory.IDScr_Epic..null	= vrai
      sinon
      	Scr_UserStory.IDScr_Epic		= stUserStorie.nIdEpic
      FIN
      
      
      SI PAS HAjoute(Scr_UserStory) ALORS
      	Info("erreur dans l'ajout de l'US", ErreurInfo())
      FIN
      
      nIdUserStorie = Scr_UserStory.IDScr_UserStory
      
      
      hraz(Scr_Historique)
      Scr_Historique.IDScr_UserStory	= nIdUserStorie
      Scr_Historique.IDScr_Usr		= goapp.m_oUsrCnx.Get_IdUnique()
      Scr_Historique.Date_Evt			= DateHeureSys()
      Scr_Historique.CMTR				= "Import de la user story"
      SI PAS HAjoute(Scr_Historique) ALORS
      	Info("erreur dans l'ajout de l'historique de l'US", ErreurInfo())
      FIN
      
      RENVOYER nIdUserStorie
     type : 458752
   -
     name : nCreeEpicSiBesoin
     procedure_id : 1168622792707113099
     type_code : 14
     code : |1-
      procédure nCreeEpicSiBesoin(oPrj est un ClProjet, sEpic est une chaîne):entier
      
      nRetour est un entier
      oEpic est un ClEpic dynamique
      
      SI sEpic <> "" ALORS
      	oEpic <- ClEpic.Get_EpicDeNom(oPrj, sEpic)
      	SI oEpic = Null ALORS
      		oEpic = allouer un ClEpic
      		oEpic.p_oProjet = oPrj
      		oEpic.p_sNom = sEpic
      		oEpic.Enregistre()
      	FIN
      	nRetour = oEpic.Get_IdUnique()
      SINON
      	nRetour = 0
      FIN
      
      renvoyer nRetour
     type : 458752
   -
     name : dh_FormatRFC3339_Vers_DateHeure
     internal_properties : BgAAAAYAAADYuPST6CP+T+K2ZU37o7g3n8Kew/nVjSZD5G6OyRuT2Yo67DV/AZmlWI7RE7NW48hb
     procedure_id : 1204684076872251101
     type_code : 14
     code : |1+
      // Résumé : Renvoie une valeur date/heure à partir d'une chaine date/heure du WS CreditSafe Ex : 2019-04-09T10:44:42.254Z
      // Syntaxe :
      //[ <Résultat> = ] dh_FormatRFC3339_Vers_DateHeure (<sDateHeureFormatWS> est chaîne)
      //
      // Paramètres :
      //	sDateHeureFormatWS (chaîne ANSI) : <indiquez ici le rôle de sDateHeureFormatWS>
      // Valeur de retour :
      // 	dateheure : // 	Aucune
      
      PROCEDURE dh_FormatRFC3339_Vers_DateHeure(LOCAL sDateHeureFormatWS est une chaine) : DateHeure
      
      dhRésultat est une dateheure = ""
      
      si sDateHeureFormatWS<>"" ALORS
      	sDate est une chaine = ExtraitChaîne(sDateHeureFormatWS,1,"T")
      	dhRésultat..PartieDate  = 	ChaîneVersDate(sDate,"AAAA-MM-JJ")
      	sHeure est une chaine = ExtraitChaîne(sDateHeureFormatWS,2,"T")
      	sHeure = Gauche(sHeure,8) // On ne garde que HH:MM:SS
      	dhRésultat..PartieHeure = ChaîneVersHeure(sHeure,"HH:MM:SS")
      FIN
      
      
      renvoyer dhRésultat
     type : 458752
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : BgAAAAYAAAAwjDLmDSZ0H1P68nJIeNfqR9EvRjU/K+sVcM1T6rhVNr+VTV1mZ/rmoweYbFDZUhBGcv8UsxlDxVCOnb2U/SQOvlGWzNby3/w/V+ppSymxv+Vh
  original_name : Modele1
resources :
 string_res :
  identifier : 0x1ca5c59d001c0f64
  internal_properties : BgAAAAYAAAAa2Zm8J9E/zh+/WIrVvz1fER/So3PB0gjQuxc1xKQVWY4ZDm5lfg==
  strings :
   -
     text : {}
     index : 0
custom_note :
 internal_properties : BgAAAAYAAAC68/W0/adbG0nFCRhrE42B5HRnbDzVHaz86sSQyxlBk7I=
associated_test :
 name : TEST_Moulinette1.wxt
rad :
 internal_properties : BgAAAAYAAABoAN7PLpwJW3EiA7WVZdCA5EwrCA1rvutcDHooMWKe
