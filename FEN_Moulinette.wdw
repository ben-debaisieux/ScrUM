#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : FEN_Moulinette
 major_version : 27
 minor_version : 0
 type : 2
 description : ""
 subtype : 0
window :
 name : FEN_Moulinette
 identifier : 0x2ca5c5a4013e2de9
 internal_properties : BwAAAAcAAACfD5RTBeidJ8Y2F73B+tPm/XX/3IdTw9enqAJN2Rztvvrkhgvjr7jkPq0hxxSmLLXejEfbI7wfyUoxGKTWVwfmFL2G5mXH9ZfAjomcBhNVH2srL4ywrewLtcOUmsBxR/ohzBGOyoQm0SasaGqOmYr0NEbH7GZ+Cs/3yNO+JdZmRrY0PlLrnB5mHjmP5I1pnmZBQCEDMSfC5cQFoYkwYBffmiLguOlHDL0JbwMqFNT2pYb4ZVS9LuFqSXjBMonyc1WN7gvywaanqgLVXNFJpKVRRVvQNNVUkYDfVuDS4aQ+7550/ONJs2WSHYasGYadlWEkTASn1bd2Elm3gsTXESb+QL9QHsxTSljWA33PmojEAR5MbjmjC5LrgxYJ4lzYAYgbXOv1HdndP+gfCZtR1wlUn9NjnYtlr85Qf1ZXyCedfujxOWZEZ26/1MxE5Q98BrCdqGEK4ilHHFixA0a6JGIYUkQpDs4G6ivsVHSL0ZQAdfQBPi+bLw3QQLryQJOcr9R6uyB/r7uJUVfpESElalQz2/45Yfe0D1qLtbf7NeztCcg7OZQYMIG/QLIqXjQP/tpoHXc35LBjmW7fOmNGwK5VwjEGxXZvjvPSbPAC7P2CktyvYqlwt7hoEaLd5c3c5PlSz4yyVlg1fMq3B3uF6qIHJa8eZjiJ5b4k1B4bqCREqQdwxnhxoLWdA/+VMag3XXf2G2ob8ablhPONlbx3Ebv6UBiBY/Vl8Sfigxx7Jl84mzyWcFkjHuvoZTIhVEpu/fQ9fKHuS0q+6Ee1d/UfaYox1aL7CD75nHd+l657wL4QLQ2eZ5yA8e/mSrnq3PQItvXtkAHJQ6luIxck+Ij8
 properties :
  width : 972
  height : 789
  widthClient : 970
  heightClient : 757
 controls :
  -
    name : ONG_SansNom1
    identifier : 0x20b7e40a28936793
    internal_properties : BwAAAAcAAAAyqG80Pv4n9rVghTuYPQIlAWkun8/6x0NUiwkhrgFJx15oVA4qIE1kEz1d3AAoSVAJ5B5jx7vQ3rHF4nLUsNx2nXzLpFAZMBGXqC4p7yXo4oPoCQUqlSRzPVnEYW1VN++XPkDOBwsLBAe06jMQIiUCnYvduKnC0aGuo2gAx/qo+jTYVR2GAqgiZEA2ROERhH+CRHhBx6NGvP+A2C0/fW1GYZLjbhWIHnlYC+lGLi+64CxtgGE+KOT/ThUNcLqfVjctP14sfiQpF3LATRxWCLoBz+O2mIKpOv1v9f2ue/ixCyYyLq5iqLL7IQiXj6YY3VT8LzC3coLXQ+GIZEcCwZdqEbBkYEpRlotIV3AeMGKnw7gYyD/PyHstl9n5ofC31GB72BPV66VuHXattWYmOBtDH2igTBZeVt2aZe75rFXQWiCm1xn0vm29PHg5X1fkSnJwmKfPBrS7agt8rIeOw8uHAylnydKJNH+siJ1H5BlJNTe/yefpT4YKGhqzntdEZiM4qpPrD2asqWab+8bwaZpd+3yBeiY//rrgb42jYYWeDs5VkkswkiDK8/qoxYz1FrVsHuCs47qxMT2Xa7gZ7cMGrysEpIAYBf2JMtx86l6BO4Tni/XSmdxpmtVKVJAs5GLJWUc+oaY5o3WSOQyVtFpwTaJWVvm8a7mhsbYgVE+hvxAoBHwpl58hLl/bOe4nvIkqnk9ygajqdq0Y7llTsYuuU+a5Ojpc9UhYmn4tb0s4AOUMMSoK8Asx9uLxLO75+eeZGcOmZRqtQ/LaAYjRp3vIE60qj2yUeVjlnKpV0CI4QmuMUn0uh1Jt1/7LzMDe7x5gTnUoae2nRkMG9wCaHUgQvVX0hYffAiAu03W4F+jvDuw9vyyVPdbGNx0KlY7TD0yBWKVdswLYapNse6Bfa9FU4JBrgETg5CxqAdzl5Vh3aHBO/Vt8PQVzudC7AVM+VXqfud1YBr0L+ZbB6KW8xfHn3ZxkBIEtaNVrOLOz3xw75lCE93N8kFlUtlcIOfRjo2izBpRrvgEeDk1s+AFElHdBQwiIqe9H5CIV0LgTbn8HDku0K8msY8tEDSJBcC8CicqnKK7EI1I1lXwUO6zOtUXoJB4NiRBnAek5qFhAwFmWWDemyUi4P4wyp4r6EWomJ3m4OLrojORRnTsgCi9ln2IJhEtjn7SjNyHw72PExrJ1q6NagmPFzg==
    properties :
     x : 6
     y : 6
     width : 958
     height : 722
    tabs :
     -
       internal_properties : BwAAAAcAAADdnuwsDmdmmZphH6nYC1AxUagIZCffG95/ur5Ai7YcCwx4bcQfOUkroB5MCGahhE5a2FSRINgfwT/Q1GeSPjRXcryEBFmWd1kmECJcfivPb3h+aA3Kv+zayCKvAAWK/E2R9iq1esSRMgzYZRWTSZhIphdtUeL5
       controls :
        -
          name : BTN_LANCER_partiel
          identifier : 0x2eabd10ad8d16f9a
          internal_properties : BwAAAAcAAACZOUAw/Id4YlLeEy315X8xN54FJrZ1ijvkW64/9sphsDZNPqCNPP+5Q+A4kPAEd7z1MQ1cTK5nLztg6GCQfRuF2WF6fhrobydUEFL+kv6VjelTwg5zcy2Z8Bp6c2sSUQ05Qq6rzONN7Tev1eCsnVhnf/tp3Oz+/RTEudFDxrTfQ+6SV4hWeXAln9h2EcjnAGwF47VhYoakIoc4yrv0HR9SMkfaRaav9VHrSUXDJCCiCyjoA2G3EAUuzaOG4EfIb96yNeSVw9DUsfoY6iyHD/tYoGuXAxeqQ/RXDhcCwJRBJiNkmFBNeIpBMV+iAEv9OEpVIeFNsWlOf6i7C2Wmisn3gNNwBvO9/Nm6PTG0+rWmyvYVYlS9Ya6mX3JoK3D+mmwquUfI5+i5QK5mNDm5KQSVtpJM2vD+UFBhQ9w7boNrnKUKddFC656zN6enqE7Xd9M4iOcq5UtioaxIFM8vSWFgXXSAjTTFGnhBsxymw6y9JgYay17Ee4pBChaX52zSjp2t7f0dITF2QFjTBGj3eoVuSIu4zfY5W9kFK6SoqswQ2mwzVnKWOyzQ6kK6319+4PSDIWZR0j3F5kuyn6DL0+egLNavSzejoU9s07sU0jFAwtdrq3Lhg7ARs2O83E6FLTxE3E+o6ePNDmwULem0VSnnYaZ3Rqga+2PvqZYiJtP8M/z0QtZgVEbJ9C1KLrbiJdKOgGHufSjxEs2h/GKn8Svpu/9Y/VvnXBaHk7T4lwZcP1uJxFARgZTZW0/6pF1mdE/xObFVGBC63T8FpkuAI9Vr+EDsAzGf+5i9R98IhXPBiNuQxmo9xQI=
          properties :
           x : 11
           y : 18
           width : 178
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1-
               nPosActu est un entier = 0
               nPosMax est un entier = 20
               jauge(nInc(),nPosMax)
               
               //hferme("*")
               
               // Ne pas supprimer les tables suivante
               // Scr_Type_Cmtr
               // Src_Usr
               // Scr_projet
               
               //si pas hcreation(Scr_Commentaire) alors erreur(herreurinfo())
               //SI PAS HCréation(Scr_Message) ALORS Erreur(HErreurInfo())
               //SI PAS HCréation(Scr_Tache) ALORS Erreur(HErreurInfo())
               //SI PAS HCréation(Scr_UserStory) ALORS Erreur(HErreurInfo())
               //SI PAS HCréation(Scr_sprint) ALORS Erreur(HErreurInfo())
               //SI PAS HCréation(Scr_Jalon) ALORS Erreur(HErreurInfo())
               //SI PAS HCréation(Scr_Usr_Projet) ALORS Erreur(HErreurInfo())
               
               
               //ExécuteTraitement(BTN_Vider_tt_les_tables,trtClic)
               
               
               
               
               //ExécuteTraitement(BTN_Vider_Projets_Affectés,trtClic)
               //ExécuteTraitement(BTN_Vider_Historique_US,trtClic)
               //ExécuteTraitement(BTN_Vider_Table_Message,trtClic)
               //ExécuteTraitement(BTN_Vider_utilisateur,trtClic)
               ////ExécuteTraitement(BTN_Vider_la_table_projet,trtClic)
               //ExécuteTraitement(BTN_Vider_la_table_US,trtClic)
               //ExécuteTraitement(BTN_Vider_la_table_tache,trtClic)
               //ExécuteTraitement(BTN_Vider_la_table_sprint,trtClic)
               //ExécuteTraitement(BTN_Vider_Commentaires,trtClic)
               
               
               
               //contrôle des tables a vider au préalable
               HSupprimeTout(Scr_CritereAccept_Composant)
               //on vérifie que tout se passe bien
               SI ErreurDétectée() ALORS
               	Info(ErreurInfo())
               	RETOUR
               ELSE
               	Trace("Vidage Préalable de la table des Critères D'acceptations des composants")
               FIN
               //-----
               
               
               HSupprimeTout(Scr_CritereAccept)
               //on vérifie que tout se passe bien
               SI ErreurDétectée() ALORS
               	Info(ErreurInfo())
               	RETOUR
               ELSE
               	Trace("Vidage Préalable de la table des Critères D'acceptations")
               FIN
               //-----
               
               HSupprimeTout(Scr_CritereAccept_Etat)
               
               //on vérifie que tout se passe bien
               SI ErreurDétectée() ALORS
               	Info(ErreurInfo())
               	RETOUR
               ELSE
               	Trace("Vidage de la table Critère d'Acceptation de la liste des États ")
               FIN
               
               
               HSupprimeTout(Scr_CritereAccept_Composant_Type)
               //
               ////on vérifie que tout se passe bien
               //SI ErreurDétectée() ALORS
               //	Info(ErreurInfo())
               //ELSE
               //	Trace("Vidage de la table Critère d'Acceptation des composants types")
               //FIN
               
               //////////////////////////////////////////////////////////////////////////////////////////////////////
               
               
               
               
               
               
               
               
               
               //Import des utilisateurs.
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Enregistrer_utilisateurs,trtClic)
               
               //Paramétrage des types de messages
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Creer_les_types_de_message,trtClic)
               
               // Paramétrage des états des critères et les composants type
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_RemplirLesTables,trtClic)
               
               //Chargement des sprints
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Enregister_les_sprints,trtClic)
               
               
               
               
               //Intégration des projets
               Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Importer_credit_V3,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Import_NF_203,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Import_Migration,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Import_Vieux_Stock,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Import_pool,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Importer_PxF,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Importer_Evols_android,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Importer_Automat,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Importer_DEB_LAD_RAD,trtClic)
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Importer_ControleHebdoBL,trtClic)
               ////Intégration des taches tierces
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Enregistrer_fichier_2,trtClic)
               
               
               
               //Association des projets aux responsables de projets.
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Affecter_Projets,trtClic)
               
               //Chargement des rétrospecives.
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Import_retrospective,trtClic)
               
               jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Taches_MAJ_Str_et_Adaptation,trtClic)
               
               jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Maj_etats,trtClic)
               
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Etat_US,trtClic)
               //
               //Jauge(nInc(),nPosMax)
               //ExécuteTraitement(BTN_Projet_terminés,trtClic)
               
               
               
               jauge()
               
               info("Chargement terminé.")
               
               
               	Procédure interne nInc()
               		nPosActu++
               		renvoyer nPosActu
               	fin
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_RemplirLesTables
          identifier : 0x2e302abc0285972d
          internal_properties : BwAAAAcAAAC4P3hJ7IipVZF8XOgNRiUFNL4lzecdTUeL8XuE6iBxnz+Sk0g2f52VtlhoOwefkuz+G2WdNZ3WW7REvAF4Lqw0gDXF7sEeY57WRdpK6idNQjdJomCojstkTRXiACJLj0ioTxxszHPpP364sXQAtMf6PC8ttatlbrx7MEH3zOZHrWHm6g/hB3yy+Z6fJK8W69nKQo1uxDbBgbrIAdubEqfjJ+IfzxrZG0mkgQAwFk/HglQBtlgTQOFmYQXAVgs+F4cGuhHbEUwW37eifZMqqaHWyKLoWgqGZFDTlGaK4r7ZYyRa+uJDbLu6ev3kmWdWN8VLpOpzIfFpNMzW9l9jEVf6lT1Ap6c8cj4htYhN67nK3C1/2I6vMo+t4pa3HGT6ToTrVZyEKYC+WJSB22uN9gwsH6SKbum1VldKaMqb9amC/0sZre8TgA+6m84zhL2GHMdwXPP5N4Zv5Nv8a4wWUjpaJlUAf3i3XgameEI4X6qdxiHeHTNeL2hU4RY9Q1FwMJm2CUQOMAEcM7XG56vwtQpKPeVYBxZZ59BQB231O6txGekk+2SZ/pRRV35feRZr1hUsdYm2X7yPvY7h/6CHaBGDxcMfLTlxG7sFhng02tDf4HR7SFiL1kV1gUQGug083ruQYzbKUzn+XQF7lg03XLxgiLaPJh7FRrxCMGu/YZzZikwfiQ1Bf15Aj+uKGm5MEQPwJIaQfQXKPPv4TQlnSVcM3fDDhoKPM/hCQeiqH8Fl3VLiXBGZQuimSInYaQOGXORaF+pik5zZ8NfCLtnvnKQuaJqgKdsTOTeDtCtnpeYWatB1LYnYhFEJQbyNR0mAGlDYxwPcj3N8EC2wWdW6ChIATRWAbFOM0Htjq5iWBrx6qEsp/8A/VA==
          properties :
           x : 20
           y : 48
           width : 150
           height : 54
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1-
               //
               //IDfichierXLS est un xlsDocument
               //nNbdeLigne est un entier
               //
               //nNUmeroFeuilleEtat est un entier = 1
               //
               //
               //sResNomFichier est une chaine = Dupplication_Fichier_Avant_Import("L:\Service informatique\Service Développement\Stagiaires Développements\ScrUM\Etats critères A.xlsx")
               //
               //si sResNomFichier <>"" alors
               //
               //	IDfichierXLS = xlsOuvre(sResNomFichier)
               //	Si ErreurDétectée = faux alors
               //	
               //	//on définit le nombre de lignes.
               //	nNbdeLigne = xlsNbLigne(IDfichierXLS, true)
               //		
               //	//on récupère le nom de la feuille en cours
               //	sNomFeuille est une chaine = xlsFeuilleEnCours(IDfichierXLS)
               //	
               //	//Je charge la feuille des états.
               //	 xlsFeuilleEnCours(IDfichierXLS, nNUmeroFeuilleEtat)
               //		POUR i= 2 _A_ nNbdeLigne
               //
               //			//-------------- Manipulation Jauge -----------------
               //			Jauge(i, nNbdeLigne, "Importation de la feuille : "+IDfichierXLS..NomFeuille)	
               //					
               //			//--------------Fin Manipulation Jauge -----------------
               //			
               //			// Import des données de la feuille État			
               //			HRAZ(Scr_CritereAccept_Etat)			
               //				Scr_CritereAccept_Etat.Libelle = xlsDonnée(IDfichierXLS, i, 1)
               //				HAjoute(Scr_CritereAccept_Etat, hEcritureDéfaut)											
               //		FIN
               //		
               //		
               //		
               ////		//On fait un changement de feuille pour Composant Type
               ////		nNumFeuille est un entier = xlsFeuilleEnCours(IDfichierXLS, 2)
               ////		nNbdeLigne = xlsNbLigne(IDfichierXLS, vrai)
               ////		pour nIndex = 2 _a_ nNbdeLigne
               ////			//---------------- Manipulation Jauge -----------------------		
               ////			Jauge(nIndex, nNbdeLigne, "Importation de la feuille : "+IDfichierXLS..NomFeuille)
               ////			SI nIndex = nNbdeLigne ALORS
               ////				Jauge(nIndex, nNbdeLigne, "Importation Terminée")
               ////			FIN
               ////			//-------------Fin Manipulation Jauge----------------------
               ////			
               ////			//Import Données de la seconde feuille.
               ////			HRAZ(Scr_CritereAccept_Composant_Type)
               ////			Scr_CritereAccept_Composant_Type.Libelle = xlsDonnée(IDfichierXLS, nIndex, 1)
               ////			Scr_CritereAccept_Composant_Type.Ordre = xlsDonnée(IDfichierXLS, nIndex, 2)
               ////			HAjoute(Scr_CritereAccept_Composant_Type)
               ////		FIN
               //	FIN
               //	
               //	xlsferme(IDfichierXLS)
               //	
               //else
               //	Info(ErreurInfo())
               //FIN
               //
               //jauge()
               //
               //
               //
               //
               //
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Enregister_les_sprints
          identifier : 0x2cac5fcb00cc84a8
          internal_properties : BwAAAAcAAADgbepkX/MsTQe4GVzMvzmK86g44Zw+60JxkrlM++Fad5lZcpqmwuLyo1nz9pzNekUbvAM6yNGtrlvRKQY0MqTjvZV1ezlCTGpdMO0zJCPmdW4HEXbuVVyFQCQAYikmvnZFZHhJ01kBZZTfNEwzY1Ibg00KIM0PnE6GE/4uWu5k6bfOYmXQst60q1cpd/5zlQigZMU4oDuf0g0wl55pOnK3MzYanAoyOyIjt5cbLtnJgeEPptFf3ciUvrmWtjCPUMEO1XVu46h/xy0nDke5t73kZrbZ5CzaP8iUMyvT65ZvZHfBKfBznA78AQUjjkExz82Z+1HdJSIoZMl74v/63X04xMwp71n5f4q5boRkBmt2ZUulUO+oaTCIKY69Ha8rhvPD1pPQxipqP+7db/1OyBCpEsh1b18fTu6URU7eF+cSWp+FNWulFodxZGWTqWSmGkmyQ/fULELB+UmiSLDfJnJGf0kwqfn+2GSEjy9B9sRhEr+Dpj6eHJFvIQu3KBoOujhs9QRV5eeOA5qiU6g1AF2N7XDi87u1a4U5YKXG0UakLVz6Zs+2HKPbfeSKrDVga1vUQdrsGnU2A/btOhFBQ/ERUpn+UDBeZyIFobdqKInykGvlRSR8ntE2Ab9OGbtWwamvSRom5F4Tt9168xHTNdyIduBkbwPFqLsB4/mGdDyTLS51GFMlqBY43TignXb9fF49MPTIWkwtaXiFqJudlbYbIVvGGVmzxMmjenJltghi1GpAy7T2mosGe4Zlb1Lh1SMJqgCzIz9oD4+CPSCJ4Z2dHdzSmaOuSol7LMrXykLyg1s6ikQb1yCuJSMMc+fcwC/WgQ5J7CRc33XcOqU=
          properties :
           x : 276
           y : 103
           width : 280
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               IdFichierXLS est un xlsDocument
               Xlsnbligne_ est un entier
               i est un entier
               sFichier est une chaîne
               
               nPremiereligne est un entier = 2
               
               nCol_numSprint est un entier = 1
               nCol_Date_Debut est un entier = 2
               nCol_Date_Fin est un entier = 3
               oSpr est un ClSprint dynamique
               
                
               sFichier = Dupplication_Fichier_Avant_Import("L:\Service informatique\Service Développement\Normes et procédures de dev\SCRUM.xlsx")
               
               
               SI sFichier <> "" ALORS
               	//identifiant du fichier
               	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               	
               	SI ErreurDétectée = Faux ALORS //interception d'une erreur
               		
               		SI xlsFeuilleEnCours(IdFichierXLS, 4) ALORS	//on ouvre la 4eme feuille du fichier
               			
               			Xlsnbligne_ =xlsNbLigne(IdFichierXLS,Vrai) //nombre de ligne à parcourir
               			
               			POUR i = nPremiereligne _À_ Xlsnbligne_
               				
               				//si la ligne n'est pas vide on enregistre les données
               				SI xlsDonnée(IdFichierXLS,i,nCol_Date_Debut) <> "" alors
               					
               					oSpr = allouer un ClSprint
               					oSpr.SetNumSprint(xlsDonnée(IdFichierXLS, i, nCol_numSprint))
               					oSpr.p_dDateDebut	= ChaîneVersDate(xlsDonnée(IdFichierXLS,i,nCol_Date_Debut))
               					oSpr.p_dDateFin		= ChaîneVersDate(xlsDonnée(IdFichierXLS,i,nCol_Date_Fin))
               					
               					si oSpr.p_dDateFin < DateDuJour() alors
               						oSpr.p_bTop_Termine = Vrai
               					FIN
               					
               					oSpr.ZF_Enregistre()
               				FIN
               			FIN
               			
               			
               		SINON
               			Erreur(ErreurInfo(errComplet))
               		FIN
               	SINON
               		Erreur(ErreurInfo(errComplet))
               	FIN	
               	
               	xlsFerme(IdFichierXLS) // fermeture du fichier
               		
               FIN
               
               
               
               
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Import_retrospective
          identifier : 0x2cac94a500cef886
          internal_properties : BwAAAAcAAAAtQJqNkADObiUxNnRRs2XGC31UqrHxH0gVM1v2CUS4RY/8IC99j5DJrVCU4FTskPHvNUkZaSjZIyueILo2JZCNOZy6zOjtrvKyOvIjTJq289zZnifFKGYNTigCtC0GCZ74VwnC8zxe2CW5u2qmkZUG1qELAxQkVDo8mkhf7X6EEYbugWCi3hb5sjAvFEgnO9Dhf6uesCW7sVvPMYqP0bjavaezzrbs1C0oPzV+R17TfrGPobjEMLU3q7enZ746cVqM8+9PDjHRmqsG6IeOG/xZQzZCCYX6WIV2ozrsxO/Y1yAKkWUuzAzd1BGp7NH2LW/fDKBpKlGig1k3K1HHgS0QfkruC5dJ0hDVwp9Evpk8colIeEzY9ozJqbf268CqZ+IkWg/fGdGV996G5/c2twVIjwGdanpFRtVVhrIGQbK2aVhFyPQVMMlWmkYG2Y+wJMJJq4KPeroV9EPTl3zoAjZtcPdzBKuGkGkMKtiNPRKXVwZRyWt8wCsgm2pEWocUTNnLOfOSoeme5oq7suqcjuHi3NCHrinJN1rx8YwoohpkhKluT6Be4q8csWmZgt764UAf0U3JUoPc8uwcnykMZd+Eu0EhDZZGL7ETsp4spw1cjfpFUGfksA0N1fy5tVqEKeJSF3UN9MBROEHf3o2sz1SPG/DNaE1pAV5PxRuJ91mjGbDlCNBiDJxvhIguFTaa+u0UkpzyUEBCfceldZMIRXHhg/fRyKy8j38SODHTwTiTU89TQ2HPnVsjzaNuyOGMsg2XI6V04zUkEDeF9i512BYPuBPdmg92cQ1CrPLigWpVwCimyR9RcTwvqT6jXNeRQ9+jiJYjFm+0
          properties :
           x : 276
           y : 133
           width : 280
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               IdFichierXLS est un xlsDocument
               Xlsnbligne_ est un entier
               i est un entier
               sFichier est une chaîne
               
               nSprintActuel est un entier = goApp.m_nNumeroDuSprintActuel
               
               nPremiereligne est un entier = 2
               
               //Declatration VAriables
               sCodeTache est une chaine
               nSprintFin est un entier
               nSprintDemarage est un entier
               //nSprintPointsTotal est un entier
               
               nCol_codeTache est un entier = 2
               nCol_numSprintValid est un entier = 1
               nCol_SprintDemarage est un entier = 4
               nCol_Total est un entier = 2
               
               sFichier = Dupplication_Fichier_Avant_Import("L:\Service informatique\Service Développement\Normes et procédures de dev\SCRUM.xlsx")
               
               SI sFichier <> "" ALORS
               	
               	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               	
               	SI ErreurDétectée = Faux ALORS
               		
               		SI xlsFeuilleEnCours(IdFichierXLS, 2) ALORS	
               			
               			Xlsnbligne_ =xlsNbLigne(IdFichierXLS,Vrai)
               			
               			POUR i = nPremiereligne _À_ Xlsnbligne_
               				
               				//On ne lit pas les cases vide ou "SPRINT"
               				SI xlsDonnée(IdFichierXLS,i,nCol_numSprintValid) <> "Sprint" ET xlsDonnée(IdFichierXLS,i,nCol_numSprintValid) <> "" ALORS
               					
               					//On ne lit pas les cases vide
               					SI xlsDonnée(IdFichierXLS,i,nCol_codeTache) <> ""
               						sCodeTache = xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               						nSprintFin = xlsDonnée(IdFichierXLS,i,nCol_numSprintValid)
               						nSprintDemarage = xlsDonnée(IdFichierXLS,i,nCol_SprintDemarage)
               						
               						//met a jour les sprint de fin des taches
               						
               						
               						
               						
               						
               						//COL_Scrum.SprintFin_Tache_maj_deprecated(sCodeTache, nSprintFin, nSprintDemarage)
               						
               						
               						sdRechercheTache est une source de données
               						sReq est une chaine
               						
               						sReq = ChaîneConstruit([
               							SELECT Scr_Tache.IDScr_Tache
               							FROM Scr_Tache
               							WHERE UPPER(Scr_Tache.CodeTache) = '%1'
               						], Majuscule(sCodeTache))
               						
               						goApp.Rsql(sdRechercheTache,sReq)
               							
               						SI HNbEnr(sdRechercheTache) > 0 ALORS
               							//Si la tache existe
               							SI HLitPremier(sdRechercheTache) ALORS
               								oTache est un ClTache dynamique
               								oTache <- ClTache.GetObj(sdRechercheTache.IDScr_Tache)
               								si oTache.p_nNum_Sprint_Creation = 0 ALORS
               									si oTache.p_nNum_Sprint_Demarrage = 0 alors
               										oTache.p_nNum_Sprint_Creation = nSprintFin
               										oTache.p_nNum_Sprint_Demarrage = nSprintFin
               									sinon
               										oTache.p_nNum_Sprint_Creation = oTache.p_nNum_Sprint_Demarrage
               									FIN
               									
               								FIN
               								oTache.p_nNum_Sprint_Fin		= nSprintFin
               								//oTache.p_nNum_Sprint_Demarrage	= nSprintDemarage
               								oTache.p_oUsr_Dev				= goapp.m_oUsrCnx
               								oTache.p_bEstRealise			= vrai
               								oTache.ZF_Enregistre()
               							SINON
               								Trace(ChaîneConstruit("tache ""%1"" non Trouvée pour la maj du sprint de fin", sCodeTache))
               							FIN
               						SINON
               							Trace("Import rétrospective " + NumériqueVersChaîne(nSprintFin)+ " - tache non trouvé pour le sprint no "+ sCodeTache)
               						FIN
               						
               						HAnnuleDéclaration(sdRechercheTache)
               						
               						
               						
               					FIN
               				FIN
               			FIN
               			
               			//			SI xlsFeuilleEnCours(IdFichierXLS, 3) ALORS
               			//				//On change de feuille donc on change les variables de parcours du tableau
               			//				
               			//				nPremiereligne = 4
               			//				Xlsnbligne_ =xlsNbLigne(IdFichierXLS,Vrai)
               			//				
               			//				POUR i = nPremiereligne _À_ Xlsnbligne_
               			//					//Sinon on verifie si on est dans la colonne totale, si oui, on met a jour le sprint
               			//					SI xlsDonnée(IdFichierXLS,i,nCol_Total) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_numSprint) <> 0 ALORS
               			//						nSprintPointsTotal = xlsDonnée(IdFichierXLS,i,nCol_Total)
               			//						nSprintFin = xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               			//						COL_Scrum.Sprint_Points_Maj(nSprintFin, nSprintPointsTotal)
               			//							
               			//					FIN
               			//				fin
               			
               			//Update des points réalisé pour chaque sprint
               			pour i = 1 _a_ nSprintActuel - 1 
               				ClSprint.Sprint_Points_Realise_Maj(i)
               			fin
               		SINON
               			Erreur(ErreurInfo(errComplet))
               		FIN	
               	SINON
               		Erreur(ErreurInfo(errComplet))
               	FIN
               
               	xlsFerme(IdFichierXLS)	
               	
               FIN
               
               ClSprint.Calcul_Velocite_Moyenne()
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_LANCER_TOUT
          identifier : 0x2ca7520901c1f2e0
          internal_properties : BwAAAAcAAACy0wZFgEGvx+KBXEDsp9xW/YGGT267lHigTkt4uqmbz7ic1a1dOCsVMSKx9zm09SVsdw+T6/rzO7uQHErci7yc66RJbYnl7MjOVXOtS6RQEx+wFHdvxX5prXTRlS2rGrJriOIrDkwJWpayorn9sHlLvM6W7nue9mrZR+7XipazmnPit2qvwEMEFcI2byBg5hlTEDecazzg0NkpgbuIsHhZnAuPZrWyL3k8rLu/HifaUndF8yplJYlIgjDqv69tSGt5tFT4F1Sc8dCXyFr6rR6qD6Iq606RTBDq8GdqU3xdiQzvqxsF2e5jdSALV3/8HBSxmvSFVnkxzZ2zHPJPdbldDG+bfVlTaVArr3laH2y7lYTBCuPRSiwoBp+ECKmjSwMXqrR2gGCvugF285XCheUm0hDzfagwXM2y2RldW99HMaGxGkK4H8AcDKtMzu05T2Dcu9jNT7P+sC8a/YkoidsRT8/JLJhDrgWyO2U0PJS3mzyrlk/6k9T2L8qsZ9HUVEDvhuTam93YWREhiViEtH/57ODvziqr+4KSYVvGn+ic67RY2R/OnVBnLS7H24JMKi17BNtE3IUfj2BCGN4g//F96N3MlAFjNXTBo5yYT+1eVxMWDIXDtx4SoLXlogHjrcfuNZaP7RHDU5G2nKJFC7GP5NtlATMuY4h9gxCzfmauKMxkJVcNbXUxBXcGG3VLyn3v3HWeVbGYmvXWHtWdMXcHxViuG0ZSurROrr57y0JdnQC1DNrIzKg5bl0Per5fsCCZT4/LOSHKyHqHvhEPucgexy+2QdrfBnnOtAHL792cjKFep0A=
          properties :
           x : 276
           y : 9
           width : 280
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1-
               sUsrActu est une chaîne  = goApp.m_oUsrCnx.p_sLogin_AD
               nPosActu	est un entier	= 0
               nPosMax		est un entier	= 39
               jauge(nInc(),nPosMax)
               
               TableauSupprimeTout(zaLstTacheImportes)
               
               
               ExécuteTraitement(BTN_Créer_typres_divers, trtClic)
               
               SI INT_SansNom1 ALORS
               	//Récup des infos de trello :
               	ExécuteTraitement(BTN_Enr_Fini,trtClic)
               FIN
               
               AnalyseurDébut()
               
               
               ClZF_ObjDB.ZF_LibereInstancesMemo()
               goApp.m_oUsrCnx <- ClUsr.nGetIdDeNumAD(sUsrActu)
               
               ExécuteTraitement(BTN_Vider_tt_les_tables,trtClic)
               
               //Import des utilisateurs.
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Enregistrer_utilisateurs,trtClic)
               
               
               //Paramétrage des types de messages
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Creer_les_types_de_message,trtClic)
               
               // Paramétrage des états des critères et les composants type
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_RemplirLesTables,trtClic)
               
               //Chargement des sprints
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Enregister_les_sprints,trtClic)
               
               //Association des projets aux responsables de projets.
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Affecter_Projets,trtClic)
               
               //Intégration des projets
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_credit_V3,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Import_NF_203,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Import_Migration,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Import_Vieux_Stock,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Import_pool,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_PxF,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_Evols_android,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_Automat,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_DEB_LAD_RAD,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_ControleHebdoBL,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_BorneInfoPrix,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_Inventaire_tournant,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_Base_V2,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_Cerebro,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_nv_planning_trp,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_piloting,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_Menuiserie_2021,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_Fusion_UM_GM,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_Client_Diffus,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_Base_Lunel,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_Esm,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_Test_Auto,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_Pool_V3,trtClic)
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Importer_OP100ans,trtClic)
               
               //Intégration des taches tierces
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Enregistrer_fichier_2,trtClic)
               
               
               
               //Intégration des docs
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Import_Docs,trtClic)
               
               
               
               jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Taches_MAJ_Str_et_Adaptation,trtClic)
               
               //Chargement des rétrospectives.
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Import_retrospective,trtClic)
               
               Jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Import_taches_techniques_suspendues,trtClic)
               
               jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Maj_etats,trtClic)
               
               jauge(nInc(),nPosMax)
               ExécuteTraitement(BTN_Import_messages,trtClic)
               
               
               jauge()
               
               //Purge de tous les éléments en mémoire
               ClZF_ObjDB.ZF_LibereInstancesMemo()
               goApp.m_oUsrCnx <- ClUsr.nGetIdDeNumAD(sUsrActu)
               
               
               goApp.m_nNumeroDuSprintActuel = ClSprint.Sprint_Num_Actuel()
               ClSprint.Calcul_Velocite_Moyenne()
               
               //
               //si INT_SansNom1 alors
               //	//Récup des infos de trello :
               //	ExécuteTraitement(BTN_Recup_listes,trtClic)
               //	ExécuteTraitement(BTN_Recup_tout,trtClic)
               //	
               //	ExécuteTraitement(BTN_Recalc_statut_sprints,trtClic)
               //fin
               ExécuteTraitement(BTN_SansNom2,trtClic)
               
               HRéindexe(Scr_Historique, hNdxCompactage+hNdxSuppression+hVérifieMémo+hFTX )
               HRéindexe(Scr_Tache, hNdxCompactage+hNdxSuppression+hVérifieMémo+hFTX )
               HRéindexe(Scr_UserStory, hNdxCompactage+hNdxSuppression+hVérifieMémo+hFTX )
               
               
               //Purge de tous les éléments en mémoire
               ClZF_ObjDB.ZF_LibereInstancesMemo()
               goApp.m_oUsrCnx <- ClUsr.nGetIdDeNumAD(sUsrActu)
               
               
               
               //////////////////////////////////////////////////////////////////////////////
               
               ExécuteTraitement(BTN_Vérif_pres_trello,trtClic)
               //si INT_SansNom1 alors
               //	zaLstTacheImportes = ClTrello_req::JSON_ListeTachesTrello()
               //	stCompo est un col_compo.STR_compo_pr_us_ta
               //	pour tout element stCompo de col_compo.astCompo_pr_us_ta(ClProjet.aoListeProjets())
               //		SI 70 < stCompo.oTache.p_nNum_Sprint_Realisation <= goApp.m_nNumeroDuSprintActuel ET ...
               //				PAS stCompo.oTache.p_nStatut DANS(ClTache.cstStatut_realise, ClTache.cstStatut_Annulee) ALORS
               //			
               //			SI TableauCherche(zaLstTacheImportes,tcLinéaire, stCompo.oTache.p_sCodeTache) <= 0 ALORS
               //				Trace([
               //				La tache [%stCompo.oTache.p_sCodeTache%] aurait du commencer (sp. [%stCompo.oTache.p_nNum_Sprint_Realisation%]), n'est pas clôturée et n'est pas présente dans trello ([%stCompo.oTache.p_sDescription%]).
               //				])
               //			FIN
               //		FIN
               //	FIN
               	
               //	oPrj		est un ClProjet dynamique
               //	oUs			est un ClUserStory dynamique
               //	oTache_Tmp	est un ClTache dynamique
               //	POUR TOUT ELÉMENT oPrj DE ClProjet.aoListeProjets().aItems()
               //		POUR TOUT ELÉMENT oUs DE oPrj.aoListeUS().aItems()
               //			POUR TOUT ELÉMENT oTache_Tmp DE oUs.aoListeTaches()
               //				SI 70 < oTache_Tmp.p_nNum_Sprint_Realisation <= goApp.m_nNumeroDuSprintActuel et ...
               //						pas oTache_Tmp.p_nStatut dans(ClTache.cstStatut_realise, ClTache.cstStatut_Annulee) ALORS
               //					
               //					SI TableauCherche(zaLstTacheImportes,tcLinéaire,oTache_Tmp.p_sCodeTache) <= 0 ALORS
               //						trace([
               //						La tache [%oTache_Tmp.p_sCodeTache%] aurait du commencer (sp. [%oTache_Tmp.p_nNum_Sprint_Realisation%]), n'est pas clôturée et n'est pas présente dans trello ([%oTache_Tmp.p_sDescription%]).
               //						])
               //					fin
               //				FIN
               //			FIN
               //		FIN
               //	FIN
               //FIN
               
               //////////////////////////////////////////////////////////////////////////////
               
               
               
               
               AnalyseurFin()
               
               si pas EnModeTestAutomatique() ALORS
               	Info("Chargement terminé.")
               FIN
               
               
               
               	Procédure interne nInc()
               	nPosActu++
               	renvoyer nPosActu
               	fin
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Enregistrer_utilisateurs
          identifier : 0x2ce79e6c022a434c
          internal_properties : BwAAAAcAAABsPTG8rB7MXznLByBnbPYqOOQhkJvBubb/lO29qb63uK5yy/Ry/rUygGVHOZMskzzt5RDplvHDBxlVk/XEjeMdrxPttofvcJ3lpmZ5se3SxhWdYqR8d3S1JY+WtWBSMyOSfVktX+oCx2kyZg1zBTRR0Jlf48/IXVPGJ+82Dk7I/LR3RbnMXaZJE9zXVWJOYSp0Z73/i+T3DeRxMjwr/1mgXNpUmFmf22qsHnPKNPQaKkmeJ/SZ0U+Q++7OI0P9DiT9XzkjHmuBx4VWvmkvbVbdihvcxTardUKcAvm64/g8DzZuyiNu0nGyI1S7C86W2bZCnn+VtCCzlDugOGJQsaevUHfhbGhTgByWoZ2vg2UtnUkFluo+c+tW/vuyiKFSimlvo9mV4X61NwRzWxCjshhgp5SNtnweSQan4AP0Ud1iBO6Ya6/eQorkGhQkZLjYy1oHkBAplT8SpdhXalkZFadAdgl0rckEFtX5lK39hAuVqyDkjVyMcTviKxHr+rxTIj7Lm60GvWlZIAJVBqXtfMrK6bAjynu5lH8Y7HfFu6sm0CJRAAVT+TVBv4sK67tDoAT6KnnXGOmjDmd8R0+AcDlbudkxBNBBrAdKGfVLQ9KxGlNM74/I0HYd4dKtQhz/YbrAArS37UlIjOcH6OeOq36jGDh5kbzNRBw2Iv1f1jVmddhVVcIc9JuYI57bYw6niq15IACBijXx0wU/JLeYb+ZvlLZX+e89pAqg2CGXr4Lw6lcgQhNd39bdpfVEcG83eWG3zSpLglyQ12mpyjfRnpsVScMWz3wjlnQGyFIkTPvWlrTlbFTXRvaL1mgBIJtTEi9WXCH+EXEFCCZ6EeGXaeFz5g==
          properties :
           x : 276
           y : 73
           width : 280
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               IdFichierXLS		est un xlsDocument
               nXlsNbLigne			est un entier
               i					est un entier
               sFichier			est une chaîne
               
               nPremiereligne		est un entier	= 2
               
               //Déclaration Structure
               //stUsr				est un STR_User
               
               nCol_login			est un entier	= 1
               nCol_nom			est un entier	= 2
               nCol_mail			est un entier	= 3
               nCol_Service		est un entier	= 4
               nCol_chef_de_projet	est un entier	= 5
               nCol_equipe_dev		est un entier	= 6
               nCol_IdTrello		est un entier	= 7
               oUsr				est un ClUsr dynamique
               
               
               
               
               // Ouvre le sélecteur de fichiers
               //sFichier = Dupplication_Fichier_Avant_Import("L:\Service informatique\Service Développement\Normes et procédures de dev\utilisateurs Scrum.xlsx")
               sFichier = Dupplication_Fichier_Avant_Import(cst_fichierutilisateurSCRUM)
               
               
               HSupprimetout(Scr_Usr)
               
               
               SI sFichier <> "" ALORS
               	
               	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               	
               	SI ErreurDétectée = Faux ALORS
               		
               		SI xlsFeuilleEnCours(IdFichierXLS, 1) ALORS	
               			
               			nXlsNbLigne =xlsNbLigne(IdFichierXLS,Vrai)
               			
               			POUR i = nPremiereligne _À_ nXlsNbLigne
               				
               				SI xlsDonnée(IdFichierXLS,i,nCol_nom) <> "" ALORS
               					
               					
               					oUsr = allouer un ClUsr
               					oUsr.p_sLogin_AD	= xlsDonnée(IdFichierXLS,i,nCol_login)
               					oUsr.p_sNom			= xlsDonnée(IdFichierXLS,i,nCol_nom)
               					oUsr.p_sEMail		= xlsDonnée(IdFichierXLS,i,nCol_mail)
               					oUsr.p_sService		= xlsDonnée(IdFichierXLS,i,nCol_Service)
               					si xlsDonnée(IdFichierXLS,i,nCol_equipe_dev) ~= "x" alors
               						oUsr.p_bTop_Equip_Informatique =  1
               					sinon
               						oUsr.p_bTop_Equip_Informatique =  0
               					fin
               					oUsr.ZF_Enregistre()
               					
               					
               					si xlsDonnée(IdFichierXLS,i,nCol_IdTrello) <> "" ALORS
               						HRAZ(Scr_Usr_Trello)
               						Scr_Usr_Trello.IdTrello = xlsDonnée(IdFichierXLS,i,nCol_IdTrello)
               						Scr_Usr_Trello.IDScr_Usr = oUsr.ZF_Get_IdUnique()
               						HAjoute(Scr_Usr_Trello)
               					FIN
               					
               					si oUsr.p_sLogin_AD = Droite(SysEnvironnement("USERNAME"),4) ALORS
               						goApp.m_oUsrCnx <- oUsr
               					FIN
               					
               //					stUsr.sLogin_AD = xlsDonnée(IdFichierXLS,i,nCol_login)
               //					stUsr.sNom = xlsDonnée(IdFichierXLS,i,nCol_nom)
               //					stUsr.sEMail =  xlsDonnée(IdFichierXLS,i,nCol_mail)
               //					stUsr.sService =  xlsDonnée(IdFichierXLS,i,nCol_Service)
               //					
               //					si xlsDonnée(IdFichierXLS,i,nCol_chef_de_projet) ~= "x" alors 
               //						stUsr.bChefProjet = 1
               //					sinon
               //						stUsr.bChefProjet = 0
               //					fin
               //					
               //					si xlsDonnée(IdFichierXLS,i,nCol_equipe_dev) ~= "x" alors
               //						stUsr.bTopEquipInformatique =  1
               //					sinon
               //						stUsr.bTopEquipInformatique =  0
               //					fin
               //					
               //					COL_Scrum.Utilisateur_Ajout_Deprecated(stUsr)
               				FIN
               			FIN
               			
               		SINON
               			Erreur(ErreurInfo(errComplet))
               		FIN
               	SINON
               		Erreur(ErreurInfo(errComplet))
               	FIN	
               	
               	xlsFerme(IdFichierXLS)
               	
               FIN
               
               
               
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Creer_les_types_d_intervenants
          identifier : 0x20113f8a19f4969c
          internal_properties : BwAAAAcAAAC59ITphk5IUXvrK/ygi7PnDtFOKmbRd0YPxi4dMKwFUBTlFRI2P/6jsxScyGfddTNK98uP/pPEGTfmmud4A+OAXIvOufjDRty9oDZZRj5dZpY8zK5D0zwc+Rb9nMAOf7B8WYWNJyzgqF5dM6rhTtzXGVVKwdqo0UWw+I/km6hB1xqKu0t81SVVyyKymIuAeEanyj6c287EqgOJOknv0yYKIrKCZfyW6h/i0i98BFRx82lwuYZBRyk9P+VFE1Kh4/gr8s1tKhlT8IN6o7LjiZ/yGg4hptGw9UtoUVZt+KTQO0Vna81dTVaZYgdnOSjKmTDBht9qMVTe40yttzWOM1BQOxZduUkmxjV0OH1yj559gd/QBvR9sZVYH2fclxSE/siXO13kPsBCW3KX8eWHsP/WMVzvky8YP8x3jUYwD/7vPXykziIHH3FLednAhpY1CtLhYg7vNtV/V1D6FbHjNdC/ugCV6IuTajYrTbLeGNHxQ/q65xPwXwGPbMWIE5Kzju2nuDOO+XSojWuSaL2Zi1uowi3nmnlWEevMvA4/Jx3IMtdRdfAaDUfvSqItKROFw5QTMOOL4ALAHalhh+5XqvkwV1JH+X6/PYioLYiPhDA2M0jGlnHqhXPYwjfRoPfpNbx0pjcRvDUfA8IIOKb7jJSnm6khxK/wFQ8kPZwBfgXFinn41VYbYXTmRtjR/iBQAMvETw/Nwo1XcwXxB1BtVBdji8BL4B9lRxxpMPbJTXl0K9/ljBM63Ds3F8/tHlfnKZoXSM9XkrlKWeDqGHpQiUppq2MNFN6MhHCztasDcTCfW4Y0htag3yRaNoiqjSfYa7C8nQ7amYJvhUS2cfwy3EF58Faa
          properties :
           x : 27
           y : 137
           width : 206
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1-
               //
               //
               //HRAZ(Scr_Process_Metier_Intervenant_Type)
               //Scr_Process_Metier_Intervenant_Type.IDScr_Process_Metier_Intervenant_Type	= 1
               //Scr_Process_Metier_Intervenant_Type.Libelle									= "Action manuelle"
               //HAjoute(Scr_Process_Metier_Intervenant_Type)
               //
               //
               //HRAZ(Scr_Process_Metier_Intervenant_Type)
               //Scr_Process_Metier_Intervenant_Type.IDScr_Process_Metier_Intervenant_Type	= 2
               //Scr_Process_Metier_Intervenant_Type.Libelle									= "Action par intervenant"
               //HAjoute(Scr_Process_Metier_Intervenant_Type)
               //
               //
               //HRAZ(Scr_Process_Metier_Intervenant_Type)
               //Scr_Process_Metier_Intervenant_Type.IDScr_Process_Metier_Intervenant_Type	= 3
               //Scr_Process_Metier_Intervenant_Type.Libelle									= "Action automatique"
               //HAjoute(Scr_Process_Metier_Intervenant_Type)
               //
               //
               //HRAZ(Scr_Process_Metier_Intervenant_Type)
               //Scr_Process_Metier_Intervenant_Type.IDScr_Process_Metier_Intervenant_Type	= 4
               //Scr_Process_Metier_Intervenant_Type.Libelle									= "Attente"
               //HAjoute(Scr_Process_Metier_Intervenant_Type)
               //
               //
               //HRAZ(Scr_Process_Metier_Intervenant_Type)
               //Scr_Process_Metier_Intervenant_Type.IDScr_Process_Metier_Intervenant_Type	= 5
               //Scr_Process_Metier_Intervenant_Type.Libelle									= "Sous process"
               //HAjoute(Scr_Process_Metier_Intervenant_Type)
               //
               //
               //HRAZ(Scr_Process_Metier_Intervenant_Type)
               //Scr_Process_Metier_Intervenant_Type.IDScr_Process_Metier_Intervenant_Type	= 6
               //Scr_Process_Metier_Intervenant_Type.Libelle									= "Condition"
               //HAjoute(Scr_Process_Metier_Intervenant_Type)
               //
               //
               //
               //
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Creer_les_types_de_message
          identifier : 0x2cd57bd101230065
          internal_properties : BwAAAAcAAADPHbsOS3aqGqhFWKJblFvTScG01Wtq/WtY5UpJ3pGQE/FIQ+PK17kax65uKnbygmsTZKGBTKkMSzn2jgbuMf+8LIoXlT5YNfWrZziwGIjQ/1jjPGT61PoVI+aa+2Wq1f1bPY6HCrMW342IO0y1+Hqvd6QwwTHozLjMdcTnhEhT/HBOx0UhDjuITOH8djD+C4zPM+1nmyJosHXF3ey+TURtKRnGhi5j58m40QGf09WRnbWtrSepzpL2jYHQnip++VCff0EN66akclipZNixAW79rkvFeJdn+0mhgQl9W2efsWYZqrr3w9/0AqVvcQSySsew0qPrMbk4nKb+UVyNRULMaIKuuO/hfRyTeNABxTVqIpv6MM+6CJB7hL8HFimZ3o3b98O8pMiUs/kLI83ZFWXK3K+tblazrWUUzrWRHe0oh3bK+8s50+2UNBSUvY6xRtQ7RkegJCXHXtnjfyqdkUwHotbQL5NdMO1AxPqhagV1gxKwCjKUI828Nwp0FEZrpkOVUChd+RpK7mKLYlj7w9PiHLUKJbViHfQPN4C5UFP81Db5ey4QgyGHCQlTYsueqE4107iIB08zriC8/lsIOLU/TrPSWLGUcgyS/9vdf0QB27viqG+PUdeBEaxnkc+OPbDSLDbXLUJTV5FocNi6EzemY95zwJRZig3MjOIIG4NIfh/V2v5nQDUoHcV7BmKAQ2pT5tZAG4z3TIYtHSU34SY+ai3Rh7f4NIakzgWJTzYtimRRyNYOVaE7S21W2eJKvehYQ9ijUaa+FC9xygYfVHEAwo8k8yP9tCIfxx+LWrnEfH57aLizKF5NK4Czsf+tzlTtnM4Fg1o6VT3n4pjM
          properties :
           x : 27
           y : 167
           width : 206
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1-
               Hraz(Scr_Type_Cmtr)
               
               Scr_Type_Cmtr.Type_Cmtr = "Point(s) fort(s)"
               Scr_Type_Cmtr.Top_Par_Defaut = 1
               
               HAjoute(Scr_Type_Cmtr)
               
               HRAZ(Scr_Type_Cmtr)
               
               Scr_Type_Cmtr.Type_Cmtr = "Point(s) faible(s)"
               Scr_Type_Cmtr.Top_Par_Defaut = 1
               
               HAjoute(Scr_Type_Cmtr)
               
               HRAZ(Scr_Type_Cmtr)
               
               Scr_Type_Cmtr.Type_Cmtr = "Solutions"
               Scr_Type_Cmtr.Top_Par_Defaut = 1
               
               HAjoute(Scr_Type_Cmtr)
               
               HRAZ(Scr_Type_Cmtr)
               
               Scr_Type_Cmtr.Type_Cmtr = "Test fonctionnel"
               Scr_Type_Cmtr.Top_Par_Defaut = 1
               
               HAjoute(Scr_Type_Cmtr)
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Vider_tt_les_tables
          identifier : 0x2cab417000fa6a9b
          internal_properties : BwAAAAcAAADJQr2Jy9wfz/bqwAGVPIgWoOl74fwR125cSj31zADN98hDX172xlBhax6F/Xl6wkunWxRS7luCZbjuQOO/+/tBn6h0940isu+E9S1vgy7A3Q9MtysdGPwqrQFb1DqgHwWQ8H9YSfF9xFqQstTxP8pk81IGcNc67SME0LJEXcnirs5xxVEgBXhXDT+JrWK40i30Iggd2c51FXsRCrbAcP1oqh4zw8o61YHIzRiBKa+moOgoNNHYA9CEgZpuebz8VvJ6TZgwvFTozkk5jwmPrA3KrCQf7LeOeinlVC7WQJSLI5jX21JxDNrj8LL/4ADdmiUSxaS7VPU+jueKYgwH/04V9YPd5OpVtAkezKIS17Kv5Jju4sxPXAP8ttrDrwFd4AMJezMo5mxrh56e8u0rl7F5D6l4jmL3JxIh24poaHFR21NvPZBn2b72OQqu/z4t/a4KlbdJjq8cImAZmXRnwT3TrdmwXne/w4GnGuzzJHPq2dlfGqNaxxyoVgDG9i69MbH4o6psofqjZnU9sDY72TAqrYb63NlqknoSAaj2j0mzPqzUWiausWjeML+bzk8vMmQM+xL1VIAVQMuScQV1VC4ExovYJbR7RlMyzt52ujRfO4MD27X8iwoRaKb/gcHxnIYbu3ZjuDvMHiSRRO1LZn8llhoWOktQW5z6tPCS4MF8XAD9rtAPOx9z3rHnSwQUow9tAmhjtl2WkBn+rc/t88jyATSfOSRFjuW+D2514q/BrqkajDAjt4FpZfLhr/PQ7rptmGfhqrvnMV14RXimYlCiXnvsHGsJk+5cVNfQHhfWZL+ovufagjkxTzfj9wFOwmJtY7QVNq0=
          properties :
           x : 33
           y : 247
           width : 148
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               
               SI PAS HSupprimeTout(Scr_UserStory_Doc) ALORS
               	Erreur(HErreurInfo(hErrComplet))
               FIN
               
               SI PAS HSupprimeTout(Scr_Historique) ALORS
               	Erreur(HErreurInfo(hErrComplet))
               FIN
               SI PAS HSupprimeTout(Scr_Message) ALORS
               	Erreur(HErreurInfo(hErrComplet))
               FIN
               
               SI PAS HSupprimeTout(Scr_UserStory_Scr_Process_Metier_Intervenant) ALORS
               	Erreur(ErreurInfo(errComplet))
               FIN
               SI PAS HSupprimeTout(Scr_Process_Metier_Intervenant) ALORS
               	Erreur(ErreurInfo(errComplet))
               FIN
               SI PAS HSupprimeTout(Scr_Process_Metier_Axe) ALORS
               	Erreur(ErreurInfo(errComplet))
               FIN
               SI PAS HSupprimeTout(Scr_Process_Metier) ALORS
               	Erreur(ErreurInfo(errComplet))
               FIN
               
               SI PAS HSupprimeTout(Scr_Projet_Situation) ALORS
               	Erreur(ErreurInfo(errComplet))
               FIN
               SI PAS HSupprimeTout(Scr_Usr_Projet) ALORS
               	Erreur(ErreurInfo(errComplet))
               FIN
               
               
               SI PAS HSupprimeTout(Scr_CritereAccept_Composant) ALORS
               	Erreur(ErreurInfo(errComplet))
               FIN
               
               SI PAS HSupprimeTout(Scr_CritereAccept) ALORS
               	Erreur(ErreurInfo(errComplet))
               FIN
               
               SI PAS HSupprimeTout(Scr_Tache) ALORS
               	Info("erreur", ErreurInfo())
               FIN
               SI PAS HSupprimeTout(Scr_UserStory) ALORS
               	Info("erreur", ErreurInfo())
               FIN
               
               
               SI PAS HSupprimeTout(Scr_Epic) ALORS
               	Erreur(ErreurInfo(errComplet))
               FIN
               
               
               SI PAS HSupprimeTout(Scr_Usr_Trello) ALORS
               	Info("erreur", ErreurInfo())
               FIN
               
               SI PAS HSupprimeTout(Scr_Usr) ALORS
               	Info("erreur", ErreurInfo())
               FIN
               
               SI PAS HSupprimeTout(Scr_Projet) ALORS
               	Info("erreur", ErreurInfo())
               FIN
               
               
               SI PAS HSupprimeTout(Scr_Commentaire) ALORS
               	Info("erreur", ErreurInfo())
               FIN
               
               SI PAS HSupprimeTout(Scr_Type_Cmtr) ALORS
               	Info("erreur", ErreurInfo())
               FIN
               
               SI PAS HSupprimeTout(Scr_Sprint) ALORS
               	Info("erreur", ErreurInfo())
               FIN
               
               
               
               //contrôle des tables a vider au préalable
               
               //SI PAS HSupprimeTout(Scr_CritereAccept_Etat) ALORS
               //	Erreur(ErreurInfo(errComplet))
               //FIN
               
               
               //si pas HSupprimeTout(Scr_CritereAccept_Composant_Type) ALORS
               //	Erreur(ErreurInfo(errComplet))
               //FIN
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Enregistrer_fichier_2
          identifier : 0x2ca75d8301cec657
          internal_properties : BwAAAAcAAAAhVqGu2hcRv7E1oSEPwdXv8OYBeti5ZUbUWFNWOE6QHdqG+A4SQf1XM+UEuOgD/ur+8SBC0A+ytac5HSJUHE2h5FWzW1mE0B5AuDqPFNYTlDw9WywaCkKcWs/kKnWpRoUb4/8KyThcphLU6gOpFtWWS7cQHqXDmZwthiXGmezBvFg9JM4/Q9rKIarE3a6rGjDvY7q2gvU3jNSlYLqbEi4vl6oANv6uS8lBNL98rzSsAY6WjTK0obOe5y28hRCjC3yiHGli+vejroRqS+4OAx72CIYtCEOKf90Qb4wwdVJvLa0IyQtcEGTh4YAe+MLYZ59oZsjEiVvusYLYIj1zQqlSnNVLkZegsS08voA2t8XkFYcSn3fuj5JU4JuptbshXeL8jBe6OO6mi0rbF3ZQg4B0TtKCYiu4pVz7dnSnURiOJMjZ4i3Bfd3ICnUN4J8CcNckF5L39KnDays/nrOENd26oFgN3c6VUHZEhMiu83Nvs25fbqlDm24JIxR2CCMR51XGDU4e7VabuiqClhIiqffjBiLDXCbTw5iX9PCngwzMaTa14Wl9HunSy5bJSstWn5CahEWkpzGi5itCBpm7l+O+HNVmpSAQzWRrS57Sf3Ba4DFMiFjSOCv8M8lDjyy/i0HW7LguBlWR6puB4JIVbrlto4DI1BCKpttsNvqib3IhZ3/9gkGy3WDeWsiP+t8l6lIBvDvdmDD0d8vaOQMAsI7IJ/YmNDfJaUCzFNnotYHORIFHyEG/0uF9vimDLxOm4PwjPwg4hrN0LcQX14LVSHnd3cUgEkjz9C+RjQuM3yxPyr2ZQNmzZEtv0RsjHZoN
          properties :
           x : 572
           y : 9
           width : 202
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               IdFichierXLS est un xlsDocument
               XlsnbligneImport est un entier
               i est un entier
               sFichier est une chaîne
               
               //déclaration des structures
               stMaTache est un STR_Tache
               aMesTaches est un tableau de STR_Tache
               stMaUserStorie est un STR_UserStorie
               oPrj est un ClProjet dynamique
               //oUS est un ClUserStory dynamique
               //oUrsResp est un ClUsr dynamique
               oEpic est un ClEpic dynamique
               
               //requête
               //sReq est une chaîne
               //sdRechercheProjet est une source de Données 
               
               //Pour créer lié les Taches, les utilisateurs les US et les Projet
               //nIDProjet est un entier
               nIDUtilisateur est un entier = 1
               
               
               //Ligne et Colonne des fichiers
               nPremiereligne	est un entier	= 42 - 4
               nCol_CodeTache	est un entier	= 1
               nCol_Projet		est un entier	= 2
               nCol_nom		est un entier	= 3
               nCol_Sprint		est un entier	= 4
               nCol_Poids		est un entier	= 5
               nCol_Réalisé	est un entier	= 6
               nColCommentaire	est un entier	= 7
               nColDoc			est un entier	= 8
               nColGrp			est un entier	= 10
               nColUsr			est un entier	= 11
               
               aTacheATester	est un tableau de chaines
               
               sFichier = Dupplication_Fichier_Avant_Import("L:\Service informatique\Service Développement\Normes et procédures de dev\SCRUM.xlsx")
               
               SI sFichier <> "" ALORS
               	
               	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               	
               	SI ErreurDétectée = Faux ALORS
               		
               		XlsnbligneImport =xlsNbLigne(IdFichierXLS,Vrai)
               		
               		POUR i = nPremiereligne _À_ XlsnbligneImport
               			
               			si xlsDonnée(IdFichierXLS,i,nCol_CodeTache) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_nom) <> "" alors
               				
               				VariableRAZ(stMaTache)
               				
               				stMaTache.sCodeTache   = "T" + xlsDonnée(IdFichierXLS,i, nCol_CodeTache)
               				
               				Si xlsDonnée(IdFichierXLS,i,nCol_Projet) <> "" alors
               					stMaTache.sProjet      = xlsDonnée(IdFichierXLS,i,nCol_Projet)
               									
               				Sinon
               					stMaTache.sProjet      = "Tiers"
               					
               				FIN
               				
               				
               				stMaTache.sDescription          = xlsDonnée(IdFichierXLS,i,nCol_nom)
               				stMaTache.nNumSprintCreation    = xlsDonnée(IdFichierXLS,i,nCol_Sprint)
               				stMaTache.nNumSprintPrevision   = stMaTache.nNumSprintCreation
               				
               				stMaTache.nNumSprintRealisation = stMaTache.nNumSprintCreation 
               				
               				SI (SansEspace(xlsDonnée(IdFichierXLS,i,nCol_Poids)) = "" _ou_ sansespace(xlsDonnée(IdFichierXLS,i,nCol_Sprint)) = "") et pas Majuscule(xlsDonnée(IdFichierXLS,i,nCol_Réalisé)) dans ("A") ALORS
               					stMaTache.bBrouillon = Vrai
               					//Trace(stMaTache.sProjet,TAB,stMaTache.sCodeTache,TAB,stMaTache.sDescription,TAB,"Poids : " + xlsDonnée(IdFichierXLS,i,nCol_Poids),TAB,"Sprint : " + xlsDonnée(IdFichierXLS,i,nCol_Sprint))						
               				FIN
               				
               				//Si la tache n'a pas de poids, on passe son poids a null pour differencier avec les taches qui ont un poids de 0
               				si xlsDonnée(IdFichierXLS,i,nCol_Poids) <> ""
               					stMaTache.nPoids                = xlsDonnée(IdFichierXLS,i,nCol_Poids)
               					stMaTache.nPoids_Prevision      = stMaTache.nPoids
               				sinon
               					stMaTache.nPoids                = NULL		//?
               					stMaTache.nPoids_Prevision      = Null		//?
               				fin
               				
               				stMaTache.sRealise              = xlsDonnée(IdFichierXLS,i,nCol_Réalisé)
               				stMaTache.sCommentaire          = xlsDonnée(IdFichierXLS,i,nColCommentaire)
               				
               				si xlsDonnée(IdFichierXLS,i,nColDoc) ~= "Oui" ALORS
               					stMaTache.sCommentaire		+= rc + rc + "(Voir documentation)"
               				FIN
               				stMaTache.nOrdre = 1
               				
               				SI xlsDonnée(IdFichierXLS,i,nCol_Réalisé) ~= "C" ou xlsDonnée(IdFichierXLS,i,nCol_Réalisé) ~= "x" OU xlsDonnée(IdFichierXLS,i,nCol_Réalisé) ~= "T" ALORS
               					stMaTache.bDemarree = Vrai
               					stMaTache.nNumSprintDemarage = stMaTache.nNumSprintRealisation
               					stMaTache.nNumSprintFin = 0
               					
               					si xlsDonnée(IdFichierXLS,i,nCol_Réalisé) ~= "x" alors
               						stMaTache.bTermine = vrai
               						stMaTache.nNumSprintFin = stMaTache.nNumSprintRealisation
               					FIN
               					
               					//La tache est elle en test ?
               					si xlsDonnée(IdFichierXLS,i,nCol_Réalisé) ~= "T" ALORS
               						//Oui : On mémorise que les taches sont faites
               						stMaTache.bTermine = vrai
               						TableauAjoute(aTacheATester,stMaTache.sCodeTache)
               					FIN
               					
               					
               				sinon
               					stMaTache.nNumSprintDemarage = 0
               					stMaTache.bDemarree = Faux
               					stMaTache.nNumSprintFin = 0
               				Fin
               				
               				
               				SI xlsDonnée(IdFichierXLS,i,nCol_Réalisé) ~= "A" alors 
               					stMaTache.bAnnulee = vrai
               					stMaTache.nNumSprintDemarage = stMaTache.nNumSprintRealisation
               				SInon
               					stMaTache.bAnnulee = faux
               				FIN
               				
               				
               				si xlsDonnée(IdFichierXLS,i,nColUsr) <> "" ALORS
               					stMaTache.sTesteur = xlsDonnée(IdFichierXLS,i,nColUsr)
               				FIN
               				
               				si xlsDonnée(IdFichierXLS,i,nColGrp) <> "" ALORS
               					stMaTache.sGroupement = xlsDonnée(IdFichierXLS,i,nColGrp)
               				FIN
               				
               				
               				TableauAjoute(aMesTaches, stMaTache)		
               			fin
               		fin
               		
               		xlsFerme(IdFichierXLS)
               		//Info("importation terminée !")
               		
               		
               	SINON
               		Erreur(ErreurInfo(errComplet))
               	FIN	
               	
               	//Ajout des taches à la base
               	POUR tout element stMaTache de aMesTaches
               //	POUR i = 1 _À_ TableauOccurrence(aMesTaches)
               		
               		oPrj <- oProjetDeNom(stMaTache.sProjet)
               		si oPrj = null ALORS
               			ExceptionDéclenche(1,"Le projet [%stMaTache.sProjet%] est inconnu (import projets tiers - tache [%stMaTache.sCodeTache%]).")
               		FIN
               		
               //		//Recherche du projet de la tache
               //		sReq = ChaîneConstruit([
               //			SELECT Scr_Projet.IDScr_Projet 
               //			FROM Scr_Projet
               //			WHERE Scr_Projet.Nom = '%1'
               //		], aMesTaches[i].sProjet)
               //		
               //		SI goApp.Rsql(sdRechercheProjet,sReq) ALORS
               //			//Si On trouve le projet, on enregistre son ID
               //			SI HNbEnr(sdRechercheProjet) > 0 ALORS
               //				HLitPremier(sdRechercheProjet)
               //				SI HTrouve(sdRechercheProjet) ALORS
               //					nIDProjet = sdRechercheProjet.IDScr_Projet
               //				FIN
               //				
               //			SINON //Sinon on crée le projet
               //				ExceptionDéclenche(1,"Le projet [%aMesTaches[i].sProjet%] est inconnu (import projets tiers - tache [%aMesTaches[i].sCodeTache%]).")
               //				////trace("Projet non trouvé : " + aMesTaches[i].sProjet)
               //				//HRAZ(Scr_Projet)
               //				//Scr_Projet.Nom = aMesTaches[i].sProjet
               //				////Scr_Projet.IDSrc_Usr = nIDUtilisateur 
               //				//SI PAS HAjoute(Scr_Projet) ALORS
               //				//	Info("erreur dans l'ajout du projet", ErreurInfo())
               //				//SINON
               //				//	nIDProjet = Scr_Projet.IDScr_Projet
               //				//FIN
               //			FIN
               			
               //			oUS <- allouer un ClUserStory
               //			oUS.p_sCodeUserStory
               //			oUS.p_sJaiBesoinDe
               //			oUS.p_sEntantQue
               //			oUS.p_oUsrResponsable
               //			oUS.p_oProjetParent
               //			
               //			oUS.te
               			
               			//On créé une User Storie Associée à ce projet et on la lie a la tache
               			VariableRAZ(stMaUserStorie)
               			stMaUserStorie.sCodeUserStorie		= stMaTache.sCodeTache
               			stMaUserStorie.sBesoinUserStorie	= stMaTache.sDescription
               			stMaUserStorie.nIDProjet			= oPrj.ZF_Get_IdUnique()
               			stMaUserStorie.sEnTantQue			= "Historique"
               			
               			
               			si stMaTache.sTesteur = "" ALORS
               				stMaUserStorie.nIDResponsable		= goApp.m_oUsrCnx.ZF_Get_IdUnique()
               			sinon
               				nIDUtilisateur = nGetIdUsrDeNom(stMaTache.sTesteur)
               				si nIDUtilisateur <> 0 ALORS
               					stMaUserStorie.nIDResponsable	= nIDUtilisateur
               				sinon
               					Trace("Utilisateur ""[%stMaTache.sTesteur%]"" non trouvé pour la tache [%stMaTache.sCodeTache%].")
               					stMaUserStorie.nIDResponsable	= goApp.m_oUsrCnx.ZF_Get_IdUnique()
               				FIN
               			fin
               			
               			
               			si stMaTache.sGroupement <> "" ALORS
               				oEpic <- ClEpic.Get_EpicDeNom(oPrj, stMaTache.sGroupement)
               				si oEpic <> null alors
               					stMaUserStorie.nIdEpic = oEpic.ZF_Get_IdUnique()
               				sinon
               					trace("Groupement ""[%stMaTache.sGroupement%]"" non trouvé pour la tache [%stMaTache.sCodeTache%].")
               				FIN
               			FIN
               			
               			
               			
               			//La tache fait elle parti des taches à tester ?
               			SI TableauCherche(aTacheATester,tcLinéaire,stMaUserStorie.sCodeUserStorie) > 0 ALORS
               				//Oui
               				stMaUserStorie.bAtester = Vrai
               			FIN
               			
               			stMaTache.nIDUserStorie = User_Story_ajout(stMaUserStorie)
               			
               			
               			//si aMesTaches[i].nNumSprintRealisation = 0 ALORS stop
               			
               			//Enfin on créé la tache et on l'ajoute à la base de donnée
               			Taches_Ajout(stMaTache)
               			
               			
               			
               //		FIN
               //		HAnnuleDéclaration(sdRechercheProjet)
               	FIN
               FIN
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Importer_credit_V3
          identifier : 0x2cb44cd8036a26a3
          internal_properties : BwAAAAcAAADG56RAF7vhuv1RsxUTM3drk6c6bNqLyw22qiYz5VeL6pbwfrvrzIut4Hoxf02mI38sPRZnG7YbTcYwcFsri/Q2oGP1goJlz9umLOUmKrGf8oI0tqghnrDcLY6Jsdyc2VjiFIW5KKkLwcht9XN9Dna+om92HKlF43JF1t7WwjmWshRmEvRTltNB1hHIgg9b+tnQQoKXG5Zw34XrEctBlqfrQaiS3IMw7pAav2/XmjpKp4P8+MVzaspiqAfiIn5aN0/Eac/cC2WI6VdqTQzCWMtsUDFI3O7WfhXQDnVIyl0PvErG5oUjWTgRIHneCmVVEgofpzsB9hEwqYIR8BZeDV1f0w0TZkgwpFL4xzvZHpLDe92H8qbmVRKG6qzxpj55kF2tz8IjXuoKaXommxZU/nWcCMmhbXS5FsD4xIVavykD9LIiYjfhCuQNNBHy0VVXl5spoDqajKrMATUCP/ietZ/gro7rx62yzTw+XVy9M0U2Ntwe/fQeXH45NTMIApVNSdy70sWV7U8XL3oegvYesYYlag/lZaGv9q+NkLQ0yAkb2Xl904lmJNItXRijLEIB+gORfBVemFfhG85B4QN4MlRDjzgP6oLk4sqn1xim9+jFCMwwepI4GpSGuaO5QSSHwBHw7BGsGpD6cbeIrLu8xgHWq8vNCf3TKGFX9dSAUZ1YxytEb2ODIuXIXy6zGXfWYdj2R4cAgAZEs14f3zcoTOxrqF8sEGdz600nw8tNRR+DCktJGGap8LJ0T2C2q9zhq5xTohc9lRUy43825q1W0mRj3N++5iI/fVrDoBMk39NZELe1n6So10kmH7GJdAvu4In+3Ws792u3Rg==
          properties :
           x : 572
           y : 38
           width : 202
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               IdFichierXLS est un xlsDocument
               Xlsnbligne_ est un entier
               i est un entier
               sFichier est une chaîne
               
               nPremiereligne est un entier = 2
               
               //Declatration VAriables
               nIdUS est un entier
               //nIdProjet est un entier
               stTache est une STR_Tache
               stUS est une STR_UserStorie
               
               nCol_codeUS est un entier = 1
               nCol_codeTache est un entier = 2
               nCol_numSprint est un entier = 4
               nCol_Poids est un entier = 6
               nCol_fin est un entier = 7
               nCol_nom est un entier = 15
               nCol_Besoin est un entier = 9 
               nCol_Besoin2 est un entier = 15
               nCol_commentaire est un entier = 17
               
               oPrj est un ClProjet <- oProjetDeNom("Credit V3")
               
               //HLitRecherche(Scr_Projet,Nom,"Credit V3")
               //
               //si htrouve(Scr_Projet)
               //	nIdProjet = Scr_Projet.IDScr_Projet
               //sinon
               //	HRAZ(Scr_Projet)
               //	//Scr_Projet.IDSrc_Usr = 1
               //	Scr_Projet.Nom = "Credit V3"
               //	Si pas Hajoute(Scr_Projet) alors
               //		info("erreur dans l'ajout du projet credit V3", ErreurInfo())
               //	FIN
               //	nIdProjet = Scr_Projet.IDScr_Projet //On recupère son ID
               //fin
               nNumeroOrdre est une entier = 0
               // Ouvre le sélecteur de fichiers
               
               sFichier = Dupplication_Fichier_Avant_Import("L:\Service informatique\Procedures\Dev_logiciel\Credit client V3\CDC V2 CREDIT Vdef2.xls")
               
               SI sFichier <> "" ALORS
               	
               	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               	
               	SI ErreurDétectée = Faux ALORS 
               		
               		SI xlsFeuilleEnCours(IdFichierXLS, 3) ALORS	
               			
               			Xlsnbligne_ =xlsNbLigne(IdFichierXLS,Vrai)
               			
               			POUR i = nPremiereligne _À_ Xlsnbligne_
               				
               				//Si le champ code de la tache est vide => c'est une US
               				Si xlsDonnée(IdFichierXLS,i,nCol_codeTache) = "" alors
               					si xlsDonnée(IdFichierXLS,i,nCol_codeUS) <> "" alors
               						VariableRAZ(stUS)
               						stUS.sCodeUserStorie = "CC" + xlsDonnée(IdFichierXLS,i,nCol_codeUS)
               						stUS.sEnTantQue = "Historique"
               						stUS.sBesoinUserStorie = xlsDonnée(IdFichierXLS,i,nCol_Besoin) + " - " + xlsDonnée(IdFichierXLS,i,nCol_Besoin2)
               						stUS.sAfindeUserStorie = xlsDonnée(IdFichierXLS,i,nCol_nom)
               						stUS.nIDProjet = oPrj.ZF_Get_IdUnique()
               						stUS.nIDResponsable = oPrj.p_oUsr_ChefProjet.ZF_Get_IdUnique()
               						
               						Si xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T" alors
               							stUS.bAtester = vrai
               							stUS.eEtatUserStorie = ClUserStory.ECompteNbUS.En_test_fonctionnel
               						FIN
               						
               						nIdUS = User_Story_ajout(stUS)
               						
               						nNumeroOrdre = 0
               					fin
               				sinon //sinon c'est une tache
               					
               					si PAS (xlsDonnée(IdFichierXLS,i,nCol_nom) = SansEspace("") ET xlsDonnée(IdFichierXLS,i,nCol_numSprint) = SansEspace("")) alors
               						VariableRAZ(stTache)
               						stTache.sCodeTache = "CC" + xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               						stTache.nNumSprintCreation = xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               						stTache.nNumSprintRealisation = stTache.nNumSprintCreation
               						stTache.nNumSprintPrevision = stTache.nNumSprintCreation
               						//stTache.nNumSprintDemarage = stTache.nNumSprintCreation
               						stTache.nIDUserStorie = nIdUS
               						stTache.sDescription = xlsDonnée(IdFichierXLS,i,nCol_nom)
               						
               						//affectation du num d'ordre
               						nNumeroOrdre++
               						stTache.nOrdre = nNumeroOrdre
               						
               						SI (SansEspace(xlsDonnée(IdFichierXLS,i,nCol_Poids)) = "" _OU_ SansEspace(xlsDonnée(IdFichierXLS,i,nCol_numSprint)) = "") _et_ pas (xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A") ALORS
               							Trace(Scr_Projet.Nom,TAB,stTache.sCodeTache,TAB,stTache.sDescription,TAB,"Poids : " + xlsDonnée(IdFichierXLS,i,nCol_Poids),TAB,"Sprint : " + xlsDonnée(IdFichierXLS,i,nCol_numSprint))						
               						FIN
               						
               						//Si le poids n'est pas indiqué --> null
               						Si xlsDonnée(IdFichierXLS,i,nCol_Poids) <> "" alors
               							stTache.nPoids = xlsDonnée(IdFichierXLS,i,nCol_Poids)
               							stTache.nPoids_Prevision = stTache.nPoids
               						sinon
               							stTache.nPoids = null
               							stTache.nPoids_Prevision = null
               						fin
               						
               						Selon Vrai
               							cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "x"
               								stTache.bDemarree = vrai
               								stTache.bAnnulee = faux
               								stTache.bTermine = vrai 
               								stTache.nNumSprintFin = stTache.nNumSprintCreation 
               								stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               							cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T"
               								stTache.bDemarree = vrai
               								stTache.bAnnulee = faux
               								stTache.bTermine = vrai
               //								stTache.nNumSprintFin = stTache.nNumSprintCreation 
               								stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               							CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "C"
               								stTache.bDemarree = Vrai
               								stTache.bAnnulee = Faux	
               								stTache.nNumSprintFin = 0
               								stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               							cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A"
               								stTache.bAnnulee = vrai
               								stTache.bDemarree = faux
               								stTache.nNumSprintFin = 0
               								stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               							AUTRE CAS
               								stTache.bAnnulee = Faux
               								stTache.bDemarree = Faux
               								stTache.nNumSprintFin = 0
               								stTache.nNumSprintDemarage = 0
               						FIN
               						Taches_Ajout(stTache)
               					fin
               				FIN
               				
               			FIN
               			
               		SINON
               			Erreur(ErreurInfo(errComplet))
               		FIN
               	sinon
               		erreur(erreurinfo(errComplet))
               	FIN
               FIN
               
               xlsferme(IdFichierXLS)
               
               // import des critères d'acceptations
               //Import_Des_Criteres_Acceptation(nIdProjet, sFichier)
               
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Import_NF_203
          identifier : 0x2cbece5904088df6
          internal_properties : BwAAAAcAAAD9BqQV8VlV42VL6V8+AB5ucVuEQVDQwuwvzXNzWteorFHK8xGoxDJisx+RZD+Rl4ZpbKqRi3e23ti04NaxWsrUOb1InAQiEYAUSUtjlgkVb9juozV7tSXssxvf/SY8hNW2zXLiYxNL5w+O5f9ZYBh407ycYXhVbQK75bS856lqmsCRWTPPf3Rt7/KpUr/93JgQkey6LgEMIueNIvY/DIYcnhbaFUgy8dPGuWgVaETIpME6VhdyhoMniDWp4Gw/x3lwPzvh4dZdgx4YgSdEvSll+bLGbvF7blfkv1rctvnch7LRe5mhBYl3DnOQmoGa/A7eRoAjVkCvpPbgjRYLpewFzCVlvsGtcwO5VNC2sWjyI89feM7gwdddc5XN5/zeDQO77VIq3cp1bw6dNRGWt0l9NGdbgv8jRkT589CkKNmkbJ5EhbUYT7Jkeri5qSIPKiusLL/Lv0182wfw7jxLCP30ale86eNDQW46KXZ5OO61yxq4l8se7f/BpRVW+3xaTc1ywCkUcrTyQAgzMKV/1A+dtPn6+k2nhmJpp9pimPecV0T0EG8UJDL0P8cRLw7JKzJ+kRpksGstIvnJ/Fb+avc0jPTVKxc+9Dp1gqZRQHMMNNV5bQhrctBw/2gLimUI99eOyx+iwdMokrfqcmWK/xeBN6cWwZ4BxmWd0xFOJoKf4MTGG4d5B2NM2DTaQfbIH2Vrcctn5czbuuNtjn/idbCLCDTGckZAElpO9BOCA87Tt2F0RyorKauyvIjbtjEjeCb9ZjO+xRH44HWLPMya3k+ZhrcplNj4Y2QoKTIbbFHZ4zOrzhXRnuJRVxUlQBYmluh5
          properties :
           x : 572
           y : 67
           width : 202
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               IdFichierXLS est un xlsDocument
               Xlsnbligne_ est un entier
               i est un entier
               sFichier est une chaîne
               
               nPremiereligne est un entier = 3
               
               //Declatration VAriables
               nIdUS est un entier
               //nIdProjet est un entier
               stTache est une STR_Tache
               stUS est une STR_UserStorie
               
               
               nCol_codeTache est un entier = 1
               nCol_nom est un entier = 4
               nCol_TacheParente est un entier = 5
               nCol_PoidsPrevisionnel est un entier = 15
               nCol_numSprint est un entier = 16
               
               nCol_fin est un entier = 17
               
               nCol_Poids est un entier = 18
               
               nOrdre est un entier
               
               
               oPrj est un ClProjet <- oProjetDeNom("NF 203")
               
               
               ////Creation ou affectation du projet
               //HLitRecherche(Scr_Projet,Nom,"NF 203")
               //
               //SI HTrouve(Scr_Projet)
               //	nIdProjet = Scr_Projet.IDScr_Projet
               //SINON
               //	HRAZ(Scr_Projet)
               //	
               //	Scr_Projet.Nom = "NF 203"
               //	SI PAS HAjoute(Scr_Projet) ALORS
               //		Erreur(HErreurInfo(hErrComplet))
               //	FIN
               //	nIdProjet = Scr_Projet.IDScr_Projet //On recupère son ID
               //FIN
               
               
               // Ouvre le sélecteur de fichiers
               
               sFichier = Dupplication_Fichier_Avant_Import("L:\Service informatique\Procedures\Dev_logiciel\Loi finance - NF525\NF 203 - Phases et Taches.xlsx")
               //fSélecteur("", "", "Sélectionnez un fichier...", "Tous les fichiers (*.*)" + TAB + "*.*" + RC + "Excel (*.xls)" + TAB + "*.xls;*.xlsx", "*.xls;*.xlsx")
               
               SI sFichier <> "" ALORS
               	
               	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               	
               	SI ErreurDétectée = Faux ALORS 
               		
               		SI xlsFeuilleEnCours(IdFichierXLS, 2) ALORS	
               			
               			Xlsnbligne_ =xlsNbLigne(IdFichierXLS,Vrai)
               			
               			POUR i = nPremiereligne _À_ Xlsnbligne_
               				
               				si xlsDonnée(IdFichierXLS,i,nCol_nom) <> "" alors
               					
               					//Si le champ code de la tache parente = 0001 => c'est une US
               					SI xlsDonnée(IdFichierXLS,i,nCol_TacheParente) = "0001" alors
               						stUS.sCodeUserStorie = "N" + xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               						stUS.sEnTantQue = "Historique"
               						stUS.sBesoinUserStorie = xlsDonnée(IdFichierXLS,i,nCol_nom)
               						stUS.nIDProjet = oPrj.ZF_Get_IdUnique()
               						stUS.nIDResponsable = oPrj.p_oUsr_ChefProjet.ZF_Get_IdUnique()
               						
               						SI xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T" ALORS
               							stUS.bAtester = Vrai
               							stUS.eEtatUserStorie = ClUserStory.ECompteNbUS.En_test_fonctionnel
               						FIN
               						
               						nIdUS = User_Story_ajout(stUS)
               						
               						nOrdre = 0
               						
               					SINON //sinon c'est une tache 
               						
               						SI xlsDonnée(IdFichierXLS,i,nCol_nom) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_codeTache) <> SansEspace("0003") et xlsDonnée(IdFichierXLS,i,nCol_codeTache) <> SansEspace("0004") ALORS
               							
               							stTache.sCodeTache = "N" + xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               							stTache.nNumSprintCreation = xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               							stTache.nNumSprintRealisation = stTache.nNumSprintCreation
               							stTache.nNumSprintPrevision = stTache.nNumSprintCreation
               							//stTache.nNumSprintDemarage = stTache.nNumSprintCreation
               							stTache.nIDUserStorie = nIdUS
               							stTache.sDescription = xlsDonnée(IdFichierXLS,i,nCol_nom)
               							
               							SI (SansEspace(xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel)) = "" _OU_ SansEspace(xlsDonnée(IdFichierXLS,i,nCol_numSprint)) = "") _et_ pas (xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A") ALORS
               								Trace(Scr_Projet.Nom,TAB,stTache.sCodeTache,TAB,stTache.sDescription,TAB,"Poids : " + xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel),TAB,"Sprint : " + xlsDonnée(IdFichierXLS,i,nCol_numSprint))						
               							FIN						
               							
               							//Si poids pas indiqué --> null
               							SI xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel) <> "" alors
               								stTache.nPoids = xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel)
               								stTache.nPoids_Prevision = xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel)
               							sinon
               								stTache.nPoids = null
               								stTache.nPoids_Prevision = null
               							fin
               							
               							SELON Vrai
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "x" 
               									stTache.bDemarree = Vrai
               									stTache.bAnnulee = Faux
               									stTache.bTermine = Vrai
               									stTache.nNumSprintFin = stTache.nNumSprintCreation 
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "C"
               									stTache.bDemarree = Vrai
               									stTache.bAnnulee = Faux	
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A"
               									stTache.bAnnulee = Vrai
               									stTache.bDemarree = Faux
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								AUTRE CAS
               									stTache.bAnnulee = Faux
               									stTache.bDemarree = Faux
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = 0
               							FIN
               							
               							nOrdre++
               							stTache.nOrdre = nOrdre
               							
               							Taches_Ajout(stTache)
               						fin
               					fin
               				fin
               			FIN
               		fin
               		
               	SINON
               		Erreur(ErreurInfo(errComplet))
               	FIN
               SINON
               	Erreur(ErreurInfo(errComplet))
               FIN
               
               xlsFerme(IdFichierXLS)
               
               
               
               
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Import_Migration
          identifier : 0x2cbefb9d04b46013
          internal_properties : BwAAAAcAAACJJym8stFNQcaTFkJmAyCBt3PPSF+14oHzvn39arZEGvtgsCBzdxOxQO/7l1EQO3Y6J2xAew1Xo1zjYCZCnhc5lDE8/blOGFffFAsiqvnMDJlv4EA9fr/IzqEglzqjs6N3wVTois3FHvPbkXq41+SIzkVGM7LbOM+U16KEiaMVRb1xPJHqkw9u+CnUBMjKXNsweuwaT10Qtd14ESh/V5C5f3TjE/SQNrXzwBtagjJnChiV7+gsukvVVEatT3B8B8jDNufD7xgwvRoQUoMRZohfPaF/o16ScTQ/s1R5KZJRZUnYPiqkpR6/PFZ+dEFkr3zwIDHGiLXPF911djh2EdoBewXMNpSuT3QwCf8AhLs5ht/o4MluzNcEo3cOZ2/XFIxCOKvVgGkKFeB5ikH3p1GlUxWzyNOAfKJWBuKURTivTg9xEw+ElqqSyEqtidH6P4vYFfn2rVLq0AHJZAb4KpUCT/FAxzog9dPwnDkND8reLO3lMFyp9ppmOxRHlqWEX7xc8UjbrqsZXKrJFSpGYhLn6wYyD4Z7dAzFq0UowOiH+Wz2pG8JaJzSIcnWppAyjFugXWxwjV1lsKx6jIEiHyJnTEdohnO27mtzGMlIfdO1tBsBO/pDbKRbfZxOYXAALC3PEewoqzoShHNnhx1ylf2GkLbkHz7d8Ngxam12K/Y69/R/oiXapv/DS9XWiaO9vX451MrYpZIahFqAr8h1oFcanucSF8OigifwlQI3C0ExcaF/H/k1WtLToa/bkkiIwzZ+TfxT1nBPq9BcAJG1Ga53CDp0AbU7p1wT9Z11lNdxZIG0jILIDyoUkB5aQcAbFivtfoI=
          properties :
           x : 572
           y : 96
           width : 202
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1-
               IdFichierXLS est un xlsDocument
               Xlsnbligne_ est un entier
               i est un entier
               sFichier est une chaîne
               
               nPremiereligne est un entier = 3
               
               //Déclaration Variables
               nIdUS est un entier
               //nIdProjet est un entier
               stTache est une STR_Tache
               stUS est une STR_UserStorie
               oPrj est un ClProjet <- oProjetDeNom("Migration")
               
               nCol_codeTache est un entier = 1
               nCol_nom est un entier = 4
               nCol_TacheParente est un entier = 5
               nCol_PoidsPrevisionnel est un entier = 15
               nCol_numSprint est un entier = 19
               nCol_fin est un entier = 20
               nCol_Poids est un entier = 21
               
               //
               ////Création du projet
               //HRAZ(Scr_Projet)
               ////Scr_Projet.IDSrc_Usr = 1
               //Scr_Projet.Nom = "Migration"
               //SI PAS HAjoute(Scr_Projet) ALORS
               //	Erreur(ErreurInfo(errComplet))
               //FIN
               //nIdProjet = Scr_Projet.IDScr_Projet //On recupère son ID
               
               
               sFichier = Dupplication_Fichier_Avant_Import("L:\Service informatique\Procedures\Dev_logiciel\Migration SQL\Phases et Taches.xlsx")
               
               SI sFichier <> "" ALORS
               	
               	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               	
               	SI ErreurDétectée = Faux ALORS 
               		
               		SI xlsFeuilleEnCours(IdFichierXLS, 2) ALORS	
               			
               			Xlsnbligne_ =xlsNbLigne(IdFichierXLS,Vrai)
               			
               			POUR i = nPremiereligne _À_ Xlsnbligne_
               				
               				SI xlsDonnée(IdFichierXLS,i,nCol_nom) <> ""
               					
               					si  xlsDonnée(IdFichierXLS,i,2) = "" ET xlsDonnée(IdFichierXLS,i,nCol_numSprint) = "" ET xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel) = "" ET xlsDonnée(IdFichierXLS,i,nCol_fin) = "" ALORS
               					 //on ne traite pas	
               					sinon
               						
               						//si xlsDonnée(IdFichierXLS,i,nCol_codeTache) = "0269" alors stop
               						
               						stUS.sCodeUserStorie	= "S" + xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               						stUS.sEnTantQue			= "Historique"
               						stUS.sBesoinUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_nom)
               						stUS.nIDProjet			= oPrj.ZF_Get_IdUnique()
               						stUS.nIDResponsable		= oPrj.p_oUsr_ChefProjet.ZF_Get_IdUnique()
               						
               						SI xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T" ALORS
               							stUS.bAtester			= Vrai
               							stUS.eEtatUserStorie	= ClUserStory.ECompteNbUS.En_test_fonctionnel
               						FIN
               						
               						nIdUS = User_Story_ajout(stUS)
               						
               						stTache.sCodeTache				= "S" + xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               						stTache.nNumSprintCreation		= xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               						stTache.nNumSprintRealisation	= stTache.nNumSprintCreation
               						stTache.nNumSprintPrevision		= stTache.nNumSprintCreation
               						//stTache.nNumSprintDemarage = stTache.nNumSprintCreation
               						stTache.nIDUserStorie			= nIdUS
               						stTache.sDescription			= xlsDonnée(IdFichierXLS,i,nCol_nom)
               						
               						SI (SansEspace(xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel)) = "" _OU_ SansEspace(xlsDonnée(IdFichierXLS,i,nCol_numSprint)) = "") _et_ pas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A" ALORS
               							Trace(Scr_Projet.Nom,TAB,stTache.sCodeTache,TAB,stTache.sDescription,TAB,"Poids : " + xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel),TAB,"Sprint : " + xlsDonnée(IdFichierXLS,i,nCol_numSprint))						
               						FIN		
               						
               						//Si poids pas indiqué --> null
               						SI xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel) <> "" ALORS
               							stTache.nPoids = xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel)
               							stTache.nPoids_Prevision = xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel)
               						SINON
               							stTache.nPoids = Null
               							stTache.nPoids_Prevision = Null
               						FIN
               						
               						SELON Vrai
               							CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "x" 
               								si xlsDonnée(IdFichierXLS,i,nCol_Poids) <> 0 alors
               									stTache.bDemarree = Vrai
               									stTache.bAnnulee = Faux
               									stTache.bTermine = Vrai
               									stTache.nNumSprintFin = stTache.nNumSprintCreation 
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               									
               								sinon
               									stTache.bAnnulee = Vrai
               									stTache.bDemarree = Faux
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								fin
               								
               							CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "C"
               								stTache.bDemarree = Vrai
               								stTache.bAnnulee = Faux	
               								stTache.nNumSprintFin = 0
               								stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               							CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A"
               								stTache.bAnnulee = Vrai
               								stTache.bDemarree = Faux
               								stTache.nNumSprintFin = 0
               								stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               							AUTRE CAS
               								stTache.bAnnulee = Faux
               								stTache.bDemarree = Faux
               								stTache.nNumSprintFin = 0
               								stTache.nNumSprintDemarage = 0
               						FIN
               						
               						
               						stTache.nOrdre = 1
               						Taches_Ajout(stTache)
               					fin
               				FIN
               			FIN
               		FIN
               	FIN
               	
               SINON
               	Erreur(ErreurInfo(errComplet))
               FIN
               
               xlsFerme(IdFichierXLS)
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Import_Vieux_Stock
          identifier : 0x2cbf07b804d4a9c9
          internal_properties : BwAAAAcAAACWmTts9/0hM5R8JXexK27bDFadJTJyIuECTm+VHKndekBV2d40bnnY5CGFsb+F2W4EcnbsXB820gI/AVsZSkEKemWMwbdWLarucag/bGsrTnSLQtGnwAoGIl6yvvqs15K9c/oiRgIsPFqxeheEVU58Wj5yDJvNiJE5tR1Byd/QWwRAsUpo/lIphu6JsFqbbYT/XSOgqhX/Ub9pgw4RVVayi1WL4FTo3O1kjdd21S5hPt8tOZquwKljiw29fzR6w+J2JSO1kKlVYtdgftc82xZNEbRON7+S5AGOPZQoBvOG/84YKfe02IzhuPsTpJfOL3+V4lhrsIWShyV9HXnlIfvItJC6uTmBnthRNMG4cMXWOssSFPKOiuxhqcmIR6pmSebeLOdJC5lhmz7AwVtY06tcpfcxuNylKmF57EiL9uPtOIHoa+s8Mb6zt1UVegAFp4VCno36pU+efdgiflWJh4EgXT7KO4rj2c4hMR/WTmc21o9U5Fqj0TgNNPUXP6CNIxiA2HKdjPLTAxc6cVs5j+SlAWcu8RzaTG8qjNf1R8PDI8Yd7gPJv8BtdtCw+2dDfNtgJBiIeaAd8+3voo6xVurXVAQsiEHPbJKAIU0NnJLXYJfM39J3IXr2wvvwHpvJaGFrOiBQj3nWBZJiERLpBJ8iRGu8v0Qijn1I1W0rMlPqee4cEoMkY/uG4B4QKOR0j+YZJyDKiy1esT3xTK494jzVm++v2IySzduukK2zFbzGJ2PBwTvK+n4EYggbe7TR7xDARFZbEs6bqZw68wlw9WuKDVjqhWprnDarRVPRzDcSRxELpkp8Bse4JiqeLTgcMMaI6XfCdcgL
          properties :
           x : 572
           y : 125
           width : 202
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1-
               IdFichierXLS est un xlsDocument
               Xlsnbligne_ est un entier
               i est un entier
               sFichier est une chaîne
               
               nPremiereligne est un entier = 4
               
               //Déclaration VAriables
               nIdUS est un entier
               //nIdProjet est un entier
               stTache est une STR_Tache
               stUS est une STR_UserStorie
               
               
               nCol_codeTache est un entier = 1
               nCol_nom est un entier = 4
               nCol_TacheParente est un entier = 5
               nCol_PoidsPrevisionnel est un entier = 15
               nCol_numSprint est un entier = 16
               
               nCol_fin est un entier = 17
               
               nCol_Poids est un entier = 18
               
               nOrdre Est un entier
               
               oPrj est un ClProjet <- oProjetDeNom("Vieux Stock")
               
               
               ////Création du projet
               //HRAZ(Scr_Projet)
               ////Scr_Projet.IDSrc_Usr = 1
               //Scr_Projet.Nom = "Vieux Stock"
               //SI PAS HAjoute(Scr_Projet) ALORS
               //	Erreur(ErreurInfo(errComplet))
               //FIN
               //nIdProjet = Scr_Projet.IDScr_Projet //On récupère son ID
               
               // Ouvre le sélecteur de fichiers
               
               sFichier = Dupplication_Fichier_Avant_Import("L:\Service informatique\Procedures\Dev_logiciel\Vieux Stock\Vieux Stocks - Phases et Taches.xlsx")
               
               SI sFichier <> "" ALORS
               	
               	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               	
               	SI ErreurDétectée = Faux ALORS 
               		
               		SI xlsFeuilleEnCours(IdFichierXLS, 2) ALORS	
               			
               			Xlsnbligne_ =xlsNbLigne(IdFichierXLS,Vrai)
               			
               			POUR i = nPremiereligne _À_ Xlsnbligne_
               				
               				SI xlsDonnée(IdFichierXLS,i,nCol_nom) <> "" ET i <> 6 et i <> 11 et i <> 29 ALORS
               					
               
               					//Si la col 2 = "*" => c'est une US
               					SI xlsDonnée(IdFichierXLS,i,2) = sansespace("*") ALORS
               						stUS.sCodeUserStorie = "V" + xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               						stUS.sEnTantQue = "Historique"
               						stUS.sBesoinUserStorie = xlsDonnée(IdFichierXLS,i,nCol_nom)
               						stUS.nIDProjet = oPrj.ZF_Get_IdUnique()
               						stUS.nIDResponsable = oPrj.p_oUsr_ChefProjet.ZF_Get_IdUnique()
               						
               						SI xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T" ALORS
               							stUS.bAtester = Vrai
               							stUS.eEtatUserStorie = ClUserStory.ECompteNbUS.En_test_fonctionnel
               						FIN
               						
               						nOrdre = 0
               						
               						nIdUS = User_Story_ajout(stUS)
               						
               						//si la ligne suivante est une us alors on l'enregistre aussi en tant que tache
               						SI xlsDonnée(IdFichierXLS,i+1,2) = SansEspace("*") OU i = 4 ou i = 28 OU i = 31 ALORS
               							stTache.sCodeTache = "V" + xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               							stTache.nNumSprintCreation = xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               							stTache.nNumSprintRealisation = stTache.nNumSprintCreation
               							stTache.nNumSprintPrevision = stTache.nNumSprintCreation
               							//stTache.nNumSprintDemarage = stTache.nNumSprintCreation
               							stTache.nIDUserStorie = nIdUS
               							stTache.sDescription = xlsDonnée(IdFichierXLS,i,nCol_nom)
               							
               							SI SansEspace(xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel)) = "" _OU_ SansEspace(xlsDonnée(IdFichierXLS,i,nCol_numSprint)) = "" ALORS
               								Trace(Scr_Projet.Nom,TAB,stTache.sCodeTache,TAB,stTache.sDescription,TAB,"Poids : " + xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel),TAB,"Sprint : " + xlsDonnée(IdFichierXLS,i,nCol_numSprint))						
               							FIN		
               							
               							//Si poids pas indiqué --> null
               							SI xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel) <> "" ALORS
               								stTache.nPoids = xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel)
               								stTache.nPoids_Prevision = xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel)
               							SINON
               								stTache.nPoids = Null
               								stTache.nPoids_Prevision = Null
               							FIN
               							
               							SELON Vrai
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "x" 
               									stTache.bDemarree = Vrai
               									stTache.bTermine = Vrai
               									stTache.bAnnulee = Faux
               									stTache.nNumSprintFin = stTache.nNumSprintCreation 
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "C"
               									stTache.bDemarree = Vrai
               									stTache.bAnnulee = Faux	
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A"
               									stTache.bAnnulee = Vrai
               									stTache.bDemarree = Faux
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								AUTRE CAS
               									stTache.bAnnulee = Faux
               									stTache.bDemarree = Faux
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = 0
               							FIN
               							
               							stTache.nOrdre = 1
               							Taches_Ajout(stTache)
               							
               						FIN
               						
               						
               					SINON //sinon c'est une tache 
               							
               							stTache.sCodeTache = "V" + xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               							stTache.nNumSprintCreation = xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               							stTache.nNumSprintRealisation = stTache.nNumSprintCreation
               							stTache.nNumSprintPrevision = stTache.nNumSprintCreation
               							//stTache.nNumSprintDemarage = stTache.nNumSprintCreation
               							stTache.nIDUserStorie = nIdUS
               							stTache.sDescription = xlsDonnée(IdFichierXLS,i,nCol_nom)
               						//Si poids pas indiqué --> null
               						SI xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel) <> "" ALORS
               							stTache.nPoids = xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel)
               							stTache.nPoids_Prevision = xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel)
               						SINON
               							stTache.nPoids = Null
               							stTache.nPoids_Prevision = Null
               						FIN
               							
               							SELON Vrai
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "x" 
               									stTache.bDemarree = Vrai
               									stTache.bAnnulee = Faux
               									stTache.nNumSprintFin = stTache.nNumSprintCreation 
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "C"
               									stTache.bDemarree = Vrai
               									stTache.bAnnulee = Faux	
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A"
               									stTache.bAnnulee = Vrai
               									stTache.bDemarree = Faux
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								AUTRE CAS
               									stTache.bAnnulee = Faux
               									stTache.bDemarree = Faux
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = 0
               							FIN
               							nOrdre++
               							stTache.nOrdre = nOrdre
               							Taches_Ajout(stTache)
               						FIN
               					FIN
               				FIN
               			FIN
               			
               			
               		SINON
               			Erreur(ErreurInfo(errComplet))
               		FIN
               	SINON
               		Erreur(ErreurInfo(errComplet))
               	FIN
               
               xlsFerme(IdFichierXLS)
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Import_Pool
          identifier : 0x2cbf0a0004d793b5
          internal_properties : BwAAAAcAAADpdEQimTBTMgP5kKDbL5ddrB5Coijuk8r+ipddBMXiIGKtEkW+yD1Hw+TmavXOZUb14JM+uyKDOGzDhsaSvLKEYGAu0EQaVwzQyNgMkVAikLdWe1HOj/9LPGEM9PG5BtdQFTkJT1xkl2E8m8CZQTAMzac/nA0Ee+dmkg2wjfwOP1+WO+57xX7S5RWq1WGnna/G5fIM3m0o6d90CHKl72+0B+S84+LwCyYO+yAmrDDKbkPN3rfugFT5WMw7CiVQjwE++47/Z5rTkdYiRMrZ+kJKFRsKn9+jzUpUreXBtbKGK+3Wvq9UwEZimVHb3H0z9DpiEY3q+LWQRsY2ITaHky+OXFbE3oe4SMrcLQE+TxA/rkM+20S1M2VPn2GHt40VBCxUtE/U3co2EAt+rdHnTjXPsAM5Fhv08HqPHPcmd2+V2GEYv3BkNG3Gu++PufoxWu+sJ4tmqsvFWq9A08hfPShBokYU/HZaIGRKG0ML0Zx4gRjcbSeAGC40Low09Ir8Fz4gKzHGYOVfBdWI9Z1BzuTZTSYu9t43SEXmxJbLdpApOBqOGXSv/oq/hZNuG8+0hYk2WZAzQo7jTJtHFQFpLnD/1qMdlhKwojPRgFzJFNFnqJUVgkHu+MgAX3OkIk6INSJgvGGmjA+N1nZmH2o1/u0BjYY6mcwq92GlrHfXCY5S8fbAk4+MGeyg90D2qVf17xrSa/Bjfs8K1FEDMTN9bSwvgYRrEBYVN7jOd0ou+8dBDB7HzPmBHtBDg/F0+NKiJapy5XCPjZIqEcnP4O07syTp7tHU74hmUOEamY8n2cCuntpCLWdBrXuBieGxkPA=
          properties :
           x : 572
           y : 154
           width : 202
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               IdFichierXLS est un xlsDocument
               Xlsnbligne_ est un entier
               i est un entier
               sFichier est une chaîne
               
               nPremiereligne est un entier = 4
               
               //Déclaration VAriables
               nIdUS est un entier
               //nIdProjetPoolV1 est un entier
               //nIdProjetPoolV2 est un entier
               sProjet est une chaîne
               stTache est une STR_Tache
               stUS est une STR_UserStorie
               
               
               nCol_codeTache est un entier = 1
               nCol_nom est un entier = 4
               nCol_TacheParente est un entier = 5
               nCol_PoidsPrevisionnel est un entier = 15
               nCol_numSprint est un entier = 16
               
               nCol_fin est un entier = 17
               
               nCol_Poids est un entier = 18
               nOrdre est un entier
               
               oPrjPool1 est un ClProjet <- oProjetDeNom("PoolV1")
               oPrjPool2 est un ClProjet <- oProjetDeNom("PoolV2")
               
               
               ////Création du projet Pool v1
               //HRAZ(Scr_Projet)
               ////Scr_Projet.IDSrc_Usr = 1
               //Scr_Projet.Nom = "PoolV1"
               //SI PAS HAjoute(Scr_Projet) ALORS
               //	Erreur(ErreurInfo(errComplet))
               //FIN
               //nIdProjetPoolV1 = Scr_Projet.IDScr_Projet //On récupère son ID
               //
               ////Création du projet Pool v2
               //HRAZ(Scr_Projet)
               ////Scr_Projet.IDSrc_Usr = 1
               //Scr_Projet.Nom = "PoolV2"
               //SI PAS HAjoute(Scr_Projet) ALORS
               //	Erreur(ErreurInfo(errComplet))
               //FIN
               //nIdProjetPoolV2 = Scr_Projet.IDScr_Projet //On récupère son ID
               
               sFichier = Dupplication_Fichier_Avant_Import("L:\Service informatique\Procedures\Dev_logiciel\Pool transport\Pool - Phases et Taches.xlsx")
               
               SI sFichier <> "" ALORS
               	
               	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               	
               	SI ErreurDétectée = Faux ALORS 
               		
               		SI xlsFeuilleEnCours(IdFichierXLS, 2) ALORS	
               			
               			Xlsnbligne_ = Xlsnbligne(IdFichierXLS,vrai)
               			
               			POUR i = nPremiereligne _À_ Xlsnbligne_
               				
               				
               				SI xlsDonnée(IdFichierXLS,i,nCol_nom) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_TacheParente) <> SansEspace("") ET xlsDonnée(IdFichierXLS,i,nCol_TacheParente) <> SansEspace("0001") et PAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "G" ALORS
               					
               					//Si la colonne 2 = "*" => c'est une US
               					SI xlsDonnée(IdFichierXLS,i,2) = sansespace("*") ALORS
               						
               						VariableRAZ(stUS)
               						
               						stUS.sCodeUserStorie = "P" + xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               						stUS.sEnTantQue = "Historique"
               						stUS.sBesoinUserStorie = xlsDonnée(IdFichierXLS,i,nCol_nom)
               						
               						//Si 
               						si i < 97 alors
               							stUS.nIDProjet = oPrjPool1.ZF_Get_IdUnique()
               							sProjet = "Pool V1"
               							stUS.nIDResponsable = oPrjPool1.p_oUsr_ChefProjet.ZF_Get_IdUnique()
               						sinon
               							stUS.nIDProjet = oPrjPool2.ZF_Get_IdUnique()
               							sProjet = "Pool V2"
               							stUS.nIDResponsable = oPrjPool2.p_oUsr_ChefProjet.ZF_Get_IdUnique()
               						fin
               						
               						SI xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T" ALORS
               							stUS.bAtester = Vrai
               							stUS.eEtatUserStorie = ClUserStory.ECompteNbUS.En_test_fonctionnel
               						FIN
               						
               						nOrdre = 0 
               						nIdUS = User_Story_ajout(stUS)
               						
               						//si stUS.sCodeUserStorie = "P0180" alors stop
               						
               						//Si la ligne d'apres est aussi une US, on enregistre l'US en tant que tache aussi 
               						SI xlsDonnée(IdFichierXLS,i+1,2) = SansEspace("*") OU xlsDonnée(IdFichierXLS,i+1,nCol_TacheParente) ~= SansEspace("") ou Majuscule(xlsDonnée(IdFichierXLS,i+1,nCol_fin)) ~= "G" ALORS
               								
               								VariableRAZ(stTache)
               								
               								stTache.sCodeTache = "P" + xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               								stTache.nNumSprintCreation = xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               								stTache.nNumSprintRealisation = stTache.nNumSprintCreation
               								stTache.nNumSprintPrevision = stTache.nNumSprintCreation
               								//stTache.nNumSprintDemarage = stTache.nNumSprintCreation
               								stTache.nIDUserStorie = nIdUS
               								stTache.sDescription = xlsDonnée(IdFichierXLS,i,nCol_nom)
               								
               								SI (SansEspace(xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel)) = "" _OU_ SansEspace(xlsDonnée(IdFichierXLS,i,nCol_numSprint)) = "") ET PAS Majuscule(xlsDonnée(IdFichierXLS,i,nCol_fin)) ~= "A" ALORS
               									Trace(sProjet,TAB,stTache.sCodeTache,TAB,stTache.sDescription,TAB,"Poids : " + xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel),TAB,"Sprint : " + xlsDonnée(IdFichierXLS,i,nCol_numSprint))						
               //									Trace(sProjet,TAB,stTache.sCodeTache,tab,xlsDonnée(IdFichierXLS,i,nCol_fin),TAB,stTache.sDescription,TAB,"Poids : " + xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel),TAB,"Sprint : " + xlsDonnée(IdFichierXLS,i,nCol_numSprint))						
               								FIN		
               								
               								//Si poids pas indiqué --> null
               								SI xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel) <> "" ALORS
               									stTache.nPoids = xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel)
               									stTache.nPoids_Prevision = xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel)
               								SINON
               									stTache.nPoids = Null
               									stTache.nPoids_Prevision = Null
               								FIN
               								
               								SELON Vrai
               									CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "x"
               										stTache.bDemarree = Vrai
               										stTache.bAnnulee = Faux
               										stTache.bTermine = vrai
               										stTache.nNumSprintFin = stTache.nNumSprintRealisation 
               										stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               									CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T"
               										stTache.bDemarree = Vrai
               										stTache.bAnnulee = Faux
               										stTache.bTermine = vrai
               										stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               									CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "C"
               										stTache.bDemarree = Vrai
               										stTache.bAnnulee = Faux	
               										stTache.nNumSprintFin = 0
               										stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               									CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A"
               										stTache.bAnnulee = Vrai
               										stTache.bDemarree = Faux
               										stTache.nNumSprintFin = stTache.nNumSprintRealisation
               										stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               									AUTRE CAS
               										stTache.bAnnulee = Faux
               										stTache.bDemarree = Faux
               										stTache.nNumSprintFin = 0
               										stTache.nNumSprintDemarage = 0
               								FIN
               								stTache.nordre = 1
               								Taches_Ajout(stTache)
               							FIN
               						
               						
               					SINON //sinon c'est une tache 
               						
               							
               							stTache.sCodeTache = "P" + xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               							stTache.nNumSprintCreation = xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               							stTache.nNumSprintRealisation = stTache.nNumSprintCreation
               							stTache.nNumSprintPrevision = stTache.nNumSprintCreation
               							//stTache.nNumSprintDemarage = stTache.nNumSprintCreation
               							stTache.nIDUserStorie = nIdUS
               							stTache.sDescription = xlsDonnée(IdFichierXLS,i,nCol_nom)
               							
               						SI (SansEspace(xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel)) = "" _OU_ SansEspace(xlsDonnée(IdFichierXLS,i,nCol_numSprint)) = "") ET PAS Majuscule(xlsDonnée(IdFichierXLS,i,nCol_fin)) ~= "A" ALORS
               							Trace(sProjet,TAB,stTache.sCodeTache,TAB,stTache.sDescription,TAB,"Poids : " + xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel),TAB,"Sprint : " + xlsDonnée(IdFichierXLS,i,nCol_numSprint))						
               //							Trace(sProjet,TAB,stTache.sCodeTache,TAB,xlsDonnée(IdFichierXLS,i,nCol_fin),TAB,stTache.sDescription,TAB,"Poids : " + xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel),TAB,"Sprint : " + xlsDonnée(IdFichierXLS,i,nCol_numSprint))						
               						FIN			
               							
               							//Si poids pas indiqué --> null
               							SI xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel) <> "" ALORS
               								stTache.nPoids = xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel)
               								stTache.nPoids_Prevision = xlsDonnée(IdFichierXLS,i,nCol_PoidsPrevisionnel)
               							SINON
               								stTache.nPoids = Null
               								stTache.nPoids_Prevision = Null
               							FIN
               							
               							SELON Vrai
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "x" 
               									stTache.bDemarree = Vrai
               									stTache.bAnnulee = Faux
               									stTache.bTermine = Vrai
               									stTache.nNumSprintFin = stTache.nNumSprintRealisation 
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T"
               									stTache.bDemarree = Vrai
               									stTache.bAnnulee = Faux
               									stTache.bTermine = Vrai
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "C"
               									stTache.bDemarree = Vrai
               									stTache.bAnnulee = Faux	
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A"
               									stTache.bAnnulee = Vrai
               									stTache.bDemarree = Faux
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								AUTRE CAS
               									stTache.bAnnulee = Faux
               									stTache.bDemarree = Faux
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = 0
               							FIN
               							nOrdre++
               							stTache.nOrdre = nOrdre
               							Taches_Ajout(stTache)
               						
               					fin
               				FIN
               			FIN
               			
               			
               			
               		SINON
               			Erreur(ErreurInfo(errComplet))
               		FIN
               	SINON
               		Erreur(ErreurInfo(errComplet))
               	FIN
               fin
               
               xlsFerme(IdFichierXLS)
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Importer_Evols_android
          identifier : 0x2d70bda0213e4d18
          internal_properties : BwAAAAcAAAAO3HrxM3lDA3kWLf3OUMnwsA5ap6SBcURok4m2a8pRu7V/UtjJlPPk6Kt1WULlkdxv2kwGaxYJ8CYzSrvSMlJl2ZiR2aTfnXbQe4RxxCbpU8M3hrS5jarpPEnkX7mBKzRPcXX4ZKuH0ULeQIxJCgG7dM9ELwQM8hlB4Jnu4N8gg/XCtXTJEj7K0K/AAytiVapNDHCyyk+BnmWWbXYkLxWGDccYKJJNl0K+/wjKIC7ivlO1yQNBOrze0rfl7sSd41U68Az/n2ke6OuZoREfdBQq6nU7TqASqyOCYyKgmgetfDIWTPhTXYMEvtchFfjKhkmoIHflKVPMDDLI1wAZcW76GCB60sfHrXwPmoZhJXlyCFfMAFVWXlyzAPERPsldutuzhReWpCZ0n5HhtcXBhdkY7HXlxO7VSc2YUK+ZHeHp0DmVNvbqTFyTZ9EpZCNCx1361Qbj5V4+ZQDYBO22lsH08TWnzsCCW7R7jRtA/9aKkMFXtfmx8MjXMoslk7skb5wEJx/wMmPZfd0MwzeItPD/MywtYFajZGuGnGf3WJQTO+aOxaIDeOxXPKIaG6akcomGfQd/s29r9wEn8niQaw6D4N3zyddu5vBiB4vhCeNVhLvLBK3HksbMVIlOfv7o9C1XL59jucSYjQrefbiiOyf4ou6pZkhphV4pjBT+1NcrInnWzldv6/JpV9HTy6Ko+AfgTSi6gvfFTr4K08ExOB8iTpk3yIlCMulIOrO/JjXhNHaebVZsDYoioX648ufdvBuEtXe+ZGv5UU6QoVpc1xzhILHMQY9sZER9hyl7G+u6KJ2gnfCAaeTBrw1x++OrXyTb4pwdfR6+m3agIVmN
          properties :
           x : 572
           y : 183
           width : 202
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               IdFichierXLS est un xlsDocument
               Xlsnbligne_ est un entier
               i est un entier
               sFichier est une chaîne
               
               nPremiereligne est un entier = 2
               
               //Déclaration VAriables
               nIdUS est un entier
               //nIdProjet est un entier
               stTache est une STR_Tache
               stUS est une STR_UserStorie
               
               nCol_codeUS est un entier = 2
               nCol_codeTache est un entier = 2
               nCol_numSprint est un entier = 4
               nCol_Poids est un entier = 5
               nCol_fin est un entier = 6
               nCol_nom est un entier = 3
               nCol_Besoin est un entier = 3
               //nCol_AfinDe est un entier = 4
               nCol_commentaire est un entier = 17
               
               oPrj est un ClProjet <- oProjetDeNom("Androïd V2")
               
               //HLitRecherche(Scr_Projet,Nom,"Androïd V2")
               //si htrouve(Scr_Projet)
               //	nIdProjet = Scr_Projet.IDScr_Projet
               //sinon
               //	HRAZ(Scr_Projet)
               //	//Scr_Projet.IDSrc_Usr = 1
               //	Scr_Projet.Nom = "Androïd V2"
               //	Si pas Hajoute(Scr_Projet) alors
               //		info("erreur dans l'ajout du projet Androïd V2", ErreurInfo())
               //	FIN
               //	nIdProjet = Scr_Projet.IDScr_Projet //On recupère son ID
               //fin
               nNumeroOrdre est une entier = 0
               // Ouvre le sélecteur de fichiers
               
               
               sFichier = Dupplication_Fichier_Avant_Import("L:\Service informatique\Procedures\Dev_logiciel\Pistolet Android\Pistolet Android V2.xlsx")
               
               SI sFichier <> "" ALORS
               	
               	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               	
               	SI ErreurDétectée = Faux ALORS 
               		
               		SI xlsFeuilleEnCours(IdFichierXLS, 1) ALORS	
               			
               			Xlsnbligne_ =xlsNbLigne(IdFichierXLS,Vrai)
               			
               			POUR i = nPremiereligne _À_ Xlsnbligne_
               				
               				//Si le champ code de la tache est vide => c'est une US
               //				Si xlsDonnée(IdFichierXLS,i,nCol_codeTache) = "" alors
               					si xlsDonnée(IdFichierXLS,i,nCol_codeUS) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_Besoin) <> "" alors
               						VariableRAZ(stUS)
               						stUS.sCodeUserStorie = xlsDonnée(IdFichierXLS,i,nCol_codeUS)
               						stUS.sEnTantQue = "Historique"
               						stUS.sBesoinUserStorie = xlsDonnée(IdFichierXLS,i,nCol_Besoin)
               						stUS.sAfindeUserStorie = ""	//xlsDonnée(IdFichierXLS,i,nCol_AfinDe)
               						stUS.nIDProjet = oPrj.ZF_Get_IdUnique()
               						stUS.nIDResponsable = oPrj.p_oUsr_ChefProjet.ZF_Get_IdUnique()
               						
               						Si xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T" alors
               							stUS.bAtester = vrai
               							stUS.eEtatUserStorie = ClUserStory.ECompteNbUS.En_test_fonctionnel
               						FIN
               						
               						nIdUS = User_Story_ajout(stUS)
               						
               						nNumeroOrdre = 0
               //					fin
               //					
               //				sinon //sinon c'est une tache
               //					
               //					si PAS (xlsDonnée(IdFichierXLS,i,nCol_nom) = SansEspace("") ET xlsDonnée(IdFichierXLS,i,nCol_numSprint) = SansEspace("")) alors
               						VariableRAZ(stTache)
               						stTache.sCodeTache = xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               						stTache.nNumSprintCreation = xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               						stTache.nNumSprintRealisation = stTache.nNumSprintCreation
               						stTache.nNumSprintPrevision = stTache.nNumSprintCreation
               						//stTache.nNumSprintDemarage = stTache.nNumSprintCreation
               						stTache.nIDUserStorie = nIdUS
               						stTache.sDescription = xlsDonnée(IdFichierXLS,i,nCol_nom)
               						
               						//affectation du num d'ordre
               						nNumeroOrdre++
               						stTache.nOrdre = nNumeroOrdre
               						
               //						SI SansEspace(xlsDonnée(IdFichierXLS,i,nCol_Poids)) = "" _OU_ SansEspace(xlsDonnée(IdFichierXLS,i,nCol_numSprint)) = "" ALORS
               //							Trace(Scr_Projet.Nom,TAB,stTache.sCodeTache,TAB,stTache.sDescription,TAB,"Poids : " + xlsDonnée(IdFichierXLS,i,nCol_Poids),TAB,"Sprint : " + xlsDonnée(IdFichierXLS,i,nCol_numSprint))						
               //						FIN
               						
               						//Si le poids n'est pas indiqué --> null
               						Si xlsDonnée(IdFichierXLS,i,nCol_Poids) <> "" alors
               							stTache.nPoids = xlsDonnée(IdFichierXLS,i,nCol_Poids)
               							stTache.nPoids_Prevision = stTache.nPoids
               						sinon
               							stTache.nPoids = null
               							stTache.nPoids_Prevision = null
               						fin
               						
               						Selon Vrai
               							cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "x"
               								stTache.bDemarree = vrai
               								stTache.bAnnulee = faux
               								stTache.bTermine = vrai
               								stTache.nNumSprintFin = stTache.nNumSprintCreation 
               								stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               							cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T"
               								stTache.bDemarree = vrai
               								stTache.bAnnulee = faux
               								stTache.bTermine = vrai
               								stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               							CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "C"
               								stTache.bDemarree = Vrai
               								stTache.bAnnulee = Faux	
               								stTache.nNumSprintFin = 0
               								stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               							cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A"
               								stTache.bAnnulee = vrai
               								stTache.bDemarree = faux
               								stTache.nNumSprintFin = 0
               								stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               							AUTRE CAS
               								stTache.bAnnulee = Faux
               								stTache.bDemarree = Faux
               								stTache.nNumSprintFin = 0
               								stTache.nNumSprintDemarage = 0
               						FIN
               						Taches_Ajout(stTache)
               					fin
               //				FIN
               				
               			FIN
               			
               		SINON
               			Erreur(ErreurInfo(errComplet))
               		FIN
               	sinon
               		erreur(erreurinfo(errComplet))
               	FIN
               FIN
               
               xlsFerme(IdFichierXLS)
               
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Importer_PxF
          identifier : 0x2d70c6712140bb2e
          internal_properties : BwAAAAcAAAAF7yoGFGzoSfPl6jXOYMVPTrxq+Qp1i2hiaMWkknu14FhkRXvOvxwvijyAAV74nX8SCv26kk80n+wO7OoFlHcYRBKdRll8tzIIOn6ePZeMozZwoFcKiNrCRsm9WR/kzsryn0rTTo6tNnBczvGPjdMYiBxXEqhE0lUcDLJPkYOXE2ZXjnlt2ffBFZuuAJgGWJA8t9q9yJWtsFiR0kDAq/O7EAP4FviUS3whQWjZ1q8onQnOiJkQinwMO4lw6ADE/gun5nvnD+unEvpUh8BG9BgYJ0bhkzalFHDH3ZgUJYc7/4YWBdn9x3ZemY0bSE3Dbazl0espT7Rbj3W4ULLI1UEVObv4X+paaDk7iNNTrdbO3mgNNo0DQfbPU10SgDxoaT0UgxGKb4EK5hpELzs2tNrGH1/WhJ/E8MJLOyiEhQPl9nuE626dz36LOxVpOSFDhePMYj13kHe4FcxoOGbgX388lVaWHG275dhrDS8Djf+SUD1WOsfCX4iDKimPXFu3YZQ4/NL4cQLvHYEGaWgkF5Q1pWnMjidYxOl8DrXUBPlLhbRD6KRYgUT75DLOkNKVUtcQElrJcOhnQWsxsMs8nhL/0C7a/4qVcpQqy4vKf3iJetVcC4HAu17CcvuEHaQTjGfNWvSZcgFu3xRUZ+Ge5GNeLDXCFJnAIbBT5GAVGoSH0BMLVU2IBJzn1VPpzGbHCB+MvLGmcWSHWoZ0kB8EKG6FB6FN3380E+BGKiGyZ4vaqvietkMwj/A6lo7NfDlCOK8UyzaEhW6psanhfqoi53Xtipzs9GL1Qp1xH+ApAgThJWljHrTCadItpfLJYaXoUg==
          properties :
           x : 572
           y : 212
           width : 202
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               IdFichierXLS est un xlsDocument
               Xlsnbligne_ est un entier
               i est un entier
               sFichier est une chaîne
               
               nPremiereligne est un entier = 2
               
               //Déclaration VAriables
               nIdUS est un entier
               //nIdProjet est un entier
               stTache est une STR_Tache
               stUS est une STR_UserStorie
               
               nCol_codeUS est un entier = 1
               nCol_codeTache est un entier = 1
               nCol_numSprint est un entier = 7
               nCol_Poids est un entier = 8
               nCol_fin est un entier = 9
               nCol_Role est un entier = 2
               nCol_nom est un entier = 3
               nCol_Besoin est un entier = 3
               nCol_AfinDe est un entier = 4
               //nCol_commentaire est un entier = 17
               
               
               oPrj est un ClProjet <- oProjetDeNom("Paiement 3/4 fois")
               
               //HLitRecherche(Scr_Projet,Nom,"Paiement 3/4 fois")
               //si htrouve(Scr_Projet)
               //	nIdProjet = Scr_Projet.IDScr_Projet
               //sinon
               //	HRAZ(Scr_Projet)
               //	//Scr_Projet.IDSrc_Usr = 1
               //	Scr_Projet.Nom = "Paiement 3/4 fois"
               //	Si pas Hajoute(Scr_Projet) alors
               //		info("erreur dans l'ajout du projet Paiement 3/4 fois", ErreurInfo())
               //	FIN
               //	nIdProjet = Scr_Projet.IDScr_Projet //On récupère son ID
               //fin
               nNumeroOrdre est une entier = 0
               // Ouvre le sélecteur de fichiers
               
               
               sFichier = Dupplication_Fichier_Avant_Import("\\prod-vm-file01\UnionMat\Service informatique\Procedures\Dev_logiciel\Archive\paiement 3x et 4x\User stories Paiement 3x et 4x V2.xlsx")
               
               SI sFichier <> "" ALORS
               	
               	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               	
               	SI ErreurDétectée = Faux ALORS 
               		
               		SI xlsFeuilleEnCours(IdFichierXLS, 1) ALORS	
               			
               			Xlsnbligne_ =xlsNbLigne(IdFichierXLS,Vrai)
               			
               			POUR i = nPremiereligne _À_ Xlsnbligne_
               				
               				//ON ne prend que les lignes qui ont un code et une description.
               				SI xlsDonnée(IdFichierXLS,i,nCol_codeUS) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_Besoin) <> "" ALORS
               					
               					//Si le champ role est vide => c'est une tache
               					Si xlsDonnée(IdFichierXLS,i,nCol_Role) <> "" alors
               //						//On saute les US annulées
               						SI pas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A" ALORS
               							VariableRAZ(stUS)
               							stUS.sCodeUserStorie = xlsDonnée(IdFichierXLS,i,nCol_codeUS)
               							stUS.sEnTantQue = xlsDonnée(IdFichierXLS,i,nCol_Role)
               							stUS.sBesoinUserStorie = xlsDonnée(IdFichierXLS,i,nCol_Besoin)
               							stUS.sAfindeUserStorie = xlsDonnée(IdFichierXLS,i,nCol_AfinDe)
               							stUS.nIDProjet = oPrj.ZF_Get_IdUnique()
               							stUS.nIDResponsable = oPrj.p_oUsr_ChefProjet.ZF_Get_IdUnique()
               							
               							Si xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T" alors
               								stUS.bAtester = vrai
               								stUS.eEtatUserStorie = ClUserStory.ECompteNbUS.En_test_fonctionnel
               							FIN
               							
               							nIdUS = User_Story_ajout(stUS)
               							
               							nNumeroOrdre = 0
               						fin
               						
               					sinon //sinon c'est une tache
               						
               						si PAS (xlsDonnée(IdFichierXLS,i,nCol_nom) = SansEspace("") ET xlsDonnée(IdFichierXLS,i,nCol_numSprint) = SansEspace("")) alors
               							
               							stTache.sCodeTache = xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               							stTache.nNumSprintCreation = xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               							stTache.nNumSprintRealisation = stTache.nNumSprintCreation
               							stTache.nNumSprintPrevision = stTache.nNumSprintCreation
               							//stTache.nNumSprintDemarage = stTache.nNumSprintCreation
               							stTache.nIDUserStorie = nIdUS
               							stTache.sDescription = xlsDonnée(IdFichierXLS,i,nCol_nom)
               							
               							//affectation du num d'ordre
               							nNumeroOrdre++
               							stTache.nOrdre = nNumeroOrdre
               							
               							SI SansEspace(xlsDonnée(IdFichierXLS,i,nCol_Poids)) = "" _OU_ SansEspace(xlsDonnée(IdFichierXLS,i,nCol_numSprint)) = "" ALORS
               								Trace(Scr_Projet.Nom,TAB,stTache.sCodeTache,TAB,stTache.sDescription,TAB,"Poids : " + xlsDonnée(IdFichierXLS,i,nCol_Poids),TAB,"Sprint : " + xlsDonnée(IdFichierXLS,i,nCol_numSprint))						
               							FIN
               							
               							//Si le poids n'est pas indiqué --> null
               							Si xlsDonnée(IdFichierXLS,i,nCol_Poids) <> "" alors
               								stTache.nPoids = xlsDonnée(IdFichierXLS,i,nCol_Poids)
               								stTache.nPoids_Prevision = stTache.nPoids
               							sinon
               								stTache.nPoids = null
               								stTache.nPoids_Prevision = null
               							fin
               							
               							Selon Vrai
               								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "X" 
               									stTache.bDemarree = vrai
               									stTache.bAnnulee = faux
               									stTache.bTermine = Vrai
               									stTache.nNumSprintFin = stTache.nNumSprintCreation 
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T" 
               									stTache.bDemarree = vrai
               									stTache.bAnnulee = faux
               									stTache.bTermine = Vrai
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "C"
               									stTache.bDemarree = Vrai
               									stTache.bAnnulee = Faux	
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A"
               									stTache.bAnnulee = vrai
               									stTache.bDemarree = faux
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								AUTRE CAS
               									stTache.bAnnulee = Faux
               									stTache.bDemarree = Faux
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = 0
               							FIN
               							Taches_Ajout(stTache)
               						fin
               					FIN
               				fin
               			FIN
               			
               		SINON
               			Erreur(ErreurInfo(errComplet))
               		FIN
               	sinon
               		erreur(erreurinfo(errComplet))
               	FIN
               FIN
               
               xlsferme(IdFichierXLS)
               
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Importer_Automat
          identifier : 0x2d971f5200b7ad88
          internal_properties : BwAAAAcAAAApf87Rd5rxnDnvABOpaCiV5SbGLGtBAOWr5HxftQCj03zfDBU8dCh5CCcu+ncTr+SGH5CaMBoWyRBn3o9CbZEr4sWzyhRa2YX4TVEh8Up2ac1ZkLpKDFgzbSY4Nw9ihISZDC3PJtG4lh5Gj7oQ4KIqONvjAsoaCcDNo9JxcQaO7FoVGZFW1DayvxVpDU1n2Ti5e+lqlweooCM3+nndIAk3onzNmCRE8KTWdKzLvIEyOXGdeglhOFZMjvql6DZe3au2NgI2EwyjyGD52ShkhwT6ZHPHvwRtYvS5X1u4oWawqYolxragUffL9o8/vd3pyqb8ClkMFy2SVsSNhLfn4leufsASdOkrGZey+PprSmaVuuFxhPCzldwjEUiFJn7qrXDV0xw3wKvq5sRyCk9sJUNKiZ3/4TRCl0Df0ShogMJoMDYWh8M57qsJiYy1gxjufCMLantanO41KWT/6pohiFCUcGAiT3tQiPAXYD9HEDY7RDxOvAKeqOMNxAgpriR4jCrd1EzfY41uR8tdfUzRwM15al+8uwETbUPu50MUj9TcoSf7nsvqPBF1Dls0Dk+Sgy9N4OKSoJP4eSeIVD9NM1fftyhemuRGH04MeudM6LX4ToT4aWI8OsFyrs4acdGM5ZGYZLzERhCdHRrdlUEbGdaKzbXI7TrKOyHsLMsw3IiPFatMlC9FbAjGwEECjXhXOqS0FZjSolh/J4d2+1pwjjCcI0KcIyh23X9SucUwsSQLBGW9ymZHnW6LswDilzjdlT/GG9cG1CGZyUxxC/Y7Yl6QUJAi+6ZPqK3uTFBXmeggyo3ej7ViPhNA70iwwnqzYKzyVoSz
          properties :
           x : 572
           y : 241
           width : 202
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               IdFichierXLS est un xlsDocument
               Xlsnbligne_ est un entier
               i est un entier
               sFichier est une chaîne
               
               nPremiereligne est un entier = 2
               
               //Déclaration VAriables
               nIdUS est un entier
               //nIdProjet est un entier
               stTache est une STR_Tache
               stUS est une STR_UserStorie
               
               nCol_codeUS est un entier = 1
               nCol_codeTache est un entier = 1
               nCol_numSprint est un entier = 7
               nCol_Poids est un entier = 8
               nCol_fin est un entier = 9
               nCol_Role est un entier = 2
               nCol_nom est un entier = 3
               nCol_Besoin est un entier = 3
               nCol_Afinde est un entier = 4
               //nCol_commentaire est un entier = 17
               
               
               
               oPrj est un ClProjet <- oProjetDeNom("AutoMat")
               
               
               
               //HLitRecherche(Scr_Projet,Nom,"AutoMat",hIdentique+hLimiteParcours)
               //si htrouve(Scr_Projet)
               //	nIdProjet = Scr_Projet.IDScr_Projet
               //sinon
               //	HRAZ(Scr_Projet)
               //	Scr_Projet.Nom = "AutoMat"
               //	Si pas Hajoute(Scr_Projet) alors
               //		info("erreur dans l'ajout du projet AutoMat", ErreurInfo())
               //	FIN
               //	nIdProjet = Scr_Projet.IDScr_Projet //On récupère son ID
               //fin
               nNumeroOrdre est une entier = 0
               // Ouvre le sélecteur de fichiers
               
               
               sFichier = Dupplication_Fichier_Avant_Import("\\prod-vm-file01\UnionMat\Service informatique\Procedures\Dev_logiciel\AutoMat\User stories.xlsx")
               
               SI sFichier <> "" ALORS
               	
               	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               	
               	SI ErreurDétectée = Faux ALORS 
               		
               		SI xlsFeuilleEnCours(IdFichierXLS, 1) ALORS	
               			
               			Xlsnbligne_ =xlsNbLigne(IdFichierXLS,Vrai)
               			
               			POUR i = nPremiereligne _À_ Xlsnbligne_
               				
               				//ON ne prend que les lignes qui ont un code et une description.
               				SI xlsDonnée(IdFichierXLS,i,nCol_codeUS) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_Besoin) <> "" ALORS
               					
               					//Si le champ role est vide => c'est une tache
               					Si xlsDonnée(IdFichierXLS,i,nCol_Role) <> "" alors
               //						si xlsDonnée(IdFichierXLS,i,nCol_codeUS) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_Besoin) <> "" alors
               							VariableRAZ(stUS)
               							stUS.sCodeUserStorie = xlsDonnée(IdFichierXLS,i,nCol_codeUS)
               							stUS.sEnTantQue = xlsDonnée(IdFichierXLS,i,nCol_Role)
               							stUS.sBesoinUserStorie = xlsDonnée(IdFichierXLS,i,nCol_Besoin)
               							stUS.sAfindeUserStorie = xlsDonnée(IdFichierXLS,i,nCol_Afinde)
               							stUS.nIDProjet = oPrj.ZF_Get_IdUnique()
               							stUS.nIDResponsable = oPrj.p_oUsr_ChefProjet.ZF_Get_IdUnique()
               							
               							Si xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T" alors
               								stUS.bAtester = vrai
               								stUS.eEtatUserStorie = ClUserStory.ECompteNbUS.En_test_fonctionnel
               							FIN
               							
               							nIdUS = User_Story_ajout(stUS)
               							
               							nNumeroOrdre = 0
               //						fin
               						
               					sinon //sinon c'est une tache
               						
               						si PAS (xlsDonnée(IdFichierXLS,i,nCol_nom) = SansEspace("") ET xlsDonnée(IdFichierXLS,i,nCol_numSprint) = SansEspace("")) alors
               							VariableRAZ(stTache)
               							stTache.sCodeTache = xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               							stTache.nNumSprintCreation = xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               							stTache.nNumSprintRealisation = stTache.nNumSprintCreation
               							stTache.nNumSprintPrevision = stTache.nNumSprintCreation
               							//stTache.nNumSprintDemarage = stTache.nNumSprintCreation
               							stTache.nIDUserStorie = nIdUS
               							stTache.sDescription = xlsDonnée(IdFichierXLS,i,nCol_nom)
               							
               							//affectation du num d'ordre
               							nNumeroOrdre++
               							stTache.nOrdre = nNumeroOrdre
               							
               							SI SansEspace(xlsDonnée(IdFichierXLS,i,nCol_Poids)) = "" _OU_ SansEspace(xlsDonnée(IdFichierXLS,i,nCol_numSprint)) = "" ALORS
               								Trace(Scr_Projet.Nom,TAB,stTache.sCodeTache,TAB,stTache.sDescription,TAB,"Poids : " + xlsDonnée(IdFichierXLS,i,nCol_Poids),TAB,"Sprint : " + xlsDonnée(IdFichierXLS,i,nCol_numSprint))						
               							FIN
               							
               							//Si le poids n'est pas indiqué --> null
               							Si xlsDonnée(IdFichierXLS,i,nCol_Poids) <> "" alors
               								stTache.nPoids = xlsDonnée(IdFichierXLS,i,nCol_Poids)
               								stTache.nPoids_Prevision = stTache.nPoids
               							sinon
               								stTache.nPoids = null
               								stTache.nPoids_Prevision = null
               							fin
               							
               							Selon Vrai
               								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "x"
               									stTache.bDemarree = vrai
               									stTache.bAnnulee = faux
               									stTache.bTermine = vrai 
               									stTache.nNumSprintFin = stTache.nNumSprintCreation 
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T"
               									stTache.bDemarree = vrai
               									stTache.bAnnulee = faux
               									stTache.bTermine = vrai 
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "C"
               									stTache.bDemarree = Vrai
               									stTache.bAnnulee = Faux	
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A"
               									stTache.bAnnulee = vrai
               									stTache.bDemarree = faux
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								AUTRE CAS
               									stTache.bAnnulee = Faux
               									stTache.bDemarree = Faux
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = 0
               							FIN
               							Taches_Ajout(stTache)
               						fin
               					FIN
               				fin
               			FIN
               			
               		SINON
               			Erreur(ErreurInfo(errComplet))
               		FIN
               	sinon
               		erreur(erreurinfo(errComplet))
               	FIN
               	
               	xlsferme(IdFichierXLS)
               	
               FIN
               
               
               
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Importer_DEB_LAD_RAD
          identifier : 0x2e3942af2f182c44
          internal_properties : BwAAAAcAAADV9H2Biox0WxNbMwGz6DUrDoPBEG6djWKH6L2nLoAqVy9AR6lp8l0izmE1IO9fOmaBmuM42/jBysI9C4MUYYxPRYxcdk1MA8V0ByyherBcJK+KgMPXFyufLEA6J7xfL+en7jGHnKZvp8xStom4Wsh9wYR2rWjm9JDzF+ySunn7X9IL4Op8BKppYWAosPjjEZ1+yBrhl9Kanb5a0M7/Nxt7IQnMzJKu0QNMMGbcOOZXb2/3IkfL3iW2yA+lSl5t+vhA0gRtI6+bL0Fp9n5YxTFSWrFAocpwG8x31fdCg6IKsLjXZy/A58Ieh/gH6sr+4tZfzCWvuWSzfLfPg6YuK+BsmVtFCJDyZqcRC0nChBfN/d2gMP8RkpyPbLo/oq6oGKm7FXjfVZgIBRnV6vlg8TF9bTNcrKbq31/ssL4w3cHyCaeiic+kdlo0qw2xgcHJfNjiCl26mfQQOErCoigaq5z7ERjQv4LWP3Nnq30HAYlvW+OoRFrf/DxuCOtxRAMlmnHQEiD7zp+tgoX0F/LWf/2+h4nUZdx1mhyEYNdaem2efNC7WJWHWiqOxJRQJBYvPwac8HASnxc7SPM9rJV+ZvtOVrKeLBmUeHtKRTUm037i199mFaZHLKzlzgPcj66DLT6fSuwOUQjESHKecaH+ylzXEMEubbC3J/9N9CCJzgJE9fsdJ56T2Wxoxf3TkrxXieKmZKldggUn1bYuHFP4ivNOr9WhXE6VvydNsu/WS43qufjib13NoPuxXAPad/ciKY6ndjTjvkPTDnRgTmJ1xbirukXbHPUzmMc1ZixRqWdj7m2RS9gldsTQD+Yh2iQOvbRmuN5ga4fId10=
          properties :
           x : 572
           y : 270
           width : 202
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               IdFichierXLS est un xlsDocument
               Xlsnbligne_ est un entier
               i est un entier
               sFichier est une chaîne
               
               nPremiereligne est un entier = 2
               
               //Declatration VAriables
               nIdUS est un entier
               //nIdProjet est un entier
               stTache est une STR_Tache
               stUS est une STR_UserStorie
               
               nCol_codeUS est un entier = 1
               nCol_codeTache est un entier = 1
               nCol_numSprint est un entier = 7
               nCol_Poids est un entier = 8
               nCol_fin est un entier = 9
               nCol_Role est un entier = 2
               nCol_nom est un entier = 3
               nCol_Besoin est un entier = 3
               nCol_AfinDe est un entier = 4
               nCol_commentaire est un entier = 5
               
               oPrj est un ClProjet <- oProjetDeNom("DEB / LAD / RAD")
               
               //HLitRecherche(Scr_Projet,Nom,"DEB / LAD / RAD")
               //si htrouve(Scr_Projet)
               //	nIdProjet = Scr_Projet.IDScr_Projet
               //sinon
               //	HRAZ(Scr_Projet)
               //	//Scr_Projet.IDSrc_Usr = 1
               //	Scr_Projet.Nom = "DEB / LAD / RAD"
               //	Si pas Hajoute(Scr_Projet) alors
               //		info("erreur dans l'ajout du projet DEB / LAD / RAD", ErreurInfo())
               //	FIN
               //	nIdProjet = Scr_Projet.IDScr_Projet //On recupère son ID
               //fin
               nNumeroOrdre est une entier = 0
               // Ouvre le sélecteur de fichiers
               
               
               sFichier = Dupplication_Fichier_Avant_Import("\\prod-vm-file01\UnionMat\Service informatique\Procedures\Dev_logiciel\Archive\DEB 2020\User stories Paiement DEB LAD RAD.xlsx")
               
               SI sFichier <> "" ALORS
               	
               	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               	
               	SI ErreurDétectée = Faux ALORS 
               		
               		SI xlsFeuilleEnCours(IdFichierXLS, 1) ALORS	
               			
               			Xlsnbligne_ =xlsNbLigne(IdFichierXLS,Vrai)
               			
               			POUR i = nPremiereligne _À_ Xlsnbligne_
               				
               				//ON ne prend que les lignes qui ont un code et une description.
               				SI xlsDonnée(IdFichierXLS,i,nCol_codeUS) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_Besoin) <> "" ALORS
               					
               					//Si le champ role n'est pas vide => c'est une US
               					Si xlsDonnée(IdFichierXLS,i,nCol_Role) <> "" alors
               //						si xlsDonnée(IdFichierXLS,i,nCol_codeUS) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_Besoin) <> "" alors
               							VariableRAZ(stUS)
               							stUS.sCodeUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_codeUS)
               							stUS.sEnTantQue			= xlsDonnée(IdFichierXLS,i,nCol_Role)
               							stUS.sBesoinUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_Besoin)
               							stUS.sAfindeUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_AfinDe)
               							stUS.sCmtrTest			= xlsDonnée(IdFichierXLS,i,nCol_commentaire)
               							stUS.nIDProjet			= oPrj.ZF_Get_IdUnique()
               							stUS.nIDResponsable		= oPrj.p_oUsr_ChefProjet.ZF_Get_IdUnique()
               							
               							Si xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T" alors
               								stUS.bAtester = vrai
               								stUS.eEtatUserStorie = ClUserStory.ECompteNbUS.En_test_fonctionnel
               							FIN
               							
               							nIdUS = User_Story_ajout(stUS)
               							
               							nNumeroOrdre = 0
               //						fin
               						
               					sinon //sinon c'est une tache
               						
               						si PAS (xlsDonnée(IdFichierXLS,i,nCol_nom) = SansEspace("") ET xlsDonnée(IdFichierXLS,i,nCol_numSprint) = SansEspace("")) alors
               							VariableRAZ(stTache)
               							stTache.sCodeTache				= xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               							stTache.nNumSprintCreation		= xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               							stTache.nNumSprintRealisation	= stTache.nNumSprintCreation
               							stTache.nNumSprintPrevision		= stTache.nNumSprintCreation
               							stTache.nIDUserStorie			= nIdUS
               							stTache.sDescription			= xlsDonnée(IdFichierXLS,i,nCol_nom)
               							stTache.sCommentaire			= xlsDonnée(IdFichierXLS,i,nCol_commentaire)
               							
               							//affectation du num d'ordre
               							nNumeroOrdre++
               							stTache.nOrdre = nNumeroOrdre
               							
               							SI SansEspace(xlsDonnée(IdFichierXLS,i,nCol_Poids)) = "" _OU_ SansEspace(xlsDonnée(IdFichierXLS,i,nCol_numSprint)) = "" ALORS
               								Trace(Scr_Projet.Nom,TAB,stTache.sCodeTache,TAB,stTache.sDescription,TAB,"Poids : " + xlsDonnée(IdFichierXLS,i,nCol_Poids),TAB,"Sprint : " + xlsDonnée(IdFichierXLS,i,nCol_numSprint))						
               							FIN
               							
               							//Si le poids n'est pas indiqué --> null
               							Si xlsDonnée(IdFichierXLS,i,nCol_Poids) <> "" alors
               								stTache.nPoids = xlsDonnée(IdFichierXLS,i,nCol_Poids)
               								stTache.nPoids_Prevision = stTache.nPoids
               							sinon
               								stTache.nPoids = null
               								stTache.nPoids_Prevision = null
               							fin
               							
               							Selon Vrai
               								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "x"
               									stTache.bDemarree = vrai
               									stTache.bAnnulee = faux
               									stTache.bTermine = vrai
               									stTache.nNumSprintFin = stTache.nNumSprintCreation
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T" 
               									stTache.bDemarree = vrai
               									stTache.bAnnulee = faux
               									stTache.bTermine = vrai
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "C"
               									stTache.bDemarree = Vrai
               									stTache.bAnnulee = Faux	
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A"
               									stTache.bAnnulee = vrai
               									stTache.bDemarree = faux
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								AUTRE CAS
               									stTache.bAnnulee = Faux
               									stTache.bDemarree = Faux
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = 0
               							FIN
               							Taches_Ajout(stTache)
               						fin
               					FIN
               				fin
               			FIN
               			
               		SINON
               			Erreur(ErreurInfo(errComplet))
               		FIN
               	sinon
               		erreur(erreurinfo(errComplet))
               	FIN
               	
               	xlsferme(IdFichierXLS)
               	
               FIN
               
               Import_Process(oPrj.ZF_Get_IdUnique(), sFichier)
               
               
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Importer_ControleHebdoBL
          identifier : 0x2e9552f730806e1e
          internal_properties : BwAAAAcAAABXzVQ2W/AaH0UMywRWApBnuN7oMWCbqTFVkE/SatKQn3P0HaNtqYx0cdXhPGZ1ucZSTOEgnjrTNF2RbzzupC8wikfFdYsBBnIWoy+zPSajTECDpaEDVdaGBasgRz4yupL5Uil6EKHCWE7OoZBAmii1yAhly0GiUZlLn8YeNJa/Ba3nu5jNjgQbo33I3GncQPWseMWkNVjPUTYpKRCNxQpS/syAgJrzU60+jeauvdmmkmBAf8IzvWp/eGIY2BtOGKJRs8wSpt5ItdKgAlYrmeT04xuoB8JEt+5TEsVzIiar3ojs4ZDa/QF8wtqxDfi/PrnP0gsQrt9KDWyBiPuN9N/VKyn+zkky5w6woX3SYEh5aR1I1XCrRIJDK+zDT+3XxEpQf5mX+xyMfXc03u1PkoNBNk0VNLn7SrQPPNzmhQJxvXJAZ+3sbOmjlherkoPkbBdlaJRsbegxufegwAV28t5yzJj3R4S8JODaDY8MpxDx6shuK0Kh3hMh38EH6dkakNJnEhm1Yp1mq7L63dmOlB3N+psFiW6NEYtnHiVNpFim85Mjr1mBhIOL576K+5zwMaWtJEt811Wu26qJiNqUVcOnF3Q5VIeoV/LtSelLV7H6kMbepnIlYOPoBx3GpqwSo8euxomAkSh/U3kmaZg8aRh8W1dbEaYf1piU3jqQZGM+YpJ/qNbNlXdL5E8lYRzuc1fj+FRv8hkqtHFGb2XhaJYCNcCNOxOw591/SwDKvX6aORoKdFmYSZ8j0YiXJnAGODjrw1pidR9BNOhDkEbUV+nhcALsaBcunFi0RVx0Gokl/Hq8xtAq7cHN+7nIfCxSRLbx9B9Ss/InukmVNdPIW8zURjxweKYx
          properties :
           x : 572
           y : 299
           width : 202
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               IdFichierXLS est un xlsDocument
               Xlsnbligne_ est un entier
               i est un entier
               sFichier est une chaîne
               
               nPremiereligne est un entier = 2
               
               //Declatration VAriables
               nIdUS est un entier
               //nIdProjet est un entier
               stTache est une STR_Tache
               stUS est une STR_UserStorie
               
               nCol_codeUS est un entier = 1
               nCol_codeTache est un entier = 1
               nCol_numSprint est un entier = 7
               nCol_Poids est un entier = 8
               nCol_fin est un entier = 9
               nCol_Role est un entier = 2
               nCol_nom est un entier = 3
               nCol_Besoin est un entier = 3
               nCol_AfinDe est un entier = 4
               //nCol_commentaire est un entier = 17
               
               
               
               oPrj est un ClProjet <- oProjetDeNom("Controle hebdo BL")
               
               
               //HLitRecherche(Scr_Projet,Nom,"Controle hebdo BL")
               //si htrouve(Scr_Projet)
               //	nIdProjet = Scr_Projet.IDScr_Projet
               //sinon
               //	HRAZ(Scr_Projet)
               //	//Scr_Projet.IDSrc_Usr = 1
               //	Scr_Projet.Nom = "Controle hebdo BL"
               //	Si pas Hajoute(Scr_Projet) alors
               //		info("erreur dans l'ajout du projet Controle hebdo BL", ErreurInfo())
               //	FIN
               //	nIdProjet = Scr_Projet.IDScr_Projet //On recupère son ID
               //fin
               nNumeroOrdre est une entier = 0
               // Ouvre le sélecteur de fichiers
               sFichier = Dupplication_Fichier_Avant_Import("\\prod-vm-file01\UnionMat\Service informatique\Procedures\Dev_logiciel\Archive\Contrôle hebdomadaire des bons de livraison\User stories Controle Marge hebdo.xlsx")
               
               SI sFichier <> "" ALORS
               	
               	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               	
               	SI ErreurDétectée = Faux ALORS 
               		
               		SI xlsFeuilleEnCours(IdFichierXLS, 1) ALORS	
               			
               			Xlsnbligne_ =xlsNbLigne(IdFichierXLS,Vrai)
               			
               			POUR i = nPremiereligne _À_ Xlsnbligne_
               				
               				//ON ne prend que les lignes qui ont un code et une description.
               				SI xlsDonnée(IdFichierXLS,i,nCol_codeUS) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_Besoin) <> "" ALORS
               					
               					//Si le champ role n'est pas vide => c'est une US
               					Si xlsDonnée(IdFichierXLS,i,nCol_Role) <> "" alors
               //						si xlsDonnée(IdFichierXLS,i,nCol_codeUS) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_Besoin) <> "" alors
               							VariableRAZ(stUS)
               							stUS.sCodeUserStorie = xlsDonnée(IdFichierXLS,i,nCol_codeUS)
               							stUS.sEnTantQue = xlsDonnée(IdFichierXLS,i,nCol_Role)
               							stUS.sBesoinUserStorie = xlsDonnée(IdFichierXLS,i,nCol_Besoin)
               							stUS.sAfindeUserStorie = xlsDonnée(IdFichierXLS,i,nCol_AfinDe)
               							stUS.nIDProjet = oPrj.ZF_Get_IdUnique()
               							stUS.nIDResponsable = oPrj.p_oUsr_ChefProjet.ZF_Get_IdUnique()
               							
               							Si xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T" alors
               								stUS.bAtester = vrai
               								stUS.eEtatUserStorie = ClUserStory.ECompteNbUS.En_test_fonctionnel
               							FIN
               							
               							nIdUS = User_Story_ajout(stUS)
               							
               							nNumeroOrdre = 0
               //						fin
               						
               					sinon //sinon c'est une tache
               						
               						si PAS (xlsDonnée(IdFichierXLS,i,nCol_nom) = SansEspace("") ET xlsDonnée(IdFichierXLS,i,nCol_numSprint) = SansEspace("")) alors
               							variableraz(stTache)
               							stTache.sCodeTache = xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               							stTache.nNumSprintCreation = xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               							stTache.nNumSprintRealisation = stTache.nNumSprintCreation
               							stTache.nNumSprintPrevision = stTache.nNumSprintCreation
               							//stTache.nNumSprintDemarage = stTache.nNumSprintCreation
               							stTache.nIDUserStorie = nIdUS
               							stTache.sDescription = xlsDonnée(IdFichierXLS,i,nCol_nom)
               							
               							//affectation du num d'ordre
               							nNumeroOrdre++
               							stTache.nOrdre = nNumeroOrdre
               							
               							SI SansEspace(xlsDonnée(IdFichierXLS,i,nCol_Poids)) = "" _OU_ SansEspace(xlsDonnée(IdFichierXLS,i,nCol_numSprint)) = "" ALORS
               								Trace(Scr_Projet.Nom,TAB,stTache.sCodeTache,TAB,stTache.sDescription,TAB,"Poids : " + xlsDonnée(IdFichierXLS,i,nCol_Poids),TAB,"Sprint : " + xlsDonnée(IdFichierXLS,i,nCol_numSprint))						
               							FIN
               							
               							//Si le poids n'est pas indiqué --> null
               							Si xlsDonnée(IdFichierXLS,i,nCol_Poids) <> "" alors
               								stTache.nPoids = xlsDonnée(IdFichierXLS,i,nCol_Poids)
               								stTache.nPoids_Prevision = stTache.nPoids
               							sinon
               								stTache.nPoids = null
               								stTache.nPoids_Prevision = null
               							fin
               							
               							Selon Vrai
               								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "x"
               									stTache.bDemarree = vrai
               									stTache.bAnnulee = faux
               									stTache.bTermine = vrai
               									stTache.nNumSprintFin = stTache.nNumSprintCreation 
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T"
               									stTache.bDemarree = vrai
               									stTache.bAnnulee = faux
               									stTache.bTermine = vrai 
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "C"
               									stTache.bDemarree = Vrai
               									stTache.bAnnulee = Faux	
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A"
               									stTache.bAnnulee = vrai
               									stTache.bDemarree = faux
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								AUTRE CAS
               									stTache.bAnnulee = Faux
               									stTache.bDemarree = Faux
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = 0
               							FIN
               							Taches_Ajout(stTache)
               						fin
               					FIN
               				fin
               			FIN
               			
               		SINON
               			Erreur(ErreurInfo(errComplet))
               		FIN
               	sinon
               		erreur(erreurinfo(errComplet))
               	FIN
               	
               	xlsferme(IdFichierXLS)
               	
               FIN
               
               
               
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Importer_BorneInfoPrix
          identifier : 0x2efc2e4d0136a3e0
          internal_properties : BwAAAAcAAABRPDv1rLZDENI5UqNEucqjJPNhyps9RqnGI/aYuSEA3XODkK5EjLbSnf+DLFxN6Pu52qGOritRptVXOQyUwqppb9f4IfVz6hAoKfunVIb/UfnE5vZqUXL0GjA5DojT3Cw/Kfy/h23HL4iLpiCBETKrX+lergUjcoD2czDugMysYcem6k/tnIoYcaP904rvJdjc+CXM6MdPnqHMw1qNHoq/bwKyyGKuW46nUysnWh2BYf0Dvl3vmQCQggXC+rRbkMHC4dVCQ+wfUzHjosvtm138ksKp+OQOz6SoP98fx7I3JGNVkWzzEH4IbfmPYu2tX20FR8kBta6wwKVPJtPeibWAEHAZm/md1+5dmjBgSpdOHVehQMMoZUikhZLB8cvnvtuHmovkBs7Sg+pxM6nCpKChRsx9Q0e7XtrQ+YIC41Ns6I33J2WTYFlzcmOVy4KoHEcgLcGGgjQrc0/YYjrlsPwE7dsig/eACnYSBanDfH4jUE29gOD89vPRz3kZsijgdD4yjy6na1Ho7Qjg5coTMq9j01rUjRFnbYcnlr9IvxhmMwJs0FFUdv2lC/qUXps6FYniU4ROGL9gPTzbHCsf5btX6NMoohZ4gdxDZ/E8xnv8lsFPp2762EP43/VoG+GAIw+1U/TIatANsdvgXaNhB5aGhLJOB2OtcopemBbTu0X6njFsrcj43dNnAvWt2q2mxzPgc9HtfWnC/M1qTHNJ+QPtv5RJhqOnUPXzD1iQfdAtc7MPmWd3AUFMyx3Esv+kmp5iP6c2DB5LcCbh4EeS+JaUkk012AhBUd4G1yXe89lnfhRPn7uGrG8f0sip7nq5UnxxDGX4P4mrrAYtixQ=
          properties :
           x : 572
           y : 328
           width : 202
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               IdFichierXLS est un xlsDocument
               Xlsnbligne_ est un entier
               i est un entier
               sFichier est une chaîne
               
               nPremiereligne est un entier = 2
               
               //Declatration VAriables
               nIdUS est un entier
               //nIdProjet est un entier
               stTache est une STR_Tache
               stUS est une STR_UserStorie
               
               nCol_codeUS est un entier = 1
               nCol_codeTache est un entier = 1
               nCol_numSprint est un entier = 7
               nCol_Poids est un entier = 8
               nCol_fin est un entier = 9
               nCol_Role est un entier = 2
               nCol_nom est un entier = 3
               nCol_Besoin est un entier = 3
               nCol_AfinDe est un entier = 4
               //nCol_commentaire est un entier = 17
               
               oPrj est un ClProjet <- oProjetDeNom("Borne info prix")
               
               //HLitRecherche(Scr_Projet,Nom,"Borne info prix")
               //si htrouve(Scr_Projet)
               //	nIdProjet = Scr_Projet.IDScr_Projet
               //sinon
               //	HRAZ(Scr_Projet)
               //	//Scr_Projet.IDSrc_Usr = 1
               //	Scr_Projet.Nom = "Borne info prix"
               //	Si pas Hajoute(Scr_Projet) alors
               //		info("erreur dans l'ajout du projet Borne info prix", ErreurInfo())
               //	FIN
               //	nIdProjet = Scr_Projet.IDScr_Projet //On recupère son ID
               //fin
               nNumeroOrdre est une entier = 0
               // Ouvre le sélecteur de fichiers
               sFichier = Dupplication_Fichier_Avant_Import("\\prod-vm-file01\UnionMat\Service informatique\Procedures\Dev_logiciel\Borne Info et prix - Android\User stories BorneInfoPrix.xlsx")
               
               SI sFichier <> "" ALORS
               	
               	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               	
               	SI ErreurDétectée = Faux ALORS 
               		
               		SI xlsFeuilleEnCours(IdFichierXLS, 1) ALORS	
               			
               			Xlsnbligne_ =xlsNbLigne(IdFichierXLS,Vrai)
               			
               			POUR i = nPremiereligne _À_ Xlsnbligne_
               				
               				//ON ne prend que les lignes qui ont un code et une description.
               				SI xlsDonnée(IdFichierXLS,i,nCol_codeUS) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_Besoin) <> "" ALORS
               					
               					//Si le champ role n'est pas vide => c'est une US
               					Si xlsDonnée(IdFichierXLS,i,nCol_Role) <> "" alors
               //						si xlsDonnée(IdFichierXLS,i,nCol_codeUS) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_Besoin) <> "" alors
               							VariableRAZ(stUS)
               							stUS.sCodeUserStorie = xlsDonnée(IdFichierXLS,i,nCol_codeUS)
               							stUS.sEnTantQue = xlsDonnée(IdFichierXLS,i,nCol_Role)
               							stUS.sBesoinUserStorie = xlsDonnée(IdFichierXLS,i,nCol_Besoin)
               							stUS.sAfindeUserStorie = xlsDonnée(IdFichierXLS,i,nCol_AfinDe)
               							stUS.nIDProjet = oPrj.ZF_Get_IdUnique()
               							stUS.nIDResponsable = oPrj.p_oUsr_ChefProjet.ZF_Get_IdUnique()
               							
               							Si xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T" alors
               								stUS.bAtester = vrai
               								stUS.eEtatUserStorie = ClUserStory.ECompteNbUS.En_test_fonctionnel
               							FIN
               							
               							nIdUS = User_Story_ajout(stUS)
               							
               							nNumeroOrdre = 0
               //						fin
               						
               					sinon //sinon c'est une tache
               						
               						si PAS (xlsDonnée(IdFichierXLS,i,nCol_nom) = SansEspace("") ET xlsDonnée(IdFichierXLS,i,nCol_numSprint) = SansEspace("")) alors
               							VariableRAZ(stTache)
               							stTache.sCodeTache = xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               							stTache.nNumSprintCreation = xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               							stTache.nNumSprintRealisation = stTache.nNumSprintCreation
               							stTache.nNumSprintPrevision = stTache.nNumSprintCreation
               							//stTache.nNumSprintDemarage = stTache.nNumSprintCreation
               							stTache.nIDUserStorie = nIdUS
               							stTache.sDescription = xlsDonnée(IdFichierXLS,i,nCol_nom)
               							
               							//affectation du num d'ordre
               							nNumeroOrdre++
               							stTache.nOrdre = nNumeroOrdre
               							
               							SI SansEspace(xlsDonnée(IdFichierXLS,i,nCol_Poids)) = "" _OU_ SansEspace(xlsDonnée(IdFichierXLS,i,nCol_numSprint)) = "" ALORS
               								Trace(Scr_Projet.Nom,TAB,stTache.sCodeTache,TAB,stTache.sDescription,TAB,"Poids : " + xlsDonnée(IdFichierXLS,i,nCol_Poids),TAB,"Sprint : " + xlsDonnée(IdFichierXLS,i,nCol_numSprint))						
               							FIN
               							
               							//Si le poids n'est pas indiqué --> null
               							Si xlsDonnée(IdFichierXLS,i,nCol_Poids) <> "" alors
               								stTache.nPoids = xlsDonnée(IdFichierXLS,i,nCol_Poids)
               								stTache.nPoids_Prevision = stTache.nPoids
               							sinon
               								stTache.nPoids = null
               								stTache.nPoids_Prevision = null
               							fin
               							
               							Selon Vrai
               								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "x"
               									stTache.bDemarree = vrai
               									stTache.bAnnulee = faux
               									stTache.bTermine = vrai
               									stTache.nNumSprintFin = stTache.nNumSprintCreation 
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T"
               									stTache.bDemarree = vrai
               									stTache.bAnnulee = faux
               									stTache.bTermine = vrai 
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "C"
               									stTache.bDemarree = Vrai
               									stTache.bAnnulee = Faux	
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A"
               									stTache.bAnnulee = vrai
               									stTache.bDemarree = faux
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               								AUTRE CAS
               									stTache.bAnnulee = Faux
               									stTache.bDemarree = Faux
               									stTache.nNumSprintFin = 0
               									stTache.nNumSprintDemarage = 0
               							FIN
               							Taches_Ajout(stTache)
               						fin
               					FIN
               				fin
               			FIN
               			
               		SINON
               			Erreur(ErreurInfo(errComplet))
               		FIN
               	sinon
               		erreur(erreurinfo(errComplet))
               	FIN
               	
               	xlsferme(IdFichierXLS)
               	
               FIN
               
               
               
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Controles
          identifier : 0x2f4bf0190ef94014
          internal_properties : BwAAAAcAAABQC+w9opG6zc5o5/VbBIBAR13TWQnP6Oej0YgOJ10Dd1WQr2CqvjYSGp2z1wX7txOd7RZorOszNpp5nZcNuiGhieLMiQVEtpP2U7nOZr+KyTV6JjrsuwAvbVahW3Z1tgfIeybm8IOmYm7DlfjhVAFgIx36lBsKKR6R3BZz3+Pk/wEn7lOjCmAwoAqNW4n8ibedO8Y567Llvp8xSBpLw/sAi92nGJYR6XSQXg1PtqTB+/nzpobVJG7hKgl1pHgZAjhJZXnfutwOP4q25DYve8cMHGDgLo5kcoc1Zzb1Tci8kqJafAUmrgCiFGG61ehIy8qXwlqvNBBedLbXi9fkBpVkZf1uM0NhklWPvwxNV7LzxbHGYKPI7GGgWIme5w+COI6nVWkurRzw9nPE0ZxncJv820F0HHlsRvSFa7SZhRAH7BWJdk6A9ERt3Uf/QtuGe5NwkzTtARywVzYIzNkeEs2Cfyt5dFjWr4oNH+X+nRTUbGVzGYM9ZExJoCMd/2WOdaBw60vaTAk7Db2sU1uYRmYBPUbrQooVykeCmHMv7CCfR6pKDdT5XtZhCnIKK+xOSNFO5TfPeaej0f+nCmSKYZAbGNU7ixEUQGiK9Rk3U2nPAHd/mLnViLCoUL+kLKg0oGMt5ZlZuRD061TiIZxecdkcRipJEBZHLwSTpn5UYidb3HtwpButu8qLpenzUzqgAH12G1IAUvu5UqJW/7gaY7a09IdRoH7y8ku95tmTHKLcm49gNVZEXRF+zoKtr09Z3NNFMOugrokccBSKC3p4ao9ka7bFZj+3t0a//rQOrPl30ezAN8/PmWv/m/FYKUk=
          properties :
           x : 42
           y : 331
           width : 80
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1-
               nPointsTotal est un entier
               nPointsProjet est un entier
               
               oPrj est un ClProjet dynamique
               oUS est un ClUserStory dynamique
               oTache est un ClTache dynamique
               
               
               pour tout element oPrj de ClProjet.aoListeProjets(vrai).aItems()
               	nPointsProjet = 0
               	POUR TOUT ELEMENT oUS DE oPrj.aoListeUS(Faux).aItems()
               		POUR TOUT ELEMENT oTache DE oUS.aoListeTaches().aItems()
               			nPointsTotal += oTache.p_nPoids
               			nPointsProjet += oTache.p_nPoids
               		FIN
               	FIN
               	trace(oPrj.p_sNom + " : " + nPointsProjet)
               FIN
               Trace("Total : " + nPointsTotal)
               
               trace("-------------------------------------")
               
               oSprint est un ClSprint dynamique
               pour tout element oSprint de ClSprint.aoListeSprint().aItems()
               	trace(oSprint.ZF_Get_IdUnique() + " - " + oSprint.nGetNbPointsRealises() + " - " + oSprint.p_nVelociteMoyenneRes)
               FIN
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Importer_Inventaire_tournant
          identifier : 0x2efeecb60fe46e56
          internal_properties : BwAAAAcAAADI14E0LKAsv2y7FuyUVK7/SBIPS5ynWllu205sgF34J7A9/p+JOvkZq/7tz3vvrdTdefX0L3I2o8oiu1cUVES0pxQbjj0NvLjnmP1IhvNAgvJXtb8M6qcvXamdpsvgDvJs+0LS0IHVgpjtrU3kN+6qdnLShm7KbuS5TEbSQWFlqeYVYURzcMXgXlciyZz0JoEUaumBS2A8Jj3e/gJWRhMPkKR+lsJpynL8eTfT585G2InOAui71XFRCOuPNt50kjci48F86vveQx/npekGzRnrmXPvCsccWsThQ+jmxj5f9WeiG+2BVs/vnguWm2Lrk4PoO4d56yQidJTBA9v0Y1BRtQC9KT+xTyHHfuNDABHiP/ZAtCJOQK0TxIg7s7Cupb4QQohNXoSp+wBOBk8XlD6+44wqzDmlaE6HcoWndW3mzrMyj6iZdh5ggU9HKqcHhj+pdnxP9NZX6gANkNL9UJ2vZw0MNx++fOmFji+QpYIJM8sx6nlFA9zyFNly58b28wAkJKw3ny9Uds3WA9z2y8Q+rbyrTunbrjLNayZl5mQNlUxUr/ZNatkvRzVFpkDDhG2FpCUSWl+/bDOyQC2yg9ztFNeo5+SkoXOEe796evFqf9wQI104zoxzGA05H9K1CAt83oJbGyxNloN/6IB1qxRw52vi33kIqH9Mo39Imy7tkQtnOPIMaMVV/6incBHXH7bdbfCbjM0q0qH7057QAk+hyaXpXclXe0t742jT06TFmSSpLsS1Dxb1/KhrWWYM6oTGYmJIk4w86F5xQwGTgZ39LA==
          properties :
           x : 572
           y : 357
           width : 202
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               
               oPrj est un ClProjet <- oProjetDeNom("Inventaire tournant")
               
               ImportProjet("\\prod-vm-file01\UnionMat\Service informatique\Procedures\Dev_logiciel\Inventaire tournant\User stories Invent tournant.xlsx", oPrj)
               
               
               
               //IdFichierXLS est un xlsDocument
               //Xlsnbligne_ est un entier
               //i est un entier
               //sFichier est une chaîne
               //
               //nPremiereligne est un entier = 2
               //
               ////Declatration VAriables
               //nIdUS est un entier
               ////nIdProjet est un entier
               //stTache est une STR_Tache
               //stUS est une STR_UserStorie
               //
               //nCol_codeUS est un entier = 1
               //nCol_codeTache est un entier = 1
               //nCol_numSprint est un entier = 7
               //nCol_Poids est un entier = 8
               //nCol_fin est un entier = 9
               //nCol_Role est un entier = 2
               //nCol_nom est un entier = 3
               //nCol_Besoin est un entier = 3
               //nCol_AfinDe est un entier = 4
               ////nCol_commentaire est un entier = 17
               //
               //oPrj est un ClProjet <- oProjetDeNom("Inventaire tournant")
               //
               //
               ////HLitRecherche(Scr_Projet,Nom,"Inventaire tournant")
               ////si htrouve(Scr_Projet)
               ////	nIdProjet = Scr_Projet.IDScr_Projet
               ////sinon
               ////	HRAZ(Scr_Projet)
               ////	//Scr_Projet.IDSrc_Usr = 1
               ////	Scr_Projet.Nom = "Inventaire tournant"
               ////	Si pas Hajoute(Scr_Projet) alors
               ////		info("erreur dans l'ajout du projet Inventaire tournant", ErreurInfo())
               ////	FIN
               ////	nIdProjet = Scr_Projet.IDScr_Projet //On recupère son ID
               ////fin
               //nNumeroOrdre est une entier = 0
               //// Ouvre le sélecteur de fichiers
               //sFichier = Dupplication_Fichier_Avant_Import("\\prod-vm-file01\UnionMat\Service informatique\Procedures\Dev_logiciel\Inventaire tournant\User stories Invent tournant.xlsx")
               //
               //SI sFichier <> "" ALORS
               //	
               //	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               //	
               //	SI ErreurDétectée = Faux ALORS 
               //		
               //		SI xlsFeuilleEnCours(IdFichierXLS, 1) ALORS	
               //			
               //			Xlsnbligne_ =xlsNbLigne(IdFichierXLS,Vrai)
               //			
               //			POUR i = nPremiereligne _À_ Xlsnbligne_
               //				
               //				//ON ne prend que les lignes qui ont un code et une description.
               //				SI xlsDonnée(IdFichierXLS,i,nCol_codeUS) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_Besoin) <> "" ALORS
               //					
               //					//Si le champ role n'est pas vide => c'est une US
               //					Si xlsDonnée(IdFichierXLS,i,nCol_Role) <> "" alors
               ////						si xlsDonnée(IdFichierXLS,i,nCol_codeUS) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_Besoin) <> "" alors
               //							VariableRAZ(stUS)
               //							stUS.sCodeUserStorie = xlsDonnée(IdFichierXLS,i,nCol_codeUS)
               //							stUS.sEnTantQue = xlsDonnée(IdFichierXLS,i,nCol_Role)
               //							stUS.sBesoinUserStorie = xlsDonnée(IdFichierXLS,i,nCol_Besoin)
               //							stUS.sAfindeUserStorie = xlsDonnée(IdFichierXLS,i,nCol_AfinDe)
               //							stUS.nIDProjet = oPrj.Get_IdUnique()
               //							stUS.nIDResponsable = oPrj.p_oUsr_ChefProjet.Get_IdUnique()
               //							
               //							Si xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T" alors
               //								stUS.bAtester = vrai
               //								stUS.eEtatUserStorie = ClUserStory.ECompteNbUS.En_test_fonctionnel
               //							FIN
               //							
               //							nIdUS = User_Story_ajout(stUS)
               //							
               //							nNumeroOrdre = 0
               ////						fin
               //						
               //					sinon //sinon c'est une tache
               //						
               //						si PAS (xlsDonnée(IdFichierXLS,i,nCol_nom) = SansEspace("") ET xlsDonnée(IdFichierXLS,i,nCol_numSprint) = SansEspace("")) alors
               //							VariableRAZ(stTache)
               //							stTache.sCodeTache = xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               //							stTache.nNumSprintCreation = xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               //							stTache.nNumSprintRealisation = stTache.nNumSprintCreation
               //							stTache.nNumSprintPrevision = stTache.nNumSprintCreation
               //							//stTache.nNumSprintDemarage = stTache.nNumSprintCreation
               //							stTache.nIDUserStorie = nIdUS
               //							stTache.sDescription = xlsDonnée(IdFichierXLS,i,nCol_nom)
               //							
               //							//affectation du num d'ordre
               //							nNumeroOrdre++
               //							stTache.nOrdre = nNumeroOrdre
               //							
               ////							SI SansEspace(xlsDonnée(IdFichierXLS,i,nCol_Poids)) = "" _OU_ SansEspace(xlsDonnée(IdFichierXLS,i,nCol_numSprint)) = "" ALORS
               ////								Trace(Scr_Projet.Nom,TAB,stTache.sCodeTache,TAB,stTache.sDescription,TAB,"Poids : " + xlsDonnée(IdFichierXLS,i,nCol_Poids),TAB,"Sprint : " + xlsDonnée(IdFichierXLS,i,nCol_numSprint))						
               ////							FIN
               //							
               //							//Si le poids n'est pas indiqué --> null
               //							Si xlsDonnée(IdFichierXLS,i,nCol_Poids) <> "" alors
               //								stTache.nPoids = xlsDonnée(IdFichierXLS,i,nCol_Poids)
               //								stTache.nPoids_Prevision = stTache.nPoids
               //							sinon
               //								stTache.nPoids = null
               //								stTache.nPoids_Prevision = null
               //							fin
               //							
               //							Selon Vrai
               //								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "x"
               //									stTache.bDemarree = vrai
               //									stTache.bAnnulee = faux
               //									stTache.bTermine = vrai
               //									stTache.nNumSprintFin = stTache.nNumSprintCreation 
               //									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               //								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T"
               //									stTache.bDemarree = vrai
               //									stTache.bAnnulee = faux
               //									stTache.bTermine = vrai 
               //									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               //								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "C"
               //									stTache.bDemarree = Vrai
               //									stTache.bAnnulee = Faux	
               //									stTache.nNumSprintFin = 0
               //									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               //								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A"
               //									stTache.bAnnulee = vrai
               //									stTache.bDemarree = faux
               //									stTache.nNumSprintFin = 0
               //									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               //								AUTRE CAS
               //									stTache.bAnnulee = Faux
               //									stTache.bDemarree = Faux
               //									stTache.nNumSprintFin = 0
               //									stTache.nNumSprintDemarage = 0
               //							FIN
               //							Taches_Ajout(stTache)
               //						fin
               //					FIN
               //				fin
               //			FIN
               //			
               //		SINON
               //			Erreur(ErreurInfo(errComplet))
               //		FIN
               //	sinon
               //		erreur(erreurinfo(errComplet))
               //	FIN
               //	
               //	xlsferme(IdFichierXLS)
               //	
               //FIN
               //
               //
               //
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Importer_Base_V2
          identifier : 0x2efef02c0ff0f53a
          internal_properties : BwAAAAcAAACxbY6bTTEQWCOCTLufqNh16rmJJXnMJ7qJejqZ9Y9YitzNpI9uLmijoyiInLjt54kPwBKpH9GbQ8AqHODbX920+/0NretlDXpCflksKDeNdiQ/9wACfbgtBH4YmznhAoJJ1Qtq9igD9DFqvnN29EottqBwE3jVcxW7vISp3hidNKhoBbb8SuSBr+THlEdLUQiTVaEZuii30X3GXosvIB2Qh/daCSe+eQ0MWPHoPtiY7YM6ht9dnj3jYJLpKVkwSmUt7/zvPFs+9TyE48bveWqo0cLP7IBr8iOnxFbz60XoEaNOszLmW9kq7qi7DWnq794RI3TxaE9ebBpDXNU5S4D25tmnGnuWoLRN0rIjw31wX1z1dwOhHNyKdj8MjQSQ4Zs8CzHWmmhWmWivYZrJbmRzVeLs17XeDRv7Pfa20R80w9nAEcf19fn/8WrYhROn7ihzSuwyiPP0r3A0JcURqO3acWNGLLHFN97HG1YZeVT/UBWDcIxxNoNPwrbp5E6ij/eeQJzum+AB7+cDZqvS54hlpWIt79G0L1uVBicCKnS1Cn7uTWMBlUjWR64ovSINuk4ZbuMzpqyQBXUZYcyCxfrmgK98+AiVzvSK4N6fwu2+YHD6GQTWI3mO1iL4pMw5LH6i6hIiv8+MD/vQL+MJVwBVHf/6IMlzFxRg7LYZtxxPaoOPTM3mD+gsLQeEIXe5nVON7VwUdl53W02+xH0enJ30GQ21IGPkrFCPlimOExzd7IL9DmJeiYiAwTvo9Ioec0gLNQEcFA==
          properties :
           x : 572
           y : 386
           width : 202
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               
               oPrj est un ClProjet <- oProjetDeNom("Base V2")
               oPrjBV1 est un ClProjet <- oProjetDeNom("Base log")
               
               ImportProjet("\\prod-vm-file01\UnionMat\Service informatique\Procedures\Dev_logiciel\Base Logistique\Base V2\User stories Base V2.xlsx", oPrj)
               
               //IdFichierXLS			est un xlsDocument
               //Xlsnbligne_				est un entier
               //i						est un entier
               //sFichier				est une chaîne
               //
               //nPremiereligne			est un entier	= 2
               //
               //nIdUS					est un entier
               //stTache					est une STR_Tache
               //stUS					est une STR_UserStorie
               //
               //nCol_codeUS				est un entier	= 1
               //nCol_codeTache			est un entier	= 1
               //nCol_numSprint			est un entier	= 7
               //nCol_Poids				est un entier	= 8
               //nCol_fin				est un entier	= 9
               //nCol_Role				est un entier	= 2
               //nCol_nom				est un entier	= 3
               //nCol_Besoin				est un entier	= 3
               //nCol_AfinDe				est un entier	= 4
               //nCol_commentaire		est un entier	= 5
               //nCol_numSprintCrea		est un entier	= 10
               //nCol_Epic				est un entier	= 11
               //nCol_commentaire_Test	est un entier	= 12
               //
               //
               //
               //
               //nNumeroOrdre est une entier = 0
               //// Ouvre le sélecteur de fichiers
               //sFichier = Dupplication_Fichier_Avant_Import("\\prod-vm-file01\UnionMat\Service informatique\Procedures\Dev_logiciel\Base Logistique\Base V2\User stories Base V2.xlsx")
               //
               //SI sFichier <> "" ALORS
               //	
               //	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               //	
               //	SI ErreurDétectée = Faux ALORS 
               //		
               //		SI xlsFeuilleEnCours(IdFichierXLS, 1) ALORS	
               //			
               //			Xlsnbligne_ =xlsNbLigne(IdFichierXLS,Vrai)
               //			
               //			POUR i = nPremiereligne _À_ Xlsnbligne_
               //				
               //				//ON ne prend que les lignes qui ont un code et une description.
               //				SI xlsDonnée(IdFichierXLS,i,nCol_codeUS) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_Besoin) <> "" ALORS
               //					
               //					//Si le champ role n'est pas vide => c'est une US
               //					Si xlsDonnée(IdFichierXLS,i,nCol_Role) <> "" alors
               //
               //						VariableRAZ(stUS)
               //						stUS.sCodeUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_codeUS)
               //						stUS.sEnTantQue			= xlsDonnée(IdFichierXLS,i,nCol_Role)
               //						stUS.sBesoinUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_Besoin)
               //						stUS.sAfindeUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_AfinDe)
               //						stUS.sCmtrGeneral		= xlsDonnée(IdFichierXLS,i,nCol_commentaire)
               //						stUS.sCmtrTest			= xlsDonnée(IdFichierXLS,i,nCol_commentaire_Test)
               //						stUS.nIDProjet			= oPrj.Get_IdUnique()
               //						stUS.nIDResponsable		= oPrj.p_oUsr_ChefProjet.Get_IdUnique()
               //						
               //						Si xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T" alors
               //							stUS.bAtester = vrai
               //							stUS.eEtatUserStorie = ClUserStory.ECompteNbUS.En_test_fonctionnel
               //						FIN
               //						
               //						//Ajout de l'epic, si présent
               //						stUS.nIdEpic = nCreeEpicSiBesoin(oPrj, xlsDonnée(IdFichierXLS,i,nCol_Epic))
               //						
               //						nIdUS = User_Story_ajout(stUS)
               //						
               //						nNumeroOrdre = 0
               //						
               //					sinon //sinon c'est une tache
               //						
               //						si PAS (xlsDonnée(IdFichierXLS,i,nCol_nom) = SansEspace("") ET xlsDonnée(IdFichierXLS,i,nCol_numSprint) = SansEspace("")) alors
               //							VariableRAZ(stTache)
               //							stTache.sCodeTache				= xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               //							stTache.nNumSprintCreation		= xlsDonnée(IdFichierXLS,i,nCol_numSprintCrea)
               //							stTache.nNumSprintRealisation	= xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               //							stTache.nNumSprintPrevision		= stTache.nNumSprintRealisation
               //							stTache.nIDUserStorie			= nIdUS
               //							stTache.sDescription			= xlsDonnée(IdFichierXLS,i,nCol_nom)
               //							stTache.sCommentaire			= xlsDonnée(IdFichierXLS,i,nCol_commentaire)
               //							
               //							//affectation du num d'ordre
               //							nNumeroOrdre++
               //							stTache.nOrdre					= nNumeroOrdre
               //							
               //							
               //							//Si le poids n'est pas indiqué --> null
               //							Si xlsDonnée(IdFichierXLS,i,nCol_Poids) <> "" alors
               //								stTache.nPoids = xlsDonnée(IdFichierXLS,i,nCol_Poids)
               //								stTache.nPoids_Prevision = stTache.nPoids
               //							sinon
               //								stTache.nPoids = null
               //								stTache.nPoids_Prevision = null
               //							fin
               //							
               //							Selon Vrai
               //								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "x"
               //									stTache.bDemarree = vrai
               //									stTache.bAnnulee = faux
               //									stTache.bTermine = vrai
               //									stTache.nNumSprintFin = stTache.nNumSprintCreation 
               //									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               //								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T"
               //									stTache.bDemarree = vrai
               //									stTache.bAnnulee = faux
               //									stTache.bTermine = vrai 
               //									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               //								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "C"
               //									stTache.bDemarree = Vrai
               //									stTache.bAnnulee = Faux	
               //									stTache.nNumSprintFin = 0
               //									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               //								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A"
               //									stTache.bAnnulee = vrai
               //									stTache.bDemarree = faux
               //									stTache.nNumSprintFin = 0
               //									stTache.nNumSprintDemarage = stTache.nNumSprintRealisation
               //								AUTRE CAS
               //									stTache.bAnnulee = Faux
               //									stTache.bDemarree = Faux
               //									stTache.nNumSprintFin = 0
               //									stTache.nNumSprintDemarage = 0
               //							FIN
               //							Taches_Ajout(stTache)
               //						fin
               //					FIN
               //				fin
               //			FIN
               //			
               //		SINON
               //			Erreur(ErreurInfo(errComplet))
               //		FIN
               //	sinon
               //		erreur(erreurinfo(errComplet))
               //	FIN
               //	
               //	xlsferme(IdFichierXLS)
               //	
               //FIN
               //
               //
               //
               //// import des critères d'acceptations
               //Import_Des_Criteres_Acceptation(oPrj.Get_IdUnique(), sFichier)
               //Import_Process(oPrj.Get_IdUnique(), sFichier)
               
               oUs		est un ClUserStory dynamique
               pour tout element oUs de oPrj.aoListeUS(Vrai).aItems()
               	SI Gauche(oUs.p_sCodeUserStory, 3) = "BV1" ALORS
               		oUs.p_oProjetParent = oPrjBV1
               		oUs.ZF_Enregistre()
               	fin
               fin
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Import_taches_techniques_suspendues
          identifier : 0x2032cac3393858bf
          internal_properties : BwAAAAcAAACovFoSQjKwaDe90NU4FWOtG5CM3gHKskWquDbX/XyyV5285fq73DO2I+cxFvfxKLz970HmL7oNQksP5KLJVqFdJUEk1Wwjd/cdK1AF1h7W3hw8ISWBZAfz38k0qMuanMZ3El3VSBeF92fCOkM1HOuqaeCSggvwqeYhmkz+3hBzWD1a76wbY4cq+fioAnq7S/4r46RE741FSrrP+WRpzNFRlPBDs0vIwV4Orod+RgcjyfPq/Mv1jVg8NVJ76LAMN7f6pFC2WXi4TSHNZn37mNZntykL0RlSmk9N5iRV4Bf/DPB8ZdaBHZYTx3uqY1awBf01a/pomn+mYrM+1BdGbNRtdtVlYHD7sTB8zIHpa4oAXE4rk+WEdJUgOPBlKyTw71/B6KGisEu5GcxKJOelmFmlXApDQhfZWexBmSFIJKcUoeFFAgYFNC+5skOFtWiiELsELcGcVljpUZFK2J4t+Co2/3lI59XiuFQ2UX0D0JodVrMXSrBIqiHvqVsL0CIWsDqOuyifwwEGi2j4gXQ5nMsHxxoWw09h4Xsrar9czXqEFTTGwhl6CAlBl5bEWv+2oRWek8qcys3yb+zrfOkd97tXGPugMHoUt6Kf88GiDIXoSgUDUTxQ+j+EqTfueSfKW8fNs2yyaNKdIX2Sg4FNK/BcWiS4od0jMDOPgVuwpOxpD+C34BmPDmSGlzKujwZNogiXduQyQuTnQ5yBnN/5uckv0cYDosAMoTTJQfKzSRMcW/MpI8nNANQWFRaTrc+rB/EEsJw1qvHZ4/I8ib1oxlyVEwn3+lZqekzErdnYLGzkf6UMWq9nvdUpOdN2PbasY0yir/tKZA088QMv7jfCm4nsppDQDWeZNBTOx2xn
          properties :
           x : 276
           y : 386
           width : 280
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               IdFichierXLS est un xlsDocument
               Xlsnbligne_ est un entier
               i est un entier
               sFichier est une chaîne
               
               
               nCol_codeTache	est un entier	= 1
               nCol_IndoBlocage	est un entier	= 2
               
               oTache est un ClTache dynamique
               sCodeTache est une chaîne
               
               
               //sFichier = Dupplication_Fichier_Avant_Import("L:\Service informatique\Service Développement\Normes et procédures de dev\utilisateurs Scrum.xlsx")
               sFichier = Dupplication_Fichier_Avant_Import(cst_fichierutilisateurSCRUM)
               
               SI sFichier <> "" ALORS
               	
               	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               	
               	SI ErreurDétectée = Faux ALORS
               		
               		SI xlsFeuilleEnCours(IdFichierXLS, 5) ALORS	
               			
               			Xlsnbligne_ = xlsNbLigne(IdFichierXLS,Vrai)
               			
               			POUR i = 2 _À_ Xlsnbligne_
               				
               				
               				sCodeTache  = xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               				SI sCodeTache <> "" ALORS
               					HLitRecherche(Scr_Tache,CodeTache,sCodeTache,hIdentique+hLimiteParcours)
               					SI HTrouve(Scr_Tache) ALORS
               						oTache <- ClTache.GetObj(Scr_Tache.IDScr_Tache)
               						oTache.p_bTache_tech = Vrai
               						oTache.ZF_Enregistre()
               					fin
               				fin
               			fin
               		SINON
               			Erreur(ErreurInfo(errComplet))
               		FIN
               		
               		
               		SI xlsFeuilleEnCours(IdFichierXLS, 6) ALORS	
               			
               			Xlsnbligne_ = xlsNbLigne(IdFichierXLS,Vrai)
               			
               			POUR i = 2 _À_ Xlsnbligne_
               				
               				
               				sCodeTache  = xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               				SI sCodeTache <> "" ALORS
               					HLitRecherche(Scr_Tache,CodeTache,sCodeTache,hIdentique+hLimiteParcours)
               					SI HTrouve(Scr_Tache) ALORS
               						oTache <- ClTache.GetObj(Scr_Tache.IDScr_Tache)
               						si pas oTache.p_nStatut dans(ClTache.cstStatut_Annulee, ClTache.cstStatut_realise) alors
               							oTache.p_nStatut		= ClTache.cstStatut_Suspendu
               							oTache.p_sCMTR_Blocage	= xlsDonnée(IdFichierXLS,i,nCol_IndoBlocage)
               							oTache.ZF_Enregistre()
               						sinon
               							trace("Tache a mettre en suspend, dans un mauvais statut : " + oTache.p_sCodeTache)
               						fin
               					fin
               				fin
               			fin
               		SINON
               			Erreur(ErreurInfo(errComplet))
               		FIN	
               	SINON
               		Erreur(ErreurInfo(errComplet))
               	FIN
               
               	xlsFerme(IdFichierXLS)	
               	
               FIN
               
               ClSprint.Calcul_Velocite_Moyenne()
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Importer_Cerebro
          identifier : 0x2f5d37b627b4f9de
          internal_properties : BwAAAAcAAAAShBUSxrSrweTL/+jABTeGi+vsSCwDik0Iq9AlYXprxeA8rRhpD6WCvrfF++MokmwqIXPqQhpoiiNZMb8m+jTTUvaS6oAIXt2AM9wPDzWKkwPnD0Re1VwdEIYM100dXn7tzTNGolhnJJ0iyl9iUNZJcuioXwTNv+XX/NA1apxJ0DTwHQpQqohhSxTbsAvflcQnJfFNnvBryWnGsp8DNHm8I0eyXXsuFW3gAP180mQcaWfKDqO5ponLzOIddW0cxunRbwzTGHOibQjUxzpT1a4cLVJHODz7VjOzrLJvt6E0JT/GmwYKex3iGjA3WYXOG9qdqwx1dB8alC5reGl9/6zKIqFv3vemHHxJ6o6Hx3FUS8DN1y/l/IDqCh9oEXh0vVeok3sQUH7gH+phX5zPtFbt/xw+6ZNkh5GtT2RgXz0eLbOiO2GTCxOtq6T+R9HlKPK9lL7UtqGm7fJWA68/Rg/ke/UQFq/bwWxRdYxb7xpxqv/9miYnhGWlXMAvBoyA4enwmpbogQYrremV5NU43YrPf7zPgRfCQWmnSMWskBoPBAjwV70Po8pMCaBWpygzpKjzQLXl7Hry83/T197Aw0Qocpmu+hajQFIskswBUDsgWlrsO5Z0QSs0iATGHlp3tqBkNMy8JY0+tQWKtX2H9eq/98l8Ur05Ud4+CkSRNnG4+zTAXeidlHOl6jT1sPLiMuoS6pEbuddeRLqLBRTxzeLjFnqqBU+2+hybggHQp5abyuCV0It7cHPtcmyZO9Gn6MOEroqDsw==
          properties :
           x : 572
           y : 415
           width : 202
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               oPrj est un ClProjet <- oProjetDeNom("B2B/B2C")
               //oPrjB2C est un ClProjet <- oProjetDeNom("B2C")
               ImportProjet("\\prod-vm-file01\UnionMat\Service informatique\Procedures\Dev_logiciel\Cerebro\User stories B2X.xlsx",oPrj)
               //
               //oUs		est un ClUserStory dynamique
               //POUR TOUT ELÉMENT oUs DE oPrj.aoListeUS(Vrai)
               //	SI oUs.p_sCodeUserStory dans("B2X004", "B2X005", "B2X006", "B2X007", "B2X008", "B2X010", "B2X016", "B2X034", "") ALORS
               //		oUs.p_oProjetParent = oPrjB2C
               //		oUs.Enregistre()
               //	FIN
               //FIN
               
               
               
               //IdFichierXLS est un xlsDocument
               //Xlsnbligne_ est un entier
               //i est un entier
               //sFichier est une chaîne
               //
               //nPremiereligne est un entier = 2
               //
               ////Declatration VAriables
               //nIdUS est un entier
               ////nIDProjet est un entier
               //stTache est une STR_Tache
               //stUS est une STR_UserStorie
               //
               //nCol_codeUS est un entier = 1
               //nCol_codeTache est un entier = 1
               //nCol_numSprint est un entier = 7
               //nCol_Poids est un entier = 8
               //nCol_fin est un entier = 9
               //nCol_Role est un entier = 2
               //nCol_nom est un entier = 3
               //nCol_Besoin est un entier = 3
               //nCol_AfinDe est un entier = 4
               //nCol_commentaire est un entier = 5
               //nCol_numSprintCrea		est un entier	= 10
               //nCol_Epic				est un entier	= 11
               //nCol_commentaire_Test	est un entier	= 12
               //
               //
               //oPrj est un ClProjet <- oProjetDeNom("Cerebro")
               //nNumeroOrdre est une entier = 0
               //
               //// Ouvre le sélecteur de fichiers
               //sFichier = Dupplication_Fichier_Avant_Import("\\prod-vm-file01\UnionMat\Service informatique\Procedures\Dev_logiciel\Cerebro\User stories B2X.xlsx")
               //
               //SI sFichier <> "" ALORS
               //	
               //	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               //	
               //	SI ErreurDétectée = Faux ALORS 
               //		
               //		SI xlsFeuilleEnCours(IdFichierXLS, 1) ALORS	
               //			
               //			Xlsnbligne_ =xlsNbLigne(IdFichierXLS,Vrai)
               //			
               //			POUR i = nPremiereligne _À_ Xlsnbligne_
               //				
               //				//ON ne prend que les lignes qui ont un code et une description.
               //				SI xlsDonnée(IdFichierXLS,i,nCol_codeUS) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_Besoin) <> "" ALORS
               //					
               //					//Si le champ role n'est pas vide => c'est une US
               //					Si xlsDonnée(IdFichierXLS,i,nCol_Role) <> "" alors
               //
               //						VariableRAZ(stUS)
               //						stUS.sCodeUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_codeUS)
               //						stUS.sEnTantQue			= xlsDonnée(IdFichierXLS,i,nCol_Role)
               //						stUS.sBesoinUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_Besoin)
               //						stUS.sAfindeUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_AfinDe)
               //						stUS.sCmtrGeneral		= xlsDonnée(IdFichierXLS,i,nCol_commentaire)
               //						stUS.sCmtrTest			= xlsDonnée(IdFichierXLS,i,nCol_commentaire_Test)
               //						stUS.nIDProjet			= oPrj.Get_IdUnique()
               //						stUS.nIDResponsable		= oPrj.p_oUsr_ChefProjet.Get_IdUnique()
               //						
               //						Si xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T" alors
               //							stUS.bAtester = vrai
               //							stUS.eEtatUserStorie = ClUserStory.ECompteNbUS.En_test_fonctionnel
               //						FIN
               //						
               //						//Ajout de l'epic, si présent
               //						stUS.nIdEpic = nCreeEpicSiBesoin(oPrj, xlsDonnée(IdFichierXLS,i,nCol_Epic))
               //						
               //						nIdUS = User_Story_ajout(stUS)
               //						
               //						nNumeroOrdre = 0
               //						
               //						//si stUS.sCodeUserStorie = "B2X017" alors stop
               //						
               //					sinon //sinon c'est une tache
               //						
               //						si PAS (xlsDonnée(IdFichierXLS,i,nCol_nom) = SansEspace("") ET xlsDonnée(IdFichierXLS,i,nCol_numSprint) = SansEspace("")) alors
               //							VariableRAZ(stTache)
               //							stTache.sCodeTache				= xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               //							stTache.nNumSprintCreation		= xlsDonnée(IdFichierXLS,i,nCol_numSprintCrea)
               //							stTache.nNumSprintRealisation	= xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               //							stTache.nNumSprintPrevision		= stTache.nNumSprintRealisation
               //							//stTache.nNumSprintDemarage = stTache.nNumSprintCreation
               //							stTache.nIDUserStorie			= nIdUS
               //							stTache.sDescription			= xlsDonnée(IdFichierXLS,i,nCol_nom)
               //							stTache.sCommentaire			= xlsDonnée(IdFichierXLS,i,nCol_commentaire)
               //							
               //							//affectation du num d'ordre
               //							nNumeroOrdre++
               //							stTache.nOrdre = nNumeroOrdre
               //							
               //							//Si le poids n'est pas indiqué --> null
               //							Si xlsDonnée(IdFichierXLS,i,nCol_Poids) <> "" alors
               //								stTache.nPoids				= xlsDonnée(IdFichierXLS,i,nCol_Poids)
               //								stTache.nPoids_Prevision	= stTache.nPoids
               //							sinon
               //								stTache.nPoids				= null
               //								stTache.nPoids_Prevision	= null
               //							fin
               //							
               //							Selon Vrai
               //								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "x"
               //									stTache.bDemarree			= vrai
               //									stTache.bAnnulee			= faux
               //									stTache.bTermine			= vrai
               //									stTache.nNumSprintFin		= stTache.nNumSprintCreation 
               //									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               //								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T"
               //									stTache.bDemarree			= vrai
               //									stTache.bAnnulee			= faux
               //									stTache.bTermine			= vrai 
               //									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               //								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "C"
               //									stTache.bDemarree			= Vrai
               //									stTache.bAnnulee			= Faux	
               //									stTache.nNumSprintFin		= 0
               //									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               //								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A"
               //									stTache.bAnnulee			= vrai
               //									stTache.bDemarree			= faux
               //									stTache.nNumSprintFin		= 0
               //									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               //								AUTRE CAS
               //									stTache.bAnnulee			= Faux
               //									stTache.bDemarree			= Faux
               //									stTache.nNumSprintFin		= 0
               //									stTache.nNumSprintDemarage	= 0
               //							FIN
               //							Taches_Ajout(stTache)
               //						fin
               //					FIN
               //				fin
               //			FIN
               //			
               //		SINON
               //			Erreur(ErreurInfo(errComplet))
               //		FIN
               //	sinon
               //		erreur(erreurinfo(errComplet))
               //	FIN
               //	
               //	xlsferme(IdFichierXLS)
               //	
               //FIN
               //
               //Import_Des_Criteres_Acceptation(oPrj.Get_IdUnique(), sFichier)
               //Import_Process(oPrj.Get_IdUnique(), sFichier)
               //
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Import_Docs
          identifier : 0x2faf06d41432e512
          internal_properties : BwAAAAcAAAAkSIunN0I2YTb/H2dRhhctbJoIC2lIuvFXTXalMZYsveNXRqa72FU+dR8bjHNX5Oz5Oa69T7BVMrcREykK0661KzExAbsOWXgDezfEx3ZHpOnsPC15vHJ4lC9LxYlwQIS+XSpJJHJltAaC1I2J8UUuvOavQLaA4uONXKIXgSP3Y7aHfhndGTdx1ctesHj2qLDcl5pNSGW98IhxsoAQyzOLgJNINsjUq+zBsbgJ9v943Smu6KmQ2mzMK8mQKPBEHhvXtmvnn2vnwpoEN1BmxIiYJ8bhg9aVxLB3/TjU1Ue779bGFfkt55ZuOd3rWM1TfUzFcQs570Tr7yXY8PLYdYFlCesI//paSKm7GIMj7eYenihN9v2DMSbPA91yAAxI6S1E0+Eqn+EqlvrUv2tWRAoGX5+2tL+UADozI3B8rfvd7uN8k8YlRxYD4/1RkUkb/Xt0mqXPGO8QLZQwYD6ol7f03Q7eVBXT/dATlff71fdqyCVO4t8KN4AbsjH3tCPPuWyAtBqwufrHdSmukQCMT6wNjUFUpm8QfAEElj1M7PFD/Rw70NwA2bxzbHqWSJrtyg/YauLhOCB/eVN5OMMk1gr3WKZCl1LNqkyS05PCBxBB8j3UMxmIE5b6+gOMFYxLhH+VslyxWrkmF1wcT/mGXDvWNC2K5MnQML+ikf22kz/cSepg4sALu2cuZFD2fR/ODSA/7WqNgL/2yTmtwDW6lp632e3ho57LPGJFKj41/VFyHPqSYncoqTQ4UJo5SrfAkGku38J4oShN9yv1MnjoMZHLmKz8hNKv4hM7B9gxGhixUYU3acme9XlUhBPqAASJMw==
          properties :
           x : 276
           y : 420
           width : 280
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1-
               //
               RechDoc("L:\Service informatique\Procedures\Dev_logiciel")
               RechDoc("P:\Informatique\Developpement")
               
               procédure interne RechDoc(sChemin_P est une chaîne)
               	
               	
               	sFic est une chaîne
               	pour toute chaine sFic de fListeFichier(ComplèteRep(sChemin_P) + "*.*",frNonRécursif) separee par RC
               		rechfic(sFic)
               	FIN
               	sRep est une chaîne
               	pour toute chaine sRep de fListeRépertoire(ComplèteRep(sChemin_P),frNonRécursif ) separee par RC
               		si pas sRep ~= "archive" alors
               			RechDoc(sRep)
               		FIN
               	FIN
               fin
               
               
               PROCÉDURE INTERNE RechFic (sChemin_P est une chaîne)
               
               sCode est une chaîne
               
               si Position(sChemin_P, "-") = 0 alors retour
               
               sCode = fExtraitChemin(sChemin_P,fFichier)
               sCode = ExtraitChaîne(sCode, 1, "-")
               sCode = SansEspace(sCode)
               si taille(sCode) <= 7 alors
               
               	HLitRecherche(Scr_UserStory,CodeUserStory,sCode,hIdentique+hLimiteParcours)
               	SI HTrouve(Scr_UserStory) ALORS
               		AddDoc(sChemin_P, Scr_UserStory.IDScr_UserStory)
               	sinon
               		HLitRecherche(Scr_Tache,CodeTache,sCode,hIdentique+hLimiteParcours)
               		SI HTrouve(Scr_Tache) ALORS
               			AddDoc(sChemin_P, Scr_Tache.IDScr_UserStory)
               		sinon
               			//trace(sChemin_P)
               		FIN
               	FIN
               FIN
               
               
               FIN
               
               procédure interne AddDoc(sChemin_P est une chaîne, nIdUS_P est un entier)
               
               	hraz(Scr_UserStory_Doc)
               	Scr_UserStory_Doc.Chemin = sChemin_P
               	Scr_UserStory_Doc.IDScr_UserStory = nIdUS_P
               	HAjoute(Scr_UserStory_Doc)
               fin
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Importer_nv_planning_trp
          identifier : 0x2f7cd81a10cd9658
          internal_properties : BwAAAAcAAADfIf8R2PL7RWcYXuTPR1isM3k+6IZCdIGvB6mbt9HClD4MZC+rahPscYpAacyAk2kaNgTRR1Ujr4WBXOWAu8lKsIkVPOBxmfZP0TfqwbQgwN7QT4J369lAh151WRr9H9YwAhdmmh49mhbrdMDDEVw88/5gIUp2Vqklx8PviB/KCTXXQ35Fr6WV0VzcKlyt2KSfPNVK1Kkqu6dBENVVnwu7FDqsbIAK9yEErqYdZQkXsumxwXBokd8Pl4p7e/Yjnq6Q3CuEQJtppETY//cLUW+mhf2yWho6N77HikSur8NmtNS/hbyCJrKXxR4IFEvsllKNBjPyI4MVWFGtLTIOJ/VBYwKoIUh+QglcSg89UALOVuYz4clZfXSY7ZnFpl07YGkKQC2NVJ1MrF6x4EZ5O19K1WW+03S0YoAp5wHOH7Ih+ElFXztgReTcAV5xAaOUAYNVp2zkxYsBrsT0NLtRRZCJSTDeUl5Vynk3RxHh2V8wC/lsUny8LohYtITIisYP4iYEs34OCm6IavPjizl2dMfgm8v1KbiKHkAxnubwjlU4Y1zBT/8K7ykbXYB/IZbupUn7uw+FQert0k2tOsjaao3rDkDCYLGRNWGounN9sAwjTQiPbX7ta16FSgLBppxM2SkyffAO8tMdpt9o1FNjPJueHQTEbGJNcOFUVLF5B20aF+n4GGeNedN/x0Xf6U3aQFQphMzqL0DYJPVSyzGYA+o5CfjnyelpStLe6ZPZ9iq9AMcfba/4vqjO40JMm/TQaSgC/wJLWp+jFlQnbHR/6rhL
          properties :
           x : 572
           y : 444
           width : 202
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               ImportProjet("\\prod-vm-file01\UnionMat\Service informatique\Procedures\Dev_logiciel\Nouveau planning\User stories planning transport V2.xlsx",oProjetDeNom("Planning transport"))
               
               //IdFichierXLS			est un xlsDocument
               //i						est un entier
               //sFichier				est une chaîne
               //
               //nPremiereligne			est un entier	= 2
               //
               ////Declatration VAriables
               //nIdUS					est un entier
               //stTache					est une STR_Tache
               //stUS					est une STR_UserStorie
               //
               //nCol_codeUS				est un entier	= 1
               //nCol_codeTache			est un entier	= 1
               //nCol_numSprint			est un entier	= 7
               //nCol_Poids				est un entier	= 8
               //nCol_fin				est un entier	= 9
               //nCol_Role				est un entier	= 2
               //nCol_nom				est un entier	= 3
               //nCol_Besoin				est un entier	= 3
               //nCol_AfinDe				est un entier	= 4
               //nCol_commentaire		est un entier	= 5
               //nCol_numSprintCrea		est un entier	= 10
               //nCol_Epic				est un entier	= 11
               //nCol_commentaire_Test	est un entier	= 12
               //
               //
               //oPrj est un ClProjet <- oProjetDeNom("Planning transport")
               //
               //nNumeroOrdre est une entier = 0
               //// Ouvre le sélecteur de fichiers
               //sFichier = Dupplication_Fichier_Avant_Import("\\prod-vm-file01\UnionMat\Service informatique\Procedures\Dev_logiciel\Nouveau planning\User stories planning transport V2.xlsx")
               //
               //SI sFichier <> "" ALORS
               //	
               //	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               //	
               //	SI ErreurDétectée = Faux ALORS 
               //		
               //		SI xlsFeuilleEnCours(IdFichierXLS, 1) ALORS	
               //			
               //			
               //			POUR i = nPremiereligne _À_ xlsNbLigne(IdFichierXLS,Vrai)
               //				
               //				//ON ne prend que les lignes qui ont un code et une description.
               //				SI xlsDonnée(IdFichierXLS,i,nCol_codeUS) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_Besoin) <> "" ALORS
               //					
               //					//Si le champ role n'est pas vide => c'est une US
               //					Si xlsDonnée(IdFichierXLS,i,nCol_Role) <> "" alors
               //						VariableRAZ(stUS)
               //						stUS.sCodeUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_codeUS)
               //						stUS.sEnTantQue			= xlsDonnée(IdFichierXLS,i,nCol_Role)
               //						stUS.sBesoinUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_Besoin)
               //						stUS.sAfindeUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_AfinDe)
               //						stUS.sCmtrGeneral		= xlsDonnée(IdFichierXLS,i,nCol_commentaire)
               //						stUS.sCmtrTest			= xlsDonnée(IdFichierXLS,i,nCol_commentaire_Test)
               //						stUS.nIDProjet			= oPrj.Get_IdUnique()
               //						stUS.nIDResponsable		= oPrj.p_oUsr_ChefProjet.Get_IdUnique()
               //						
               //						Si xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T" alors
               //							stUS.bAtester = vrai
               //							stUS.eEtatUserStorie = ClUserStory.ECompteNbUS.En_test_fonctionnel
               //						FIN
               //						
               //						//Ajout de l'epic, si présent
               //						stUS.nIdEpic = nCreeEpicSiBesoin(oPrj, xlsDonnée(IdFichierXLS,i,nCol_Epic))
               //
               //						nIdUS = User_Story_ajout(stUS)
               //						
               //						nNumeroOrdre = 0
               //						
               //					sinon //sinon c'est une tache
               //						
               //						si PAS (xlsDonnée(IdFichierXLS,i,nCol_nom) = SansEspace("") ET xlsDonnée(IdFichierXLS,i,nCol_numSprint) = SansEspace("")) alors
               //							VariableRAZ(stTache)
               //							stTache.sCodeTache				= xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               //							stTache.nNumSprintCreation		= xlsDonnée(IdFichierXLS,i,nCol_numSprintCrea)
               //							stTache.nNumSprintRealisation	= xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               //							stTache.nNumSprintPrevision		= stTache.nNumSprintRealisation
               //							//stTache.nNumSprintDemarage = stTache.nNumSprintCreation
               //							stTache.nIDUserStorie			= nIdUS
               //							stTache.sDescription			= xlsDonnée(IdFichierXLS,i,nCol_nom)
               //							stTache.sCommentaire			= xlsDonnée(IdFichierXLS,i,nCol_commentaire)
               //							
               //							//affectation du num d'ordre
               //							nNumeroOrdre++
               //							stTache.nOrdre					= nNumeroOrdre
               //							
               //							
               //							//Si le poids n'est pas indiqué --> null
               //							Si xlsDonnée(IdFichierXLS,i,nCol_Poids) <> "" alors
               //								stTache.nPoids				= xlsDonnée(IdFichierXLS,i,nCol_Poids)
               //								stTache.nPoids_Prevision	= stTache.nPoids
               //							sinon
               //								stTache.nPoids				= null
               //								stTache.nPoids_Prevision	= null
               //							fin
               //							
               //							Selon Vrai
               //								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "x"
               //									stTache.bDemarree			= vrai
               //									stTache.bAnnulee			= faux
               //									stTache.bTermine			= vrai
               //									stTache.nNumSprintFin		= stTache.nNumSprintCreation 
               //									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               //								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T"
               //									stTache.bDemarree			= vrai
               //									stTache.bAnnulee			= faux
               //									stTache.bTermine			= vrai 
               //									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               //								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "C"
               //									stTache.bDemarree			= Vrai
               //									stTache.bAnnulee			= Faux	
               //									stTache.nNumSprintFin		= 0
               //									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               //								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A"
               //									stTache.bAnnulee			= vrai
               //									stTache.bDemarree			= faux
               //									stTache.nNumSprintFin		= 0
               //									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               //								AUTRE CAS
               //									stTache.bAnnulee			= Faux
               //									stTache.bDemarree			= Faux
               //									stTache.nNumSprintFin		= 0
               //									stTache.nNumSprintDemarage	= 0
               //							FIN
               //							Taches_Ajout(stTache)
               //						fin
               //					FIN
               //				fin
               //			FIN
               //			
               //		SINON
               //			Erreur(ErreurInfo(errComplet))
               //		FIN
               //	sinon
               //		erreur(erreurinfo(errComplet))
               //	FIN
               //	
               //	xlsferme(IdFichierXLS)
               //	
               //FIN
               //
               //
               //Import_Des_Criteres_Acceptation(oPrj.Get_IdUnique(), sFichier)
               //Import_Process(oPrj.Get_IdUnique(), sFichier)
               //
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Import_messages
          identifier : 0x2fa85fe200a2bd3a
          internal_properties : BwAAAAcAAADekIQJ17GvHfZ9tlgaP6CDq2XRcsbGvHmswX2nfec6PKZ4n2mY2MNQ9a4akAiW5k1kU395Ukpxji046RLQ+6OeRtVuCodN9hpV0dG6qUCzB2DjpIQxssMMn6/E/U5Xh+0zV1Ze8HF/5of9HSRUg5Cqdoco9ZwHyn+w0eZWR7P5KQmf6ocUgx0aQIfswvRmVME8OCosLY3W7SnqAbbPh3x7t15NqR5ARGF3ipPw8krfKLxTLXYWBhWBKNhRUUAsV/7TeL3xzeiG2W56qolFKrg1DYvpbTRWmzj7nRDjUSqNby0OtOwC9dTD5NwWvmk849ZwAg8MBpHJV33bvgYa7QIPu+eyYALGpSDwL7MG7Ms1yMsm5sOsQJkoK5XWjbs7PLqKMtkjYsmIjYTjosNXx03/o9/50j0g4vJOBdfx4q3Aa9K46Dh95/kDCYkKTp7vwIzrbB4f9hv5EW5A0dPNR/brblBVqNtBHOglb2pmoEt/zWxYAQl+230b3J/QD97d5E1ngPVMr7QgBSNUTvvXS3tIOqVfMOck21VyunLlhVUwGm/xhQxuxf8XWhCbu/VP+UyzZElxDt6kUZlpmd6H7D/0ow6VzxQnpcBUJ/ZVCgjuZWLASAu8xbugxtNzHjVNScoS1IVt0N/90exCwH6T1tLjR92pDsGoh0EeAfKTyCsvaLeKE0oXE2I0mAy7JgDi9rvsey9BXtthLeuXWyTJ/PM2+vt8f4uYHEFOoROKyy3ckFOQIwe05WDMiHDo6Rh651AoQBBpPBusQFFtbUAT1ULxynVbOcpSOTEIWnZP5eYQi55RAwXLAi8b77uJGJ86cYBAyVU=
          properties :
           x : 276
           y : 449
           width : 280
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               IdFichierXLS est un xlsDocument
               Xlsnbligne_ est un entier
               i est un entier
               sFichier est une chaîne
               
               
               nCol_NomUsr		est un entier	= 1
               nCol_codeUS		est un entier	= 2
               nCol_codeTache	est un entier	= 3
               nCol_Cmtr		est un entier	= 4
               nCol_Visible	est un entier	= 5
               nCol_UsrReponse	est un entier	= 6
               nCol_Reponse	est un entier	= 7
               
               oMsg est un ClMessage dynamique
               oMsgRep est un ClMessage dynamique
               
               sCodeTache est une chaîne
               sCodeUS est une chaîne
               sNomUsr est une chaîne
               sNomUsrRep est une chaîne
               bTrouve est un booléen
               
               
               //sFichier = Dupplication_Fichier_Avant_Import("L:\Service informatique\Service Développement\Normes et procédures de dev\utilisateurs Scrum.xlsx")
               sFichier = Dupplication_Fichier_Avant_Import(cst_fichierutilisateurSCRUM)
               
               SI sFichier <> "" ALORS
               	
               	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               	
               	SI ErreurDétectée = Faux ALORS
               		
               		SI xlsFeuilleEnCours(IdFichierXLS, 4) ALORS	
               			
               			Xlsnbligne_ =xlsNbLigne(IdFichierXLS,Vrai)
               			
               			POUR i = 2 _À_ Xlsnbligne_
               				
               				sNomUsr = xlsDonnée(IdFichierXLS,i,nCol_NomUsr)
               				si sNomUsr <> "" alors
               					oMsg = allouer un ClMessage
               					
               					bTrouve = Faux
               					
               					
               //					HLitRecherche(Scr_Usr,nom, sNomUsr,hLimiteParcours+hIdentique)
               //					si pas htrouve(Scr_Usr) ALORS
               //						ExceptionDéclenche(1, ChaîneConstruit("Impossible d'identifier l'utilisateur %1", sNomUsr))
               //					FIN
               //					
               //					oMsg.p_oUsr = ClUsr.GetObj(Scr_Usr.IDScr_Usr)
               					oMsg.p_oUsr = ClUsr.GetObj(nGetIdUsrDeNom(sNomUsr))
               					
               					
               					sCodeTache  = xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               					si sCodeTache <> "" ALORS
               						HLitRecherche(Scr_Tache,CodeTache,sCodeTache,hIdentique+hLimiteParcours)
               						si htrouve(Scr_Tache) ALORS
               							oMsg.p_oTache = ClTache.GetObj(scr_Tache.IDScr_Tache)
               							bTrouve = vrai
               						FIN
               					FIN
               					
               					sCodeUS = xlsDonnée(IdFichierXLS,i,nCol_codeUS)
               					SI sCodeUS <> "" ALORS
               						HLitRecherche(Scr_UserStory,CodeUserStory,sCodeUS,hIdentique+hLimiteParcours)
               						SI HTrouve(Scr_UserStory) ALORS
               							oMsg.p_oUserStory = ClUserStory.GetObj(Scr_UserStory.IDScr_UserStory)
               							bTrouve = vrai
               						FIN
               					FIN
               					
               					
               					si bTrouve alors
               						oMsg.p_sCMTR = xlsDonnée(IdFichierXLS,i,nCol_Cmtr)
               						
               						si xlsDonnée(IdFichierXLS,i,nCol_Visible) ~= "x" ALORS
               							oMsg.p_bTop_Visible = vrai
               						FIN
               						
               						oMsg.ZF_Enregistre()
               						
               						
               						////////////////////////////////////
               						
               						sNomUsrRep = xlsDonnée(IdFichierXLS,i,nCol_UsrReponse)
               						si sNomUsrRep <> "" ALORS
               							
               							oMsgRep = allouer un ClMessage
               							
               							oMsgRep.m_oMsgparent <- oMsg
               							
               //							HLitRecherche(Scr_Usr,Nom, sNomUsrRep,hLimiteParcours+hIdentique)
               //							SI PAS HTrouve(Scr_Usr) ALORS
               //								ExceptionDéclenche(1, ChaîneConstruit("Impossible d'identifier l'utilisateur %1", sNomUsrRep))
               //							FIN
               //							
               //							oMsgRep.p_oUsr = ClUsr.GetObj(Scr_Usr.IDScr_Usr)
               							oMsgRep.p_oUsr = ClUsr.GetObj(nGetIdUsrDeNom(sNomUsrRep))
               							oMsgRep.p_sCMTR = xlsDonnée(IdFichierXLS,i,nCol_Reponse)
               							oMsgRep.ZF_Enregistre()
               							
               						FIN
               					fin
               				fin
               			fin
               		SINON
               			Erreur(ErreurInfo(errComplet))
               		FIN	
               	SINON
               		Erreur(ErreurInfo(errComplet))
               	FIN
               
               	xlsFerme(IdFichierXLS)	
               	
               FIN
               
               ClSprint.Calcul_Velocite_Moyenne()
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Taches_MAJ_Str_et_Adaptation
          identifier : 0x2cd53f2d030b21e8
          internal_properties : BwAAAAcAAADxkXN4EVtFaRCFeOCOvODPuUoR/cohs1iIl+QsbvwXKBZmngYvEc3XZ6XdAgpMNrChWw+ZpaIT30c6GxgK5SKdw7l8iximcNdEPDVaUTBByp307hqF/kD7tSRDzct2UVBiwt2zPu7Itzv5a62s7yCxHl75PKi4zNWKhrIsp2NlK8Np4X+lyrm3w7aeoSrSB2LY9IApAyRoWzi2xhRYI8fccxkJGtPXe/bXLCVmNioWE2X8e2+gtEufU7f2XdeCYCuPQG9Bo5GxACWeZquqzbl3wQtydZsGkF575PYdSXV+qdcjNMZ+DTwVwnZatXPei2g/OTcndmlyUjVPsByXfa+Wm066acSoXhsSypc009Z3Ce9ffeSTOUuKxg4nagFkEqV1pqHlwlEFHVO5MrXu8gDSUAfsz5WIe1c0rVM23elGQuhMrZn8szqMVnz9cepBSIUAvkm9wbMqCWU6oE6V3GkcDreciYNTEeaE4b6xQHYtj0Aa4W9i8c8Rne/wXf7Y9zcORCUWfAIg7vxRBmPN7hVb9Pt0frE7CmhrmTQYVin6NVKmwjle4tSWk5VXFTSr+Tje3W6sMHvlwLEfQj6Wwj8wnPpDrZGE3qz5ZpJBQPNMuDM5LSR3jojCKZ4xPNe+eVEmA0f2tfdUPgWAWKnmk8MhRxdxZjvJbO0VOY8S8k5DENTUqQulkwd4OvYckTaI77XL0SuFk97VzL3EFJlUdFk9eA5uR3ex0YCAlNnMBlFAIMU3LjAd116oUYl8SjKhdUaDflpj6KUnF0MfiGNtyk/ll1nex9TLEWp2ZvFJiwdSYYpK8MP0IEyv8JvdTQgAzLYBV1ezFIWPC1+wzUHnCkvecw==
          properties :
           x : 276
           y : 477
           width : 280
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               stTacheMaj est une STR_Tache
               stTacheAdaptation est une STR_Tache
               
               oPrj est un ClProjet <- oProjetDeNom("Migration")
               
               
               //nIdProjet est un entier = oPrj.Get_IdUnique()
               nIdUSMaj est un entier
               nIDUSAdaptation est un entier
               
               
               stUSMaj est un STR_UserStorie
               stUSAdaptation est un STR_UserStorie
               
               stUSMaj.sCodeUserStorie			= "SM45"
               stUSAdaptation.sCodeUserStorie	= "SA118"
               
               stUSMaj.sEnTantQue				= "Historique"
               stUSAdaptation.sEnTantQue		= "Historique"
               
               stUSMaj.sBesoinUserStorie		= "Maj structures de données"
               stUSAdaptation.sBesoinUserStorie	= "Adaptations des taches exécutées dans l'assistant" 
               
               stUSMaj.nIDProjet				= oPrj.ZF_Get_IdUnique()
               stUSAdaptation.nIDProjet		= oPrj.ZF_Get_IdUnique()
               
               stUSMaj.nIDResponsable			= goApp.m_oUsrCnx.ZF_Get_IdUnique()
               stUSAdaptation.nIDResponsable	= goApp.m_oUsrCnx.ZF_Get_IdUnique()
               
               nIdUSMaj						= User_Story_ajout(stUSMaj)
               nIDUSAdaptation					= User_Story_ajout(stUSAdaptation)
               
               POUR i = 1 _a_ 12
               	 stTacheMaj.sCodeTache = "SM45" + "-" + NumériqueVersChaîne(i)
               	 stTacheMaj.sDescription = "Maj structures de données"
               	 stTacheMaj.nIDUserStorie = nIdUSMaj
               	 stTacheMaj.nPoids = 5	
                	 stTacheMaj.nPoids_Prevision = 5	
                	 stTacheMaj.bDemarree = vrai
                	 stTacheMaj.bTermine = vrai
                	 stTacheMaj.nOrdre = 1
                	
               	 stTacheAdaptation.sCodeTache = "SA118" + "-" + NumériqueVersChaîne(i)
               	 stTacheAdaptation.sDescription ="Adaptations des taches exécutées dans l'assistant"
               	 stTacheAdaptation.nIDUserStorie = nIDUSAdaptation	
               	 stTacheAdaptation.nPoids = 5
               	 stTacheAdaptation.nPoids_Prevision = 5
               	 stTacheAdaptation.bDemarree = vrai
               	 stTacheAdaptation.bTermine = vrai
               	 stTacheAdaptation.nOrdre = 1
               	 
               	SELON i
               		cas 1 
               			stTacheMaj.nNumSprintCreation = 1
               			stTacheMaj.nNumSprintDemarage = 1
               			stTacheMaj.nNumSprintPrevision = 1
               			stTacheMaj.nNumSprintRealisation = 1
               			stTacheMaj.nNumSprintFin = 1
               			
               			stTacheAdaptation.nNumSprintCreation = 4
               			stTacheAdaptation.nNumSprintDemarage = 4
               			stTacheAdaptation.nNumSprintPrevision = 4
               			stTacheAdaptation.nNumSprintRealisation = 4
               			stTacheAdaptation.nNumSprintFin = 4
               			
               		cas 2
               			stTacheMaj.nNumSprintCreation = 1
               			stTacheMaj.nNumSprintDemarage = 1
               			stTacheMaj.nNumSprintPrevision = 1
               			stTacheMaj.nNumSprintRealisation = 1
               			stTacheMaj.nNumSprintFin = 1
               			
               			stTacheAdaptation.nNumSprintCreation = 5
               			stTacheAdaptation.nNumSprintDemarage = 5
               			stTacheAdaptation.nNumSprintPrevision = 5
               			stTacheAdaptation.nNumSprintRealisation = 5
               			stTacheAdaptation.nNumSprintFin = 5
               		
               		cas 3
               			stTacheMaj.nNumSprintCreation = 2
               			stTacheMaj.nNumSprintDemarage = 2
               			stTacheMaj.nNumSprintPrevision = 2
               			stTacheMaj.nNumSprintRealisation = 2
               			stTacheMaj.nNumSprintFin = 2
               			
               			stTacheAdaptation.nNumSprintCreation = 5
               			stTacheAdaptation.nNumSprintDemarage = 5
               			stTacheAdaptation.nNumSprintPrevision = 5
               			stTacheAdaptation.nNumSprintRealisation = 5
               			stTacheAdaptation.nNumSprintFin = 5
               		cas 4
               			stTacheMaj.nNumSprintCreation = 2
               			stTacheMaj.nNumSprintDemarage = 2
               			stTacheMaj.nNumSprintPrevision = 2
               			stTacheMaj.nNumSprintRealisation = 2
               			stTacheMaj.nNumSprintFin = 2
               			
               			stTacheAdaptation.nNumSprintCreation = 5
               			stTacheAdaptation.nNumSprintDemarage = 5
               			stTacheAdaptation.nNumSprintPrevision = 5
               			stTacheAdaptation.nNumSprintRealisation = 5
               			stTacheAdaptation.nNumSprintFin = 5
               		cas 5
               			stTacheMaj.nNumSprintCreation = 3
               			stTacheMaj.nNumSprintDemarage = 3
               			stTacheMaj.nNumSprintPrevision = 3
               			stTacheMaj.nNumSprintRealisation = 3
               			stTacheMaj.nNumSprintFin = 3
               			
               			stTacheAdaptation.nNumSprintCreation = 5
               			stTacheAdaptation.nNumSprintDemarage = 5
               			stTacheAdaptation.nNumSprintPrevision = 5
               			stTacheAdaptation.nNumSprintRealisation = 5
               			stTacheAdaptation.nNumSprintFin = 5
               			
               		cas 6
               			stTacheMaj.nNumSprintCreation = 4
               			stTacheMaj.nNumSprintDemarage = 4
               			stTacheMaj.nNumSprintPrevision = 4
               			stTacheMaj.nNumSprintRealisation = 4
               			stTacheMaj.nNumSprintFin = 4
               			
               			stTacheAdaptation.nNumSprintCreation = 6
               			stTacheAdaptation.nNumSprintDemarage = 6
               			stTacheAdaptation.nNumSprintPrevision = 6
               			stTacheAdaptation.nNumSprintRealisation = 6
               			stTacheAdaptation.nNumSprintFin = 6
               			
               		cas 7
               			stTacheMaj.nNumSprintCreation = 5
               			stTacheMaj.nNumSprintDemarage = 5
               			stTacheMaj.nNumSprintPrevision = 5
               			stTacheMaj.nNumSprintRealisation = 5
               			stTacheMaj.nNumSprintFin = 5
               			
               			stTacheAdaptation.nNumSprintCreation = 6
               			stTacheAdaptation.nNumSprintDemarage = 6
               			stTacheAdaptation.nNumSprintPrevision = 6
               			stTacheAdaptation.nNumSprintRealisation = 6
               			stTacheAdaptation.nNumSprintFin = 6
               			
               		cas 8
               			stTacheMaj.nNumSprintCreation = 5
               			stTacheMaj.nNumSprintDemarage = 5
               			stTacheMaj.nNumSprintPrevision = 5
               			stTacheMaj.nNumSprintRealisation = 5
               			stTacheMaj.nNumSprintFin = 5
               			
               			stTacheAdaptation.nNumSprintCreation = 7
               			stTacheAdaptation.nNumSprintDemarage = 7
               			stTacheAdaptation.nNumSprintPrevision = 7
               			stTacheAdaptation.nNumSprintRealisation = 7
               			stTacheAdaptation.nNumSprintFin = 7
               			
               		cas 9
               			stTacheMaj.nNumSprintCreation = 5
               			stTacheMaj.nNumSprintDemarage = 5
               			stTacheMaj.nNumSprintPrevision = 5
               			stTacheMaj.nNumSprintRealisation = 5
               			stTacheMaj.nNumSprintFin = 5
               			
               			stTacheAdaptation.nNumSprintCreation = 7
               			stTacheAdaptation.nNumSprintDemarage = 7
               			stTacheAdaptation.nNumSprintPrevision = 7
               			stTacheAdaptation.nNumSprintRealisation = 7
               			stTacheAdaptation.nNumSprintFin = 7
               			
               		cas 10
               			stTacheMaj.nNumSprintCreation = 6
               			stTacheMaj.nNumSprintDemarage = 6
               			stTacheMaj.nNumSprintPrevision = 6
               			stTacheMaj.nNumSprintRealisation = 6
               			stTacheMaj.nNumSprintFin = 6
               			
               			stTacheAdaptation.nNumSprintCreation = 7
               			stTacheAdaptation.nNumSprintDemarage = 7
               			stTacheAdaptation.nNumSprintPrevision = 7
               			stTacheAdaptation.nNumSprintRealisation = 7
               			stTacheAdaptation.nNumSprintFin = 7
               			
               		cas 11
               			stTacheMaj.nNumSprintCreation = 6
               			stTacheMaj.nNumSprintDemarage = 6
               			stTacheMaj.nNumSprintPrevision = 6
               			stTacheMaj.nNumSprintRealisation = 6
               			stTacheMaj.nNumSprintFin = 6
               			
               			stTacheAdaptation.nNumSprintCreation = 8
               			stTacheAdaptation.nNumSprintDemarage = 8
               			stTacheAdaptation.nNumSprintPrevision = 8
               			stTacheAdaptation.nNumSprintRealisation = 8
               			stTacheAdaptation.nNumSprintFin = 8
               			
               		cas 12
               			stTacheMaj.nNumSprintCreation = 8
               			stTacheMaj.nNumSprintDemarage = 8
               			stTacheMaj.nNumSprintPrevision = 8
               			stTacheMaj.nNumSprintRealisation = 8
               			stTacheMaj.nNumSprintFin = 8
               			
               			stTacheAdaptation.nNumSprintCreation = 8
               			stTacheAdaptation.nNumSprintDemarage = 8
               			stTacheAdaptation.nNumSprintPrevision = 8
               			stTacheAdaptation.nNumSprintRealisation = 8
               			stTacheAdaptation.nNumSprintFin = 8
               	FIN
               	
               	Taches_Ajout(stTacheMaj)
               	Taches_Ajout(stTacheAdaptation)
               	 
               FIN
               
               
               
               nId est un entier
               oUs est un ClUserStory dynamique
               lst est un tableau d'entiers = [nIdUSMaj, nIDUSAdaptation]
               pour tout nId de lst
               	oUs <- ClUserStory.GetObj(nId)
               	oUs.p_bTermine = Vrai
               	oUs.ZF_Enregistre()
               FIN
               
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Importer_piloting
          identifier : 0x2fd0d0f624a369dd
          internal_properties : BwAAAAcAAAD/K42NMo8YjKsmzq1g+raaYEqxuXDsNraZ+ss+aKjB2uXm4LZkwpTF++lCMIXtGffKu1DPCtNj4FuYxdgECn0H7AKcuevb2iU068BATs6eeqombN2ebVm2Qnr7wXtPbkGk+NMeKk2H6BD0zE2ZvEEA2/m+xsBIO12bzgcn20nmFHuUhtTnI+Lx/K+GZiYd7sCemg4BTJ5B+1n0A6CcgNJ1H0VDYjN2+oDOHQGQpJWVo+6id5fSxOrd3io7KCKrzX3fbqIVcwWwKOD1V6EBOY1sZVXOvYWup4lO06Rw255N92oPwvEdNKYCL940DC09W5aG+cgwQLV8b3bgJUJrgFqeqL9KwrD6e+/Gj2XIhDBh1wHQvgA++BqbwI35amNzNC3qOmcmXRGoNmhL55Gez2DWG9PkneAt5T6jqUB1UHIcftNvPwvynlsgd8R40MIqvnUTlR56CTRq4Bxc26JKK/1RNdS2QoxKu6V1RWLK0gOdNTtuojTqoe14nmaLhcFb5fxQV9woatv9rDf/qB71MJKGiXnlQXabg3xlSsFTucV3+Y5TmfWadLKDl4rWUHfiuJvj49GrJRceYDPDHWMNdjCH9F40Bkks4ke6jJT2gypA17iPLW5b/Gu1rOwsse+kbmNmebiemExoLHvMiWjSukpo7YSOugIk7bms/BzsoeoG61eOUhWdbsI3g4Ec+igKuVLJ1NqEV1mzVicM6Har6ZkZ7wYv8L51tAkvuvMPMgmf2wICe1EwlUfAu9UAKYjx0Zf3fhEI+JM=
          properties :
           x : 572
           y : 474
           width : 202
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               ImportProjet("\\prod-vm-file01\UnionMat\Service informatique\Procedures\Dev_logiciel\Piloting\User stories Piloting V2.xlsx",oProjetDeNom("Piloting"))
               
               //IdFichierXLS			est un xlsDocument
               //i						est un entier
               //sFichier				est une chaîne
               //
               //nPremiereligne			est un entier	= 2
               //
               ////Declatration VAriables
               //nIdUS					est un entier
               //stTache					est une STR_Tache
               //stUS					est une STR_UserStorie
               //
               //nCol_codeUS				est un entier	= 1
               //nCol_codeTache			est un entier	= 1
               //nCol_numSprint			est un entier	= 7
               //nCol_numSprintCrea		est un entier	= 10
               //nCol_Poids				est un entier	= 8
               //nCol_fin				est un entier	= 9
               //nCol_Role				est un entier	= 2
               //nCol_nom				est un entier	= 3
               //nCol_Besoin				est un entier	= 3
               //nCol_AfinDe				est un entier	= 4
               //nCol_commentaire		est un entier	= 5
               //nCol_Epic				est un entier	= 11
               //nCol_commentaire_Test	est un entier	= 12
               //
               //
               //oPrj est un ClProjet <- oProjetDeNom("Piloting")
               //
               //nNumeroOrdre est une entier = 0
               //// Ouvre le sélecteur de fichiers
               //sFichier = Dupplication_Fichier_Avant_Import("\\prod-vm-file01\UnionMat\Service informatique\Procedures\Dev_logiciel\Piloting\User stories Piloting V2.xlsx")
               //
               //SI sFichier <> "" ALORS
               //	
               //	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               //	
               //	SI ErreurDétectée = Faux ALORS 
               //		
               //		SI xlsFeuilleEnCours(IdFichierXLS, 1) ALORS	
               //			
               //			
               //			POUR i = nPremiereligne _À_ xlsNbLigne(IdFichierXLS,Vrai)
               //				
               //				//ON ne prend que les lignes qui ont un code et une description.
               //				SI xlsDonnée(IdFichierXLS,i,nCol_codeUS) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_Besoin) <> "" ALORS
               //					
               //					//Si le champ role n'est pas vide => c'est une US
               //					Si xlsDonnée(IdFichierXLS,i,nCol_Role) <> "" alors
               //						VariableRAZ(stUS)
               //						stUS.sCodeUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_codeUS)
               //						stUS.sEnTantQue			= xlsDonnée(IdFichierXLS,i,nCol_Role)
               //						stUS.sBesoinUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_Besoin)
               //						stUS.sAfindeUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_AfinDe)
               //						stUS.sCmtrGeneral		= xlsDonnée(IdFichierXLS,i,nCol_commentaire)
               //						stUS.sCmtrTest			= xlsDonnée(IdFichierXLS,i,nCol_commentaire_Test)
               //						stUS.nIDProjet			= oPrj.Get_IdUnique()
               //						stUS.nIDResponsable		= oPrj.p_oUsr_ChefProjet.Get_IdUnique()
               //						
               //						Si xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T" alors
               //							stUS.bAtester = vrai
               //							stUS.eEtatUserStorie = ClUserStory.ECompteNbUS.En_test_fonctionnel
               //						FIN
               //						
               //						//Ajout de l'epic, si présent
               //						stUS.nIdEpic = nCreeEpicSiBesoin(oPrj, xlsDonnée(IdFichierXLS,i,nCol_Epic))
               //
               //						nIdUS = User_Story_ajout(stUS)
               //						
               //						nNumeroOrdre = 0
               //						
               //					sinon //sinon c'est une tache
               //						
               //						si PAS (xlsDonnée(IdFichierXLS,i,nCol_nom) = SansEspace("") ET xlsDonnée(IdFichierXLS,i,nCol_numSprint) = SansEspace("")) alors
               //							VariableRAZ(stTache)
               //							stTache.sCodeTache				= xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               //							stTache.nNumSprintCreation		= xlsDonnée(IdFichierXLS,i,nCol_numSprintCrea)
               //							stTache.nNumSprintRealisation	= xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               //							stTache.nNumSprintPrevision		= stTache.nNumSprintRealisation
               //							//stTache.nNumSprintDemarage = stTache.nNumSprintCreation
               //							stTache.nIDUserStorie			= nIdUS
               //							stTache.sDescription			= xlsDonnée(IdFichierXLS,i,nCol_nom)
               //							stTache.sCommentaire			= xlsDonnée(IdFichierXLS,i,nCol_commentaire)
               //							
               //							//affectation du num d'ordre
               //							nNumeroOrdre++
               //							stTache.nOrdre					= nNumeroOrdre
               //							
               //							
               //							//Si le poids n'est pas indiqué --> null
               //							Si xlsDonnée(IdFichierXLS,i,nCol_Poids) <> "" alors
               //								stTache.nPoids				= xlsDonnée(IdFichierXLS,i,nCol_Poids)
               //								stTache.nPoids_Prevision	= stTache.nPoids
               //							sinon
               //								stTache.nPoids				= null
               //								stTache.nPoids_Prevision	= null
               //							fin
               //							
               //							Selon Vrai
               //								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "x"
               //									stTache.bDemarree			= vrai
               //									stTache.bAnnulee			= faux
               //									stTache.bTermine			= vrai
               //									stTache.nNumSprintFin		= stTache.nNumSprintCreation 
               //									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               //								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T"
               //									stTache.bDemarree			= vrai
               //									stTache.bAnnulee			= faux
               //									stTache.bTermine			= vrai 
               //									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               //								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "C"
               //									stTache.bDemarree			= Vrai
               //									stTache.bAnnulee			= Faux	
               //									stTache.nNumSprintFin		= 0
               //									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               //								cas xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A"
               //									stTache.bAnnulee			= vrai
               //									stTache.bDemarree			= faux
               //									stTache.nNumSprintFin		= 0
               //									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               //								AUTRE CAS
               //									stTache.bAnnulee			= Faux
               //									stTache.bDemarree			= Faux
               //									stTache.nNumSprintFin		= 0
               //									stTache.nNumSprintDemarage	= 0
               //							FIN
               //							Taches_Ajout(stTache)
               //						fin
               //					FIN
               //				fin
               //			FIN
               //			
               //		SINON
               //			Erreur(ErreurInfo(errComplet))
               //		FIN
               //	sinon
               //		erreur(erreurinfo(errComplet))
               //	FIN
               //	
               //	xlsferme(IdFichierXLS)
               //	
               //FIN
               //
               //
               //Import_Des_Criteres_Acceptation(oPrj.Get_IdUnique(), sFichier)
               //Import_Process(oPrj.Get_IdUnique(), sFichier)
               //
               //////////////////////////////////////////////////////////////////////////////////////////////////////
               //
               //
               //oPrjRP est un ClProjet = oProjetDeNom("Rech+Proche")
               //oUS est un ClUserStory dynamique
               //
               //pour tout element oUS de oPrj.aoListeUS(Vrai)
               //	si pas oUS.p_sCodeUserStory dans ("PLT001", "PLT002", "PLT003", "PLT004", "PLT005", "PLT006", "PLT013") ALORS
               //		oUS.p_oProjetParent = oPrjRP
               //	FIN
               //FIN
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Affecter_Projets
          identifier : 0x2ce801ac044bf5e8
          internal_properties : BwAAAAcAAAAkT5HqiW2JIyDgjb8lW177YDIhlfgcPEusGLv/2mtrjBaLd5zuXOfeup+zxz03d5iSqGyabmW0yLj1b3G/jLf0wPOCr5Hk66jsjVs8+4Mi3xjBHO/LqjLhHjDkoMUK94BBp0wmShgumtDNlrXon9Kaml5AfDM/bn//VV1TwSWYjUuMi3aQvmIBFvYRyAqLXRTPTcM4Wh13YaeZcy4pvX46E33DsCz4LBXEBS+Ota7xfr89CXJuKCGDs+1tH0zCS5qOPesVSFllKvdI5l+sC6YdgcTeT1/KTGEGvcRY3vt+N8aQ8SdsyBypqNMbjHcuTy+lwoijcD3qV32tnXnd2RMgDAgCqRGR7gChzBkgELWWWouSxJquYkQRwZlIF1J+oT42pJ+5Y6kxE67IWTN441uMVSdRoLytovGxvOhvqic5rF1MN4eY5VqP0wFJnlT5U+lusrnG4QNKiUTe4lmN682EaVL2B8Z3tQr9TeMqAttiitvIQOavxSR5oGGLs/SxL/zs/C5puJZ/r3PWVb+tE2BJ/dv6vfj+iAsmuNuZ23fvd6Jxmu/lo2xZ4lzEX+vH+H/cqKTkdeR5T5lbVpLVylZrwOh4JG3j2D78rYExwMbDVCOAe05jNaaCLod0sm8d9MW3HizcW13CsV6u1QbNWMvGkO8o1zKAIfTDIiL+JWbXAgGZ9ziBlg6Z5+dR37uD5Bfo4GmL7ESFtDDusvB3oKS+RL5eJQlnEhxjxomDYU6kSd2be/kQZMTqBGqlMSqztXK6rtjBcODpN25MzbceL1msF9J8+4j9GpRFr/X3NiU0XV9pdGQuiAk2sLjkR36morDqb408D3a9
          properties :
           x : 276
           y : 507
           width : 280
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               IdFichierXLS			est un xlsDocument
               Xlsnbligne_				est un entier
               i						est un entier
               sFichier				est une chaîne
               
               nPremiereligne			est un entier	= 2
               
               nCol_nom				est un entier	= 1
               nCol_CodePrj			est un entier	= 2
               nCol_Projet				est un entier	= 3
               
               nCol_Fini				est un entier	= 4
               nCol_Prio				est un entier	= 5
               nCol_Situation			est un entier	= 6
               nCol_TopDirection		est un entier	= 7
               nCol_Groupement			est un entier	= 8
               nCol_OrdreGroupement	est un entier	= 9
               nCol_Provision			est un entier	= 10
               
               
               
               nIdUsr					est un entier
               nIDProjet				est un entier
               oPrj					est un ClProjet dynamique
               
               //sFichier = Dupplication_Fichier_Avant_Import("L:\Service informatique\Service Développement\Normes et procédures de dev\utilisateurs Scrum.xlsx")		
               sFichier = Dupplication_Fichier_Avant_Import(cst_fichierutilisateurSCRUM)		
               
               
               SI sFichier <> "" ALORS
               	
               	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               	
               	SI ErreurDétectée = Faux ALORS
               		
               		SI xlsFeuilleEnCours(IdFichierXLS, 2) ALORS	
               			
               			Xlsnbligne_ =xlsNbLigne(IdFichierXLS,Vrai)
               			
               			//Réinitialisation de toutes les instance, pour éviter les desynchro
               			ClZF_ObjDB.ZF_LibereInstancesMemo()
               			
               			POUR i = nPremiereligne _À_ Xlsnbligne_
               				
               				SI xlsDonnée(IdFichierXLS,i,nCol_nom) <> "" ALORS
               					
               //					//Recherche de l'ID de l'utilisateur
               //					HLitRecherche(Scr_Usr,Nom,xlsDonnée(IdFichierXLS,i,nCol_nom),hIdentique+hLimiteParcours)
               //					si Htrouve(Scr_Usr)
               //						nIdUsr = Scr_Usr.IDScr_Usr
               //					sinon
               //						erreur(xlsDonnée(IdFichierXLS,i,nCol_nom) + " Introuvable")
               //					fin
               					nIdUsr = ngetidusrdenom(xlsDonnée(IdFichierXLS,i,nCol_nom))
               					si nIdUsr = 0 ALORS
               						trace(xlsDonnée(IdFichierXLS,i,nCol_nom) + " Introuvable")
               						nIdUsr = goApp.m_oUsrCnx.ZF_Get_IdUnique()
               					FIN
               					
               					//recherche de l'ID du projet
               					HLitRecherche(Scr_Projet,Nom,xlsDonnée(IdFichierXLS,i,nCol_Projet),hIdentique+hLimiteParcours)
               					SI pas HTrouve(Scr_Projet) ALORS
               						oPrj <- allouer un ClProjet
               						oPrj.p_sNom = xlsDonnée(IdFichierXLS,i,nCol_Projet)
               					sinon
               						oPrj <- ClProjet.GetObj(nIDProjet)
               					fin
               					oPrj.p_sCode					= xlsDonnée(IdFichierXLS, i, nCol_CodePrj)
               					oPrj.p_sGroupement				= xlsDonnée(IdFichierXLS, i, nCol_Groupement)
               					oPrj.p_nOrdreGrp				= xlsDonnée(IdFichierXLS, i, nCol_OrdreGroupement)
               					oPrj.p_nChargeProvisionelle		= xlsDonnée(IdFichierXLS, i, nCol_Provision)					
               					SI xlsDonnée(IdFichierXLS, i, nCol_TopDirection) ~= "x" ALORS
               						oPrj.p_bTop_Direction		= Vrai
               					FIN
               					
               					
               					oPrj.p_oUsr_ChefProjet = ClUsr.GetObj(nIdUsr)
               					oPrj.ZF_Enregistre()
               					oPrj.ReaffecteToutesUsAuCDP()
               					
               					
               					
               					si (xlsDonnée(IdFichierXLS,i,nCol_Prio) <> "" ou  xlsDonnée(IdFichierXLS,i,nCol_Situation) <> "") et goApp.m_nNumeroDuSprintActuel <> 0 ALORS
               						hraz(Scr_Projet_Situation)
               						Scr_Projet_Situation.Num_Sprint			= goapp.m_nNumeroDuSprintActuel
               						Scr_Projet_Situation.IDScr_Projet		= oPrj.ZF_Get_IdUnique()
               						Scr_Projet_Situation.Top_Prioritaire	= (xlsDonnée(IdFichierXLS,i,nCol_Prio) <> "")
               						Scr_Projet_Situation.CMTR				= xlsDonnée(IdFichierXLS,i,nCol_Situation)
               						si pas HAjoute(Scr_Projet_Situation) ALORS
               							ExceptionDéclenche(1, "Erreur enregistrement des situations de projet : " + rc + HErreurInfo())
               						FIN
               					FIN
               				FIN
               			FIN
               			
               			xlsFerme(IdFichierXLS)
               			
               		SINON
               			Erreur(ErreurInfo(errComplet))
               		FIN
               		
               		sReq				est une chaîne
               		sdPrjNonAffectes	est une source de données
               		sReq = [
               		SELECT
               			Scr_Projet.Nom
               		FROM Scr_Projet
               			LEFT OUTER JOIN Scr_Usr_Projet ON (Scr_Usr_Projet.IDScr_Projet = Scr_Projet.IDScr_Projet)
               		WHERE Scr_Usr_Projet.IDScr_Projet IS NULL
               		]
               		goapp.Rsql(sdPrjNonAffectes,sReq)
               		pour tout sdPrjNonAffectes
               			trace(ChaîneConstruit("Le projet %1 n'est affecté à personne", sdPrjNonAffectes.Nom))
               		FIN
               		
               		
               		//Affectation des invités sur les projets
               		
               		SI xlsFeuilleEnCours(IdFichierXLS, 3) ALORS	
               			
               			Xlsnbligne_ =xlsNbLigne(IdFichierXLS,Vrai)
               			
               			
               			POUR i = nPremiereligne _À_ Xlsnbligne_
               				
               				SI xlsDonnée(IdFichierXLS,i,nCol_nom) <> "" ALORS
               					
               					//Recherche de l'ID de l'utilisateur
               					nIdUsr = nGetIdUsrDeNom(xlsDonnée(IdFichierXLS,i,nCol_nom))
               					SI nIdUsr = 0 ALORS
               						Trace(xlsDonnée(IdFichierXLS,i,nCol_nom) + " Introuvable")
               						nIdUsr = goApp.m_oUsrCnx.ZF_Get_IdUnique()
               					FIN
               //					HLitRecherche(Scr_Usr,Nom,xlsDonnée(IdFichierXLS,i,nCol_nom),hIdentique+hLimiteParcours)
               //					SI HTrouve(Scr_Usr)
               //						nIdUsr = Scr_Usr.IDScr_Usr
               //					SINON
               //						Erreur(xlsDonnée(IdFichierXLS,i,nCol_nom) + " Introuvable")
               //					FIN
               					
               					//recherche de l'ID du projet
               					HLitRecherche(Scr_Projet,Nom,xlsDonnée(IdFichierXLS,i,nCol_Projet),hIdentique+hLimiteParcours)
               					SI HTrouve(Scr_Projet)
               						nIDProjet = Scr_Projet.IDScr_Projet
               					SINON
               						Erreur(xlsDonnée(IdFichierXLS,i,nCol_Projet) + " Introuvable")
               					FIN
               					
               					oPrj <- ClProjet.GetObj(nIDProjet)
               					oPrj.Invite_Ajoute(ClUsr.GetObj(nIdUsr))
               					oPrj.ZF_Enregistre()
               				fin
               			fin
               		fin
               	SINON
               		Erreur(ErreurInfo(errComplet))
               	FIN	
               	
               	xlsferme(IdFichierXLS)
               FIN
               
               
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Maj_etats
          identifier : 0x2ea9a7fd747c137a
          internal_properties : BwAAAAcAAAAEXyhJ7u32iYrEu6GnIOz88+l3rS0zfBsn1XCoiBUr7yUgP0Banj6KSv2jt8X794O15X5QJFOTRrJhdT/FIgmpiUKMyTXk3lthoVl24s/TWgq3mzRoGRBbdUy7X3qtnhHkpcZkZD0umuotH+hZ1HlWj99WTgPgqz6/ZGR7B3vc1W2limlPUByM1AiffyWEebm9FcIXt0DlPjuvQnqrPwtWI7c/clqHYSxIEEt/VkQpFcHt6jSpRjbhIsPvEMTl6hpZj1V1nopSNwrAKpYfQ6veaAbwSOpSbsMZBXTdPdzslGaIdM9KIEgmPJO0bSBQ/0SbcMKZPMJ2LP4p/aPo9m3O0XsaEaN3AmkL3box+7L3/2Fo+MWA1gl4OKt8A0OO1GBbuw08Oa74rqtm6/ALYM/+Z690FvmqE41iDpf2NGMqh7bKHz+bT2Eajj6+TwppnrYdYGUasINZ4K8/kzadvRi9IGQm2e8VoP9WqjgXgFMnx5bM2uTA58HOBd74nDxhKNsFQGQz/xyIKq5HVqB32VVwSgvYzxH080hTq14Mo5sa0tfvknVc+Ssuxz2F8HMJh5D3TlA41EoAnpiGUdUFuDu+tWpoxOwvrckLyBRo1lD2LxwkyQ6EH0lN1bJHQYd/7zoCEt4i7Nu5eMGdTK1JeOAzf8OC36E6Httaeyvjj2goIT6TD67mHCkeKGIMemeRIS6JJmkbKzTw+RVbi8XTxstfUVxiyVpmth9xUv1PgI5oJ+Ps8UIwsXXyYp6hu5MFuD/prIf8Kr1QlEjm3+Y8tqsAXxJR6rszKzqjEliiOE2b9bAMi3sTXTfLVz0UdZ0=
          properties :
           x : 276
           y : 535
           width : 280
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               oPrj				est un ClProjet dynamique
               oUS					est un ClUserStory dynamique
               oTache				est un ClTache dynamique
               nNbreUsFinies		est un entier
               nNbreTacheRestantes	est un entier
               
               sFiltrePrj			est une chaîne	//= "Mini Maxi"
               sFiltreUS			est une chaîne	//= "T0114"
               
               //bTteTacheHistoValide est un booléen
               
               
               
               pour tout element oPrj de ClProjet.aoListeProjets(Vrai).aItems()
               
               	goApp.TranDebut()
               	
               	si oPrj.p_sNom = sFiltrePrj ou sFiltrePrj = "" alors
               		
               		nNbreUsFinies = 0
               		
               //		Trace("----------------------------------")
               //		Trace("Projet : " + oPrj.p_sNom)
               		
               		pour tout element oUS de oPrj.aoListeUS(Vrai).aItems()
               			
               //			Trace("US : " + oUS.p_sCodeUserStory)
               			si oUS.p_sCodeUserStory = sFiltreUS ou sFiltreUS = "" alors
               				
               				
               				oUS.aoListeTaches(Vrai)
               //				bTteTacheHistoValide = Vrai
               //				POUR TOUT ÉLÉMENT oTache DE oUS.aoListeTaches(Vrai).aItems()
               //					
               //					si oTache
               //					
               //				FIN
               				
               				oUS.User_Story_Etat()
               				
               				
               				nNbreTacheRestantes = oUS.Get_NbreTache(ClUserStory.ECompteNbTache.A_faire) + ...
               					oUS.Get_NbreTache(ClUserStory.ECompteNbTache.EnCours)
               				
               				//
               				SI nNbreTacheRestantes = 0 et oUS.Get_NbreTache(ClUserStory.ECompteNbTache.Toutes) > 0 ALORS
               					//Il n'y a plus de taches à réaliser : 
               					
               					si oUS.bToutesTachesValidees() ALORS
               						oUS.p_bEstTestéParLeDemandeur	= Vrai
               						oUS.p_dDateMiseEnProd			= "20200101"
               						oUS.p_bTermine					= Vrai
               						nNbreUsFinies++
               					sinon
               						oUS.p_bEstTestéParLeDemandeur	= Faux
               						oUS.p_bTermine					= faux
               					FIN
               					
               					oUS.p_bEstTestéParEquipeDev			= Vrai
               					oUS.p_oEnvironnement_Test			= ClEnvironnement.GetObj(1)
               					oUS.p_dDateMiseADispo_EnTest		= "20200101"
               					oUS.p_oUsr_Test_Dev					= goApp.m_oUsrCnx
               				SINON
               					
               					SI oUS.Get_NbreTache(ClUserStory.ECompteNbTache.Toutes) = oUS.Get_NbreTache(ClUserStory.ECompteNbTache.Annulée) et ...
               							oUS.Get_NbreTache(ClUserStory.ECompteNbTache.Toutes) >= 1 ALORS
               						oUS.p_bAnnule	= Vrai
               						oUS.p_bTermine	= Vrai
               					sinon
               						oUS.p_bEstTestéParLeDemandeur	= Faux
               						oUS.p_bEstTestéParEquipeDev		= Faux
               						oUS.p_bTermine					= Faux
               					FIN
               					oUS.p_dDateMiseADispo_EnTest = ""
               				FIN
               				
               				
               				
               				oUS.ZF_Enregistre()
               				
               				
               				
               				POUR TOUT ELÉMENT oTache DE oUS.aoListeTaches().aItems()
               					//stop si oTache.p_sCodeTache = "BLM031j"
               					SI PAS oTache.p_nStatut DANS(ClTache.cstStatut_Suspendu) ALORS
               						oTache.p_nStatut = oTache.get_statut_tache()
               						oTache.ZF_Enregistre()
               					FIN
               				FIN
               				
               				
               				//				Trace("Est testé dev : " + oUS.m_bEstTestéParEquipeDev)
               				//				Trace("Est testé fct : " + oUS.m_bEstTestéParLeDemandeur)
               				//				Trace("Est terminé : " + oUS.m_bTermine)
               				
               				
               			FIN
               		FIN
               		
               		si sFiltreUS = "" alors
               			//			trace("Projet : Nbre US finies : " + nNbreUsFinies)
               			//			trace("Projet : Nbre US totale : " + TableauOccurrence(oPrj.aoListeUS()))
               			
               			si nNbreUsFinies = oPrj.aoListeUS().ZF_nTaille() et oPrj.aoListeUS().ZF_nTaille() > 0 ALORS
               				oPrj.p_bTop_Termine = vrai
               				oPrj.ZF_Enregistre()
               			FIN
               		FIN
               	FIN
               	
               	goApp.TranFin()
               FIN
               
               
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Importer_Fusion_UM_GM
          identifier : 0x208272c700991b3e
          internal_properties : BwAAAAcAAAAgeN3lEKoi/+MSQQ4ihR2gPtk0jeI7enRn4NNqeGDpSvSL7h3PpcmEUpXv5fAFaTCpO8hz3Phb+aFlFy1poxzk5RD4d1ei93jdf/wBc7IYwiVQUv5pPnNa6olMH/od0pvSe3VKzIRYPnx/I/+DrZchd3q/9QFIkbgacserlWgwmxkfttgMSyC9tw8QXoCwUjxLyC78LgycbYYXvMAVcgKOsucKWPFJQzBeoHMyJT+c7Ov+Z6sdEp/zE4PVoO7mKYyuXlwwqYxf/ueQgi4jYhS3bqEpu88dQ/sHTitcl+wFGY4zfVCSCnLkwJXayPk1afzfAG9qSfqMsUeyeCq2wvP292t+PsALaoEoPrL8IlzPxcBpJ6W5toM9YlDR33n7Yftj6qN82DpkaXD1MKPjlnTuVHFcINWcH2/HywN7wfsY5rwdn4zlN5dp5/Jn0H2JjGtqKdbZJnk+wwzGQsw3UEXd+PoQ8WkHNRj9GyUIPd4t8ebu9AnNVAWP0tQoJ1aI4fQbtXSdJZDhFXn/lZxmjVqKFuHz0GOAo5tdxLwd7qj584cHDxbVs7p+99A//jg5lvnMp10EFAqyc09dJmM4XVpxl1bUwR4RkupkMFn+hjMog+uFaa2oEyn+7jj1LeDL2rvPl6hLI7dEh5NS0uZDBRpspHao7a9Rqe7+xIUWbV5l6LPPW8tlUvXvEKAYK4SCUoUZAbMEFUv6GJb1lMNtIxRCCYXmqDUMhOKFwgp1Xe47xz0oxoi/No3ds3boqUNhWQ+0nQFqGcnb/QkBGQ==
          properties :
           x : 572
           y : 555
           width : 202
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               ImportProjet("L:\Service informatique\Procedures\Dev_logiciel\Fusion_UM_GM\User stories Fusion.xlsx",oProjetDeNom("Fusion UM GM"))
               //
               //IdFichierXLS			est un xlsDocument
               //i						est un entier
               //sFichier				est une chaîne
               //nPremiereligne			est un entier	= 2
               ////Declatration VAriables
               //nIdUS					est un entier
               //stTache					est une STR_Tache
               //stUS					est une STR_UserStorie
               //
               //nCol_codeUS				est un entier	= 1
               //nCol_codeTache			est un entier	= 1
               //nCol_numSprint			est un entier	= 7
               //nCol_numSprintCrea		est un entier	= 10
               //nCol_Poids				est un entier	= 8
               //nCol_fin				est un entier	= 9
               //nCol_Role				est un entier	= 2
               //nCol_nom				est un entier	= 3
               //nCol_Besoin				est un entier	= 3
               //nCol_AfinDe				est un entier	= 4
               //nCol_commentaire		est un entier	= 5
               //nCol_Epic				est un entier	= 11
               //nCol_commentaire_Test	est un entier	= 12
               //
               //
               //oPrj est un ClProjet <- oProjetDeNom("Fusion UM GM")
               //
               //nNumeroOrdre est une entier = 0
               //// Ouvre le sélecteur de fichiers
               //sFichier = Dupplication_Fichier_Avant_Import("L:\Service informatique\Procedures\Dev_logiciel\Fusion_UM_GM\User stories Fusion.xlsx")
               //
               //SI sFichier <> "" ALORS
               //	
               //	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               //	
               //	SI ErreurDétectée = Faux ALORS 
               //		
               //		SI xlsFeuilleEnCours(IdFichierXLS, 1) ALORS	
               //			
               //			
               //			POUR i = nPremiereligne _À_ xlsNbLigne(IdFichierXLS,Vrai)
               //				
               //				//ON ne prend que les lignes qui ont un code et une description.
               //				SI xlsDonnée(IdFichierXLS,i,nCol_codeUS) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_Besoin) <> "" ALORS
               //					
               //					//Si le champ role n'est pas vide => c'est une US
               //					SI xlsDonnée(IdFichierXLS,i,nCol_Role) <> "" ALORS
               //						VariableRAZ(stUS)
               //						stUS.sCodeUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_codeUS)
               //						stUS.sEnTantQue			= xlsDonnée(IdFichierXLS,i,nCol_Role)
               //						stUS.sBesoinUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_Besoin)
               //						stUS.sAfindeUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_AfinDe)
               //						stUS.sCmtrGeneral		= xlsDonnée(IdFichierXLS,i,nCol_commentaire)
               //						stUS.sCmtrTest			= xlsDonnée(IdFichierXLS,i,nCol_commentaire_Test)
               //						stUS.nIDProjet			= oPrj.Get_IdUnique()
               //						stUS.nIDResponsable		= oPrj.p_oUsr_ChefProjet.Get_IdUnique()
               //						
               //						SI xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T" ALORS
               //							stUS.bAtester = Vrai
               //							stUS.eEtatUserStorie = ClUserStory.ECompteNbUS.En_test_fonctionnel
               //						FIN
               //						
               //						//Ajout de l'epic, si présent
               //						stUS.nIdEpic = nCreeEpicSiBesoin(oPrj, xlsDonnée(IdFichierXLS,i,nCol_Epic))
               //						
               //						nIdUS = User_Story_ajout(stUS)
               //						
               //						nNumeroOrdre = 0
               //						
               //					SINON //sinon c'est une tache
               //						
               //						SI PAS (xlsDonnée(IdFichierXLS,i,nCol_nom) = SansEspace("") ET xlsDonnée(IdFichierXLS,i,nCol_numSprint) = SansEspace("")) ALORS
               //							VariableRAZ(stTache)
               //							stTache.sCodeTache				= xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               //							stTache.nNumSprintCreation		= xlsDonnée(IdFichierXLS,i,nCol_numSprintCrea)
               //							stTache.nNumSprintRealisation	= xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               //							stTache.nNumSprintPrevision		= stTache.nNumSprintRealisation
               //							//stTache.nNumSprintDemarage = stTache.nNumSprintCreation
               //							stTache.nIDUserStorie			= nIdUS
               //							stTache.sDescription			= xlsDonnée(IdFichierXLS,i,nCol_nom)
               //							stTache.sCommentaire			= xlsDonnée(IdFichierXLS,i,nCol_commentaire)
               //							
               //							//affectation du num d'ordre
               //							nNumeroOrdre++
               //							stTache.nOrdre					= nNumeroOrdre
               //							
               //							
               //							//Si le poids n'est pas indiqué --> null
               //							SI xlsDonnée(IdFichierXLS,i,nCol_Poids) <> "" ALORS
               //								stTache.nPoids				= xlsDonnée(IdFichierXLS,i,nCol_Poids)
               //								stTache.nPoids_Prevision	= stTache.nPoids
               //							SINON
               //								stTache.nPoids				= Null
               //								stTache.nPoids_Prevision	= Null
               //							FIN
               //							
               //							SELON Vrai
               //								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "x"
               //									stTache.bDemarree			= Vrai
               //									stTache.bAnnulee			= Faux
               //									stTache.bTermine			= Vrai
               //									stTache.nNumSprintFin		= stTache.nNumSprintCreation 
               //									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               //								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T"
               //									stTache.bDemarree			= Vrai
               //									stTache.bAnnulee			= Faux
               //									stTache.bTermine			= Vrai 
               //									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               //								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "C"
               //									stTache.bDemarree			= Vrai
               //									stTache.bAnnulee			= Faux	
               //									stTache.nNumSprintFin		= 0
               //									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               //								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A"
               //									stTache.bAnnulee			= Vrai
               //									stTache.bDemarree			= Faux
               //									stTache.nNumSprintFin		= 0
               //									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               //								AUTRE CAS
               //									stTache.bAnnulee			= Faux
               //									stTache.bDemarree			= Faux
               //									stTache.nNumSprintFin		= 0
               //									stTache.nNumSprintDemarage	= 0
               //							FIN
               //							Taches_Ajout(stTache)
               //						fin
               //					FIN
               //				fin
               //			FIN
               //			
               //		SINON
               //			Erreur(ErreurInfo(errComplet))
               //		FIN
               //	sinon
               //		erreur(erreurinfo(errComplet))
               //	FIN
               //	
               //	xlsferme(IdFichierXLS)
               //	
               //FIN
               //
               //
               //Import_Des_Criteres_Acceptation(oPrj.Get_IdUnique(), sFichier)
               //Import_Process(oPrj.Get_IdUnique(), sFichier)
               //
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Importer_Menuiserie_2021
          identifier : 0x208272ca009b238b
          internal_properties : BwAAAAcAAADXUN97tImGqlsGJpfhF8m5nC8kgDa5QTBvwz5obP3gBgT9N/iKhD03xVb48yVYisa//8zDdrlvKupVx7/ltQ2P4m6rvq6d3CgDnjoFmDWIpXdyQ5qI8lr9ss0191QYI2FKV2GrHWTDZpGtrtnLDQF9b4vJbbpt+7B96f0mGXq1snPXB8mq/AFtliED0V/eVocTk9/khaKP/mrsro0os0MvTE7cExhGEpw4dSrU8TDDCU1qMJNuBxQjJPeSsvMIr1PzJD/WuzmZ2nVw5BD1xGYkgm7LnzvfQxFOnsmqk1s+OOG62bUlcdf5YI8iQtWeZoY0BThvMfLAVXNsVjbFtmGprsXd1wYZDcpKEGGuvysD7yZtK4NlEbhkKCih3J/rSXtFfTNIjMEi5+vygw9ZALvXWk4Uh8sCHIs8Htir24ElsbQESW8Xo2TXktsM0lVhG+TQjuTCmOFV+cXZDWYnht5EXK8u7HsRoiYOsvpU4+awdlZ1liYzaLafBwtFwQ7AsCULlt5E/aZ6zyjE0n4m3yd1MIxrbZG2OomwMZWFjOqghBkqRb+nF1O2OP+I5EQ5ISbM+EFZSMYNbayQD3euycE6xZM8BOidnZSjuQZm/N8dRtf6JWymV+rW3ZlWHXZF16btpHhEE52j/eidF4SHw2837uEIMmO5UG5fC3YIbD/1+OwfMKVO+VcueqTcUIN/5il0K0YSCuA4cUzNxuq6NOjW7HdLy46x6qtJQF7KhIX/6WIeFOHNQAqgvxZ3Qim/N81hskwFeSFqjl7wnYNEYw==
          properties :
           x : 572
           y : 580
           width : 202
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               ImportProjet("L:\Service informatique\Procedures\Dev_logiciel\Menuiserie FP\User stories Menuiserie.xlsx", oProjetDeNom("Menuiserie FP"))
               //
               //IdFichierXLS			est un xlsDocument
               //i						est un entier
               //sFichier				est une chaîne
               //nPremiereligne			est un entier	= 2
               ////Declatration VAriables
               //nIdUS					est un entier
               //stTache					est une STR_Tache
               //stUS					est une STR_UserStorie
               //
               //nCol_codeUS				est un entier	= 1
               //nCol_codeTache			est un entier	= 1
               //nCol_numSprint			est un entier	= 7
               //nCol_numSprintCrea		est un entier	= 10
               //nCol_Poids				est un entier	= 8
               //nCol_fin				est un entier	= 9
               //nCol_Role				est un entier	= 2
               //nCol_nom				est un entier	= 3
               //nCol_Besoin				est un entier	= 3
               //nCol_AfinDe				est un entier	= 4
               //nCol_commentaire		est un entier	= 5
               //nCol_Epic				est un entier	= 11
               //nCol_commentaire_Test	est un entier	= 12
               //
               //
               //oPrj est un ClProjet <- oProjetDeNom("Menuiserie FP")
               //
               //nNumeroOrdre est une entier = 0
               //// Ouvre le sélecteur de fichiers
               //sFichier = Dupplication_Fichier_Avant_Import("L:\Service informatique\Procedures\Dev_logiciel\Menuiserie FP\User stories Meuiserie.xlsx")
               //
               //SI sFichier <> "" ALORS
               //	
               //	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               //	
               //	SI ErreurDétectée = Faux ALORS 
               //		
               //		SI xlsFeuilleEnCours(IdFichierXLS, 1) ALORS	
               //			
               //			
               //			POUR i = nPremiereligne _À_ xlsNbLigne(IdFichierXLS,Vrai)
               //				
               //				//ON ne prend que les lignes qui ont un code et une description.
               //				SI xlsDonnée(IdFichierXLS,i,nCol_codeUS) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_Besoin) <> "" ALORS
               //					
               //					//Si le champ role n'est pas vide => c'est une US
               //					SI xlsDonnée(IdFichierXLS,i,nCol_Role) <> "" ALORS
               //						VariableRAZ(stUS)
               //						stUS.sCodeUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_codeUS)
               //						stUS.sEnTantQue			= xlsDonnée(IdFichierXLS,i,nCol_Role)
               //						stUS.sBesoinUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_Besoin)
               //						stUS.sAfindeUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_AfinDe)
               //						stUS.sCmtrGeneral		= xlsDonnée(IdFichierXLS,i,nCol_commentaire)
               //						stUS.sCmtrTest			= xlsDonnée(IdFichierXLS,i,nCol_commentaire_Test)
               //						stUS.nIDProjet			= oPrj.Get_IdUnique()
               //						stUS.nIDResponsable		= oPrj.p_oUsr_ChefProjet.Get_IdUnique()
               //						
               //						SI xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T" ALORS
               //							stUS.bAtester = Vrai
               //							stUS.eEtatUserStorie = ClUserStory.ECompteNbUS.En_test_fonctionnel
               //						FIN
               //						
               //						//Ajout de l'epic, si présent
               //						stUS.nIdEpic = nCreeEpicSiBesoin(oPrj, xlsDonnée(IdFichierXLS,i,nCol_Epic))
               //						
               //						nIdUS = User_Story_ajout(stUS)
               //						
               //						nNumeroOrdre = 0
               //						
               //					SINON //sinon c'est une tache
               //						
               //						SI PAS (xlsDonnée(IdFichierXLS,i,nCol_nom) = SansEspace("") ET xlsDonnée(IdFichierXLS,i,nCol_numSprint) = SansEspace("")) ALORS
               //							VariableRAZ(stTache)
               //							stTache.sCodeTache				= xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               //							stTache.nNumSprintCreation		= xlsDonnée(IdFichierXLS,i,nCol_numSprintCrea)
               //							stTache.nNumSprintRealisation	= xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               //							stTache.nNumSprintPrevision		= stTache.nNumSprintRealisation
               //							//stTache.nNumSprintDemarage = stTache.nNumSprintCreation
               //							stTache.nIDUserStorie			= nIdUS
               //							stTache.sDescription			= xlsDonnée(IdFichierXLS,i,nCol_nom)
               //							stTache.sCommentaire			= xlsDonnée(IdFichierXLS,i,nCol_commentaire)
               //							
               //							//affectation du num d'ordre
               //							nNumeroOrdre++
               //							stTache.nOrdre					= nNumeroOrdre
               //							
               //							
               //							//Si le poids n'est pas indiqué --> null
               //							SI xlsDonnée(IdFichierXLS,i,nCol_Poids) <> "" ALORS
               //								stTache.nPoids				= xlsDonnée(IdFichierXLS,i,nCol_Poids)
               //								stTache.nPoids_Prevision	= stTache.nPoids
               //							SINON
               //								stTache.nPoids				= Null
               //								stTache.nPoids_Prevision	= Null
               //							FIN
               //							
               //							SELON Vrai
               //								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "x"
               //									stTache.bDemarree			= Vrai
               //									stTache.bAnnulee			= Faux
               //									stTache.bTermine			= Vrai
               //									stTache.nNumSprintFin		= stTache.nNumSprintCreation 
               //									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               //								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T"
               //									stTache.bDemarree			= Vrai
               //									stTache.bAnnulee			= Faux
               //									stTache.bTermine			= Vrai 
               //									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               //								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "C"
               //									stTache.bDemarree			= Vrai
               //									stTache.bAnnulee			= Faux	
               //									stTache.nNumSprintFin		= 0
               //									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               //								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A"
               //									stTache.bAnnulee			= Vrai
               //									stTache.bDemarree			= Faux
               //									stTache.nNumSprintFin		= 0
               //									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               //								AUTRE CAS
               //									stTache.bAnnulee			= Faux
               //									stTache.bDemarree			= Faux
               //									stTache.nNumSprintFin		= 0
               //									stTache.nNumSprintDemarage	= 0
               //							FIN
               //							Taches_Ajout(stTache)
               //						fin
               //					FIN
               //				fin
               //			FIN
               //			
               //		SINON
               //			Erreur(ErreurInfo(errComplet))
               //		FIN
               //	sinon
               //		erreur(erreurinfo(errComplet))
               //	FIN
               //	
               //	xlsferme(IdFichierXLS)
               //	
               //FIN
               //
               //
               //Import_Des_Criteres_Acceptation(oPrj.Get_IdUnique(), sFichier)
               //Import_Process(oPrj.Get_IdUnique(), sFichier)
               //
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Recalc_statut_sprints
          identifier : 0x211d6afb1cd3d912
          internal_properties : BwAAAAcAAAC0kofOJte/zJXM6YbIRvcMrnlHg8hO0F+fgbpBINjcBB+sa3AVE/jPumizdXRjGgdDas3HuXvwkaIwu273H0J0TV5aUblxMBVMXtMQhyXzwNCjgth5dXYUjqEeDzE9wrSgwG9rbMsw7otrkBHibW9hXcvTjOhK8BQv1CvaX+YgGNCR6ubRbySfUR3PzRS+U6WEZh0UNaiuOZataPn3E0k2Z/R4B70KefWTGc+gxqfOHg+m0iHIq3ZpT5piTJfuLhEHb5qNOSKQMj2mmD3iccBsy3JZXQt9quIi6s2EZrP1s8EkQmKU/B+kv4ucJogEGO+DZIOQGPiq9VtqwYgvO6moPVf12klYpAtu2/kY1b1tu6OPnGhj8VY2Sn0J+QEUxzasbD/ZCX0X6A5Ncl5Uexug+Oj5XQYNfF3+HSm/G0J8p8kxPLNtmRK2hcJhihRT/dLory48Vs3kjlwpHullr6OJn/eTBf0VeaNXZq3cnMFYp1PVBUam+TbWTjzPI6BXm3vySbMtS8rf/uPnDTONtRh22f6FA49yxFhQA3XD2V+hhPSoUcWqtYgiHonSde2VaMI8p+s6zAo7OqGkDgY1nGCmJl+n+HpbOGk46ONz7hIfJ6UJbApeG+QPCiSIKverIB7x9XukGrU6sP5vzdKh9veJuNjhpyeOX8x+7JUfLqMYTKApd8W9rU3NXu22zrKE3ZnL5HWo8EGUMgGimdWwv1mdMumR3Y3OdRRfU+tdKRqjC1VJbm3NQjI+TeHB3v/99DBR6btTaSyq7bHgcDJCF/dehjFy9LIDLziUYZo1Ay4TQve3Ui+PBMF+vl+hXRJu6a8gSlMfWxPsRxCnVr0HYA==
          properties :
           x : 276
           y : 565
           width : 280
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               
               
               oPrj				est un ClProjet dynamique
               oUS					est un ClUserStory dynamique
               oTache				est un ClTache dynamique
               
               
               pour tout element oPrj de ClProjet.aoListeProjets().aItems()
               	pour tout element oUS de oPrj.aoListeUS(Vrai).aItems()
               		POUR TOUT ELÉMENT oTache DE oUS.aoListeTaches().aItems()
               			si pas oTache.p_nStatut dans(ClTache.cstStatut_Suspendu) alors
               				oTache.p_nStatut = oTache.get_statut_tache()
               				oTache.ZF_Enregistre()
               			FIN
               		FIN
               	FIN
               FIN
               
               oSpr est un ClSprint dynamique
               
               pour tout element oSpr de ClSprint.aoListeSprint().aItems()
               	ClUserStory.Sprint_Points_Realise_Maj(oSpr.ZF_Get_IdUnique())
               FIN
               
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Importer_Client_Diffus
          identifier : 0x21a75e591ce61614
          internal_properties : BwAAAAcAAAAEyKXBq2e2Knx12NdguJnZ+jNIrX8WXJjagv+6AvABYgTfhWcl1siamlFegBH6OoKgvGI6O0cj/7Qw1Uba+1A/DddK0TrIsajNzCtLv/cQErJ2c2IgPCRvFX7YGZnIJlm5rZM4YLcNlbR971wTL+7BKzqagSrN+MNYY0OiwTbKtURNM3ETDc+fXv2LTVSUgxE0iE+cM16HoonZAMaROPqKBbxzgBbon/ZXRTt8lIzU7YXWxWA8qgbp2LNi4GfImxq4N5UDimIdG3MKOV6LI3hKVsafJ5wD4xiau9615jgUyPqOW5PVMKGdoTzt14ZjyDCQYxVn3xDBOSljqkDWtzdvvGI+pdCf5otzDklG4wlSfMuEqirqLgBIQf9INwf804OuSfojBeTcms6pV0z9qz5oSM5HE73tH7jv3TI+u6IcfoLsRm9zuEPY/7xCx1/0tK9IJJ2g1vjiOO5GG91JEZ3xNr+5pAlwb3lNpYSVO+GBWcx9Q4Zxo4nElFy/QOLft5pzNLk8XfWdrMH5bKvS5GScChCCYY8ho7wVIiv62J9d43nI9hN7gLDBmy6MvSDggOOMSjYFpj86HDdXJ4RC5naJJeWjinDkABWCHJbByLDIX+HS+ByU/kt1qGC6/j4ultMZbh3EaTJ6jsVetc39vg6kuqeBRH/uawc8lC6XNbPNZM2+JJ4PSUtuiEafSFadFC9ZqrJpISQ+IzInCWA5pmpw9Y71SglD+p95vHe+ieNxjz/JIjbS3ugqHoX2FZ1Nz2U4X6IHoOGNAmWL+KM=
          properties :
           x : 572
           y : 605
           width : 202
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               ImportProjet("L:\Service informatique\Procedures\Dev_logiciel\Client diffus\User stories Client diffus.xlsx",oProjetDeNom("Client diffus"))
               
               //sFichier				est une chaîne
               //
               //oPrj est un ClProjet <- oProjetDeNom("Menuiserie FP")
               //sFichier = Dupplication_Fichier_Avant_Import("L:\Service informatique\Procedures\Dev_logiciel\Menuiserie FP\User stories Meuiserie.xlsx")
               //
               //ImportProjet(sFichier, oPrj)
               //
               //
               //IdFichierXLS			est un xlsDocument
               //i						est un entier
               //nPremiereligne			est un entier	= 2
               ////Declatration VAriables
               //nIdUS					est un entier
               //stTache					est une STR_Tache
               //stUS					est une STR_UserStorie
               //
               //nCol_codeUS				est un entier	= 1
               //nCol_CodeTache			est un entier	= 1
               //nCol_numSprint			est un entier	= 7
               //nCol_numSprintCrea		est un entier	= 10
               //nCol_Poids				est un entier	= 8
               //nCol_fin				est un entier	= 9
               //nCol_Role				est un entier	= 2
               //nCol_nom				est un entier	= 3
               //nCol_Besoin				est un entier	= 3
               //nCol_AfinDe				est un entier	= 4
               //nCol_commentaire		est un entier	= 5
               //nCol_Epic				est un entier	= 11
               //nCol_commentaire_Test	est un entier	= 12
               //
               //
               //
               //nNumeroOrdre est une entier = 0
               //
               //SI sFichier <> "" ALORS
               //	
               //	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               //	
               //	SI ErreurDétectée = Faux ALORS 
               //		
               //		SI xlsFeuilleEnCours(IdFichierXLS, 1) ALORS	
               //			
               //			
               //			POUR i = nPremiereligne _À_ xlsNbLigne(IdFichierXLS,Vrai)
               //				
               //				//ON ne prend que les lignes qui ont un code et une description.
               //				SI xlsDonnée(IdFichierXLS,i,nCol_codeUS) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_Besoin) <> "" ALORS
               //					
               //					//Si le champ role n'est pas vide => c'est une US
               //					SI xlsDonnée(IdFichierXLS,i,nCol_Role) <> "" ALORS
               //						VariableRAZ(stUS)
               //						stUS.sCodeUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_codeUS)
               //						stUS.sEnTantQue			= xlsDonnée(IdFichierXLS,i,nCol_Role)
               //						stUS.sBesoinUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_Besoin)
               //						stUS.sAfindeUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_AfinDe)
               //						stUS.sCmtrGeneral		= xlsDonnée(IdFichierXLS,i,nCol_commentaire)
               //						stUS.sCmtrTest			= xlsDonnée(IdFichierXLS,i,nCol_commentaire_Test)
               //						stUS.nIDProjet			= oPrj.Get_IdUnique()
               //						stUS.nIDResponsable		= oPrj.p_oUsr_ChefProjet.Get_IdUnique()
               //						
               //						SI xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T" ALORS
               //							stUS.bAtester = Vrai
               //							stUS.eEtatUserStorie = ClUserStory.ECompteNbUS.En_test_fonctionnel
               //						FIN
               //						
               //						//Ajout de l'epic, si présent
               //						stUS.nIdEpic = nCreeEpicSiBesoin(oPrj, xlsDonnée(IdFichierXLS,i,nCol_Epic))
               //						
               //						nIdUS = User_Story_ajout(stUS)
               //						
               //						nNumeroOrdre = 0
               //						
               //					SINON //sinon c'est une tache
               //						
               //						SI PAS (xlsDonnée(IdFichierXLS,i,nCol_nom) = SansEspace("") ET xlsDonnée(IdFichierXLS,i,nCol_numSprint) = SansEspace("")) ALORS
               //							VariableRAZ(stTache)
               //							stTache.sCodeTache				= xlsDonnée(IdFichierXLS,i,nCol_CodeTache)
               //							stTache.nNumSprintCreation		= xlsDonnée(IdFichierXLS,i,nCol_numSprintCrea)
               //							stTache.nNumSprintRealisation	= xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               //							stTache.nNumSprintPrevision		= stTache.nNumSprintRealisation
               //							//stTache.nNumSprintDemarage = stTache.nNumSprintCreation
               //							stTache.nIDUserStorie			= nIdUS
               //							stTache.sDescription			= xlsDonnée(IdFichierXLS,i,nCol_nom)
               //							stTache.sCommentaire			= xlsDonnée(IdFichierXLS,i,nCol_commentaire)
               //							
               //							//affectation du num d'ordre
               //							nNumeroOrdre++
               //							stTache.nOrdre					= nNumeroOrdre
               //							
               //							
               //							//Si le poids n'est pas indiqué --> null
               //							SI xlsDonnée(IdFichierXLS,i,nCol_Poids) <> "" ALORS
               //								stTache.nPoids				= xlsDonnée(IdFichierXLS,i,nCol_Poids)
               //								stTache.nPoids_Prevision	= stTache.nPoids
               //							SINON
               //								stTache.nPoids				= Null
               //								stTache.nPoids_Prevision	= Null
               //							FIN
               //							
               //							SELON Vrai
               //								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "x"
               //									stTache.bDemarree			= Vrai
               //									stTache.bAnnulee			= Faux
               //									stTache.bTermine			= Vrai
               //									stTache.nNumSprintFin		= stTache.nNumSprintCreation 
               //									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               //								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T"
               //									stTache.bDemarree			= Vrai
               //									stTache.bAnnulee			= Faux
               //									stTache.bTermine			= Vrai 
               //									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               //								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "C"
               //									stTache.bDemarree			= Vrai
               //									stTache.bAnnulee			= Faux	
               //									stTache.nNumSprintFin		= 0
               //									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               //								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A"
               //									stTache.bAnnulee			= Vrai
               //									stTache.bDemarree			= Faux
               //									stTache.nNumSprintFin		= 0
               //									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               //								AUTRE CAS
               //									stTache.bAnnulee			= Faux
               //									stTache.bDemarree			= Faux
               //									stTache.nNumSprintFin		= 0
               //									stTache.nNumSprintDemarage	= 0
               //							FIN
               //							Taches_Ajout(stTache)
               //						fin
               //					FIN
               //				fin
               //			FIN
               //			
               //		SINON
               //			Erreur(ErreurInfo(errComplet))
               //		FIN
               //	sinon
               //		erreur(erreurinfo(errComplet))
               //	FIN
               //	
               //	xlsferme(IdFichierXLS)
               //	
               //FIN
               //
               //
               //Import_Des_Criteres_Acceptation(oPrj.Get_IdUnique(), sFichier)
               //Import_Process(oPrj.Get_IdUnique(), sFichier)
               //
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Importer_Base_Lunel
          identifier : 0x21a75e5e1cf72844
          internal_properties : BwAAAAcAAABorN301vkibhok9bfncKLfGbNJb8AJPE9zsDVXM8hPVO2ktpZcUmUbSyGFfeZ02KiMmH6Lm1xqJ5zGKRjt0ndbQHLdfH0sIREBuuK3tKyasa9yEKqZayoVZCgW7M5okqfDMj5yrykUOQ0LTTD70cqKlY4lAnzNE0ycqLmYlv2w/RcYzdyYDySF3aaa19J/C8415EqCzAkzUfXKhzl0FyhnW5EGcZnGMTXOuzXLP3PA/RZEIBfhSl/9oY1R8FdXLgAJSaW2vjbfhzcYx4px/J7vupLTE0C/tnYIkT7gkYVrZ3wnEnAs8ZWlZSzBZIlpRe1jgEkBbQ7fxesvr45wOkKhaTvQvZeUkAmKLvCFQb22MvPyIvs/kZh+KZx6AVf0Paj6O3jCZDIAJDRU8PHNq/OM90R+NucS9Sx/GM9f0exziPW4Ubil7f2shUdrnOU+1zuVpsiRqsX2UpJdnLy7705XcXMOZckRl1c7NHH8lTd4yxX9EiOriG2OhgVav5IPtsJaytZrnxwh/rXo8QLght1KZ9ItnMsE06JlH/YRhkEEzc6IZ56J0XCj5dHdApAgMznrDqPmckp+DvnIQkHyNq0T2B9UaWrBlhm42SEK5gJdGxiWhZfme12NRsd3fw6+Ox1ozOyRDbeYapmD8OpbcC/0Lx1wgwmFgeuYX99kTQts1PxUSQXzVlW+EIG8SwBzKfOouFdS96XMy2w2spkvcB/6ph5Wv1cmZvEhE7xTV4UgrXbj/M1Og0SdRLSz/bZz81iIsJm4hq5GKsA=
          properties :
           x : 572
           y : 630
           width : 202
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               ImportProjet("L:\Service informatique\Procedures\Dev_logiciel\Base Menuiserie\User stories Base menuiserie.xlsx", oProjetDeNom("Base Lunel"))
               //IdFichierXLS			est un xlsDocument
               //i						est un entier
               //sFichier				est une chaîne
               //nPremiereligne			est un entier	= 2
               ////Declatration VAriables
               //nIdUS					est un entier
               //stTache					est une STR_Tache
               //stUS					est une STR_UserStorie
               //
               //nCol_codeUS				est un entier	= 1
               //nCol_codeTache			est un entier	= 1
               //nCol_numSprint			est un entier	= 7
               //nCol_numSprintCrea		est un entier	= 10
               //nCol_Poids				est un entier	= 8
               //nCol_fin				est un entier	= 9
               //nCol_Role				est un entier	= 2
               //nCol_nom				est un entier	= 3
               //nCol_Besoin				est un entier	= 3
               //nCol_AfinDe				est un entier	= 4
               //nCol_commentaire		est un entier	= 5
               //nCol_Epic				est un entier	= 11
               //nCol_commentaire_Test	est un entier	= 12
               //
               //
               //oPrj est un ClProjet <- oProjetDeNom("Menuiserie FP")
               //
               //nNumeroOrdre est une entier = 0
               //// Ouvre le sélecteur de fichiers
               //sFichier = Dupplication_Fichier_Avant_Import("L:\Service informatique\Procedures\Dev_logiciel\Menuiserie FP\User stories Meuiserie.xlsx")
               //
               //SI sFichier <> "" ALORS
               //	
               //	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               //	
               //	SI ErreurDétectée = Faux ALORS 
               //		
               //		SI xlsFeuilleEnCours(IdFichierXLS, 1) ALORS	
               //			
               //			
               //			POUR i = nPremiereligne _À_ xlsNbLigne(IdFichierXLS,Vrai)
               //				
               //				//ON ne prend que les lignes qui ont un code et une description.
               //				SI xlsDonnée(IdFichierXLS,i,nCol_codeUS) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_Besoin) <> "" ALORS
               //					
               //					//Si le champ role n'est pas vide => c'est une US
               //					SI xlsDonnée(IdFichierXLS,i,nCol_Role) <> "" ALORS
               //						VariableRAZ(stUS)
               //						stUS.sCodeUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_codeUS)
               //						stUS.sEnTantQue			= xlsDonnée(IdFichierXLS,i,nCol_Role)
               //						stUS.sBesoinUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_Besoin)
               //						stUS.sAfindeUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_AfinDe)
               //						stUS.sCmtrGeneral		= xlsDonnée(IdFichierXLS,i,nCol_commentaire)
               //						stUS.sCmtrTest			= xlsDonnée(IdFichierXLS,i,nCol_commentaire_Test)
               //						stUS.nIDProjet			= oPrj.Get_IdUnique()
               //						stUS.nIDResponsable		= oPrj.p_oUsr_ChefProjet.Get_IdUnique()
               //						
               //						SI xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T" ALORS
               //							stUS.bAtester = Vrai
               //							stUS.eEtatUserStorie = ClUserStory.ECompteNbUS.En_test_fonctionnel
               //						FIN
               //						
               //						//Ajout de l'epic, si présent
               //						stUS.nIdEpic = nCreeEpicSiBesoin(oPrj, xlsDonnée(IdFichierXLS,i,nCol_Epic))
               //						
               //						nIdUS = User_Story_ajout(stUS)
               //						
               //						nNumeroOrdre = 0
               //						
               //					SINON //sinon c'est une tache
               //						
               //						SI PAS (xlsDonnée(IdFichierXLS,i,nCol_nom) = SansEspace("") ET xlsDonnée(IdFichierXLS,i,nCol_numSprint) = SansEspace("")) ALORS
               //							VariableRAZ(stTache)
               //							stTache.sCodeTache				= xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               //							stTache.nNumSprintCreation		= xlsDonnée(IdFichierXLS,i,nCol_numSprintCrea)
               //							stTache.nNumSprintRealisation	= xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               //							stTache.nNumSprintPrevision		= stTache.nNumSprintRealisation
               //							//stTache.nNumSprintDemarage = stTache.nNumSprintCreation
               //							stTache.nIDUserStorie			= nIdUS
               //							stTache.sDescription			= xlsDonnée(IdFichierXLS,i,nCol_nom)
               //							stTache.sCommentaire			= xlsDonnée(IdFichierXLS,i,nCol_commentaire)
               //							
               //							//affectation du num d'ordre
               //							nNumeroOrdre++
               //							stTache.nOrdre					= nNumeroOrdre
               //							
               //							
               //							//Si le poids n'est pas indiqué --> null
               //							SI xlsDonnée(IdFichierXLS,i,nCol_Poids) <> "" ALORS
               //								stTache.nPoids				= xlsDonnée(IdFichierXLS,i,nCol_Poids)
               //								stTache.nPoids_Prevision	= stTache.nPoids
               //							SINON
               //								stTache.nPoids				= Null
               //								stTache.nPoids_Prevision	= Null
               //							FIN
               //							
               //							SELON Vrai
               //								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "x"
               //									stTache.bDemarree			= Vrai
               //									stTache.bAnnulee			= Faux
               //									stTache.bTermine			= Vrai
               //									stTache.nNumSprintFin		= stTache.nNumSprintCreation 
               //									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               //								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T"
               //									stTache.bDemarree			= Vrai
               //									stTache.bAnnulee			= Faux
               //									stTache.bTermine			= Vrai 
               //									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               //								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "C"
               //									stTache.bDemarree			= Vrai
               //									stTache.bAnnulee			= Faux	
               //									stTache.nNumSprintFin		= 0
               //									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               //								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A"
               //									stTache.bAnnulee			= Vrai
               //									stTache.bDemarree			= Faux
               //									stTache.nNumSprintFin		= 0
               //									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               //								AUTRE CAS
               //									stTache.bAnnulee			= Faux
               //									stTache.bDemarree			= Faux
               //									stTache.nNumSprintFin		= 0
               //									stTache.nNumSprintDemarage	= 0
               //							FIN
               //							Taches_Ajout(stTache)
               //						fin
               //					FIN
               //				fin
               //			FIN
               //			
               //		SINON
               //			Erreur(ErreurInfo(errComplet))
               //		FIN
               //	sinon
               //		erreur(erreurinfo(errComplet))
               //	FIN
               //	
               //	xlsferme(IdFichierXLS)
               //	
               //FIN
               //
               //
               //Import_Des_Criteres_Acceptation(oPrj.Get_IdUnique(), sFichier)
               //Import_Process(oPrj.Get_IdUnique(), sFichier)
               //
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Importer_Esm
          identifier : 0x21d5c1ca4c9a6a93
          internal_properties : BwAAAAcAAABBJ6LRxm98xWmIXH7Q0U/2kpM7E2rtaQryp52v4WI17Cd9nNLFEsTxlkJMNnAY+kje2ojoNvT1hPX2zagT1TgiCIgqi/63F7w8RW8ASYuhW0UGgHnhZMnLHlwBzRTR0s/lN0fU0VQ/gvOgL4nQyZxB7xNZL4BOYRl4uIxdOmEygeM2wKdPa6J7Aa1AR6Jt+RrEQZrCxRlLBFNgklEagxgrRLzhnC5e3FHilnQJQiklykxFqaZVgkDDNeoiecatNvuyRZZQUjpVMKVmLNqnXPNSEi86FK6hKcFMi8T0TbP0KuzvXCIKwGTgd47cczK0W2Pz6Y4PyCSAYEgJqQMf7pg4azyKEneLRYWcr5+p7Z/cRPUNfG6X8NfLim5tC083QRG19qdPVL+Rqo74uPn5NHZylT5UEO2JpGjpvF+LEflqkuVCDzpD3LjwE78P/GH9YCHbICYTONr3CGy5zA7RZi8x5U3Mh8fGiF018tse+yblS/0BSpXxHxCA4ouklbRgcVLYUDCzGwsYROeESbS+m+TazZLxhvnrxkwDfcANrqQNiWrMl5hXcMcjYXffcBoZHu/bvE14oOENPNuIlsVq+wRd5sWu3/wcNQVCm4fWvr/cHQzgY62obvzbnEUhWzbRNPeKou7ri9z1vO1TfIYTC3TIHe9+SUMWInEc+Q3U/PFwzzkx8kiigu9XnVrhPDUzqw53Q07Jaq8cJOv1BRhqmEE7A1sH0B2rz7m/XdKP57DZsdgggmQSPle7w7WwxMNLg5y9
          properties :
           x : 572
           y : 530
           width : 202
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               
               ImportProjet("L:\Service informatique\Procedures\Dev_logiciel\ESM\User stories ESM.xlsx",oProjetDeNom("ESM"))
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Importer_Test_Auto
          identifier : 0x2239cdc940e885b3
          internal_properties : BwAAAAcAAACBlcbPzO4O/RoAHMKJ/s4Q2iNAvLRmTMCjIWkgUxm8ac19x5YZrmzAc73ZDWD9sDo7/kDPglf8h61G15mIHtBlfWuhH/Kr6n23vWlsXfbVdb7Qc1oOTs3C4qybyUA8XeuJPnDvwobCZc3G57h4c7Rcrly8ee+UsbHIB+0A8LMrvarl1qg7manpFmkiC0tQ5CAI3ul+Z2KwwZfMqZn+cbFuFAVDqjc2biDIvTgywVQwmTS5vc1QmvDv6u/mio8DAJO2pthKcmMlkyS6V53LH8DQaGRcGdgGhdE1FpU4Qi4zkNDo1RKl1tbyHufUxKabvnqB9f3rtkpJSPfJP39gGR1Os2Qqhwte5ZHTDNHa5MiboRo5z1eeqsOtvnx2oAueUpFxPOEmLxL57S4oveESqrw0+7hX8nrUepHjtBCv/guUbJfa4LJe+YJ94ceURign6v/vGOW7HY0Xq/otJepWyOELT3ejHdJTNNifhvrYCEBH6XmnAzO4UKxFpiuJCYcWb4zQTv/N5GIUqWdScMwHQ5Dadd7qPLbGOA/ru12ps4gViUJizLqMu+1ok9lqzgmr+MHXVkjEN1pPR9n8bd3jGfqjCoerD+c55ew0m+o2s0Gua4BGilF53bxwckuQp9VbNhGgvEnlCm0jnaeZof4WqeoeAwvXWUABnJoUAazmbsaJ8qTYVnFCUrABjElLFWM8xOl8qDR6+AmJqKgcAwn6QdIyALxPEZLet367jxNpCPBtd8KXNWnBa2mBTdH1outxCYGZE+Kygn/sRT3p
          properties :
           x : 572
           y : 502
           width : 202
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               
               ImportProjet("L:\Service informatique\Procedures\Dev_logiciel\Tests automatiques\User stories Tests automatiques.xlsx",oProjetDeNom("Tests auto"))
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Importer_Pool_V3
          identifier : 0x22d138b801a79a3c
          internal_properties : BwAAAAcAAACZf4KKLOXY6btId1dbIajqAl7hZOO5+DZoONqtd/4Or+SluGMJyeqd+EEAcJrDQ3uTi/Wfl7TQww+A5u2gYihhOXi70GzjJYhbbJ0spYpnRSee2kOsaESkESR1FU7tA7iMYwHFO4UQEcsTfVtNar1v+Qv1wAaNz+VGp+AybWgUSWmmwDx6FzmDadWsJ6f64bNWRTcTQkd3N+3kr9I6YeU0KQysEocH9dwoOS0MsOsYby1QbD4sMFoubryWnqQIHJjPnYT5eEifWtLE/GIo08FS/zM1qBL5aJm7F9/iOxbpjHoB1AyMFdZH+2YK70I6tTyaNRZ8LVdejwQOgRzAhcvOuEfXSeFo3q+yjesEXHNR+mqzQnOpuXkxto9pK81BGAodM8PkJXLqAxNksh70dk+WnoUEkkbe9QIt2riTpJgm5LfaYxR2NYfuNUdSpZ9cChEVTq56beCgWy25UfcfrA95YuyXzBIsiy6qpIFIS1dTgTG/Y3dJiJQiQMq1xFIQqG98lmw99e+iazXCWCh1j50VD2ZE8f+xwrPkujSufbP3oUZE9vBcb951EfVsnppS7o0/xzfKWbJfpy2cjZ5QeItMF10M0HB8uqULhJS0zuNQ8USC80jE6bobB+gIPCUs3gS8pUPw0IrWAlxGOHmzzUOloIeZ4KdjDKqoN9zhWoiRm6L8uEV92NqDByosIxSemuc14opi454A5rl5q8Zi4D6RofeL8jTsfBcXH8DAwiwK6CyRf6sjGcpcw5k8bTAQUdysaA==
          properties :
           x : 780
           y : 7
           width : 172
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               ImportProjet("L:\Service informatique\Procedures\Dev_logiciel\Pool transport\User stories pool V3.xlsx", oProjetDeNom("Pool V3"))
               //IdFichierXLS			est un xlsDocument
               //i						est un entier
               //sFichier				est une chaîne
               //nPremiereligne			est un entier	= 2
               ////Declatration VAriables
               //nIdUS					est un entier
               //stTache					est une STR_Tache
               //stUS					est une STR_UserStorie
               //
               //nCol_codeUS				est un entier	= 1
               //nCol_codeTache			est un entier	= 1
               //nCol_numSprint			est un entier	= 7
               //nCol_numSprintCrea		est un entier	= 10
               //nCol_Poids				est un entier	= 8
               //nCol_fin				est un entier	= 9
               //nCol_Role				est un entier	= 2
               //nCol_nom				est un entier	= 3
               //nCol_Besoin				est un entier	= 3
               //nCol_AfinDe				est un entier	= 4
               //nCol_commentaire		est un entier	= 5
               //nCol_Epic				est un entier	= 11
               //nCol_commentaire_Test	est un entier	= 12
               //
               //
               //oPrj est un ClProjet <- oProjetDeNom("Menuiserie FP")
               //
               //nNumeroOrdre est une entier = 0
               //// Ouvre le sélecteur de fichiers
               //sFichier = Dupplication_Fichier_Avant_Import("L:\Service informatique\Procedures\Dev_logiciel\Menuiserie FP\User stories Meuiserie.xlsx")
               //
               //SI sFichier <> "" ALORS
               //	
               //	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               //	
               //	SI ErreurDétectée = Faux ALORS 
               //		
               //		SI xlsFeuilleEnCours(IdFichierXLS, 1) ALORS	
               //			
               //			
               //			POUR i = nPremiereligne _À_ xlsNbLigne(IdFichierXLS,Vrai)
               //				
               //				//ON ne prend que les lignes qui ont un code et une description.
               //				SI xlsDonnée(IdFichierXLS,i,nCol_codeUS) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_Besoin) <> "" ALORS
               //					
               //					//Si le champ role n'est pas vide => c'est une US
               //					SI xlsDonnée(IdFichierXLS,i,nCol_Role) <> "" ALORS
               //						VariableRAZ(stUS)
               //						stUS.sCodeUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_codeUS)
               //						stUS.sEnTantQue			= xlsDonnée(IdFichierXLS,i,nCol_Role)
               //						stUS.sBesoinUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_Besoin)
               //						stUS.sAfindeUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_AfinDe)
               //						stUS.sCmtrGeneral		= xlsDonnée(IdFichierXLS,i,nCol_commentaire)
               //						stUS.sCmtrTest			= xlsDonnée(IdFichierXLS,i,nCol_commentaire_Test)
               //						stUS.nIDProjet			= oPrj.Get_IdUnique()
               //						stUS.nIDResponsable		= oPrj.p_oUsr_ChefProjet.Get_IdUnique()
               //						
               //						SI xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T" ALORS
               //							stUS.bAtester = Vrai
               //							stUS.eEtatUserStorie = ClUserStory.ECompteNbUS.En_test_fonctionnel
               //						FIN
               //						
               //						//Ajout de l'epic, si présent
               //						stUS.nIdEpic = nCreeEpicSiBesoin(oPrj, xlsDonnée(IdFichierXLS,i,nCol_Epic))
               //						
               //						nIdUS = User_Story_ajout(stUS)
               //						
               //						nNumeroOrdre = 0
               //						
               //					SINON //sinon c'est une tache
               //						
               //						SI PAS (xlsDonnée(IdFichierXLS,i,nCol_nom) = SansEspace("") ET xlsDonnée(IdFichierXLS,i,nCol_numSprint) = SansEspace("")) ALORS
               //							VariableRAZ(stTache)
               //							stTache.sCodeTache				= xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               //							stTache.nNumSprintCreation		= xlsDonnée(IdFichierXLS,i,nCol_numSprintCrea)
               //							stTache.nNumSprintRealisation	= xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               //							stTache.nNumSprintPrevision		= stTache.nNumSprintRealisation
               //							//stTache.nNumSprintDemarage = stTache.nNumSprintCreation
               //							stTache.nIDUserStorie			= nIdUS
               //							stTache.sDescription			= xlsDonnée(IdFichierXLS,i,nCol_nom)
               //							stTache.sCommentaire			= xlsDonnée(IdFichierXLS,i,nCol_commentaire)
               //							
               //							//affectation du num d'ordre
               //							nNumeroOrdre++
               //							stTache.nOrdre					= nNumeroOrdre
               //							
               //							
               //							//Si le poids n'est pas indiqué --> null
               //							SI xlsDonnée(IdFichierXLS,i,nCol_Poids) <> "" ALORS
               //								stTache.nPoids				= xlsDonnée(IdFichierXLS,i,nCol_Poids)
               //								stTache.nPoids_Prevision	= stTache.nPoids
               //							SINON
               //								stTache.nPoids				= Null
               //								stTache.nPoids_Prevision	= Null
               //							FIN
               //							
               //							SELON Vrai
               //								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "x"
               //									stTache.bDemarree			= Vrai
               //									stTache.bAnnulee			= Faux
               //									stTache.bTermine			= Vrai
               //									stTache.nNumSprintFin		= stTache.nNumSprintCreation 
               //									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               //								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T"
               //									stTache.bDemarree			= Vrai
               //									stTache.bAnnulee			= Faux
               //									stTache.bTermine			= Vrai 
               //									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               //								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "C"
               //									stTache.bDemarree			= Vrai
               //									stTache.bAnnulee			= Faux	
               //									stTache.nNumSprintFin		= 0
               //									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               //								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A"
               //									stTache.bAnnulee			= Vrai
               //									stTache.bDemarree			= Faux
               //									stTache.nNumSprintFin		= 0
               //									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               //								AUTRE CAS
               //									stTache.bAnnulee			= Faux
               //									stTache.bDemarree			= Faux
               //									stTache.nNumSprintFin		= 0
               //									stTache.nNumSprintDemarage	= 0
               //							FIN
               //							Taches_Ajout(stTache)
               //						fin
               //					FIN
               //				fin
               //			FIN
               //			
               //		SINON
               //			Erreur(ErreurInfo(errComplet))
               //		FIN
               //	sinon
               //		erreur(erreurinfo(errComplet))
               //	FIN
               //	
               //	xlsferme(IdFichierXLS)
               //	
               //FIN
               //
               //
               //Import_Des_Criteres_Acceptation(oPrj.Get_IdUnique(), sFichier)
               //Import_Process(oPrj.Get_IdUnique(), sFichier)
               //
              type : 18
            -
              type : 161
              enabled : false
        -
          name : INT_SansNom1
          identifier : 0x22d1398b02edd468
          internal_properties : BwAAAAcAAADG4TM4syofgMdgt+OGDdJ3ngDLVvKkHSwUV85hknULtQ8LAkNFPerKRHJVtckVpQTRcebyeKLgwXOkJ18xqmU7zlIGOUdEgzBar4MfEF59UPcUHlnk/QBEBfSSjRGGlpJvGkP7DOzaVNagtzdCnNeEuS2uOXuvXPXY3oQ5jQYvuhm4nCTK0aL+hwbma2CVlt+7E8wMK0uquga9KEQ8fINQvWV7eZRCjb5/lSLdCWV3tTbggUDYzQXc6gAj6gN/tttOQaFtIh0+LMy4vqeDf09mRK59ZJOP2YwgGJKat3zC3IeRN+rLvfFYeOTe94Qx6qyNb2NBn+g5vgBeckMdbw/EBIRWCe9SXmAaZRWmFwjWLXuuQGQQQ/5k4zeWtf2Fi/kDVRi2R81d3En2Z47KoVKDL9BbbjyxzWqP4LR1rGPKGFfClvE8EtcRpuQi5r07/jlm5vSvi5DZd3KaLPOP7V5Sod/xEkJk750vXMnMhSLmTY1AK6RSkBzuh9D5dd0X1RckGljGxp6CKzK3NXfjd8wfO9eSQ14/hTkKW9VbQGUvZVgANf/5HiLevcFFIEXvxRGbro2LGMHlvgLk6aqAUBl6pKUJF1VP7RJHuq8OM0ciJHObPfIFdxA3t29CWqT8AtJclyHlk7B2+XnmAU+eH+QLocagmji7fcSaV74bFbc9gTdRGmaQURYnpKYpFuHp+33N6iVN+PupiAr7FchjRsQCv1GeykckMaEddPUaHuiWl+BEB35LHLk4MoQfUG1NHEGJlytyzO1U/FwAZ0MzYSbvgSpBgVbM8P67hhVzouB3FU+7mhdMkUTTdxH3/ffvntlIp/qpuVHamz9sKA4m58BMn9bdVzlDGS9IM15dRpdwNLKMoCmq/L7OHCE8aVUaBIC2+PiULHdkrGn/HIllHcB0DohqZjs9y8qncKRwelhTKexgH2LyvtsWeFL0QF8ky4C4JA4HIpueztMTZEpRUadSqCT5bHsIK1jB8V7NHXvbq7VEd7GjO3N4ScNWEMFFJVbUIGmazbDjJK7cTpsRnQ+/rEyfoR2vXnFWvTdl/DBbec02N6/tcIFCWaaJgvYMOcCFa6IZKcFYf6nqM1K3ck7BccXPKFC52yaUsH7AxcMp
          properties :
           x : 305
           y : 34
           width : 138
           height : 30
          options :
           -
             internal_properties : BwAAAAcAAABNZll9hwfDf1f+JWiFyIAnTYsZUEH6NQy+s1xZIei65FESsyumjL5U9iQUnwgWUAEadiAQIBiPsovEUSCA8/q3CIcsZeTvgVB8gjKr0q1e/JfZK/3uiiS+5bN+YVA1H0RkDZD2T7MOH8nQ6r6zC1oogMgT0m6R1g==
          type : 5
          controls : []
          code_elements :
           type_code : 5
           p_codes :
            -
              code : |1+
               //MoiMême = vrai
              type : 14
        -
          name : BTN_Importer_OP100ans
          identifier : 0x23184002023933f2
          internal_properties : BwAAAAcAAACY1AC7FWxhJXvFDVpnIopJc9bTWZvF+7NcKThjR58O28YpY8gDvPbQgk/vKJzXQqVBrcQ2Y8/NNuk+ZY+zumJIX+VUwZv1cf53n7qjsTVfRgptQKhjXIT2cbgJSExTgO2ovSgFtsbIw0TTg/yfTwPUgpry85HBbxPT/cH1B2p44S01Zd5R/gfvvGtG9f3fnd8Ne9uXcPcFLu/JsOhfBQs3l6s6Z8RVgO5AMOS6NjaRPfliBTdUfZdaPbHnLqwsRh94BVo1I6D38ExMG3oMYspps0NmIB9ynAhbXFFqHbfDJvL8MY3ad0Dq3zTEG9+5UQCbHQxN0eHVQ25CVB58aDE0BeKhEMLEWjDhmdzo2RJdlR/FoRiIporUrC4Ba3R5FkFiVz/SjJ/GIt4wbZm1FAtT6grx2dGAO3Zo8XB0kz3Lw3GNRljVM1IaAFUJdSVUXjwAHDmjdZxpcJzcO1/nqrbK7Eeh72dzZMzQqNUElnkOkt1Yplf+fHdNhrLULfdIDTcuj+nEzME+3OTNmsjdOkrqO0u2aYYZhQbDXIPxM5bCHvIv9tJ/iYpJq14rhTIpfzSNYY2gdcTEcKiC6VEPWO1fgwRZk7zw73JKQX5mYFvzxD/f+cv8ue83quJyczNm0sXYWqCBsve+h2UOWd9VJGwOuURvkQw0dW/Ril9XKSYQLxLwZTElNE5/alLNxhtCyqDwmcNs+mrfHKQJXhIMSla7gHshZP69qs8T3DNjqmmdPVZ4YGNPVkKqVvT/ymnh57GL6p6nX3Q=
          properties :
           x : 780
           y : 34
           width : 172
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               ImportProjet("L:\Service informatique\Procedures\Dev_logiciel\op100ans\User stories op100ans.xlsx", oProjetDeNom("OP 100 ans"))
               //IdFichierXLS			est un xlsDocument
               //i						est un entier
               //sFichier				est une chaîne
               //nPremiereligne			est un entier	= 2
               ////Declatration VAriables
               //nIdUS					est un entier
               //stTache					est une STR_Tache
               //stUS					est une STR_UserStorie
               //
               //nCol_codeUS				est un entier	= 1
               //nCol_codeTache			est un entier	= 1
               //nCol_numSprint			est un entier	= 7
               //nCol_numSprintCrea		est un entier	= 10
               //nCol_Poids				est un entier	= 8
               //nCol_fin				est un entier	= 9
               //nCol_Role				est un entier	= 2
               //nCol_nom				est un entier	= 3
               //nCol_Besoin				est un entier	= 3
               //nCol_AfinDe				est un entier	= 4
               //nCol_commentaire		est un entier	= 5
               //nCol_Epic				est un entier	= 11
               //nCol_commentaire_Test	est un entier	= 12
               //
               //
               //oPrj est un ClProjet <- oProjetDeNom("Menuiserie FP")
               //
               //nNumeroOrdre est une entier = 0
               //// Ouvre le sélecteur de fichiers
               //sFichier = Dupplication_Fichier_Avant_Import("L:\Service informatique\Procedures\Dev_logiciel\Menuiserie FP\User stories Meuiserie.xlsx")
               //
               //SI sFichier <> "" ALORS
               //	
               //	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               //	
               //	SI ErreurDétectée = Faux ALORS 
               //		
               //		SI xlsFeuilleEnCours(IdFichierXLS, 1) ALORS	
               //			
               //			
               //			POUR i = nPremiereligne _À_ xlsNbLigne(IdFichierXLS,Vrai)
               //				
               //				//ON ne prend que les lignes qui ont un code et une description.
               //				SI xlsDonnée(IdFichierXLS,i,nCol_codeUS) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_Besoin) <> "" ALORS
               //					
               //					//Si le champ role n'est pas vide => c'est une US
               //					SI xlsDonnée(IdFichierXLS,i,nCol_Role) <> "" ALORS
               //						VariableRAZ(stUS)
               //						stUS.sCodeUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_codeUS)
               //						stUS.sEnTantQue			= xlsDonnée(IdFichierXLS,i,nCol_Role)
               //						stUS.sBesoinUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_Besoin)
               //						stUS.sAfindeUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_AfinDe)
               //						stUS.sCmtrGeneral		= xlsDonnée(IdFichierXLS,i,nCol_commentaire)
               //						stUS.sCmtrTest			= xlsDonnée(IdFichierXLS,i,nCol_commentaire_Test)
               //						stUS.nIDProjet			= oPrj.Get_IdUnique()
               //						stUS.nIDResponsable		= oPrj.p_oUsr_ChefProjet.Get_IdUnique()
               //						
               //						SI xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T" ALORS
               //							stUS.bAtester = Vrai
               //							stUS.eEtatUserStorie = ClUserStory.ECompteNbUS.En_test_fonctionnel
               //						FIN
               //						
               //						//Ajout de l'epic, si présent
               //						stUS.nIdEpic = nCreeEpicSiBesoin(oPrj, xlsDonnée(IdFichierXLS,i,nCol_Epic))
               //						
               //						nIdUS = User_Story_ajout(stUS)
               //						
               //						nNumeroOrdre = 0
               //						
               //					SINON //sinon c'est une tache
               //						
               //						SI PAS (xlsDonnée(IdFichierXLS,i,nCol_nom) = SansEspace("") ET xlsDonnée(IdFichierXLS,i,nCol_numSprint) = SansEspace("")) ALORS
               //							VariableRAZ(stTache)
               //							stTache.sCodeTache				= xlsDonnée(IdFichierXLS,i,nCol_codeTache)
               //							stTache.nNumSprintCreation		= xlsDonnée(IdFichierXLS,i,nCol_numSprintCrea)
               //							stTache.nNumSprintRealisation	= xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               //							stTache.nNumSprintPrevision		= stTache.nNumSprintRealisation
               //							//stTache.nNumSprintDemarage = stTache.nNumSprintCreation
               //							stTache.nIDUserStorie			= nIdUS
               //							stTache.sDescription			= xlsDonnée(IdFichierXLS,i,nCol_nom)
               //							stTache.sCommentaire			= xlsDonnée(IdFichierXLS,i,nCol_commentaire)
               //							
               //							//affectation du num d'ordre
               //							nNumeroOrdre++
               //							stTache.nOrdre					= nNumeroOrdre
               //							
               //							
               //							//Si le poids n'est pas indiqué --> null
               //							SI xlsDonnée(IdFichierXLS,i,nCol_Poids) <> "" ALORS
               //								stTache.nPoids				= xlsDonnée(IdFichierXLS,i,nCol_Poids)
               //								stTache.nPoids_Prevision	= stTache.nPoids
               //							SINON
               //								stTache.nPoids				= Null
               //								stTache.nPoids_Prevision	= Null
               //							FIN
               //							
               //							SELON Vrai
               //								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "x"
               //									stTache.bDemarree			= Vrai
               //									stTache.bAnnulee			= Faux
               //									stTache.bTermine			= Vrai
               //									stTache.nNumSprintFin		= stTache.nNumSprintCreation 
               //									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               //								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T"
               //									stTache.bDemarree			= Vrai
               //									stTache.bAnnulee			= Faux
               //									stTache.bTermine			= Vrai 
               //									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               //								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "C"
               //									stTache.bDemarree			= Vrai
               //									stTache.bAnnulee			= Faux	
               //									stTache.nNumSprintFin		= 0
               //									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               //								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A"
               //									stTache.bAnnulee			= Vrai
               //									stTache.bDemarree			= Faux
               //									stTache.nNumSprintFin		= 0
               //									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               //								AUTRE CAS
               //									stTache.bAnnulee			= Faux
               //									stTache.bDemarree			= Faux
               //									stTache.nNumSprintFin		= 0
               //									stTache.nNumSprintDemarage	= 0
               //							FIN
               //							Taches_Ajout(stTache)
               //						fin
               //					FIN
               //				fin
               //			FIN
               //			
               //		SINON
               //			Erreur(ErreurInfo(errComplet))
               //		FIN
               //	sinon
               //		erreur(erreurinfo(errComplet))
               //	FIN
               //	
               //	xlsferme(IdFichierXLS)
               //	
               //FIN
               //
               //
               //Import_Des_Criteres_Acceptation(oPrj.Get_IdUnique(), sFichier)
               //Import_Process(oPrj.Get_IdUnique(), sFichier)
               //
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Vérif_pres_trello
          identifier : 0x2376aaf0aa53cb01
          internal_properties : BwAAAAcAAAAKHY/wgxm1x0gAeStt51rXWBJZoaYuzp2+epxMiNJQR8PQJmfNsT7fk/DEkhwqTKuDiSNFrfYz6Yle8MwuI+RvXRhZdsipIl0pN/nbuCFd1OC/awNx7NRRG+jGIpGeMY40+736P0TmcPGti+pSQaWeE4X5s9ASBjBa5tRR7ezwK3QhA8q65laxZqQXTJQHU3iVe4+eLJWD4c8DybKjKdga8YNHxkL8nI20K52m2zbrrq1DNXgIeOUvNyv3F1oSmVK4z4M3giEpCkdiqK+iS5RxZ3q+ydlKIMVKh6Ls0LcoV6R2tQVCHERF4A1JVCUOffcDkPSR1pFK+52bq+FzsT14eqZy49OxquDJ3pcs+lHEysV0BGz8FlzxhSvmY7zSlyKY5tOPpcklp5oCVy8K913wc71RchZdVoW5onpEu0gk3y4HGqIrBvcIWIjYD+ku8lC3pfSFIMgb9vENUTqy6NTzjmn9ijk8riPafOqDPxCNreSju/EaXrGCOcRmaIky+i/h6y3Qd4+MmPhdLDCehPe4cmIBrOfHDUz326Y25NAqwm9gqd6UsF3ux2PDuBiov6bty5d3qKHq/Mo+sc8O42VS0WPD4/xkFZuZHHCSwWOCq4BnYlVaBoPfS2Zru2Qy58DIGQf7Er5fyif5oMOO5bo1ueoTyJ9mOFVm1mzY4my0zg/mCV3X45pJIurIw7g4QBsitK5glvbY1y13X4PoCdxsIlRUvUzUPy18ivPh6Gr6gZXdNbFoyC5SrNQfj1iDu1qKaBIZQJCH+6ICy2G4m8MAw4CCf2xtmPCRTVNBULOes/0vUp7Y0nusOg6yAYTAtEoMfYM2AUSP
          properties :
           x : 67
           y : 589
           width : 122
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               zaLstTacheImportes = ClTrello_SCRUM::JSON_ListeTachesTrello()
               stCompo est un col_compo.STR_compo_pr_us_ta
               POUR TOUT ÉLÉMENT stCompo DE COL_Compo.astCompo_pr_us_ta(ClProjet.aoListeProjets())
               	SI 70 < stCompo.oTache.p_nNum_Sprint_Realisation <= goApp.m_nNumeroDuSprintActuel ET ...
               			PAS stCompo.oTache.p_nStatut DANS(ClTache.cstStatut_realise, ClTache.cstStatut_Annulee) ALORS
               		
               		SI TableauCherche(zaLstTacheImportes,tcLinéaire, stCompo.oTache.p_sCodeTache) <= 0 ALORS
               			Trace([
               			La tache [%stCompo.oTache.p_sCodeTache%] aurait du commencer (sp. [%stCompo.oTache.p_nNum_Sprint_Realisation%]), n'est pas clôturée et n'est pas présente dans trello ([%stCompo.oTache.p_sDescription%]).
               			])
               		FIN
               	FIN
               FIN
               
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Créer_typres_divers
          identifier : 0x2396427e56bec582
          internal_properties : BwAAAAcAAAAvMCwyvFtJCsSG8Zx7R6dZxnDpB/1D3gyz/x6eNZ3yJFiafdC2DUxgCxYYcEtZSeoTlExwOHruYOruXXLN4kiocyPUSc+ZxbhKMVT/sRgbECy9xu62VBdz9k1fVOH94T8YZL5/RhggDGTc70mlwxevhLBvGFmScExs/8tlBiUJ/mbiKFj1rVGoEgMoUcC4VnQBSISJH6xcSSTF3mg/lmhghW9FuRL9IkB++ds+9JNT0shFTU5vni1N8bUB0a+f0/pQHeHDk8ZhFmpHpZB3BYKrIKXUE3GP86EjBXcdjw/CaH0j8v/VruWSpLhtUFURZgtVLsa8C10PRqPjvFeHLa6xR0qzXoZo1HGIwcKUc4ToaqdEmdZY+ngo++8v1Fpk19RDGfwfuQGthdfCSLEO7nIcoPeRt1iBRpfEm+JFDq/KJk0OoNS9Azl+vhE2YFQXDNOi6u6BzL1zfoW8Sb8lL4oC3W5zisk9/D8Sdyy45qWpFuWwzycIm1HQl0vE03Z1aCZY5oEUy4r+tq64GIl5nWUBn4OTDimmbdpNhq7FySvmH1S/hyrgAU/K93B7u0ElT3tesC8bfBjmhAbDUxqnLlndhIwVraapH6+ZP5xVtiroLpPoagvQzc9j8/MPQKsVbfkVgmtPBiEvjleG6vApjuaarmU/fMOet/phmRLxgkE1L4Yup8ZPmdhtDL0kuTf9ycWsFk6iG4ImLZV45fy1PnGVuxJp+rl8xKQj698WDvfSxjrtURBJeBoBhjWG7iGQP2WZhYU+PfR0xi90UowBMNk92qAzLIldKY+UL+7CSqW/OTQwpCj1vvx/E5rxVnnKGA9RE//2Odil8TUmLg==
          properties :
           x : 33
           y : 213
           width : 200
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1-
               si hnbenr(Scr_Environnement) = 0 ALORS
               	hraz(Scr_Environnement)
               	Scr_Environnement.IDSrc_Environnement = 1
               	Scr_Environnement.Libelle = "Production"
               	HAjoute(Scr_Environnement,hFixeIdAuto)
               
               	hraz(Scr_Environnement)
               	Scr_Environnement.IDSrc_Environnement = 2
               	Scr_Environnement.Libelle = "Pré prod"
               	HAjoute(Scr_Environnement,hFixeIdAuto)
               FIN
               
               
               si hnbenr(Scr_Process_Metier_Intervenant_Type) = 0 ALORS
               	hraz(Scr_Process_Metier_Intervenant_Type)
               	Scr_Process_Metier_Intervenant_Type.IDScr_Process_Metier_Intervenant_Type = 1
               	Scr_Process_Metier_Intervenant_Type.Libelle = "Action manuelle"
               	HAjoute(Scr_Process_Metier_Intervenant_Type,hFixeIDAuto)
               
               	hraz(Scr_Process_Metier_Intervenant_Type)
               	Scr_Process_Metier_Intervenant_Type.IDScr_Process_Metier_Intervenant_Type = 2
               	Scr_Process_Metier_Intervenant_Type.Libelle = "Action par intervenant"
               	HAjoute(Scr_Process_Metier_Intervenant_Type,hFixeIDAuto)
               
               	hraz(Scr_Process_Metier_Intervenant_Type)
               	Scr_Process_Metier_Intervenant_Type.IDScr_Process_Metier_Intervenant_Type = 3
               	Scr_Process_Metier_Intervenant_Type.Libelle = "Action automatique"
               	HAjoute(Scr_Process_Metier_Intervenant_Type,hFixeIDAuto)
               
               	hraz(Scr_Process_Metier_Intervenant_Type)
               	Scr_Process_Metier_Intervenant_Type.IDScr_Process_Metier_Intervenant_Type = 4
               	Scr_Process_Metier_Intervenant_Type.Libelle = "Attente"
               	HAjoute(Scr_Process_Metier_Intervenant_Type,hFixeIDAuto)
               
               	hraz(Scr_Process_Metier_Intervenant_Type)
               	Scr_Process_Metier_Intervenant_Type.IDScr_Process_Metier_Intervenant_Type = 5
               	Scr_Process_Metier_Intervenant_Type.Libelle = "Sous process"
               	HAjoute(Scr_Process_Metier_Intervenant_Type,hFixeIDAuto)
               
               	hraz(Scr_Process_Metier_Intervenant_Type)
               	Scr_Process_Metier_Intervenant_Type.IDScr_Process_Metier_Intervenant_Type = 6
               	Scr_Process_Metier_Intervenant_Type.Libelle = "Condition"
               	HAjoute(Scr_Process_Metier_Intervenant_Type,hFixeIDAuto)
               FIN
               
               
               SI HNbEnr(Scr_CritereAccept_Composant_Type) = 0 ALORS
               	HRAZ(Scr_CritereAccept_Composant_Type)
               	Scr_CritereAccept_Composant_Type.IDScr_CritereAccept_Composant_Type = ClCritereAccept_Composant::cst_EtantDonneQue
               	Scr_CritereAccept_Composant_Type.Libelle	= "Etant donné que"
               	Scr_CritereAccept_Composant_Type.Ordre		= ClCritereAccept_Composant::cst_EtantDonneQue
               	HAjoute(Scr_CritereAccept_Composant_Type,hFixeIdAuto)
               	
               	HRAZ(Scr_CritereAccept_Composant_Type)
               	Scr_CritereAccept_Composant_Type.IDScr_CritereAccept_Composant_Type = ClCritereAccept_Composant::cst_AuMomentDe
               	Scr_CritereAccept_Composant_Type.Libelle	= "Au moment de"
               	Scr_CritereAccept_Composant_Type.Ordre		= ClCritereAccept_Composant::cst_AuMomentDe
               	HAjoute(Scr_CritereAccept_Composant_Type,hFixeIdAuto)
               	
               	HRAZ(Scr_CritereAccept_Composant_Type)
               	Scr_CritereAccept_Composant_Type.IDScr_CritereAccept_Composant_Type = ClCritereAccept_Composant::cst_JattendQue
               	Scr_CritereAccept_Composant_Type.Libelle	= "J'attend que"
               	Scr_CritereAccept_Composant_Type.Ordre		= ClCritereAccept_Composant::cst_JattendQue
               	HAjoute(Scr_CritereAccept_Composant_Type,hFixeIdAuto)
               	
               FIN
               
               
               SI HNbEnr(Scr_CritereAccept_Etat) = 0 ALORS
               
               	HRAZ(Scr_CritereAccept_Etat)			
               	Scr_CritereAccept_Etat.IDScr_CritereAccept_Etat = ClCritereAccept::cst_Critere_En_cours_de_rédaction
               	Scr_CritereAccept_Etat.Libelle = "en cours de rédaction"
               	HAjoute(Scr_CritereAccept_Etat, hFixeIdAuto)
               						
               	HRAZ(Scr_CritereAccept_Etat)			
               	Scr_CritereAccept_Etat.IDScr_CritereAccept_Etat = ClCritereAccept::cst_Critere_Validé_a_implémenter
               	Scr_CritereAccept_Etat.Libelle = "Validé - à implémenter"
               	HAjoute(Scr_CritereAccept_Etat, hFixeIdAuto)
               						
               	HRAZ(Scr_CritereAccept_Etat)			
               	Scr_CritereAccept_Etat.IDScr_CritereAccept_Etat = ClCritereAccept::cst_Critere_Validé
               	Scr_CritereAccept_Etat.Libelle = "Validé"
               	HAjoute(Scr_CritereAccept_Etat, hFixeIdAuto)
               						
               	HRAZ(Scr_CritereAccept_Etat)			
               	Scr_CritereAccept_Etat.IDScr_CritereAccept_Etat = ClCritereAccept::cst_Critere_Regression
               	Scr_CritereAccept_Etat.Libelle = "Regression"
               	HAjoute(Scr_CritereAccept_Etat, hFixeIdAuto)
               						
               	HRAZ(Scr_CritereAccept_Etat)			
               	Scr_CritereAccept_Etat.IDScr_CritereAccept_Etat = ClCritereAccept::cst_Critere_Abandonné
               	Scr_CritereAccept_Etat.Libelle = "Abandonné"
               	HAjoute(Scr_CritereAccept_Etat, hFixeIdAuto)
               						
               	HRAZ(Scr_CritereAccept_Etat)			
               	Scr_CritereAccept_Etat.IDScr_CritereAccept_Etat = ClCritereAccept::cst_Critere_Doublon
               	Scr_CritereAccept_Etat.Libelle = "Doublon"
               	HAjoute(Scr_CritereAccept_Etat, hFixeIdAuto)
               fin
              type : 18
            -
              type : 161
              enabled : false
     -
       internal_properties : BwAAAAcAAABHdxihhH34jud5524q4dy+DA90UeHiT5JHiAADmPyvMvE1xpo5WIUCgMXVmYhcltOVOVTiVlnMFc53iSC+rICqYMPYt5IA427OrfOZeMFz2iD1cgK51S411p3WL/R9hyGw9PImPQpTp7l1Yq6DZOPuEVG/lK+b3A==
       controls :
        -
          name : TBL_Tableaux
          identifier : 0x20b7e47b28a91d71
          internal_properties : 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
          properties :
           x : 6
           y : 36
           width : 412
           height : 106
          columns :
           -
             name : COL_Liste
             identifier : 0x20b7e47b28aa1d71
             internal_properties : BwAAAAcAAAArQahx5xyPJhOWiTkJeTZgrCe+wQpJJAmQLElautpcM7YkgK7gnfvxxnqY8z/RqMZ7BM5u2bQD7z4UrZlTboVRbLf4GutkNRj6O3Qrt9iuSP1QMcBkQYNnKuPBB2PiuOlBDP0yS/o5X/cy0Tti1XOM63YbDjwL7bhgtRiyEcTsX6l9XOIEvw==
             type : 2
             content :
              internal_properties : BwAAAAcAAAAuAQemJcwfwo07+wK/hEJWSZBEZF65bV1DTLlAKXFMgvJKUN5tJcm6927KDMvQjWUMTic5fbPfncS62wvjgBzTTjidwgrdjK/kX+5nTfYa7Aic51/CCFa9jZnZSXiejN4kIA6wVRHijYlr0u24GMUoIZhLfU6hfKRTeAzJupTKSBAo9qqHvoAQqTKSh86CegrNVbTePQNDKZEc6rPUzZCDemnnUIb8j6Myz5/0BltlVl5yGHPg8EiwwoR+MRv26zc/US5rgBKSaJU92pMGLnbB6qSfPQ8z7w4vWVg2dTO70T3F0/K3vO1b1SLa1egFMHO02gTRNc6QdsQl3yOgyRboyy6k+ZxAZOR+ID/Bebh7tN2fwpZCDgNOAKUxtPK8mV7DRaW7kr8zB8gSewLzeJAzTCz66jhfWw3XDHVnttuAp3qP8gXJ2w0Xv+bL5BOdwHE5fq7tcogCtwI4iOPUjS1zsaEoFr3l8vGeiveibkP54+YEswrTLipdF4ziKVVYnVfLM++Mw68xWFkqQbABzDHQhtkiMfkAY53IAkfynPJ3oJdPAFaG6yo31qUYdkOaXuwypOSmayPFl6SiDRgNIgmmzUzHue6aTRjrgboewNsW84Qdsqd4ntpq1jPn9qzo9KAN6CEFNT7ebynm55zFtspLTyuHrQnI6rPO6Hj++7JB+v9XFIWEyMYP0B/GilADYFU9vWmznW56QF1cSXrsrKPZ0ZXnhVP3O1SozjNgxuJ6sQqrjSYRxOLCSCfEWc5srZKUMrB0RrCuCCO4Rh4Er4hHIKkTIEIK3EYO9Pun6PdMiogiOWu2GZeJMACt5NNLUSy2dIxKKxUwLplu1bWYBdi3JdndvYk=
              properties : {}
              type : 2
             code_elements :
              internal_properties : BwAAAAcAAAD2Rkbx+OjeaV6cz3eLdX7jB0Jgs6WDDXWz15HdSBZm9oeZQ2BKnjRAOa1wH4EQ9d5x
              type_code : 3
              p_codes :
               -
                 type : 276
                 enabled : false
               -
                 type : 277
                 enabled : false
               -
                 type : 278
                 enabled : false
           -
             name : COL_Id
             identifier : 0x20b7e47b28ab1d71
             internal_properties : BwAAAAcAAADnqELOYZAKDkEwINuNdY56ALjQNzyc2hPOQH7HIQ49USol6yXUBm6ajYqQMO1CrpdZ6ob8eRk0eUTG2Qzf+P/poMEKbJJ+Am1HR892TNBeKCK+sHQ/LjTPEGpm/JWZHr0X6TWYY63Y6rqpaj1BeeZJ3SxK+G5QTZDdI/MIRcJpEu91
             type : 2
             content :
              internal_properties : BwAAAAcAAAAuAQemJcwfwo07+wK/hEJWSZBEZF65bV1DTLlAKXFMgvJKUN5tJcm6927KDMvQjWUMTic5fbPfncS62wvjgBzTTjidwgrdjK/kX+5nTfYa7Aic51/CCFa9jZnZSXiejN4kIA6wVRHijYlr0u24GMUoIZhLfU6hfKRTeAzJupTKSBAo9qqHvoAQqTKSh86CegrNVbTePQNDKZEc6rPUzZCDemnnUIb8j6Myz5/0BltlVl5yGHPg8EiwwoR+MRv26zc/US5rgBKSaJU92pMGLnbB6qSfPQ8z7w4vWVg2dTO70T3F0/K3vO1b1SLa1egFMHO02gTRNc6QdsQl3yOgyRboyy6k+ZxAZOR+ID/Bebh7tN2fwpZCDgNOAKUxtPK8mV7DRaW7kr8zB8gSewLzeJAzTCz66jhfWw3XDHVnttuAp3qP8gXJ2w0Xv+bL5BOdwHE5fq7tcogCtwI4iOPUjS1zsaEoFr3l8vGeiveibkP54+YEswrTLipdF4ziKVVYnVfLM++Mw68xWFkqQbABzDHQhtkiMfkAY53IAkfynPJ3oJdPAFaG6yo31qUYdkOaXuwypOSmayPFl6SiDRgNIgmmzUzHue6aTRjrgboewNsW84Qdsqd4ntpq1jPn9qzo9KAN6CEFNT7ebynm55zFtspLTyuHrQnI6rPO6Hj++7JB+v9XFIWEyMYP0B/GilADYFU9vWmznW56QF1cSXrsrKPZ0ZXnhVP3O1SozjNgxuJ6sQqrjSYRxOLCSCfEWc5srZKUMrB0RrCuCCO4Rh4Er4hHIKkTIEIK3EYO9Pun6PdMiogiOWu2GZeJMACt5NNLUSy2dIxKKxUwLplu1bWYBdi3JdndvYk=
              properties : {}
              type : 2
             code_elements :
              internal_properties : BwAAAAcAAAD2Rkbx+OjeaV6cz3eLdX7jB0Jgs6WDDXWz15HdSBZm9oeZQ2BKnjRAOa1wH4EQ9d5x
              type_code : 3
              p_codes :
               -
                 type : 276
                 enabled : false
               -
                 type : 277
                 enabled : false
               -
                 type : 278
                 enabled : false
          type : 9
          controls : []
          code_elements :
           type_code : 9
           p_codes :
            -
              type : 35
              enabled : false
            -
              type : 22
              enabled : false
            -
              type : 24
              enabled : false
            -
              type : 23
              enabled : false
            -
              type : 25
              enabled : false
            -
              type : 230
              enabled : false
            -
              type : 241
              enabled : false
            -
              type : 263
              enabled : false
            -
              type : 262
              enabled : false
            -
              type : 222
              enabled : false
            -
              type : 223
              enabled : false
            -
              type : 224
              enabled : false
        -
          name : BTN_Recup_listes
          identifier : 0x20b7e47b28af1da0
          internal_properties : BwAAAAcAAACpm8BCrGwWn3n+hjj+jMRllTtUvNYq3zkTThXBJtCwbyrcsUSuAaC8KEINStLubsu8/qp98rKTlBBuM2BL2qErUb/4qEZJ+dojV/kPrHV6AyBr9aayzqyebNJc50koIzICtW2apOFd5/dW3KR1dOcZU9LtKkeQk6xY42N2l658GFG/pQZVSmZwf3wQgfW2xg38xV3/mWaaBOmQ0veaIyV34JIFEh8FqkhNbrtuv9zz/HPCsZ4v365YlEH7LXYassHki44O3ok6nnp6say57Pfc8ZuUzPljZ3vSsuMIgZlnkaYcBux/acuoSIMZWqmuWWkabuvYV/L9eoZPs3lLzxBmzDwYfylvV9t0jGfdJouY1x/wgI3FViPzO+SRRwQltYke3v/knCHNGXYpgiv/hdi/F4sTJirX1vzU4Sp3cmYpd2L+pz70vg2AYgPJfFZ2ePNqYNlaSwKRl2NKoLFakmhb0SIO37b0bP5qylFfYhI10dsMqKcyT1hm6h8691no7tI0pcKUm0Fq37RWQdQGpj4GbPpUO5G3DKVAwQV5w5+hqOSdI0QKqSVl2yt5IZAeE4ngSxh4Q92WMqvBSmMoJNWwJURwp3mvDrjYMOOICc+w5PzZt0r1mEFxOYFNIOX3Y1o8wUb/6z24Rcj5Pn4efenMuhJ6cO0TcjiALqsog4v44ybvx6SzzlX3ik7PdOyvbl5ZJS+FWZCLE6bDeDEzQIEh73zvYNPgFZTdx74LkSa5S3tqeX8dKxRQRZ4PP4Z2XMxgyRa0XvxeETDLIWSIlzX29LvVLU1B0hr+pgpLYyJ8sAbtKQFxmmrtXCR1bg==
          properties :
           x : 318
           y : 10
           width : 100
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               vList est un variant
               nLigne est un entier
               
               //récupération des listes du tableau
               oTrell est un ClTrello_SCRUM(ChaîneConstruit("https://api.trello.com/1/boards/%1/lists", ClTrello_SCRUM.cst_TableauScrum))
               
               TableSupprimeTout(TBL_Tableaux)
               pour tout vList de oTrell.get_json()
               	nLigne = TableAjouteLigne(TBL_Tableaux)
               	TBL_Tableaux[nLigne].COL_Id		= vList.id
               	TBL_Tableaux[nLigne].COL_Liste	= vList.name
               FIN
               
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Recup_USR
          identifier : 0x20b7e47b28b11da0
          internal_properties : BwAAAAcAAABjRcGtpd56EtAar7v4am4Y0bfxf9rCcwFdGhxiARWzKJDFo7CMFUFUX4iaaxoMyEFl6k17g8/rPvW03MkBwZ7167rVbnU6EDsvH9y3DE7jeCFhni3gzytOkKrdia+ESVKnFltNJceFRlD3XxVF8/f0iEgBq4GG9YjhQMf9YFv5u8QMWJSLFncuYZtJgCf0Y+Db4lN5v1xbw+trmBxt1nlgIxAnw1aJ+MqaxhPMef8Bi+mEo/zruqdbjqHlYXPsd5jIemGa7WQVDILkrslG5a5bPOunFFXP1VhqEYFxJ/lpdeohdmpIusqJvc1s4C9sNAyhDESqiSZW2Wx+xaJ44QLvggKr4J827UYCMvjoPBPVZ6b5MUMRBMGHvImHaQ2dPJb9avSTFvs4Vm9j2dU2zl5ZuLe5fykqlbf/7VwboxW18o5XMf7bfmTPg1s3nCE7xu4cVXXsPHJCbKIcUNFjmQAqe3MuR9sgr80b9L3xi+nVIvMF4qXvY2ORe6uQeXARzguIdBjSCjFrsEncoUY7Ueaf5l2+e9Jd/3wTWUcD4NL9FSaEE6zrKV6OeLmVDQn1CVKEmuZugkWjd9bTMnuTGRG9J42Qe0RNzVOBJMmSJpIuVz7+xXoa1Opy8jfBVEg0vadE6kA7Rrm/MJdlSASVM9YjdH+883201KIUG2pXAXoXdHjK/mdqIH5LPeog8NlZGXmlYf6mogpIFlSw/UyD4GdKRZ8EtF5/er00S9BlWj5BuEEvDoaTpLqIuQe2V84wB34FSU2hMBmekiEvTG4FsayW9D57QBCeJrBsXfTk5veVfIKmS7wqcrUZww==
          properties :
           x : 318
           y : 146
           width : 100
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               vList est un variant
               nLigne est un entier
               
               //récupération des listes du tableau
               oTrell est un ClTrello_SCRUM(ChaîneConstruit("https://api.trello.com/1/boards/%1/members", ClTrello_SCRUM.cst_TableauScrum))
               
               TableSupprimeTout(TBL_Users)
               pour tout vList de oTrell.get_json()
               	nLigne = TableAjouteLigne(TBL_Users)
               	TBL_Users[nLigne].COL_Id			= vList.id
               	TBL_Users[nLigne].COL_Utilisateur	= vList.fullName
               FIN
               
              type : 18
            -
              type : 161
              enabled : false
        -
          name : TBL_Cartes
          identifier : 0x20b7e47b28b91db0
          internal_properties : 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
          properties :
           x : 491
           y : 40
           width : 404
           height : 136
          columns :
           -
             name : COL_Liste
             identifier : 0x20b7e47b28ba1db0
             internal_properties : BwAAAAcAAADkClugtk2aEbgj9pwiTtuVAYTdzDnmM3gtqQYxT68VaHPhT4HPCsKor1PBijTaofNAAc1p3KEalbbsB9txmifjIJtAtXLzWC399g/w/m9Xt1o1LsNnRo5wI+zaLkoLkcC2+dLtjr8EqAwHJu7dSoSjgIMocd+ogM11mn0VvCkBclquDbFLcA==
             type : 2
             content :
              internal_properties : BwAAAAcAAAAuAQemJcwfwo07+wK/hEJWSZBEZF65bV1DTLlAKXFMgvJKUN5tJcm6927KDMvQjWUMTic5fbPfncS62wvjgBzTTjidwgrdjK/kX+5nTfYa7Aic51/CCFa9jZnZSXiejN4kIA6wVRHijYlr0u24GMUoIZhLfU6hfKRTeAzJupTKSBAo9qqHvoAQqTKSh86CegrNVbTePQNDKZEc6rPUzZCDemnnUIb8j6Myz5/0BltlVl5yGHPg8EiwwoR+MRv26zc/US5rgBKSaJU92pMGLnbB6qSfPQ8z7w4vWVg2dTO70T3F0/K3vO1b1SLa1egFMHO02gTRNc6QdsQl3yOgyRboyy6k+ZxAZOR+ID/Bebh7tN2fwpZCDgNOAKUxtPK8mV7DRaW7kr8zB8gSewLzeJAzTCz66jhfWw3XDHVnttuAp3qP8gXJ2w0Xv+bL5BOdwHE5fq7tcogCtwI4iOPUjS1zsaEoFr3l8vGeiveibkP54+YEswrTLipdF4ziKVVYnVfLM++Mw68xWFkqQbABzDHQhtkiMfkAY53IAkfynPJ3oJdPAFaG6yo31qUYdkOaXuwypOSmayPFl6SiDRgNIgmmzUzHue6aTRjrgboewNsW84Qdsqd4ntpq1jPn9qzo9KAN6CEFNT7ebynm55zFtspLTyuHrQnI6rPO6Hj++7JB+v9XFIWEyMYP0B/GilADYFU9vWmznW56QF1cSXrsrKPZ0ZXnhVP3O1SozjNgxuJ6sQqrjSYRxOLCSCfEWc5srZKUMrB0RrCuCCO4Rh4Er4hHIKkTIEIK3EYO9Pun6PdMiogiOWu2GZeJMACt5NNLUSy2dIxKKxUwLplu1bWYBdi3JdndvYk=
              properties : {}
              type : 2
             code_elements :
              internal_properties : BwAAAAcAAAD2Rkbx+OjeaV6cz3eLdX7jB0Jgs6WDDXWz15HdSBZm9oeZQ2BKnjRAOa1wH4EQ9d5x
              type_code : 3
              p_codes :
               -
                 type : 276
                 enabled : false
               -
                 type : 277
                 enabled : false
               -
                 type : 278
                 enabled : false
           -
             name : COL_Id
             identifier : 0x20b7e47b28bb1db0
             internal_properties : BwAAAAcAAAC67QGNpmVPVYpVETS+Rpl5A7nTMknph+aTFYN0trOQLLH6ysQ15481GhNpbao/deqEx7FPjkYZu+goGWh5wt8pbLhXH/+JR4TAwnTJj50LW/eLhS9y8/8YqfP/G/Q6/5x0TpI7zjprfw9+v+AsbutM3i1L531BPIHCWLhDuH8qUayq
             type : 2
             content :
              internal_properties : BwAAAAcAAAAuAQemJcwfwo07+wK/hEJWSZBEZF65bV1DTLlAKXFMgvJKUN5tJcm6927KDMvQjWUMTic5fbPfncS62wvjgBzTTjidwgrdjK/kX+5nTfYa7Aic51/CCFa9jZnZSXiejN4kIA6wVRHijYlr0u24GMUoIZhLfU6hfKRTeAzJupTKSBAo9qqHvoAQqTKSh86CegrNVbTePQNDKZEc6rPUzZCDemnnUIb8j6Myz5/0BltlVl5yGHPg8EiwwoR+MRv26zc/US5rgBKSaJU92pMGLnbB6qSfPQ8z7w4vWVg2dTO70T3F0/K3vO1b1SLa1egFMHO02gTRNc6QdsQl3yOgyRboyy6k+ZxAZOR+ID/Bebh7tN2fwpZCDgNOAKUxtPK8mV7DRaW7kr8zB8gSewLzeJAzTCz66jhfWw3XDHVnttuAp3qP8gXJ2w0Xv+bL5BOdwHE5fq7tcogCtwI4iOPUjS1zsaEoFr3l8vGeiveibkP54+YEswrTLipdF4ziKVVYnVfLM++Mw68xWFkqQbABzDHQhtkiMfkAY53IAkfynPJ3oJdPAFaG6yo31qUYdkOaXuwypOSmayPFl6SiDRgNIgmmzUzHue6aTRjrgboewNsW84Qdsqd4ntpq1jPn9qzo9KAN6CEFNT7ebynm55zFtspLTyuHrQnI6rPO6Hj++7JB+v9XFIWEyMYP0B/GilADYFU9vWmznW56QF1cSXrsrKPZ0ZXnhVP3O1SozjNgxuJ6sQqrjSYRxOLCSCfEWc5srZKUMrB0RrCuCCO4Rh4Er4hHIKkTIEIK3EYO9Pun6PdMiogiOWu2GZeJMACt5NNLUSy2dIxKKxUwLplu1bWYBdi3JdndvYk=
              properties : {}
              type : 2
             code_elements :
              internal_properties : BwAAAAcAAAD2Rkbx+OjeaV6cz3eLdX7jB0Jgs6WDDXWz15HdSBZm9oeZQ2BKnjRAOa1wH4EQ9d5x
              type_code : 3
              p_codes :
               -
                 type : 276
                 enabled : false
               -
                 type : 277
                 enabled : false
               -
                 type : 278
                 enabled : false
           -
             name : COL_IdCarte
             identifier : 0x20b7e47b28bc1db0
             internal_properties : BwAAAAcAAADjkU9HS6BE08TGqf9bztXRiDo4sKuVU6VMxY1FCroPWzPgVnF7Eh1D3N/N7CfzWNUGxYwYzjqFloiXJc6pkwfHW+wE1fAek0MElAm4e9z4vym1NmEhVk/HB7cI5jvEvNjBBwLK2jECWNEKZbCcMEjE+OTHAfUkvAhCmrmDf6hzvmCzgG9RX9g=
             type : 2
             content :
              internal_properties : BwAAAAcAAAAuAQemJcwfwo07+wK/hEJWSZBEZF65bV1DTLlAKXFMgvJKUN5tJcm6927KDMvQjWUMTic5fbPfncS62wvjgBzTTjidwgrdjK/kX+5nTfYa7Aic51/CCFa9jZnZSXiejN4kIA6wVRHijYlr0u24GMUoIZhLfU6hfKRTeAzJupTKSBAo9qqHvoAQqTKSh86CegrNVbTePQNDKZEc6rPUzZCDemnnUIb8j6Myz5/0BltlVl5yGHPg8EiwwoR+MRv26zc/US5rgBKSaJU92pMGLnbB6qSfPQ8z7w4vWVg2dTO70T3F0/K3vO1b1SLa1egFMHO02gTRNc6QdsQl3yOgyRboyy6k+ZxAZOR+ID/Bebh7tN2fwpZCDgNOAKUxtPK8mV7DRaW7kr8zB8gSewLzeJAzTCz66jhfWw3XDHVnttuAp3qP8gXJ2w0Xv+bL5BOdwHE5fq7tcogCtwI4iOPUjS1zsaEoFr3l8vGeiveibkP54+YEswrTLipdF4ziKVVYnVfLM++Mw68xWFkqQbABzDHQhtkiMfkAY53IAkfynPJ3oJdPAFaG6yo31qUYdkOaXuwypOSmayPFl6SiDRgNIgmmzUzHue6aTRjrgboewNsW84Qdsqd4ntpq1jPn9qzo9KAN6CEFNT7ebynm55zFtspLTyuHrQnI6rPO6Hj++7JB+v9XFIWEyMYP0B/GilADYFU9vWmznW56QF1cSXrsrKPZ0ZXnhVP3O1SozjNgxuJ6sQqrjSYRxOLCSCfEWc5srZKUMrB0RrCuCCO4Rh4Er4hHIKkTIEIK3EYO9Pun6PdMiogiOWu2GZeJMACt5NNLUSy2dIxKKxUwLplu1bWYBdi3JdndvYk=
              properties : {}
              type : 2
             code_elements :
              internal_properties : BwAAAAcAAAD2Rkbx+OjeaV6cz3eLdX7jB0Jgs6WDDXWz15HdSBZm9oeZQ2BKnjRAOa1wH4EQ9d5x
              type_code : 3
              p_codes :
               -
                 type : 276
                 enabled : false
               -
                 type : 277
                 enabled : false
               -
                 type : 278
                 enabled : false
          type : 9
          controls : []
          code_elements :
           type_code : 9
           p_codes :
            -
              type : 35
              enabled : false
            -
              type : 22
              enabled : false
            -
              type : 24
              enabled : false
            -
              type : 23
              enabled : false
            -
              type : 25
              enabled : false
            -
              type : 230
              enabled : false
            -
              type : 241
              enabled : false
            -
              type : 263
              enabled : false
            -
              type : 262
              enabled : false
            -
              type : 222
              enabled : false
            -
              type : 223
              enabled : false
            -
              type : 224
              enabled : false
        -
          name : TBL_Users
          identifier : 0x20b7e47b28c41dde
          internal_properties : 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
          properties :
           x : 6
           y : 172
           width : 412
           height : 102
          columns :
           -
             name : COL_Utilisateur
             identifier : 0x20b7e47b28c51dde
             internal_properties : BwAAAAcAAADv+nODaQ7VfW7+ac0kvFLqpNse/MGVC8xS+D3PixjGIp5G/St9aNCXOAX7kE3vpocZBepF5aUqcka89LHRQL/SNNOkJhcKnCEzJHc7LY9dsWe8QD1G34KzJnk1hEL44l/Sxae1pNcMRqXBVUSJ0XAA6BC47OgnSLqduiNEpQCUqDXHr4QsgmR8SBs5pg==
             type : 2
             content :
              internal_properties : BwAAAAcAAAAuAQemJcwfwo07+wK/hEJWSZBEZF65bV1DTLlAKXFMgvJKUN5tJcm6927KDMvQjWUMTic5fbPfncS62wvjgBzTTjidwgrdjK/kX+5nTfYa7Aic51/CCFa9jZnZSXiejN4kIA6wVRHijYlr0u24GMUoIZhLfU6hfKRTeAzJupTKSBAo9qqHvoAQqTKSh86CegrNVbTePQNDKZEc6rPUzZCDemnnUIb8j6Myz5/0BltlVl5yGHPg8EiwwoR+MRv26zc/US5rgBKSaJU92pMGLnbB6qSfPQ8z7w4vWVg2dTO70T3F0/K3vO1b1SLa1egFMHO02gTRNc6QdsQl3yOgyRboyy6k+ZxAZOR+ID/Bebh7tN2fwpZCDgNOAKUxtPK8mV7DRaW7kr8zB8gSewLzeJAzTCz66jhfWw3XDHVnttuAp3qP8gXJ2w0Xv+bL5BOdwHE5fq7tcogCtwI4iOPUjS1zsaEoFr3l8vGeiveibkP54+YEswrTLipdF4ziKVVYnVfLM++Mw68xWFkqQbABzDHQhtkiMfkAY53IAkfynPJ3oJdPAFaG6yo31qUYdkOaXuwypOSmayPFl6SiDRgNIgmmzUzHue6aTRjrgboewNsW84Qdsqd4ntpq1jPn9qzo9KAN6CEFNT7ebynm55zFtspLTyuHrQnI6rPO6Hj++7JB+v9XFIWEyMYP0B/GilADYFU9vWmznW56QF1cSXrsrKPZ0ZXnhVP3O1SozjNgxuJ6sQqrjSYRxOLCSCfEWc5srZKUMrB0RrCuCCO4Rh4Er4hHIKkTIEIK3EYO9Pun6PdMiogiOWu2GZeJMACt5NNLUSy2dIxKKxUwLplu1bWYBdi3JdndvYk=
              properties : {}
              type : 2
             code_elements :
              internal_properties : BwAAAAcAAAD2Rkbx+OjeaV6cz3eLdX7jB0Jgs6WDDXWz15HdSBZm9oeZQ2BKnjRAOa1wH4EQ9d5x
              type_code : 3
              p_codes :
               -
                 type : 276
                 enabled : false
               -
                 type : 277
                 enabled : false
               -
                 type : 278
                 enabled : false
           -
             name : COL_Id
             identifier : 0x20b7e47b28c61dde
             internal_properties : BwAAAAcAAADDlJ4KLdzW0gX0NM/hWbIm1PyUi3Cgzh8qfHrD3Qo5RTYBR0FA8no+kZ7k5AHmApYX8vhOSZZBkyBk+aC93oPlpEKF4S2bJQ4mZOoT3Q+bg5tlnBibioijJH4KEOEtgiH71SmUZ6HU5qbFdil1NaKFmWB2zJpsYaQh5zfMAQat1tNR
             type : 2
             content :
              internal_properties : BwAAAAcAAAAuAQemJcwfwo07+wK/hEJWSZBEZF65bV1DTLlAKXFMgvJKUN5tJcm6927KDMvQjWUMTic5fbPfncS62wvjgBzTTjidwgrdjK/kX+5nTfYa7Aic51/CCFa9jZnZSXiejN4kIA6wVRHijYlr0u24GMUoIZhLfU6hfKRTeAzJupTKSBAo9qqHvoAQqTKSh86CegrNVbTePQNDKZEc6rPUzZCDemnnUIb8j6Myz5/0BltlVl5yGHPg8EiwwoR+MRv26zc/US5rgBKSaJU92pMGLnbB6qSfPQ8z7w4vWVg2dTO70T3F0/K3vO1b1SLa1egFMHO02gTRNc6QdsQl3yOgyRboyy6k+ZxAZOR+ID/Bebh7tN2fwpZCDgNOAKUxtPK8mV7DRaW7kr8zB8gSewLzeJAzTCz66jhfWw3XDHVnttuAp3qP8gXJ2w0Xv+bL5BOdwHE5fq7tcogCtwI4iOPUjS1zsaEoFr3l8vGeiveibkP54+YEswrTLipdF4ziKVVYnVfLM++Mw68xWFkqQbABzDHQhtkiMfkAY53IAkfynPJ3oJdPAFaG6yo31qUYdkOaXuwypOSmayPFl6SiDRgNIgmmzUzHue6aTRjrgboewNsW84Qdsqd4ntpq1jPn9qzo9KAN6CEFNT7ebynm55zFtspLTyuHrQnI6rPO6Hj++7JB+v9XFIWEyMYP0B/GilADYFU9vWmznW56QF1cSXrsrKPZ0ZXnhVP3O1SozjNgxuJ6sQqrjSYRxOLCSCfEWc5srZKUMrB0RrCuCCO4Rh4Er4hHIKkTIEIK3EYO9Pun6PdMiogiOWu2GZeJMACt5NNLUSy2dIxKKxUwLplu1bWYBdi3JdndvYk=
              properties : {}
              type : 2
             code_elements :
              internal_properties : BwAAAAcAAAD2Rkbx+OjeaV6cz3eLdX7jB0Jgs6WDDXWz15HdSBZm9oeZQ2BKnjRAOa1wH4EQ9d5x
              type_code : 3
              p_codes :
               -
                 type : 276
                 enabled : false
               -
                 type : 277
                 enabled : false
               -
                 type : 278
                 enabled : false
          type : 9
          controls : []
          code_elements :
           type_code : 9
           p_codes :
            -
              type : 35
              enabled : false
            -
              type : 22
              enabled : false
            -
              type : 24
              enabled : false
            -
              type : 23
              enabled : false
            -
              type : 25
              enabled : false
            -
              type : 230
              enabled : false
            -
              type : 241
              enabled : false
            -
              type : 263
              enabled : false
            -
              type : 262
              enabled : false
            -
              type : 222
              enabled : false
            -
              type : 223
              enabled : false
            -
              type : 224
              enabled : false
        -
          name : BTN_Recup_tout
          identifier : 0x20b7e47b28ca1dfe
          internal_properties : BwAAAAcAAADL5AuGJL0LmKiQeIg1PlPbgiHRDS43rtPmL0Mkcp6iWm/c4RZ5wII/yaj95SWAymOdkUEowLIry5uErxD+p6BWWrpMeBrVrlqrxaV6kG1ZOfybK9sRkz3xbYb48d9aUe9QvbVIxNHXa9dyyZVZbITCt3TBYh6oTnwxquizKF3ihRznMmk+0JGgRRxfRFFEaIqB0a7tcB+6lPst9pMRurvlFbuQEtsnZ+Xv9IzFLY9rmC7WwNvxsK4HsxKNOqUHi0JY38mVbWQmW8pv7JP5ucTQoCJ3FUTfpE751/Az3CxJpkO+7Id+VMPZ7atJz1OdArQQTY0kjEdbBrA2A4sUPGsa3m//pEtxKsc4gywMzptEHu9ERkMkx/fUXl0ZF3COQ2c0FHDat/tsddPgHYA84qgh+7irNWTB9+tKgkom1V/VxaVmWTF10YDhOmTF/5lfEIkXtEezGh+ezrExmnp9m5SVnsBYkLEtocFOr702cxVblYCy7lT/RjF9zHai3Ggl6A6ty5oHUKDj2hDNm4HTDQCaLcSo+qJqScxU0ltgkgyNYtP34Uv/iA7Y++qtcBnJD2tf0z4ZqnrNJ/u8Bm4vAceAyCKaOqQIa+OmQa2lVnY0ss9xOac+s9xm9f4vYf7yrVZX+ezO7BCnxhKkTHvvyK2bLKyGRmBpiqVd8UB/ZbN96hhE4BS2gjABqZ05tnD9Qs0VT7F0PWoPA4d5uMZmD4LYb30K7ByVj6QJPNR6qSXT6aq0mO15Ixq9Vvo2IDvTekhz3SHAtoD2UlfmbgdwbPHn/L7Rs6LG7NRj3gmHcmZYJj5+eMffesAG6QE=
          properties :
           x : 491
           y : 10
           width : 100
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               nInd est un entier
               
               JAUGE_SansNom2..BorneMax = TBL_Tableaux..Occurrence
               JAUGE_SansNom2 = 0
               
               //Réinitialisation de la liste des tache déja synchronisés.
               dimension(zaLstTacheImportes, 0)
               
               pour nInd = 1 _a_ TBL_Tableaux..Occurrence
               	JAUGE_SansNom2++
               	TableSelectPlus(TBL_Tableaux, nInd)
               	ExécuteTraitement(BTN_Recup_cartes,trtClic)
               FIN
              type : 18
            -
              type : 161
              enabled : false
        -
          name : TBL_Actions
          identifier : 0x20b7e47b28d41dfe
          internal_properties : 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
          properties :
           x : 474
           y : 224
           width : 421
           height : 78
          columns :
           -
             name : COL_Data
             identifier : 0x20b7e47b28d51dfe
             internal_properties : BwAAAAcAAAAvFXTRg+KUxlIwS51hwm9xAKkA+0AIAyaeaaDmMf+6zVRQSX/4WfVzqFodBl10uQWBhQl2Q0MBM8E2OtPwhtXgoeeeZrqDXYPw7bDGcEtMWb899ZE8vHaIYH+XTUzxBnLYj9Hjbn5b5mPqLmStLfP3fxOIV2Dyk6Q+fxgpe0Bw1HEZv6SA
             type : 2
             content :
              internal_properties : BwAAAAcAAAAuAQemJcwfwo07+wK/hEJWSZBEZF65bV1DTLlAKXFMgvJKUN5tJcm6927KDMvQjWUMTic5fbPfncS62wvjgBzTTjidwgrdjK/kX+5nTfYa7Aic51/CCFa9jZnZSXiejN4kIA6wVRHijYlr0u24GMUoIZhLfU6hfKRTeAzJupTKSBAo9qqHvoAQqTKSh86CegrNVbTePQNDKZEc6rPUzZCDemnnUIb8j6Myz5/0BltlVl5yGHPg8EiwwoR+MRv26zc/US5rgBKSaJU92pMGLnbB6qSfPQ8z7w4vWVg2dTO70T3F0/K3vO1b1SLa1egFMHO02gTRNc6QdsQl3yOgyRboyy6k+ZxAZOR+ID/Bebh7tN2fwpZCDgNOAKUxtPK8mV7DRaW7kr8zB8gSewLzeJAzTCz66jhfWw3XDHVnttuAp3qP8gXJ2w0Xv+bL5BOdwHE5fq7tcogCtwI4iOPUjS1zsaEoFr3l8vGeiveibkP54+YEswrTLipdF4ziKVVYnVfLM++Mw68xWFkqQbABzDHQhtkiMfkAY53IAkfynPJ3oJdPAFaG6yo31qUYdkOaXuwypOSmayPFl6SiDRgNIgmmzUzHue6aTRjrgboewNsW84Qdsqd4ntpq1jPn9qzo9KAN6CEFNT7ebynm55zFtspLTyuHrQnI6rPO6Hj++7JB+v9XFIWEyMYP0B/GilADYFU9vWmznW56QF1cSXrsrKPZ0ZXnhVP3O1SozjNgxuJ6sQqrjSYRxOLCSCfEWc5srZKUMrB0RrCuCCO4Rh4Er4hHIKkTIEIK3EYO9Pun6PdMiogiOWu2GZeJMACt5NNLUSy2dIxKKxUwLplu1bWYBdi3JdndvYk=
              properties : {}
              type : 2
             code_elements :
              internal_properties : BwAAAAcAAAD2Rkbx+OjeaV6cz3eLdX7jB0Jgs6WDDXWz15HdSBZm9oeZQ2BKnjRAOa1wH4EQ9d5x
              type_code : 3
              p_codes :
               -
                 type : 276
                 enabled : false
               -
                 type : 277
                 enabled : false
               -
                 type : 278
                 enabled : false
           -
             name : COL_IdUsr
             identifier : 0x20b7e47b28d61dfe
             internal_properties : BwAAAAcAAAAtC3Yv+YiCVPAWsTcXXOX/hhfq2SbuoYx0H7ZYpylQK2q2K6VGlw+j2b1i+AOoMZ2H/awe8wO5oxH20iMIru3AgYe6Ii4X+R9EUTzqtB9o5SupZhCt7ZWTPw71TkwTUDgeVS8FSKSFkNmQRA4X01VV3fHu8dp4HS605f4DHa6C6mcXvaaC
             type : 2
             content :
              internal_properties : BwAAAAcAAAAuAQemJcwfwo07+wK/hEJWSZBEZF65bV1DTLlAKXFMgvJKUN5tJcm6927KDMvQjWUMTic5fbPfncS62wvjgBzTTjidwgrdjK/kX+5nTfYa7Aic51/CCFa9jZnZSXiejN4kIA6wVRHijYlr0u24GMUoIZhLfU6hfKRTeAzJupTKSBAo9qqHvoAQqTKSh86CegrNVbTePQNDKZEc6rPUzZCDemnnUIb8j6Myz5/0BltlVl5yGHPg8EiwwoR+MRv26zc/US5rgBKSaJU92pMGLnbB6qSfPQ8z7w4vWVg2dTO70T3F0/K3vO1b1SLa1egFMHO02gTRNc6QdsQl3yOgyRboyy6k+ZxAZOR+ID/Bebh7tN2fwpZCDgNOAKUxtPK8mV7DRaW7kr8zB8gSewLzeJAzTCz66jhfWw3XDHVnttuAp3qP8gXJ2w0Xv+bL5BOdwHE5fq7tcogCtwI4iOPUjS1zsaEoFr3l8vGeiveibkP54+YEswrTLipdF4ziKVVYnVfLM++Mw68xWFkqQbABzDHQhtkiMfkAY53IAkfynPJ3oJdPAFaG6yo31qUYdkOaXuwypOSmayPFl6SiDRgNIgmmzUzHue6aTRjrgboewNsW84Qdsqd4ntpq1jPn9qzo9KAN6CEFNT7ebynm55zFtspLTyuHrQnI6rPO6Hj++7JB+v9XFIWEyMYP0B/GilADYFU9vWmznW56QF1cSXrsrKPZ0ZXnhVP3O1SozjNgxuJ6sQqrjSYRxOLCSCfEWc5srZKUMrB0RrCuCCO4Rh4Er4hHIKkTIEIK3EYO9Pun6PdMiogiOWu2GZeJMACt5NNLUSy2dIxKKxUwLplu1bWYBdi3JdndvYk=
              properties : {}
              type : 2
             code_elements :
              internal_properties : BwAAAAcAAAD2Rkbx+OjeaV6cz3eLdX7jB0Jgs6WDDXWz15HdSBZm9oeZQ2BKnjRAOa1wH4EQ9d5x
              type_code : 3
              p_codes :
               -
                 type : 276
                 enabled : false
               -
                 type : 277
                 enabled : false
               -
                 type : 278
                 enabled : false
           -
             name : COL_IdList
             identifier : 0x20b7e47b28d71dfe
             internal_properties : BwAAAAcAAAAWnPXG2HbvTnU44aW142oUvpHw580Gu3zVMZYNa78JSBPJY7X7UgLg5WBrUfjmVojnkWJW6hTTD/pgwZkzWuUlkENwcI2eF2o8tU61gTroBj/yyJjqtpNCf5KvFTYN/zqsl3DnPCVqDqJtjPTbKFLt7iHA0XciBGHbMIMLqF9VPoRQrx/Z4g==
             type : 2
             content :
              internal_properties : BwAAAAcAAAAuAQemJcwfwo07+wK/hEJWSZBEZF65bV1DTLlAKXFMgvJKUN5tJcm6927KDMvQjWUMTic5fbPfncS62wvjgBzTTjidwgrdjK/kX+5nTfYa7Aic51/CCFa9jZnZSXiejN4kIA6wVRHijYlr0u24GMUoIZhLfU6hfKRTeAzJupTKSBAo9qqHvoAQqTKSh86CegrNVbTePQNDKZEc6rPUzZCDemnnUIb8j6Myz5/0BltlVl5yGHPg8EiwwoR+MRv26zc/US5rgBKSaJU92pMGLnbB6qSfPQ8z7w4vWVg2dTO70T3F0/K3vO1b1SLa1egFMHO02gTRNc6QdsQl3yOgyRboyy6k+ZxAZOR+ID/Bebh7tN2fwpZCDgNOAKUxtPK8mV7DRaW7kr8zB8gSewLzeJAzTCz66jhfWw3XDHVnttuAp3qP8gXJ2w0Xv+bL5BOdwHE5fq7tcogCtwI4iOPUjS1zsaEoFr3l8vGeiveibkP54+YEswrTLipdF4ziKVVYnVfLM++Mw68xWFkqQbABzDHQhtkiMfkAY53IAkfynPJ3oJdPAFaG6yo31qUYdkOaXuwypOSmayPFl6SiDRgNIgmmzUzHue6aTRjrgboewNsW84Qdsqd4ntpq1jPn9qzo9KAN6CEFNT7ebynm55zFtspLTyuHrQnI6rPO6Hj++7JB+v9XFIWEyMYP0B/GilADYFU9vWmznW56QF1cSXrsrKPZ0ZXnhVP3O1SozjNgxuJ6sQqrjSYRxOLCSCfEWc5srZKUMrB0RrCuCCO4Rh4Er4hHIKkTIEIK3EYO9Pun6PdMiogiOWu2GZeJMACt5NNLUSy2dIxKKxUwLplu1bWYBdi3JdndvYk=
              properties : {}
              type : 2
             code_elements :
              internal_properties : BwAAAAcAAAD2Rkbx+OjeaV6cz3eLdX7jB0Jgs6WDDXWz15HdSBZm9oeZQ2BKnjRAOa1wH4EQ9d5x
              type_code : 3
              p_codes :
               -
                 type : 276
                 enabled : false
               -
                 type : 277
                 enabled : false
               -
                 type : 278
                 enabled : false
           -
             name : COL_Date
             identifier : 0x20b7e47b28d81dfe
             internal_properties : BwAAAAcAAAAX1nV8gLlbqRxScRUUDn16yHNAw0u2SNhDcIzS1Xi5UJwPWFa3spK+ghPVN1U5ii2nF5Bt7qMSTrkLsFwOctjxY2llEgY23dy9xJA+ygZA4uuiXTgxiHt25o9iGtfBr/2B6rjB860PS5R7VMeS6YZ2k73WLIMb+7wWWZ8rMc+UDcr3BuE=
             type : 2
             content :
              internal_properties : BwAAAAcAAAAuAQemJcwfwo07+wK/hEJWSZBEZF65bV1DTLlAKXFMgvJKUN5tJcm6927KDMvQjWUMTic5fbPfncS62wvjgBzTTjidwgrdjK/kX+5nTfYa7Aic51/CCFa9jZnZSXiejN4kIA6wVRHijYlr0u24GMUoIZhLfU6hfKRTeAzJupTKSBAo9qqHvoAQqTKSh86CegrNVbTePQNDKZEc6rPUzZCDemnnUIb8j6Myz5/0BltlVl5yGHPg8EiwwoR+MRv26zc/US5rgBKSaJU92pMGLnbB6qSfPQ8z7w4vWVg2dTO70T3F0/K3vO1b1SLa1egFMHO02gTRNc6QdsQl3yOgyRboyy6k+ZxAZOR+ID/Bebh7tN2fwpZCDgNOAKUxtPK8mV7DRaW7kr8zB8gSewLzeJAzTCz66jhfWw3XDHVnttuAp3qP8gXJ2w0Xv+bL5BOdwHE5fq7tcogCtwI4iOPUjS1zsaEoFr3l8vGeiveibkP54+YEswrTLipdF4ziKVVYnVfLM++Mw68xWFkqQbABzDHQhtkiMfkAY53IAkfynPJ3oJdPAFaG6yo31qUYdkOaXuwypOSmayPFl6SiDRgNIgmmzUzHue6aTRjrgboewNsW84Qdsqd4ntpq1jPn9qzo9KAN6CEFNT7ebynm55zFtspLTyuHrQnI6rPO6Hj++7JB+v9XFIWEyMYP0B/GilADYFU9vWmznW56QF1cSXrsrKPZ0ZXnhVP3O1SozjNgxuJ6sQqrjSYRxOLCSCfEWc5srZKUMrB0RrCuCCO4Rh4Er4hHIKkTIEIK3EYO9Pun6PdMiogiOWu2GZeJMACt5NNLUSy2dIxKKxUwLplu1bWYBdi3JdndvYk=
              properties : {}
              type : 2
             code_elements :
              internal_properties : BwAAAAcAAAD2Rkbx+OjeaV6cz3eLdX7jB0Jgs6WDDXWz15HdSBZm9oeZQ2BKnjRAOa1wH4EQ9d5x
              type_code : 3
              p_codes :
               -
                 type : 276
                 enabled : false
               -
                 type : 277
                 enabled : false
               -
                 type : 278
                 enabled : false
          type : 9
          controls : []
          code_elements :
           type_code : 9
           p_codes :
            -
              type : 35
              enabled : false
            -
              type : 22
              enabled : false
            -
              type : 24
              enabled : false
            -
              type : 23
              enabled : false
            -
              type : 25
              enabled : false
            -
              type : 230
              enabled : false
            -
              type : 241
              enabled : false
            -
              type : 263
              enabled : false
            -
              type : 262
              enabled : false
            -
              type : 222
              enabled : false
            -
              type : 223
              enabled : false
            -
              type : 224
              enabled : false
        -
          name : BTN_Recup_Labels
          identifier : 0x20b7e47b28dc1e1d
          internal_properties : BwAAAAcAAADhkEpD6Kd/50INAtvdDlm3RYeFlql6IRV+OLt28cRGku3qTg6HKVF6GBpBI5bxUclyj8Br/l23ihTMBYMnwkGr1ruahvgI+xhO/9NDsJ9KnI9CE4QUPstKNxTINTODytR0wEXbx6nrrFnzgvcwsY4HeHqaS3pMVX3uaVryXVPI6+5IBFZyTS9QAA5a5+pLCIWGHIo/pEzZ3Qvq9FRWRzaoqkToZwILzLy86VkexGdFET126LAAWLi/7ma85JzrW1RRrLgaQWaVyRYDDf9Ym3nxev+1xaTC5h2lP4AnpHwmgKBBK4TxRMQB5tpYGM1zb9JxgcF76WxaE75xtbr3ccNN4wxknBS8aS1JBofIJcqGDWXBHi9JihS2f9mKUlhTG1oAyGVA8+um38WByxTEuv3k2V83t+RoCs+X0EpiRJMCIlzW3HTMNVxN3SoLlaDJV+gAJAC4iwumjoTXAFgsL+fwiYRbc+JrGwP9oVUaNs3ODMPiA9EAKpV54boSKF3FkePIB2dAJQL/doMxAe9+X/+x5Nh9H2sCvzotatuE0x4oVYDvuvDaZobwrurbLgRplNwE8cH4aWonaeYYdHTO4dKPN8DfF1U6t8fVYfNrTd7rddz3IpShmYDaVFBll8n2brtgf1mftSK9ZN1iOhmgmZXhflwUMA3wQaOrzYEzZ6dZJ5kE9HAWrk9cnE4fgjEQrXBSJTa11AhT1ZMGUMT5Z0mZGllxyUsM24VKuE63WYG2MHOIGzsBpsuf/FWJ4SCgaJwvxiOjlVRfXqkExv3MYvIEPGuw4v/VHBS6tj1b6rmeT8dZSrAWSqFLpS/w41pN
          properties :
           x : 318
           y : 282
           width : 100
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               vList est un variant
               nLigne est un entier
               
               //récupération des listes du tableau
               oTrell est un ClTrello_SCRUM(ChaîneConstruit("https://api.trello.com/1/boards/%1/labels", ClTrello_SCRUM.cst_TableauScrum))
               TableSupprimeTout(TBL_Labels)
               pour tout vList de oTrell.get_json()
               	nLigne = TableAjouteLigne(TBL_Labels)
               	TBL_Labels[nLigne].COL_Id		= vList.id
               	TBL_Labels[nLigne].COL_Label	= vList.name
               FIN
               
              type : 18
            -
              type : 161
              enabled : false
        -
          name : TBL_Labels
          identifier : 0x20b7e47b28e21e1d
          internal_properties : BwAAAAcAAAB8Z4XacSngwNfccG0q5VkX0XDv8HAmGOfnYZ+FQzQsexNxkhv53MibdHHkLXmya/ZWIyozwCqZMQAWa+v/V8flUD98BGJhJRvjI08vdLbYgXo99zeVJHYb1xMWgQMVpL8pSPSGeqO9xwlVzBtGx8c5lbTtSoLIB+GamF2Wzv00zY6kNTTMNF7Wp2OKlk6vpi27kfhHFIyGsQTfCKzy/kE90wFirptZcrD0roMFGNY9dY2NtrOnBkrkcXot9q4ZNl6M22AgKRGbhA+lJ/k1Qk/TDIfgPklgJQgnLuxDrkRj7FK6ZF/L7pWreixqDIHe8T8cXQJ6o8WyQt+dFadhYK07U7Kkf/7UzvQT+oCKaUTA1lo5HAsVzXVQWN6fgE3VuVBn8mADNPSYF7T90f+qJB/QwLTqWQKVwwynTUhL0EMEtFl/COH/Vkmt01+vs8/Dy8/9wiQzsK1dc7VZEL9BBJfiYco/Mx78/PQckDPVjIkk66aHEA8EZTDs6BAp3lVgDf/Ri1F7Q4OLZM6+T9FBnxmsUa4P5LJSrcT2av5XHlj6kjgV7p5wgpyHxGq6TOKIgh09m7f0mP/aKPB3LRVtWWYCmABzTCpfeu6nUZI8WkPi4wlkFhMsjYiHb3wOjPmrCP6RBeOVQfoUbtRALAMdj7HCyhxRORAm200qr51Oyz5wAQ9Qi6j4y16QY/M5IQksMiecNs1Fqjegc5YSkHrtPaUSI+l74bLNlM/djFZbPrqKh/OIh1Wl9iFl+QO+I2tUNjSl5vvNJpDckbLbjYimHDPJVmEm4ohnBKuMXVTiK9udn42A7A4hasB7GetLkYORAsGPt6jfIf8upLhC7gc/5monEmcnnuFyGloopvOMgaNaNtR4DvBMdeuP8p6Y7VkMLUjsP75MmNf5kLAJG4pKyoSTlGEmBuKHHD44lzx2Tx55KTyNdngCF1ERIWY2PdQg0RV5CEBRzKU32zeGy5Ar+xEJlX6OWrZsu36C+tev/SKjVb4/fs9pGG0uxnDp5W4UsUIFMmBnSouTZUckkKpHrWhIwdwnlPOO+sPleFTnsbd+wSxF6mARMb/ZvI1/qeBb37ZSokDpaZ46bAl+8H6P+Z+lT/OP6eLP554tRoHvFRmjitwwAqlkVWoA7I0AiW75JDbbAh4PSc5AKb3PdXlCXjvxgh88AqEcYARR5zYt8DnIwfa4U+ezn4aYeIv+TgslgkQcYHdSKmaVE/aVIu/hOnDGpEMvcrf+5S/XTUUYv8v+mx7rhv7WbEuhXqq1aUpmQw7kJf2SEdGakcQ4D8odECfm/eHnFQDErHk6ir+vR0nOKkDDRTMaScc7SUYg7cL2Nt0AKTr4gAMi3FNPMHKtK3ZY0eNGOgoeJxV+9ErM2PLYBdRPHPFGwdm77oroAgP/SuLSc3UMLXSd/o/BSjY/RqJ1nJQJFFgj9zYwbu/nePADmzyqlcJ9lgpE73xFXyKcIhrVy8KCO6WbmSij/oLIgAgQCl7JWkTmZLwmIWtKgsOyNz5eCUPOCy7miEL7hzpTkAVQRCbzaFfKNwBohypaJDGEeC9/WJLhtNMiY4yDzv6N466Uk1MPn+tHKOAzcmLRm9yui7zbYDJuOMSr7RD0RaCicS0IEbkHcdnu37qyw5MwdVt8gsRE+R3DVpCl4tsXSW5jgtjyLqmYj4cHhwj5iLx1qCYOtamjhXuccgpvWUdrL0n67nTL71dUYql33enyJiGy1dMenc37tJu990QLu6q8jm04Ops76DzARnX6fJMmJtSwp1weXbI1ZzCtHsz1e0UShh4N79d6k1XT/Yezaw3RaUkEYzRhbQPRfBgxQrXNVTe7XcTwFOHzIz5oFCxAFVSEXOgSeS0VJxpVxTLF1eFu6W6JRVifJMlozwWsLINpZLVE3LTPg25CRPAoqLdawkaZ0J8xLxK3Wj+rRrUiXRS6NNFrYLkVaoF2NM5i0pr6E6DCIczWiZNJhCi0q0Yk3abV+9ltswxgdWNPu57tQJRgWVYDLQhJBwIdPbMld7QUYdJtGBlrKPQjT5nBNZf3dfV2LVbnQoFzoF6qtiNOlwPkIyUcpQz5Ck/ddZBRzdfuCbjjOa4Xzdcg8dHp56XHoqqM9mw7ATPBtSoCSBu04CbzWSETn+Ir6Olunktn+x/S2aJaMnB/5e4tL2mTUXDdfjDBW1GPy3GF0UqNMpwE567lnyNghqvubKLZn50Az2Y13/aQx6J8ICsc4cZP3JlWMx0A3WunKGvY2CPrBS7k30gI5P/S4aIDeG3kOmlgRArAvYJwb8YQt1dXRP2azN0raIL1dfkG5MYMC0PzrDFYc1AUrXRYlwzEJbNkrX5UXUNUypIuF3wOM0o8a9N8XxNPyKcjCHnjX/1Baqf4/Bt+VoKcoFuXemdzH1pWZC3AC3IxZjz8JT1sFCng0J+mUD8SJ0/O9l2hIygEv+LuTZ5vOkKFGmq7i1hZrx506K99uJ3GPFbxqdVNCem5KeT+c5F1taywRKi+PRlh87zXs5OYH5Yb+3rpR6hJPoH5O02iDYwY03xehhRcWpO52Z0Mbp8AcEI9jTuUeMTxmOyyi/OTH4NegALnTviWEGVkv4T99Ldjl7xvPSZpUNGoSQHaqP/cmimlJDsTAP2LB+f5Iz6BkK8DQVpwDydMFqzIProKfmaEnO/ADfAGcwyBcmhKj/2S8Id1Who+RT6DFF92P2V0EYEakYlj8/2V2Jotp1HY/cnjXWgOaVF3bF6p79Iswm+WVPXwuMwa4HrYeqPeyDMqN31ygc7mPsKsV/wCHUCKv1kHyLMYcR6n5jZqe/i5grxaZVKbbJeqOqGRUu8rfvatwzHdiyDC9swq6KC2mh7665Mq8I8bCXeloQSkhH/RekvnwqRzwYRJTMv6Dkw2cIuRSLs1bEYrgG77/E2V1pA+qZifKa/YLzXIxhb+pq/lYgMCaNmwWO29Fu24WFhl4yORLgcsZTNVHhrdsL7ugOvMLj1Y/t3zHkbMrAzOkkPwdiEEVjIBUbuz0DbvZQz9jrGzoqCkPLpZ0EyID1e/SvJJNikjfLU0iKcN5L/AzfQxf12HsN8RnZy2vMj2Eo6iuQABJTIGLFMvsfDdN5YM3JzOVsInujx5jA4rEOmCf+r1I+wD2eP3BuPF9KpnreHFOee5Sd9uQBzNQU4y0X/Iw1TcFWa8qCS62v1lQsynEBFVZVw7fiv3jhD4eyhUOtZJYL/rTpy+j5ka5QptXaieUGOXShnrznF/0KhdcYQFdBhaLaI/VTwd+st4X8CFb0Soecfb07Y06LLPjg3nQ3MQbN0a0ps4EvAxXCPRS5+xpYy6L9d2qq8xPQ0T0nyQLepiG/GCAwoXUmTPov6+1/4Z6AGj9RCmN+akNTIkiUepdmmfPpawwVSKfcmGcqW0t755bBhCy6pZePg4kUFfIorQ8ETWBmzcFl6WrtCfcRm8r2jPMKWtPlm9IRbRsN/prBvYr/xd4ReTAXUC6ivbwndeA1Gvrk1Ly2iz69je0s+OitPibzYPtAogbL9QqykMNdQk50IUDW/nKDeH3gr3/zPF/5UMhJ4NYpY/nvruwEe2+Ktz4hxsieZqis2aVaCGpWfNqGED6nLQCbMtngOepMpdO52zrguvHGjaavUUeubsNtFsNQWR8BPNt5xeufTE5jxs1CZgNvklYHSSn71ExQmjhiXLk/wBHVgv330UU0uuxa85CKXi3nxgnlFu1Eh2b2RANxGzbu+Jllm+F0TACj3nT2cyUTaQIOTCldED+QIKelS/R2kjtMemFvtfBqL/atgRwxy20qvHopBOMmgyZzIjzu9HwVx5rQvixAI0cwmcVMdhXHZup4rfLzi4CxxIXWPaBZLH+uBM8Vu690Hk5BK3a44Djic9MbxfCjcg+DlxV1VWw+NngKqDlZsKWSVEi6TxFJgasbmXZd1N6I3cQqcthemfPtK3QjlFLWjvsYlLcbyQ0IHnoryALv4MaOkA0xLkZ8aRyt8r7SfkpeUNW0mGilVcM616kws042MuMitM30a8qeYNxawTRwpMmU1wfXUuLeEK58wcSCqep++MpPze1zg+NaKFkceuZQo5f24x+IZQAxUa/iBIlkHUqLacg/gyeTXqFe20/SbQc3M4tj8+eJjtiGK+5BYL1jKLLVaWQ5QLHAyHUMUmiY89qmaJ4JwD9phIPriFcDTtPsdhBEJNxB8S4bSrQNMWzf/433+Jcfsmg2V4dYUS4kxcF9edZIh2Ld/sgpn8VTJRSBYv3wPFyePLYe/KxPhireMq9g+GZIB4nfHq0q+SoJhhKBtWlvZkU4OkxKInRah0mML1FbzkIPWlSGO3jh4yc4kryvduaoQcJcnLkBV4ouj9sGmgMbZJnGQcoWvRGCEjTlZqbDjljlY+dc/iClV4mQgWx8jL6MOd32RJ0Ow3zwll2Dyd3RiU+88LlACTiKle6S7t4Mh2LFWYx8gI1XYdNEvZFutb6Luz3CKRCFRdibLb8jeEE+8N7j1/xEozjun7wairG/ykbSEv4HPSQYpUxq3jtaxQya/npGnSDpEfc0AZ81cEsrQZcdOB7VUONphjbcKvoIC0Vq3G94465Fqkmm/zTiHDnPG5GJ0w6beVyuDDsPkaSwmbpaHuUtOSujmi4ibRmsCmUMM/xyii2LczqlqMZUaCKrvI24SjlOmnH186hOSHGRx4VnQOyuTmKCXX+H4S6chJJguc5ixjEM+2kLKuaLKT7Cy9YzYQbK4+Vgk2YD5pIW0MgtF+4hSmi+ULTGeOZWnnImRdCyKesXA0ImXQUGMJYGX0MQVYtMvkv3kaBKlkkwBxNxg8zUJJXZmv9/pf8Vd681K+HCt+2d1dn9QgYWE9jAOCyv0n5CNltOt8PloVcg6SfDtydO9+LGe8OLahjNRlBsZBhx5cs7GbEYuvTTSd54ZnZIcjxq50OBtIO8vPh7Z8tmHu2hUycGqcskctElf2RhzqqekNOhmv6S+zBSuwCehQ+k+ojA6oPAsAOtqsAokBd/wfM9r8d6eg0pUlKeSzA9ohFx38a8eLqUFKrqKBm5wawus657v82j5njXGMABSudBlbvS9JobGamhTziB7M2JO9uzYfCK65u5Z++0g3M4zGSnEWDpVFON3CbP5iIPCBZ+/8C4Nns9f9NMPY8y4Czg36W4Do02PhYpD8khe8pD501ERn0ksk5YMx/pK7u0eueI+UYBr+umIwQALYJ5M2HCBkPH9UrspJo4moMTU+nKaYmea1ruuSnUqHfOTHAkA6S/YL9aIU/jWknKumCQCfyhL2/036ClEbTMLlQVtWhXkVuxHj/gTzl8Rd4qQ9wzg1kyem5C0AK0czuPDT2Iy+rny5bOQuovUsvl5D7w5AxOznTKmMlcGIhD33iWoMQf/B18e6QUemrbx/9RQv2G1jc8ImD0nZsmx85wG/8PEI9cMLDeJ7zl239JWHbFpGZFRhL824c4OP6ULNhLEVNGpFVxQBmklMJC7VhrOT9e4WIgNSfxCP3+LQKFjspr/afkUpgr8vO7h7Px2c7QGwlKn6o+1daDaRkjb5j4HGeyZEXf4OlfCvZzBTAeAonNjhWzHf3Y2DQDJ2CbJ3zzCokMjspJUZUsjrlSugyx18RasArLeaCYJBmouzm6NeIIkbM8ooMEkcF9RffkHV9AgM0vB09bX0wcj85OAFSzYgOurQeZaJw60bR0R7KR51MkCJJA673mP+TamtalBpCP/pOmRH4FwX7S9z1c1zrPSF8aTeYi8C4g9tYWZPjjXqLLeG2CaCF7uFeU9i9InhRIvj3IE8zMXbEZZpMxZW002j/3twr2lvI2PCFQJla/ehDq96P8WroKXVGeXF79DLcl8iF4aOrLLTATuxz+ERD6gZwWPBaNiqjanVqBQectBniDkuZbgwZTqoK1Y9sH/Tshwod3/XvznMQq1NIeTUmqAENeWzbOHcMevyEzsHs3wZekFssWZlsvOvIavNqBehtWio92oI8w6s7JzgFV3Kyj2rzM78sdsxwSD0NphUU5qTwk54BhAYSOMDU4ehtT0m76kw/WUKuyknOCwjoWQBHnOOyaHWNkZZhRX/FesEYImjLwxvIUEDyQtJf6lEp9ZiY58tzZEMRpqgt1FiqBGof7Ipk+0eIsM7wqbkuaAIuOC3WgXs7NKaPYb6ET6mC1b2gbMoNAa0ZMrATVpl9pNlbMEh/tPobgGtkNtyLBLkUXsIfpbgwXpQo5h+0IXzEcUbCmCn/qiE0k6tcFcQrgcyp61dut6BdnlmxclJU1gG40xsOLVHkq6FyIV17He2dqioawqyqK6iBKzmORVNfcd6nmgffc8CDjFpbvYcDfJXiQN1fK8lYWI7qwmi9qqpXtoFy1fJ8VttcpKfUxV/RgyFSHvaDW9+8LYrVn4x4j+vkQTT+ra6QYpYGCYJuVVp+A==
          properties :
           x : 6
           y : 309
           width : 412
           height : 83
          columns :
           -
             name : COL_Label
             identifier : 0x20b7e47b28e31e1d
             internal_properties : BwAAAAcAAAAWeVbc1ZPQDxqQ6uNgsLxrg884vpPjgflK4ZfziV4cqAZHVs9nOF72P2gPNzGGAuEE2vjRSX5CNaA9gwj5zYnrXLY5x1YbqXLA+MEjAAyfJmO9aCnVt8fwGaEPlGHjshZiSdpMN68hXDThXyhk8AbQPb/mMEPjsXqh5xpaJh2ir6Ny6aVw+s/Uvg==
             type : 2
             content :
              internal_properties : BwAAAAcAAAAuAQemJcwfwo07+wK/hEJWSZBEZF65bV1DTLlAKXFMgvJKUN5tJcm6927KDMvQjWUMTic5fbPfncS62wvjgBzTTjidwgrdjK/kX+5nTfYa7Aic51/CCFa9jZnZSXiejN4kIA6wVRHijYlr0u24GMUoIZhLfU6hfKRTeAzJupTKSBAo9qqHvoAQqTKSh86CegrNVbTePQNDKZEc6rPUzZCDemnnUIb8j6Myz5/0BltlVl5yGHPg8EiwwoR+MRv26zc/US5rgBKSaJU92pMGLnbB6qSfPQ8z7w4vWVg2dTO70T3F0/K3vO1b1SLa1egFMHO02gTRNc6QdsQl3yOgyRboyy6k+ZxAZOR+ID/Bebh7tN2fwpZCDgNOAKUxtPK8mV7DRaW7kr8zB8gSewLzeJAzTCz66jhfWw3XDHVnttuAp3qP8gXJ2w0Xv+bL5BOdwHE5fq7tcogCtwI4iOPUjS1zsaEoFr3l8vGeiveibkP54+YEswrTLipdF4ziKVVYnVfLM++Mw68xWFkqQbABzDHQhtkiMfkAY53IAkfynPJ3oJdPAFaG6yo31qUYdkOaXuwypOSmayPFl6SiDRgNIgmmzUzHue6aTRjrgboewNsW84Qdsqd4ntpq1jPn9qzo9KAN6CEFNT7ebynm55zFtspLTyuHrQnI6rPO6Hj++7JB+v9XFIWEyMYP0B/GilADYFU9vWmznW56QF1cSXrsrKPZ0ZXnhVP3O1SozjNgxuJ6sQqrjSYRxOLCSCfEWc5srZKUMrB0RrCuCCO4Rh4Er4hHIKkTIEIK3EYO9Pun6PdMiogiOWu2GZeJMACt5NNLUSy2dIxKKxUwLplu1bWYBdi3JdndvYk=
              properties : {}
              type : 2
             code_elements :
              internal_properties : BwAAAAcAAAD2Rkbx+OjeaV6cz3eLdX7jB0Jgs6WDDXWz15HdSBZm9oeZQ2BKnjRAOa1wH4EQ9d5x
              type_code : 3
              p_codes :
               -
                 type : 276
                 enabled : false
               -
                 type : 277
                 enabled : false
               -
                 type : 278
                 enabled : false
           -
             name : COL_Id
             identifier : 0x20b7e47b28e41e1d
             internal_properties : BwAAAAcAAAAga/+rjLP18+STU+r8TLcTKe+h+I+vxSTdU8WqdHFudkcwkPITPXXT5LGDO+BFq68kIUlncLXwaWTSERRTLJOFsBfsmmysZJMxVfkMRrZy1EqUs3E8KSnCB5EdBZ5g0fIqhFjlEPgtQc28fSJuLLWajFNh0Yd/fkOAhlbtYqUMtzIw
             type : 2
             content :
              internal_properties : BwAAAAcAAAAuAQemJcwfwo07+wK/hEJWSZBEZF65bV1DTLlAKXFMgvJKUN5tJcm6927KDMvQjWUMTic5fbPfncS62wvjgBzTTjidwgrdjK/kX+5nTfYa7Aic51/CCFa9jZnZSXiejN4kIA6wVRHijYlr0u24GMUoIZhLfU6hfKRTeAzJupTKSBAo9qqHvoAQqTKSh86CegrNVbTePQNDKZEc6rPUzZCDemnnUIb8j6Myz5/0BltlVl5yGHPg8EiwwoR+MRv26zc/US5rgBKSaJU92pMGLnbB6qSfPQ8z7w4vWVg2dTO70T3F0/K3vO1b1SLa1egFMHO02gTRNc6QdsQl3yOgyRboyy6k+ZxAZOR+ID/Bebh7tN2fwpZCDgNOAKUxtPK8mV7DRaW7kr8zB8gSewLzeJAzTCz66jhfWw3XDHVnttuAp3qP8gXJ2w0Xv+bL5BOdwHE5fq7tcogCtwI4iOPUjS1zsaEoFr3l8vGeiveibkP54+YEswrTLipdF4ziKVVYnVfLM++Mw68xWFkqQbABzDHQhtkiMfkAY53IAkfynPJ3oJdPAFaG6yo31qUYdkOaXuwypOSmayPFl6SiDRgNIgmmzUzHue6aTRjrgboewNsW84Qdsqd4ntpq1jPn9qzo9KAN6CEFNT7ebynm55zFtspLTyuHrQnI6rPO6Hj++7JB+v9XFIWEyMYP0B/GilADYFU9vWmznW56QF1cSXrsrKPZ0ZXnhVP3O1SozjNgxuJ6sQqrjSYRxOLCSCfEWc5srZKUMrB0RrCuCCO4Rh4Er4hHIKkTIEIK3EYO9Pun6PdMiogiOWu2GZeJMACt5NNLUSy2dIxKKxUwLplu1bWYBdi3JdndvYk=
              properties : {}
              type : 2
             code_elements :
              internal_properties : BwAAAAcAAAD2Rkbx+OjeaV6cz3eLdX7jB0Jgs6WDDXWz15HdSBZm9oeZQ2BKnjRAOa1wH4EQ9d5x
              type_code : 3
              p_codes :
               -
                 type : 276
                 enabled : false
               -
                 type : 277
                 enabled : false
               -
                 type : 278
                 enabled : false
          type : 9
          controls : []
          code_elements :
           type_code : 9
           p_codes :
            -
              type : 35
              enabled : false
            -
              type : 22
              enabled : false
            -
              type : 24
              enabled : false
            -
              type : 23
              enabled : false
            -
              type : 25
              enabled : false
            -
              type : 230
              enabled : false
            -
              type : 241
              enabled : false
            -
              type : 263
              enabled : false
            -
              type : 262
              enabled : false
            -
              type : 222
              enabled : false
            -
              type : 223
              enabled : false
            -
              type : 224
              enabled : false
        -
          name : TBL_TachesAFaire
          identifier : 0x20b7e47b28ec1e4c
          internal_properties : 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
          properties :
           x : 6
           y : 422
           width : 412
           height : 163
          columns :
           -
             name : COL_aFaire
             identifier : 0x20b7e47b28ed1e4c
             internal_properties : BwAAAAcAAADtA2K/QfZR2PW4Wys/a+SyHrHY5yTrxmsyTiu82Dyi5fimAixiH3VzSPwibdW7BlD1VhCwO8sW9y5kjZFzvrXhJKeAjl+YYcRWn+iXI2QS7LOO+/Yys/HVRM07jelsNmvDjn+wyUSPNZmUsxkAN5GujZA9bNK9m+ZSpwqAJ97KuQPXJqhCeQ==
             type : 2
             content :
              internal_properties : BwAAAAcAAAAuAQemJcwfwo07+wK/hEJWSZBEZF65bV1DTLlAKXFMgvJKUN5tJcm6927KDMvQjWUMTic5fbPfncS62wvjgBzTTjidwgrdjK/kX+5nTfYa7Aic51/CCFa9jZnZSXiejN4kIA6wVRHijYlr0u24GMUoIZhLfU6hfKRTeAzJupTKSBAo9qqHvoAQqTKSh86CegrNVbTePQNDKZEc6rPUzZCDemnnUIb8j6Myz5/0BltlVl5yGHPg8EiwwoR+MRv26zc/US5rgBKSaJU92pMGLnbB6qSfPQ8z7w4vWVg2dTO70T3F0/K3vO1b1SLa1egFMHO02gTRNc6QdsQl3yOgyRboyy6k+ZxAZOR+ID/Bebh7tN2fwpZCDgNOAKUxtPK8mV7DRaW7kr8zB8gSewLzeJAzTCz66jhfWw3XDHVnttuAp3qP8gXJ2w0Xv+bL5BOdwHE5fq7tcogCtwI4iOPUjS1zsaEoFr3l8vGeiveibkP54+YEswrTLipdF4ziKVVYnVfLM++Mw68xWFkqQbABzDHQhtkiMfkAY53IAkfynPJ3oJdPAFaG6yo31qUYdkOaXuwypOSmayPFl6SiDRgNIgmmzUzHue6aTRjrgboewNsW84Qdsqd4ntpq1jPn9qzo9KAN6CEFNT7ebynm55zFtspLTyuHrQnI6rPO6Hj++7JB+v9XFIWEyMYP0B/GilADYFU9vWmznW56QF1cSXrsrKPZ0ZXnhVP3O1SozjNgxuJ6sQqrjSYRxOLCSCfEWc5srZKUMrB0RrCuCCO4Rh4Er4hHIKkTIEIK3EYO9Pun6PdMiogiOWu2GZeJMACt5NNLUSy2dIxKKxUwLplu1bWYBdi3JdndvYk=
              properties : {}
              type : 2
             code_elements :
              internal_properties : BwAAAAcAAAD2Rkbx+OjeaV6cz3eLdX7jB0Jgs6WDDXWz15HdSBZm9oeZQ2BKnjRAOa1wH4EQ9d5x
              type_code : 3
              p_codes :
               -
                 type : 276
                 enabled : false
               -
                 type : 277
                 enabled : false
               -
                 type : 278
                 enabled : false
           -
             name : COL_Id
             identifier : 0x20b7e47b28ee1e4c
             internal_properties : BwAAAAcAAABQey/7vGNFI9SDgzqsHAdjmT9RSL8fFVQNg7W6ZEF+BnfAgIIDLUWDVGHzixAVe+SKzU+1DD9m+8gouYg5Iv/prIhHL+/Zd9TwkuRRkZsVYf2RgyGMmZmyN0FN1a5wweI6lGjVIOgdsX3sLXK+/GXKXKMxgdcvLvNwtgY9snU8Z0LA
             type : 2
             content :
              internal_properties : BwAAAAcAAAAuAQemJcwfwo07+wK/hEJWSZBEZF65bV1DTLlAKXFMgvJKUN5tJcm6927KDMvQjWUMTic5fbPfncS62wvjgBzTTjidwgrdjK/kX+5nTfYa7Aic51/CCFa9jZnZSXiejN4kIA6wVRHijYlr0u24GMUoIZhLfU6hfKRTeAzJupTKSBAo9qqHvoAQqTKSh86CegrNVbTePQNDKZEc6rPUzZCDemnnUIb8j6Myz5/0BltlVl5yGHPg8EiwwoR+MRv26zc/US5rgBKSaJU92pMGLnbB6qSfPQ8z7w4vWVg2dTO70T3F0/K3vO1b1SLa1egFMHO02gTRNc6QdsQl3yOgyRboyy6k+ZxAZOR+ID/Bebh7tN2fwpZCDgNOAKUxtPK8mV7DRaW7kr8zB8gSewLzeJAzTCz66jhfWw3XDHVnttuAp3qP8gXJ2w0Xv+bL5BOdwHE5fq7tcogCtwI4iOPUjS1zsaEoFr3l8vGeiveibkP54+YEswrTLipdF4ziKVVYnVfLM++Mw68xWFkqQbABzDHQhtkiMfkAY53IAkfynPJ3oJdPAFaG6yo31qUYdkOaXuwypOSmayPFl6SiDRgNIgmmzUzHue6aTRjrgboewNsW84Qdsqd4ntpq1jPn9qzo9KAN6CEFNT7ebynm55zFtspLTyuHrQnI6rPO6Hj++7JB+v9XFIWEyMYP0B/GilADYFU9vWmznW56QF1cSXrsrKPZ0ZXnhVP3O1SozjNgxuJ6sQqrjSYRxOLCSCfEWc5srZKUMrB0RrCuCCO4Rh4Er4hHIKkTIEIK3EYO9Pun6PdMiogiOWu2GZeJMACt5NNLUSy2dIxKKxUwLplu1bWYBdi3JdndvYk=
              properties : {}
              type : 2
             code_elements :
              internal_properties : BwAAAAcAAAD2Rkbx+OjeaV6cz3eLdX7jB0Jgs6WDDXWz15HdSBZm9oeZQ2BKnjRAOa1wH4EQ9d5x
              type_code : 3
              p_codes :
               -
                 type : 276
                 enabled : false
               -
                 type : 277
                 enabled : false
               -
                 type : 278
                 enabled : false
          type : 9
          controls : []
          code_elements :
           type_code : 9
           p_codes :
            -
              code : |1+
               si CBO_SprintTacheACrer..ValeurMémorisée <> 0 ALORS
               	oTaches est un ClColTaches <- ClTache.Taches_a_faire(ClTache.Toutes)
               	oTache est un ClTache dynamique
               	nLigne est un entier
               	
               	TableSupprimeTout(TBL_TachesAFaire)
               	POUR TOUT ÉLÉMENT oTache DE oTaches.aItems()
               		SI oTache.p_nNum_Sprint_Realisation = CBO_SprintTacheACrer..ValeurMémorisée ALORS
               			
               			nLigne = TableAjouteLigne(TBL_TachesAFaire)
               			TBL_TachesAFaire[nLigne].COL_Id		= oTache.Get_IdUnique()
               			TBL_TachesAFaire[nLigne].COL_aFaire	= oTache.p_sCodeTache + " - " + oTache.p_sDescription
               		FIN
               	FIN
               FIN
               
               
              type : 14
            -
              type : 35
              enabled : false
            -
              type : 22
              enabled : false
            -
              type : 24
              enabled : false
            -
              type : 23
              enabled : false
            -
              type : 25
              enabled : false
            -
              type : 230
              enabled : false
            -
              type : 241
              enabled : false
            -
              type : 263
              enabled : false
            -
              type : 262
              enabled : false
            -
              type : 222
              enabled : false
            -
              type : 223
              enabled : false
            -
              type : 224
              enabled : false
            -
              code : |1+
               //ExécuteTraitement(BTN_Créer_la_carte, trtClic)
              type : 66051
        -
          name : BTN_Recup_cartes
          identifier : 0x20b7e47b28f21e6b
          internal_properties : BwAAAAcAAAApNXEYfdF6D3KtZgaLlAvM4DO9lJOdojjFLWw2/XirW1JnP0RJhQuvkZ02rwC1yoXfFKSrulvIs28OAsBDFi5KA6wuTZ4sp3gB+30NbGRb0c1FjpSgXcaTHSickGIx6ohz9pKYFhcAc/chlblLyUg9mFXJaSHidr1/Fh3+CJxl7Ute17hITKO1tXYEc1A40sGS2mUZ1mVogSx5Z0m67wqBRkjkTqamWVuLG9CBe8nmiPGIdgmRJMOgJiAhYE+42V398+TaTekXmBpPyhxg4r/9T+mVZsxnSu6Ww6tr8R6fAL80pbtQpbYAFHCVUOcTZNPTol1JcE9ny/c8njuP+wu+Z1cDGxxLs1XbrY4VR9l2J69xRdJC0wvQCpp6FRgNIxzzG2pTyFF2qvB/05uq75tjR7uv+6cj/GVujH/XSoVPvq99TeScD5tfxgjYxlABJvSRWZdUJ/lboitDi+uI/7iWtmXiF27H2L344bYjIC3j4ESfwme8MMajmCb/4VtvpqWtCCbaXdZGyubp8vxKC6Ib3+eWnS1ubsKYwCpDj1gZ90Ec4dpM3IMgTbbeLZzZj6ThErT6rcK2FxFW+Y04eS+vTlNAPflERrGCabL67TSWcWf2m8xTz19MORDmUO+S/Qu7bq5DyTBYkqj4FxIA/zYaBJmaOeM/fZUjVetuQr0LEzhHiLXBECm12zmmV/0zRMxt5Nlto7AiC8WV/W8psWbojI9B3nj7Te5jIM6xTsfK3YGCgbDom3PUOIAjARDVZvE703AiEk8lahaEzVWOTC3hadsym+Y92XhNmI1gwudy3gEiPDFvJRVDL/X0ULA=
          properties :
           x : 795
           y : 10
           width : 100
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               //vRep			est un variant
               //vList			est un variant
               //nLigne			est un entier
               //sCodeTache		est une chaîne
               //oTache			est un ClTache dynamique
               //anUSARecalculer	est un tableau d'entiers
               //nIdUs			est un entier
               //oUsrDev			est un ClUsr dynamique
               //vLabel			est un variant
               //nInd			est un entier
               //
               ////récupération des listes du tableau
               //oTrell			est un ClTrello_req(ChaîneConstruit("https://api.trello.com/1/lists/%1/cards", TBL_Tableaux.COL_Id))
               //
               //
               //pour tout vList de oTrell.get_json()
               //	nInd++
               //	Jauge(nInd, vRep..Occurrence)
               //	
               //	
               //	sCodeTache = SansEspace(ExtraitChaîne(vList.name,1,"-"))
               //	
               //	//SI sCodeTache DANS ("T0768") ALORS STOP
               //	
               //	oTache <- ClTache.GetObj_de_code(sCodeTache)
               //	
               //	nLigne = TableAjouteLigne(TBL_Cartes)
               //	si oTache = Null ALORS
               //		TBL_Cartes[nLigne].COL_Id		= "!!!" + sCodeTache + "!!!"
               //		SI TBL_Tableaux.COL_Id  <> cst_List_ID_Fini_sprint_précédents ALORS
               //			trace("Référence de tache non trouvée : [%sCodeTache%].")
               //		FIN
               //	sinon
               //		
               //		//On vérifie si on a pas déja synchronisé la tache
               //		si TableauCherche(zaLstTacheImportes,tcLinéaire,sCodeTache) > 0 ALORS
               //			Trace("Tache en doublon, dans trello : " + sCodeTache)
               //		sinon
               //			TableauAjoute(zaLstTacheImportes,sCodeTache)
               //		FIN
               //		
               //		TBL_Cartes[nLigne].COL_Id		= oTache.Get_IdUnique()
               //		
               //		
               //		SI oTache.p_bAnnule ALORS
               //			oTache = Null
               //		FIN
               //	FIN
               //
               //	TBL_Cartes[nLigne].COL_Liste	= vList.name
               //	TBL_Cartes[nLigne].COL_IdCarte	= vList.id
               //	
               //	//A t on au moins un membre mis sur la liste ?
               //	si vList.idMembers[1] <> null ALORS
               //		HLitRecherche(Scr_Usr_Trello,IdTrello,vList.idMembers[1],hIdentique+hLimiteParcours)
               //		si HTrouve(Scr_Usr_Trello) ALORS
               //			oUsrDev <- ClUsr.GetObj(Scr_Usr_Trello.IDScr_Usr)
               //		sinon
               //			stop
               //		FIN
               //	sinon
               //		//Non : on prend l'utilisateur courant.
               //		oUsrDev = goapp.m_oUsrCnx
               //	FIN
               //	
               //	
               //	
               //	SI oTache <> Null ALORS
               //		
               //		////////////////////////////////////////////////////////
               //		//Vérification du blocage de la tache
               //		
               //		bSuspendue est un booléen = faux
               //		POUR TOUT vLabel DE vList.idLabels
               //			SI vLabel DANS(cst_Label_Suspend, cst_Label_Attente) ALORS
               //				bSuspendue = Vrai
               //			FIN
               //		FIN
               //		//La tache est elle suspendue ?
               //		SI bSuspendue ALORS
               //			//Oui : on s'assure qu'il y ait le motif.
               //			SI PAS oTache.p_nStatut = ClTache.cstStatut_Suspendu ALORS
               //				oTache.p_nStatut = ClTache.cstStatut_Suspendu
               //				Trace("La tache [%oTache.p_sCodeTache%] est suspendue dans trello, mais n'a pas de motif.")
               //			FIN
               //		SINON
               //			//Non : On s'assure qu'il n'y ait plus de motif.
               //			SI oTache.p_nStatut = ClTache.cstStatut_Suspendu ALORS
               //				oTache.p_nStatut = ClTache.cstStatut_Suspendu
               //				Trace("La tache [%oTache.p_sCodeTache%] n'est pas suspendue dans trello, mais a de motif de blocage.")
               //			FIN
               //			
               //			
               //		 	SI TBL_Tableaux.COL_Id DANS(cst_List_ID_Dev_en_cours, cst_List_ID_A_faire_tester_par_DEV2, cst_List_ID_Test_unitaire) ALORS
               //		 	 	oTache.p_nStatut = ClTache.cstStatut_en_cours
               //			FIN
               //		FIN
               //		
               //		
               //		si TBL_Tableaux.COL_Id = cst_List_ID_A_faire ALORS
               //			oTache.p_oUsr_Dev				= NULL
               //			oTache.p_nNum_Sprint_Demarrage	= NULL
               //			oTache.p_bEstRealise			= faux
               //		sinon
               //			oTache.p_oUsr_Dev				= oUsrDev
               //			oTache.p_nNum_Sprint_Demarrage	= oTache.p_nNum_Sprint_Realisation
               //		FIN
               //		
               //		SI TBL_Tableaux.COL_Id dans(cst_List_ID_Test_fonctionnel, cst_List_ID_A_livrer_en_prod, cst_List_ID_Fini, cst_List_ID_Fini_sprint_précédents) ALORS
               //			oTache.p_bEstRealise			= vrai
               //		sinon
               //			oTache.p_bEstRealise			= faux
               //		fin
               //		
               //
               //		
               //		SI TBL_Tableaux.COL_Id DANS(cst_List_ID_A_livrer_en_prod, cst_List_ID_Fini, cst_List_ID_Fini_sprint_précédents) ALORS
               //			oTache.p_nNum_Sprint_Fin		= oTache.p_nNum_Sprint_Realisation
               //		FIN
               //		
               //		
               //	 	 SI TBL_Tableaux.COL_Id DANS(cst_List_ID_Fini_sprint_précédents) ALORS
               //	 	 	
               //	 	 	bComptaDansScrum est un booléen = faux
               //			
               //			POUR TOUT vLabel DE vList.idLabels
               //				SI vLabel DANS(cst_Label_Comptabilise) ALORS
               //					bComptaDansScrum = vrai
               //				FIN
               //			FIN
               //			
               //			si pas bComptaDansScrum ALORS
               //				trace("La tache [%oTache.p_sCodeTache%] n'a pas été comptabilisée")
               //			FIN
               //		FIN
               //		
               //		
               //		
               //		
               //		//////////////////////////////////////////////////////////////////////////////////////////////////////////////
               //		
               //		vEvts est un variant
               //		oMessage est un ClMessage dynamique
               //		
               //		dhEvt est une dateheure
               //		oSpr est un ClSprint dynamique
               //		
               //		//récupération des actions de la carte
               //		oTrell2 est un ClTrello_req(ChaîneConstruit("https://api.trello.com/1/cards/%1/actions", vList.id))
               //		TableSupprimeTout(TBL_Actions)
               //		POUR TOUT vEvts DE oTrell2.get_json()
               //			
               //			nLigne = TableAjouteLigne(TBL_Actions)
               //
               //
               //			HLitRecherche(Scr_Usr_Trello,IdTrello,vEvts.idMemberCreator,hIdentique+hLimiteParcours)
               //			SI HTrouve(Scr_Usr_Trello) ALORS
               //				oUsrDev							<- ClUsr.GetObj(Scr_Usr_Trello.IDScr_Usr)
               //				TBL_Actions[nLigne].COL_IdUsr	= oUsrDev.p_sNom
               //			FIN
               //
               //
               //			dhEvt = dh_FormatRFC3339_Vers_DateHeure(vEvts.date)
               //			
               //			
               //			SI vEvts.data.text <> Null ALORS
               //				TBL_Actions[nLigne].COL_Data	= vEvts.data.text
               //				
               //				oMessage						= allouer un ClMessage()
               //				oMessage.p_oTache				= oTache
               //				oMessage.p_oUsr					= oUsrDev
               //				oMessage.p_sCMTR				= vEvts.data.text
               //				oMessage.p_dhDteCreation		= dhEvt
               //				oMessage.Enregistre()
               //			FIN
               //			
               //			oSpr <- ClSprint.oGet_SprintDeDate(dhEvt..PartieDate)
               //			TBL_Actions[nLigne].COL_Date		= oSpr.sSprint_Date()
               //			
               //			
               //			SI vEvts.data.listAfter <> Null ALORS
               //				TBL_Actions[nLigne].COL_IdList	= vEvts.data.listAfter.id
               //				
               //				SELON vEvts.data.listAfter.id
               //					CAS cst_List_ID_Dev_en_cours
               //						TBL_Actions[nLigne].COL_IdList = "En cours"
               //						
               //					CAS cst_List_ID_A_faire_tester_par_DEV2
               //						TBL_Actions[nLigne].COL_IdList = "Dev 2"
               //						
               //					CAS cst_List_ID_Test_unitaire
               //						TBL_Actions[nLigne].COL_IdList = "TU"
               //						
               //					CAS cst_List_ID_A_livrer_en_pré_prod
               //						TBL_Actions[nLigne].COL_IdList = "Liv pré prod"
               //						
               //					CAS cst_List_ID_Test_fonctionnel
               //						TBL_Actions[nLigne].COL_IdList = "TF"
               //						
               //						si oTache.p_oUserStoryParent.p_dDateMiseADispo_EnTest < dhEvt..PartieDate alors
               //							oTache.p_oUserStoryParent.p_dDateMiseADispo_EnTest = dhEvt..PartieDate
               //						fin
               //						
               //					CAS cst_List_ID_A_livrer_en_prod
               //						TBL_Actions[nLigne].COL_IdList = "Liv Prod"
               //						
               //						
               //						SI oTache.p_bEstRealise ALORS
               //							oTache.p_nNum_Sprint_Fin	= oSpr.Get_IdUnique()
               //						FIN
               //						
               //						SI oTache.p_oUserStoryParent.p_dDateMiseADispo_EnTest < dhEvt..PartieDate ALORS
               //							oTache.p_oUserStoryParent.p_dDateMiseADispo_EnTest = dhEvt..PartieDate
               //						FIN
               //						
               //						SI oTache.p_oUserStoryParent.p_dDateMiseEnProd < dhEvt..PartieDate ALORS
               //							oTache.p_oUserStoryParent.p_dDateMiseEnProd = dhEvt..PartieDate
               //						FIN
               //						
               //					CAS cst_List_ID_Fini
               //						TBL_Actions[nLigne].COL_IdList = "Fin"
               //						
               //						si oTache.p_oUserStoryParent.p_dDateMiseADispo_EnTest = "" ALORS
               //							oTache.p_oUserStoryParent.p_dDateMiseADispo_EnTest = datesys()
               //						FIN
               //						
               //						si oTache.p_oUserStoryParent.p_dDateMiseEnProd < dhEvt..PartieDate alors
               //							oTache.p_oUserStoryParent.p_dDateMiseEnProd = dhEvt..PartieDate
               //						fin
               //						
               //						si oTache.p_bEstRealise alors
               //							oTache.p_nNum_Sprint_Fin	= oSpr.Get_IdUnique()
               //						FIN
               //						
               //					CAS cst_List_ID_Fini_sprint_précédents
               //						TBL_Actions[nLigne].COL_IdList = "Prec"
               //						
               //						oTache.p_nNum_Sprint_Fin		= oSpr.Get_IdUnique()
               //		
               //					AUTRE CAS
               //						
               //				FIN
               //			FIN
               //		FIN
               //
               //		//Correction du N° de print de réalisation, si fini avant
               //		SI oTache.p_nNum_Sprint_Realisation > oTache.p_nNum_Sprint_Fin ET oTache.p_nNum_Sprint_Fin <> 0 ET PAS oTache.p_bAnnule ALORS
               //			oTache.p_nNum_Sprint_Realisation = oTache.p_nNum_Sprint_Fin
               //			oTache.p_nNum_Sprint_Previsionnel = oTache.p_nNum_Sprint_Fin
               //		FIN
               //		SI oTache.p_nNum_Sprint_Creation > oTache.p_nNum_Sprint_Realisation ET oTache.p_nNum_Sprint_Realisation <> 0 ALORS
               //			oTache.p_nNum_Sprint_Creation = oTache.p_nNum_Sprint_Realisation
               //		FIN
               //		//Cas d'une tache validé, qui a eu un retour : elle est comptée comme terminée
               //		si oTache.p_bEstRealise = Faux et oTache.p_nNum_Sprint_Fin <> 0 ALORS
               //			oTache.p_bEstRealise = vrai
               //		FIN
               //
               //		
               //		oTache.Enregistre()
               //		
               //		
               //		//On mémorise les US à recalculer
               //		nIdUs = oTache.p_oUserStoryParent.Get_IdUnique()
               //		SI TableauCherche(anUSARecalculer,tcLinéaire,nIdUs) = -1 ALORS
               ////			si nIdUs = 684 alors stop
               //			TableauAjoute(anUSARecalculer,nIdUs)
               //		FIN
               //	FIN
               //FIN
               //
               //
               //oUs est un ClUserStory dynamique
               ////pour tout oUs de aOUS
               ////	trace(oUs.m_sCodeUserStory + "#" + oUs.m_dDateMiseEnProd)
               ////	oUs.RecalcEtatUS()
               ////FIN
               //pour tout nIdUs de anUSARecalculer
               //	oUs <- ClUserStory.GetObj(nIdUs)
               //	
               //	si oUs.p_bTermine et oUs.p_dDateMiseEnProd = "" ALORS
               //		oUs.p_dDateMiseEnProd = DateSys()
               //	FIN
               //	
               //	//Trace(oUs.p_sCodeUserStory + "#" + oUs.p_dDateMiseEnProd)
               //	oUs.RecalcEtatUS()
               //FIN
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Recup_infos
          identifier : 0x20b7e47b28f41e6b
          internal_properties : BwAAAAcAAACXy5disyTbKPM+myk8L/5HJepIw7/55jCx5ajq0UAHryZfj4gdGecP/TVKO1y9jnG7TAw3zgccmyPWnoRvzorWf0zGefIAayCNOaXFnJBbh2WnbyQhLzZJwq7UUMS571n5Hod3IblF7B890D9RyBcERdZQIp55emQWSH+u8H//ByN40244Pg/NSeSC8+DEzsPSjE3rwn98ReDPHTUmp5Z/qhaoDP7g+T/LVbbtD+X6ApFSWl+Zqke0Yl6X3Euw3f9dZQjIaQPLNIqBrPhMugtP2weN8FBt0qa2PUnLOXLLnkMScUGMa76IdEJ/eI9HRHV3aMXrKNnn1yvKtD+L53usY10DxUTFU2Wjl0SJK01W8ZdLPTT6IcuUpkCsNShJd9K/YXp9OJMOHjipvS/uP1fN10331SeVRV4nc/6UaTgSgVjW3tWXqjCUOzMbw7fM3TMW9sip5jCUZ9wyqlh/Un/dd4aXmOEylerVhMEgByje40mk21CnozMQJQniDlrCxVTiNX8LEHHTi0cAgbnZ3tEyjGRTxhiBw5uR8w1I7hvcOhp1QhvnH7i5OqEZqoPEGidq+6Gv3Il30M7tGHYDgDa+fyz99jRna/bHqHk/PMd1QFTLjKV2ImxtTmd1lcaNCCZU9yfUJIu1E8nDCqfPInMa/CFAlTy7hewxAPPXAADfdNNikG/xj1/R1sVXWMZ3/YH+XXC8K7bMm2rwUdHntULA7K9ROOY5l9z9iljbpLX0hyM8r4oGuZ2K0mo9ax57uFuNvX4UEB2/IDjudy/kWp9jq9UIbRTjy4a/MB2cANt28DPMZgVljX0d9Qua6go=
          properties :
           x : 776
           y : 194
           width : 100
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               //oUsrDev est un ClUsr dynamique
               //
               //vEvts est un variant
               //nLigne est un entier
               //
               //dhEvt est une dateheure
               //oSpr est un ClSprint dynamique
               //
               ////récupération des actions de la carte
               //oTrell est un ClTrello_req(ChaîneConstruit("https://api.trello.com/1/cards/%1/actions", TBL_Cartes.COL_IdCarte))
               //TableSupprimeTout(TBL_Actions)
               //pour tout vEvts de oTrell.get_json()
               //	
               //	
               //	nLigne = TableAjouteLigne(TBL_Actions)
               //	si vEvts.data.text <> Null alors
               //		TBL_Actions[nLigne].COL_Data	= vEvts.data.text
               //	fin
               //	
               //	dhEvt = dh_FormatRFC3339_Vers_DateHeure(vEvts.date)
               //	oSpr <- ClSprint.oGet_SprintDeDate(dhEvt..PartieDate)
               //	TBL_Actions[nLigne].COL_Date	= oSpr.sSprint_Date()
               //	
               //	HLitRecherche(Scr_Usr_Trello,IdTrello,vEvts.idMemberCreator,hIdentique+hLimiteParcours)
               //	SI HTrouve(Scr_Usr_Trello) ALORS
               //		oUsrDev <- ClUsr.GetObj(Scr_Usr_Trello.IDScr_Usr)
               //		TBL_Actions[nLigne].COL_IdUsr	= oUsrDev.p_sNom
               //	fin
               //	
               //	si vEvts.data.listAfter <> Null ALORS
               //		TBL_Actions[nLigne].COL_IdList	= vEvts.data.listAfter.id
               //		selon vEvts.data.listAfter.id
               //			cas cst_List_ID_Dev_en_cours
               //				TBL_Actions[nLigne].COL_IdList = "En cours"
               //			CAS cst_List_ID_A_faire_tester_par_DEV2
               //				TBL_Actions[nLigne].COL_IdList = "Dev 2"
               //			CAS cst_List_ID_Test_unitaire
               //				TBL_Actions[nLigne].COL_IdList = "TU"
               //			CAS cst_List_ID_A_livrer_en_pré_prod
               //				TBL_Actions[nLigne].COL_IdList = "Liv pré prod"
               //			CAS cst_List_ID_Test_fonctionnel
               //				TBL_Actions[nLigne].COL_IdList = "TF"
               //			CAS cst_List_ID_A_livrer_en_prod
               //				TBL_Actions[nLigne].COL_IdList = "Liv Prod"
               //			CAS cst_List_ID_Fini
               //				TBL_Actions[nLigne].COL_IdList = "Fin"
               //			CAS cst_List_ID_Fini_sprint_précédents
               //				TBL_Actions[nLigne].COL_IdList = "Prec"
               //
               //			AUTRE CAS
               //				
               //		FIN
               //	FIN
               //	
               //	
               ////	
               ////	si vList.idMembers[1] <> null ALORS
               ////		HLitRecherche(Scr_Usr_Trello,IdTrello,vList.idMembers[1],hIdentique+hLimiteParcours)
               ////		si HTrouve(Scr_Usr_Trello) ALORS
               ////			oUsrDev <- ClUsr.GetObj(Scr_Usr_Trello.IDScr_Usr)
               ////		sinon
               ////			stop
               ////		FIN
               ////	sinon
               ////		oUsrDev = goapp.m_oUsrCnx
               ////	FIN
               //	
               //	
               //	
               //	
               //FIN
              type : 18
            -
              type : 161
              enabled : false
        -
          name : JAUGE_SansNom2
          identifier : 0x20b7e47b28f61e7b
          internal_properties : BwAAAAcAAABafllb0ymXxhUal+hFRmkSEj6a9SHOIm99/0AxX+hVVneYwt9/wXDpc5jQKq6uRjKjTfHhGxcDfHqJPF6BoAjhmqlqNHn4jfmiYcswC5+5wKfiTMxcTdQLBBIe+tDTaeJWXA3O1B5Jdj/iBLK+DXcVrcgUabwK4VAHSGMIC+vmY8zunVjrv11abXUYAXseSbE1rsxj/y4IlgWkrLJ3XyGqX/yqWRbqAbQTTobHx4fXGd+USdaTsigcTZASyF0iwBS8+ipm8wLsYxvrvGW7U6By7gFNU/8MpBTsY8Vp6Iy6p6yxwMNCI2PUxg4+C6J9rTVBCC39VHpGRZoE0Ze/fBfAhAP0KnCjOiowaHKo6upJSji7P/sNhpmooLIWCMxy54jqvNihFH1tL8n1pCFrR8/XM2OzObSGy5DNcy4LVMg8ksQtkpSNg9n+5ZvR+bphQCZ24B0gF3MJEtv/M8SmPMSOhkPCixXRY18br4wJur5nJUA2DRP+ILbw6WlffUn38IG4FkmKtP9A0T7+Ymf9AqprMByrkFAMVW82WMu+thzLF42rzqvEC+taoY3wqbRPQsyHv4sGY84dlfBhAt9GtkX4Fm24t3pYcTZFP6XyjNwIpHnk//W466LNZruKOhxa4Swzq6Ms4TAYS2TrqNXcYf2GK0+kmlgRL9FHzCaMd/Kj1oHzmAXPNC6KcakcUbvwV8OSUIfuQfy+0NqzqfidhcR+E2+rZ8ThDFNKF4gD2syTCRSq46fY7+3VoWGVrAuCMr2AcOBjPKnPtMdPUKAxNE86as8qz6CI3alF+W5k+Q/93xaYh6xzp3eniuU/IjHmEO7LXVmUJhF72y0Yx/4z+qZNOINd/ErIufGZWXvV90H5Pek51CaMGJDH/TW8C0K77AVLa8kmzyS0KkBcea64y+w8mIfGMPXqaPDq
          properties :
           x : 509
           y : 632
           width : 408
           height : 14
          type : 10
          code_elements :
           type_code : 17
           p_codes : []
        -
          name : BTN_Créer_la_carte
          identifier : 0x20b7e47b28fa1e9a
          internal_properties : BwAAAAcAAABe4Ynuaoso0pfWE4iu7ylLDhDGS1QeQtd0dZwH/Wp52NrShNYKQcnG53ky6pNGq6J+ipGRelAwgkOf9M6czpZcixu/RFPnYYHLra1ihpkOP9GGa6uYn/0JaSYZc5T7pGSEScdewUcN2lsH7qgUIDoeSc8UKjnVmSXFfa5nJTt8G8UcWXgJWFI1YoaKlqbpN8KnqsA4ha3Mc9P0MDu1t8t8g5MbNwnE0sZl2uXw1t5Pi1VSR2THhORrpLBr5TUZW+htGf61hMZcxk6IoCQGEcO2mZIY6N3XalbR004VJRZvaK+Di7jzTCmBzPnH29pW0VOPt23iOiOazNTDx/1AL757LoXwjG/OaWoGjNr47qB8HHBpvFLFmaXdj+fWFBrs7Dbe6TW30BQ6tFgr44eh4YvVq5YMk+LNtJPe4qWO4gvFFYGi0BGyjEQiGkhAxzCRSoPp/vqhhVQmX2E5GVa8A+BhQgDP9Dx6V5TQOUa4buH7oXpCs6AeJyFcKsSNOBOz7liNE1t1aV9H0XTJcolKnTyKn2xZLDd9QY8uGKoyMwzp+hldaKvOaXTx+TyESICTkf35N+8F7W8rGrHwo7qeyVtAgAa14rdd/1zsvb77QzDGdO93Uj05KPBd5+RSKyO2NeoL633exS/vH0iQd/GGVdrYZdYuV+2p4dJSn4rLsUfiYJ74QGMeNHjspMvlHwxBh3BQUguze0+J0FLSA4hqrvk5mFy8i0B4luTuRec8lR8rTToE+O4xawVxTlxviLGvqhS8Zz6NtDKE9F/J2rBWOFGwY4u/9MBkpNtuPptIxZ5kv14YzyCtIrVsX0+vIafR80va
          properties :
           x : 318
           y : 590
           width : 100
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1-
               
               sReponse	est une chaîne
               sDoc		est une chaîne
               sUS			est une chaîne
               sBody		est une chaîne
               jsBody		est un JSON
               sParams		est une chaîne
               sReq		est une chaîne
               oTache		est un ClTache dynamique
               oPrj		est un ClProjet dynamique
               oSprint		est un ClSprint dynamique
               
               oTache <- ClTache.GetObj(TBL_TachesAFaire.COL_Id)
               oPrj <- oTache.p_oUserStoryParent.p_oProjetParent
               
               sParams += "&idList=" + ClTrello_SCRUM.cst_List_ID_A_faire
               sParams += "&name=" + encode_param(oTache.p_sCodeTache + " - " + oPrj.p_sNom + " - " + oTache.p_sDescription)
               sParams += "&desc=" + encode_param(oTache.p_sCMTR)
               
               si oPrj.p_bTop_Prioritaire ALORS
               	sParams += "&pos=0"
               sinon
               	sParams += "&pos=bottom"
               FIN
               
               si oPrj.p_bTop_Prioritaire ALORS
               	sParams += "&idLabels=" + ClTrello_SCRUM.cst_Label_Prioritaire
               FIN
               
               sReq = ChaîneConstruit("https://api.trello.com/1/cards%1%2", ClTrello_req.sAuth, sParams)
               HTTPRequête(sReq,"","","POST")
               sReponse = HTTPDonneRésultat(httpEntête)
               
               si ExtraitChaîne(sReponse, 1, rc) = "HTTP/1.1 200 OK" ALORS
               	sBody = HTTPDonneRésultat(httpRésultat)
               	jsBody = ChaîneVersJSON(sBody)
               	
               	
               	sUS = "User story : " + rc + oTache.p_oUserStoryParent.sNommination_US()
               	
               	//Affichage du commentaire de l'US, si présent.
               	si oTache.p_oUserStoryParent.p_sCMTR_Global <> ""
               		sUS += rc + rc + "Commentaire US : " + rc + oTache.p_oUserStoryParent.p_sCMTR_Global
               	fin
               	
               	//Affichage du groupement, si définit.
               	si oTache.p_oUserStoryParent.p_oEpic <> null ALORS
               		sUS += RC + RC + "Groupement : " + oTache.p_oUserStoryParent.p_oEpic.p_sNom
               	FIN
               	
               	//Récupération des dates du sprint où la réalisation est prévue.
               	oSprint <- ClSprint.GetObj(oTache.p_nNum_Sprint_Realisation)
               	sUS += RC + RC + "Sprint de réalisation : [%oTache.p_nNum_Sprint_Realisation%] - [%oSprint.sSprint_Date()%]."
               	
               	sReq = ChaîneConstruit("https://api.trello.com/1/cards/%2/actions/comments%1&text=%3", ClTrello_req.sAuth, jsBody.id, encode_param(sUS))
               	
               	
               	HTTPRequête(sReq,"","","POST")
               	
               	
               	pour tout element sDoc de oTache.p_oUserStoryParent.asCheminsDocs()
               		sReq = ChaîneConstruit("https://api.trello.com/1/cards/%2/actions/comments%1&text=%3", ClTrello_req.sAuth, jsBody.id, encode_param(sDoc))
               		HTTPRequête(sReq,"","","POST")
               	FIN
               sinon
               	erreur("Echec de la création de la carte : " + oTache.p_sCodeTache + " - " + oPrj.p_sNom)
               FIN
               
               
               	procedure interne encode_param(sParam_P est une chaîne):chaine
               		//	https://developer.mozilla.org/fr/docs/Glossary/percent-encoding
               		sRetour est une chaîne = Encode(sParam_P, encodeURLDepuisUnicode)
               		sRetour = remplace(sRetour, "#", "%23")
               		sRetour = remplace(sRetour, "&", "%26")
               //		sRetour = remplace(sRetour, " ", "%20")
               		renvoyer sRetour
               	FIN
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Créer_tout
          identifier : 0x20b7e47b28fc1eaa
          internal_properties : BwAAAAcAAADYhF4LbIkMwZyRAoAVEolMEr8/RDTCT0niDMc1elsKuDeI1kGmsrhwFgQZ6i3o2S4gqfO4M0yhWOilafNE9cGfsB257iNNQxhLaUn3cn+TUagxz5QhuTbN/rSSPDCFbx8F3H/ZCaN9v46LamM1WHuWFcgEIGIbfqR69uR+JKe1R6MYU67Yno9NCeSCs8CELoPSLE2r4p88haBPnTWGp7b/KnaozB4AuX8LlTbtb6XaQhHyGt95yke0Ih4X3Ktwvb9dBcjISeML9MoBbDhseuuPWydNcHDNkqY2vcnLWfLrHgMy8QGsi/4I9AK/OC8HJDW3iMWrSLlnV2tK9L9r5xusY/3DRSTlk6VjV8SJy402MddrvfRawQvUpgAsdYiJVxI/wbp92DPO3rjpve/O/zeNF613lQf11c63w25kGYhCsWiGbqWnOsCEC8NLk6ccjWMmplh59oDkF6zC2qhv4m/NR/ZnKHGC5ZqlVDFwt7hOUxmUK2C3M8OAtRkS3kqS9QQyJc9b4IEju5dQcUmJLoFiXFQjFqiRk4uhQ/0YHuuMamplkqt374gpSrHJOvOUyld6K7H/rNnHwJ69CEYzkCauj1wNxoQ3OyYX+OmPrJelcGR7HDXGcrwd3nel5XYd+BZkp7dktJvFA9lTOnf/Mv2U9l95Rq/WYuUuC548F1t6l4zLQcRNDhByR/S2eeEWXHDH5s3Z8vUNZLMJWrDNH/IpM24Ya8tWYomu+8mqa/4tvvgJ/D1RdlA/h9+izrnQ7Q7eDs9D50bmyZG3QGbTS6xuVH6hxMM8Il9EtZJny+Br6wwlz6zMZlRyHuTjocE=
          properties :
           x : 6
           y : 591
           width : 100
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               nInd est un entier
               
               pour nInd = 1 _a_ TBL_TachesAFaire..Occurrence
               	TableSelectPlus(TBL_TachesAFaire, nInd)
               	ExécuteTraitement(BTN_Créer_la_carte,trtClic)
               FIN
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_BOUTON
          identifier : 0x22beadf03cfb60b5
          internal_properties : BwAAAAcAAABq0LEdNK5JMqvIQsW0k/ANtB+dHJU04frwSz5kG9P4LBBJG+29T0+zxLFaUaTL7ROx0dbL7fZEF32R8L+gS5d9DbzEZLF1emRCJt72GFtd/qGHpx7O5IaRANU62MbGPQUVBZoT81+o7kM8Hk0FTuztLf8XDJ5Tb48hnkuxp6GxAaRq6ralDqVjrszlgReL4IqXWY0BVh0kTCoVKS+cHwuOnbeDqtuMWka/e4wgySAHx8dePaWVFRgzY8QXZDvjKRrB6KH0UWxDooQQi13+UkxrgedOyWBwGWMSDiNl2zTUGilhsZ2OaFF+ZLOXkncgzM6a1U9FHXB19DlxOdrPif/jlwA2P2a/TyDtmCXzfRzj33l1D5SV0lbo7lCTG5Nhk3BaQEO/e2braa5cq1zPlz4JUq0GFG3GXDbLKic3cvqRCoQ4a+jRCRzg5NoK38XRiPFN6StE5GdfRsdhCUxKzJrt1DJ35+REI4f7CShfkl72PYzjmA73XOZbviPqsp4wS8OCT0gJymLFHlAPYfAgQR/BkbI6FoBNR5mwbRPOTvzQU5zLCfdX1DIh2mO3frQNc06V99xVv9KKjyzRlV/w7elc9qMtLSy3uYHl5AuGtYwje0c+l2ye61tmPmYUnHdzYD8EtVyie4WVK4iVtAFCLTbAOizu8Phkm0F/LUc3D3Dh1q6sF5dJVBmWOXJzEtCqaiz4Gu8+JNSwBH2CCCVcagKBhZgSyYEtGqy0Yc6lJDEqxYz2Mc0PNhwihkmOiUBA0OQ+UZYDuRbHh/4RWRD9p3hknvoj4Dvy0dMuYi+y4eq8kXMMUz2tw9cly4OaeXjrULL4ib0VRpuRFxt/VyCMhnX/58gr5FQHCML8joCyL87BwKvOofQPZZVBYhjsyesectk4Zek=
          properties :
           x : 823
           y : 652
           width : 124
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               // Version 1
               // Description 
               // Bouton simple
               
              type : 14
            -
              code : |1-
               // récupère info de toutes les cartes trello qui ont été fini dans des sprints précédent 
               ClTrello_SCRUM::JSON_Recup_Info_Trello(Faux)
               // récupère info de toutes les cartes trello sauf celle fini dans des sprints précédent 
               ClTrello_SCRUM::JSON_Recup_Info_Trello(Vrai)
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_SansNom2
          identifier : 0x2308db0332b1a50c
          internal_properties : BwAAAAcAAABKaduvae15aehJb8mXoyKn4NpMFymM1xd05my9UBKARL9UbGSsYbnE4jgBFB/4/NtsgPWmdctcf/4yt4GctEzKvWf9DJMNEoL/wr6etkNuOxluK3hyo5HinTJVRxruxyj4dComD3Ge63vvKobI6s/A0VUGIGuZZq6bljNY2BI1Mwl+4L4W59ENlIYul6QbAQIhNmF8j/t50qQhehrGtUehujJtdla4apYfYtEfBoPwlQl8snMTNvn+1q182FXG+ll5k5xWhBAZPwVVoFP8rIP3/kMwn9Ovb2d2/Nf2gEzbA0HC3bateOsb8sI6zWaOt5NBWV03ffM1vUyXK3A522txL8jQB8vTWV3iGnxOuxkGOvNSFpxDicCT/vCXydPoA6QMJGz3blPiGKb0Mhb+mK6SocdD+5sQhmhC+uSwrr1Y9py2yNN1iS9eADuUTNukchULdxPXenipUMSHPoJRSCC5YNJ5GcjDdKDq3hp9kZinW7ceZykQ3uWR92BIQrNrtQeWjT1St7TNhPm3D+GgO0VrIqbz/Q9I8ezhrh+Y8s3ZbJmI818Dva3HCt6EqNaOXatBriRdjocGhGu9EV8tqLfynYhnN9+D6DFRwtSADh2KU9RPpHVCAP1R37vYTMq1KT4+HT1xE6MDfApKgkJJisgsvwNivmVyoQP1p2njyJRWMoKusctrEpUaWrz38lm4BUmagRrYqWEyqgIYVTXmw3pOjXz6FWmE/5e+8HXwhFJHx/YTzojY6fSOPcZyoOfb9S9E0yCOUvU8vfrFhcaBa5UZxfwRXfjyVQc/O7omkR6xbZZAmeAErEP1A03BSsH2
          properties :
           x : 602
           y : 652
           width : 80
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1-
               ClTrello_SCRUM::JSON_Tout_Recup()
               
               //STR_Action_Trello est une structure
               //	sID_Action		est une chaine
               //	sTitre			est une chaine
               //	sUtilisateur	est une chaine
               //	sDate_Action	est une chaine
               //	sListAfter		est une chaine
               //FIN
               //
               //STR_Tache_Trello est une structure
               //	sNom_Tache_Trello	est une chaine
               //	sCode				est une chaine
               //	sID_Cartes			est une chaine
               //	sID					est une chaine
               //	sIDUsrDev			est une chaine
               //	aIDLabel			est un tableau de chaine
               //	aListe_Action		est un tableau de STR_Action_Trello
               //FIN
               //
               //STR_Groupe_Tache_Trello est une structure
               //	sId_Groupe_Tache	est une chaîne
               //	sNom_Groupe_Tache	est une chaine
               //	aliste_Tache_Trello	est un tableau de STR_Tache_Trello
               //FIN
               //
               //json_Trello				est un json
               //json_list_trello		est un json
               //json_action_trello		est un json
               //nLigne					est un entier
               //nLigne_Action			est un entier
               //sClé					est une chaine
               //sCodeTache				est une chaîne
               //oTache					est un ClTache dynamique
               ////pclOUsrDev				est un ClUsr dynamique
               //nIdUs					est un entier
               //anUSARecalculer			est un tableau d'entiers
               //oUsrDev					est un ClUsr dynamique
               //aSprintDeDate			est un tableau associatif de ClSprint dynamique
               //
               //// tableau avec toute les informations trello
               //aStInformation_Trello	est un tableau associatif de STR_Groupe_Tache_Trello
               //
               //// recherche enregistrement trello
               //HLitPremier(Scr_TrelloMemo)
               //SI HEnDehors(Scr_TrelloMemo) ALORS
               //	hraz(Scr_TrelloMemo)
               //	HAjoute(Scr_TrelloMemo)
               //fin
               //
               //VariableRAZ(zaLstTacheImportes)
               //
               //json_Trello = Scr_TrelloMemo.JsonResultat
               //
               //
               ////AnalyseurDébut()
               //
               //
               //// groupe des taches
               //POUR i = 1 _A_ TableauOccurrence(json_Trello.groupTache)
               //	
               ////	oUsrDev = null
               //	sClé = json_Trello.groupTache[i].name
               //	
               //	// ajout nouveau groupement de taches
               //	SI aStInformation_Trello[sClé]..Vide = vrai ALORS
               //		
               //		aStInformation_Trello[sClé]						= allouer un STR_Groupe_Tache_Trello
               //		aStInformation_Trello[sClé].sId_Groupe_Tache	= json_Trello.groupTache[i].id
               //		aStInformation_Trello[sClé].sNom_Groupe_Tache	= json_Trello.groupTache[i].name
               //		
               //	FIN
               //	json_list_trello = json_Trello.groupTache[i].list
               //	
               //	// liste des taches
               //	POUR j = 1 _A_ TableauOccurrence(json_list_trello)
               //		
               //		nLigne																		= TableauAjouteLigne(aStInformation_Trello[sClé].aliste_Tache_Trello)
               //		
               ////		SI ChaîneCommencePar(json_list_trello[j].name, "T1212") ALORS STOP
               //		
               //		aStInformation_Trello[sClé].aliste_Tache_Trello[nLigne].sNom_Tache_Trello	= json_list_trello[j].name
               //		aStInformation_Trello[sClé].aliste_Tache_Trello[nLigne].sID_Cartes			= json_list_trello[j].idCartes
               //		aStInformation_Trello[sClé].aliste_Tache_Trello[nLigne].sID					= json_list_trello[j].id
               //		aStInformation_Trello[sClé].aliste_Tache_Trello[nLigne].sCode				= json_list_trello[j].code
               //		
               //		POUR m = 1 _A_ TableauOccurrence(json_list_trello[j].idLabels)
               //			TableauAjoute(aStInformation_Trello[sClé].aliste_Tache_Trello[nLigne].aIDLabel, json_list_trello[j].idLabels[m].id)
               //		FIN
               //		
               //		SI json_list_trello[j].idMembers[1].id <> NULL ALORS
               //			
               //			aStInformation_Trello[sClé].aliste_Tache_Trello[nLigne].sIDUsrDev		= json_list_trello[j].idMembers[1].id
               ////			HLitRecherche(Scr_Usr_Trello,IdTrello,json_list_trello[j].idMembers[1].id,hIdentique+hLimiteParcours)
               ////			SI HTrouve(Scr_Usr_Trello) ALORS
               ////				oUsrDev <- ClUsr.GetObj(Scr_Usr_Trello.IDScr_Usr)
               ////			SINON
               ////				STOP
               ////			FIN
               ////		SINON
               ////			//Non : on prend l'utilisateur courant.
               ////			oUsrDev = goApp.m_oUsrCnx
               //		FIN
               //		
               //		json_action_trello		= json_list_trello[j].list
               //		
               //		// action lié aux taches
               //		POUR k = 1 _A_ TableauOccurrence(json_action_trello)
               //			nLigne_Action																						= TableauAjouteLigne(aStInformation_Trello[sClé].aliste_Tache_Trello[nLigne].aListe_Action)	
               //			aStInformation_Trello[sClé].aliste_Tache_Trello[nLigne].aListe_Action[nLigne_Action].sID_Action		= json_action_trello[k].id
               //			aStInformation_Trello[sClé].aliste_Tache_Trello[nLigne].aListe_Action[nLigne_Action].sTitre			= json_action_trello[k].titre
               //			aStInformation_Trello[sClé].aliste_Tache_Trello[nLigne].aListe_Action[nLigne_Action].sUtilisateur	= json_action_trello[k].user
               //			aStInformation_Trello[sClé].aliste_Tache_Trello[nLigne].aListe_Action[nLigne_Action].sDate_Action	= json_action_trello[k].date
               //			aStInformation_Trello[sClé].aliste_Tache_Trello[nLigne].aListe_Action[nLigne_Action].sListAfter		= json_action_trello[k].listAfter
               //		FIN
               //	FIN
               //	
               //	goApp.TranDebut()
               //	
               //	POUR nLigne_Liste_Carte = 1 _A_ TableauOccurrence(aStInformation_Trello[sClé].aliste_Tache_Trello)
               //		
               //		sCodeTache = SansEspace(ExtraitChaîne(aStInformation_Trello[sClé].aliste_Tache_Trello[nLigne_Liste_Carte].sNom_Tache_Trello,1,"-"))
               //		
               //		//SI sCodeTache DANS ("BLM031j") ALORS STOP
               //		
               //		// recup info tache
               //		oTache <- ClTache.GetObj_de_code(sCodeTache)
               //			
               //		
               //		////////////////////////////////////////////////////////
               //		//Vérification du blocage de la tache
               //		SI oTache = Null ALORS
               //			//TBL_Cartes[nLigne].COL_Id		= "!!!" + sCodeTache + "!!!"
               //			SI aStInformation_Trello[sClé].sId_Groupe_Tache  <> cst_List_ID_Fini_sprint_précédents ALORS
               //				Trace("Référence de tache non trouvée : [%sCodeTache%].")
               //			FIN
               //		SINON
               //			
               //			//On vérifie si on a pas déja synchronisé la tache
               //			SI TableauCherche(zaLstTacheImportes,tcLinéaire,sCodeTache) > 0 ALORS
               //				Trace("Tache en doublon, dans trello : " + sCodeTache)
               //			SINON
               //				TableauAjoute(zaLstTacheImportes,sCodeTache)
               //			FIN
               //			
               //			aStInformation_Trello[sClé].aliste_Tache_Trello[nLigne_Liste_Carte].sID = oTache.Get_IdUnique()
               //			//TBL_Cartes[nLigne].COL_Id		= oTache.Get_IdUnique()
               //			
               //			
               //			SI oTache.p_bAnnule ALORS
               //				oTache = Null
               //			FIN
               //		FIN
               //		
               //		SI oTache <> Null ALORS
               //			
               //			bSuspendue est un booléen = Faux
               //			POUR nLigneLabel = 1 _A_ TableauOccurrence(aStInformation_Trello[sClé].aliste_Tache_Trello[nLigne_Liste_Carte].aIDLabel)
               //				SI aStInformation_Trello[sClé].aliste_Tache_Trello[nLigne_Liste_Carte].aIDLabel[nLigneLabel] DANS(cst_Label_Suspend, cst_Label_Attente) ALORS
               //					bSuspendue = Vrai
               //				FIN
               //			FIN
               //			
               //			//La tache est elle suspendue ?
               //			SI bSuspendue ALORS
               //				//Oui : on s'assure qu'il y ait le motif.
               ////				SI PAS oTache.p_nStatut = ClTache.cstStatut_Suspendu ALORS
               //				SI oTache.p_sCMTR_Blocage = "" ALORS
               //					oTache.p_nStatut = ClTache.cstStatut_Suspendu
               //					Trace("La tache [%oTache.p_sCodeTache%] est suspendue dans trello, mais n'a pas de motif.")
               //				FIN
               //			SINON
               //				//Non : On s'assure qu'il n'y ait plus de motif.
               ////				SI oTache.p_nStatut = ClTache.cstStatut_Suspendu ALORS
               //				SI oTache.p_sCMTR_Blocage <> "" ALORS
               //					oTache.p_nStatut = ClTache.cstStatut_Suspendu
               //					Trace("La tache [%oTache.p_sCodeTache%] n'est pas suspendue dans trello, mais a de motif de blocage.")
               //				FIN
               //				
               //				
               //				SI aStInformation_Trello[sClé].sId_Groupe_Tache DANS(cst_List_ID_Dev_en_cours, cst_List_ID_A_faire_tester_par_DEV2, cst_List_ID_Test_unitaire) ALORS
               //					oTache.p_nStatut = ClTache.cstStatut_en_cours
               //				FIN
               //			FIN
               //			
               //			
               //			
               //			si aStInformation_Trello[sClé].aliste_Tache_Trello[nLigne_Liste_Carte].sIDUsrDev <> "" alors
               //				HLitRecherche(Scr_Usr_Trello,IdTrello,aStInformation_Trello[sClé].aliste_Tache_Trello[nLigne_Liste_Carte].sIDUsrDev,hIdentique+hLimiteParcours)
               //				SI HTrouve(Scr_Usr_Trello) ALORS
               //					oUsrDev <- ClUsr.GetObj(Scr_Usr_Trello.IDScr_Usr)
               //				SINON
               //					STOP
               //				FIN
               //			SINON
               //				//Non : on prend l'utilisateur courant.
               //				oUsrDev = goApp.m_oUsrCnx
               //			fin
               //			
               //			
               //			SI aStInformation_Trello[sClé].sId_Groupe_Tache = cst_List_ID_A_faire ALORS
               //				oTache.p_oUsr_Dev				= Null
               //				oTache.p_nNum_Sprint_Demarrage	= Null
               //				oTache.p_bEstRealise			= Faux
               //			SINON
               //				oTache.p_oUsr_Dev				= oUsrDev
               //				oTache.p_nNum_Sprint_Demarrage	= oTache.p_nNum_Sprint_Realisation
               //			FIN
               //			
               //			SI aStInformation_Trello[sClé].sId_Groupe_Tache DANS(cst_List_ID_Test_fonctionnel, cst_List_ID_A_livrer_en_prod, cst_List_ID_Fini, cst_List_ID_Fini_sprint_précédents) ALORS
               //				oTache.p_bEstRealise			= Vrai
               //			SINON
               //				oTache.p_bEstRealise			= Faux
               //			FIN
               //			
               //			SI aStInformation_Trello[sClé].sId_Groupe_Tache DANS(cst_List_ID_A_livrer_en_prod, cst_List_ID_Fini, cst_List_ID_Fini_sprint_précédents) ALORS
               //				oTache.p_nNum_Sprint_Fin		= oTache.p_nNum_Sprint_Realisation
               //			FIN
               //			
               //			SI aStInformation_Trello[sClé].sId_Groupe_Tache DANS(cst_List_ID_Fini_sprint_précédents) ALORS
               //				
               //				bComptaDansScrum est un booléen = Faux
               //				
               //				POUR nLigneLabel = 1 _A_ TableauOccurrence(aStInformation_Trello[sClé].aliste_Tache_Trello[nLigne_Liste_Carte].aIDLabel)
               //					SI aStInformation_Trello[sClé].aliste_Tache_Trello[nLigne_Liste_Carte].aIDLabel[nLigneLabel] DANS(cst_Label_Comptabilise) ALORS
               //						bComptaDansScrum = Vrai
               //					FIN
               //				FIN
               //				
               //				SI PAS bComptaDansScrum ALORS
               //					Trace("La tache [%oTache.p_sCodeTache%] n'a pas été comptabilisée")
               //				FIN
               //			FIN
               //			
               //			//////////////////////////////////////////////////////////////////////////////////////////////////////////////
               //			
               ////			vEvts		est un Variant
               //			oMessage	est un ClMessage dynamique
               //			dhEvt		est une DateHeure
               //			oSpr		est un ClSprint dynamique
               //			
               //			//récupération des actions de la carte
               //			
               //			
               //			POUR nLigne_Action_Trello = 1 _A_ TableauOccurrence(aStInformation_Trello[sClé].aliste_Tache_Trello[nLigne_Liste_Carte].aListe_Action)
               //				
               ////					HLitRecherche(Scr_Usr_Trello,IdTrello,vEvts.idMemberCreator,hIdentique+hLimiteParcours)
               ////					SI HTrouve(Scr_Usr_Trello) ALORS
               ////						oUsrDev							<- ClUsr.GetObj(Scr_Usr_Trello.IDScr_Usr)
               ////						TBL_Actions[nLigne].COL_IdUsr	= oUsrDev.p_sNom
               ////					FIN
               //				
               //				
               //				dhEvt = dh_FormatRFC3339_Vers_DateHeure(aStInformation_Trello[sClé].aliste_Tache_Trello[nLigne_Liste_Carte].aListe_Action[nLigne_Action_Trello].sDate_Action)
               //				
               //				SI aStInformation_Trello[sClé].aliste_Tache_Trello[nLigne_Liste_Carte].aListe_Action[nLigne_Action_Trello].sTitre <> Null ALORS
               //					oMessage						= allouer un ClMessage()
               //					oMessage.p_oTache				= oTache
               //					oMessage.p_oUsr					= oUsrDev
               //					oMessage.p_sCMTR				= aStInformation_Trello[sClé].aliste_Tache_Trello[nLigne_Liste_Carte].aListe_Action[nLigne_Action_Trello].sTitre
               //					oMessage.p_dhDteCreation		= dhEvt
               //					oMessage.Enregistre()
               //				FIN
               //				
               //				
               //				si aSprintDeDate[dhEvt..PartieDate]..Vide ALORS
               //					aSprintDeDate[dhEvt..PartieDate] <- ClSprint.oGet_SprintDeDate(dhEvt..PartieDate)
               //				FIN
               //				oSpr <- aSprintDeDate[dhEvt..PartieDate]
               //				
               ////				SI vEvts.data.listAfter <> Null ALORS
               //					//TBL_Actions[nLigne].COL_IdList	= vEvts.data.listAfter.id
               //					
               //					SELON aStInformation_Trello[sClé].aliste_Tache_Trello[nLigne_Liste_Carte].aListe_Action[nLigne_Action_Trello].sListAfter
               //						CAS cst_List_ID_Dev_en_cours
               //							//TBL_Actions[nLigne].COL_IdList = "En cours"
               //							
               //						CAS cst_List_ID_A_faire_tester_par_DEV2
               //							//TBL_Actions[nLigne].COL_IdList = "Dev 2"
               //							
               //						CAS cst_List_ID_Test_unitaire
               //							//TBL_Actions[nLigne].COL_IdList = "TU"
               //							
               //						CAS cst_List_ID_A_livrer_en_pré_prod
               //							//TBL_Actions[nLigne].COL_IdList = "Liv pré prod"
               //							
               //						CAS cst_List_ID_Test_fonctionnel
               //							//TBL_Actions[nLigne].COL_IdList = "TF"
               //							
               //							SI oTache.p_oUserStoryParent.p_dDateMiseADispo_EnTest < dhEvt..PartieDate ALORS
               //								oTache.p_oUserStoryParent.p_dDateMiseADispo_EnTest = dhEvt..PartieDate
               //							FIN
               //							
               //						CAS cst_List_ID_A_livrer_en_prod
               //							//TBL_Actions[nLigne].COL_IdList = "Liv Prod"
               //							
               //							SI oTache.p_bEstRealise ALORS
               //								oTache.p_nNum_Sprint_Fin	= oSpr.Get_IdUnique()
               //							FIN
               //							
               //							SI oTache.p_oUserStoryParent.p_dDateMiseADispo_EnTest < dhEvt..PartieDate ALORS
               //								oTache.p_oUserStoryParent.p_dDateMiseADispo_EnTest = dhEvt..PartieDate
               //							FIN
               //							
               //							SI oTache.p_oUserStoryParent.p_dDateMiseEnProd < dhEvt..PartieDate ALORS
               //								oTache.p_oUserStoryParent.p_dDateMiseEnProd = dhEvt..PartieDate
               //							FIN
               //							
               //						CAS cst_List_ID_Fini
               //							//TBL_Actions[nLigne].COL_IdList = "Fin"
               //							
               //							SI oTache.p_oUserStoryParent.p_dDateMiseADispo_EnTest = "" ALORS
               //								oTache.p_oUserStoryParent.p_dDateMiseADispo_EnTest = DateSys()
               //							FIN
               //							
               //							SI oTache.p_oUserStoryParent.p_dDateMiseEnProd < dhEvt..PartieDate ALORS
               //								oTache.p_oUserStoryParent.p_dDateMiseEnProd = dhEvt..PartieDate
               //							FIN
               //							
               //							SI oTache.p_bEstRealise ALORS
               //								oTache.p_nNum_Sprint_Fin	= oSpr.Get_IdUnique()
               //							FIN
               //							
               //						CAS cst_List_ID_Fini_sprint_précédents
               //							//TBL_Actions[nLigne].COL_IdList	= "Prec"
               //							
               //							oTache.p_nNum_Sprint_Fin		= oSpr.Get_IdUnique()
               //							
               //						AUTRE CAS
               //							
               //					FIN
               ////				FIN		
               //			FIN
               //			//Correction du N° de print de réalisation, si fini avant
               //			SI oTache.p_nNum_Sprint_Realisation > oTache.p_nNum_Sprint_Fin ET oTache.p_nNum_Sprint_Fin <> 0 ET PAS oTache.p_bAnnule ALORS
               //				oTache.p_nNum_Sprint_Realisation	= oTache.p_nNum_Sprint_Fin
               //				oTache.p_nNum_Sprint_Previsionnel	= oTache.p_nNum_Sprint_Fin
               //			FIN
               //			SI oTache.p_nNum_Sprint_Creation > oTache.p_nNum_Sprint_Realisation ET oTache.p_nNum_Sprint_Realisation <> 0 ALORS
               //				oTache.p_nNum_Sprint_Creation = oTache.p_nNum_Sprint_Realisation
               //			FIN
               //			//Cas d'une tache validé, qui a eu un retour : elle est comptée comme terminée
               //			SI oTache.p_bEstRealise = Faux ET oTache.p_nNum_Sprint_Fin <> 0 ALORS
               //				oTache.p_bEstRealise = Vrai
               //			FIN
               //			
               ////			SI sCodeTache DANS ("BLM031j") ALORS STOP
               //			oTache.Enregistre()
               //			
               //			
               //			//On mémorise les US à recalculer
               //			nIdUs = oTache.p_oUserStoryParent.Get_IdUnique()
               //			SI TableauCherche(anUSARecalculer,tcLinéaire,nIdUs) = -1 ALORS
               //				//			si nIdUs = 684 alors stop
               //				TableauAjoute(anUSARecalculer,nIdUs)
               //			FIN
               //		FIN	
               //	FIN
               //	
               //	goApp.TranFin()
               //FIN
               //
               ////AnalyseurFin()
               //
               //oUs est un ClUserStory dynamique
               ////pour tout oUs de aOUS
               ////	trace(oUs.m_sCodeUserStory + "#" + oUs.m_dDateMiseEnProd)
               ////	oUs.RecalcEtatUS()
               ////FIN
               //POUR TOUT nIdUs DE anUSARecalculer
               //	oUs <- ClUserStory.GetObj(nIdUs)
               //	
               //	SI oUs.p_bTermine ET oUs.p_dDateMiseEnProd = "" ALORS
               //		oUs.p_dDateMiseEnProd = DateSys()
               //	FIN
               //	
               //	//Trace(oUs.p_sCodeUserStory + "#" + oUs.p_dDateMiseEnProd)
               //	oUs.RecalcEtatUS()
               //FIN
               //
               //
               //oPrj		est un ClProjet dynamique
               ////oUs			est un ClUserStory dynamique
               //oTache_Tmp	est un ClTache dynamique
               //POUR TOUT ÉLÉMENT oPrj DE ClProjet.aoListeProjets()
               //	POUR TOUT ÉLÉMENT oUs DE oPrj.aoListeUS()
               //		POUR TOUT ÉLÉMENT oTache_Tmp DE oUs.aoListeTaches()
               //			SI 70 < oTache_Tmp.p_nNum_Sprint_Realisation <= goApp.m_nNumeroDuSprintActuel ET ...
               //					PAS oTache_Tmp.p_nStatut DANS(ClTache.cstStatut_realise, ClTache.cstStatut_Annulee) ALORS
               //				
               //				SI TableauCherche(zaLstTacheImportes,tcLinéaire,oTache_Tmp.p_sCodeTache) <= 0 ALORS
               //					Trace([
               //					La tache [%oTache_Tmp.p_sCodeTache%] aurait du commencer (sp. [%oTache_Tmp.p_nNum_Sprint_Realisation%]), n'est pas clôturée et n'est pas présente dans trello ([%oTache_Tmp.p_sDescription%]).
               //					])
               //				FIN
               //			FIN
               //		FIN
               //	FIN
               //FIN
               ////info("Fini")
               //
               ////RENVOYER aStInformation_Trello
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Enr_Fini
          identifier : 0x23297a8e27cb0038
          internal_properties : BwAAAAcAAAAaNTLG18rMpXcHR2vbMv/vTtHNzHlCKlfq4X9pHlfvlmJr3pAEI0pHuf6mN6oW9wGc0RKfJkGGN30WEOKPMAFeQAMn6ZyR/qoTejEyf8pmQGZVKl2sKVmwKLFVLzTHR9/vJqlPFO6nb/RKPmHAUtDlWuhQB5L2BnDB3ZJaTPlb+ZDCWqZEaEJhMaR4rPi3SUkueLZNdy6SlS7u2NK/e0tXsXnA+JKSQet0LHawYDJ/2x8H/vNjakWe+INtDq5pgsToApABE0P7T2llHgo42YnuopHM7Vqci4yvYY82s/5KbCh/MztQCwJmdyxHVlLqMvqnTOHrAZAzxHdTG5rev9DoAVNhbHCWxo+phxnevNu9Ya0QbEtZtvw/jM4nNq7UiF1jhTw75QywndlpQgUIDRkBTSPoSP7W9zfUvLYsX09wgyXkC1EWzJSy0eebk9uvGnoIFBdcG/JqVrCE5Po8eYLlT5KaiaT8+dHljV9hW88V1WFC1nzJSpY8xi2jBs37YNtehKpdeK2vWHumyQwo3WOg7Ru+34aDvMKKQsmEpJM0ruYV4hcxeFy0Ki565tC1lfjicjLk2dVFlnFfvo9onMHolLRYvovi2tGAN6eonZTYwd1YD0DJoi5b5LUOWXDxs0iNvF6ws24uNmCI6ytAGJIpxnOAt3qtaxZSl8M88X/ZhnTYknHeGJWP3SULWoQ/gbr+3BFFij0/rX5GJEvQgliShxhWnT5FV+x9vEHMiIHDBkfhdMxcWbLykcyDijp/VjmcfzVOUehu5wmpdy3AukkyL/7ch3goswyqt30UdJyMbe72eDe0nc2z7EUABdcLFuU/nzWbLsQLOBI=
          properties :
           x : 702
           y : 652
           width : 110
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1-
               // récupère info de toutes les cartes trello qui ont été fini dans des sprints précédent 
               ClTrello_SCRUM::JSON_Recup_Info_Trello(Faux)
              type : 18
            -
              type : 161
              enabled : false
        -
          name : CBO_SprintTacheACrer
          identifier : 0x23985aa5589e87e8
          internal_properties : BwAAAAcAAAAi80lASGTN3I9r1gHE1qEvIFSz6nUUyMAJRWIjbFmtJAYCxnfXoEDu6K6Mz5VHiIa1UZUKgNBIGT9JrlpK1taTBv6+vDZFh9i4FLvy2wcfWh9Fz6ekgXU7/nLT9DU5G9tAattIZ4s0UEGIETL2SdOeKN9O3DjBk4acEymIkUHg8bbLTRBZ4ayQLL+YNNAPXL7Fui6rAhNu0P6copL9deeR4eQgrM1jjH8WO4rrm106fYrD0dU87I+06f+40WkK+cUr0vj+vlJqDJBHuvhUFcOCYXfxhQFO/qgmdSbTJelaUQaC9NyHQEfyykFncuVSda8g3GSoUOIwTlrH3ckH19fj9MZMj0cwvXvKlANOumi8HJ72tYUItSnfMvbeXNK/T5W836bplBE/OapMSDQvKca6rFHh+BlKiOv53u7cgvJKRmCyzyaecI+G+S6hfBKv/n+l3r7R7YKJRWGQqVKKCqkE0X9hR3jAkKG/LSoacAxTzx3qwhX90L44/FO4FVNXH6CoH9hyC9suJn6h3C76hAhFxpWFAej5EIcnBBtSKQ1KIK0VONYzhll7L2WJsCQ//f4sdVlbgPgtEnfafrOaJotwGihBeLWTIbe9coYk6yhk9uYKRMEQNELIHuBl+phw01h0a0fbXpsNQGn9rkg+T+Bynz3hS918yP523QDVdgPrNthtweo6F/vWv3XjU0Lpy8kjU9M4tz3Bq5lsVvRTJMgIcfSBqrTe860EYmqcAFBSbBmMaJ0Fr8kobtNmue+gtudr4UU12nDctA/iVPXIw/x/mNLASrGrnszagGnDWF4Yy94Nb3HC+tr9BvtYVuI3i1H0edpmi4TPrFct47Qee5CKQ6m7TZQTaB+tsWgRZ9Qjh+e+u3wVsCMYnjidRbQGbkSuvmzYL1yC9NuCX0hJpoirC6TWepbHi9YNTZoyB/rVJ1q0M05LbHLPrmQ6zbuvflhKtat/7ldw6CZC1TVqLX0oGsII8pRWS8IuQF7GANJqzRnvcwtOtBU0aDBTT5eQvX6iCTLxafb3gyTbt6NvTLTiaHqXOM3IufK8uO4s7RfelggDCVmYyM1fWtyQOyD+mBy/UggpJqRMOLB4xDVNb/XXLZic7PMne5PS28HK1X/QWHCp8viH+iflDhLz3yPMYuzIaIRWikzvYSSJmTJZse6HYbUFDM1TPyeCdNfpL+84qqbICUDjDPW23j+oB9CoLyu1IqTQ+35U6G8n0bqXby7+buubDybTy5Nteip9xfgRrXjy9+I//oMBy+XVl7uIz8yNAbVJA3yrEEWPXDGyfdLWMNODlw5fR9ZISnf5zWqb7+L5B47RfLciq/Kw7nMI4mm1q0MTShUg5w/aWTTRIsOsnAmuKHZC91pNIeLZAOjENJKpFlxcL7HnU9GdHo/0/Da4VJl4iFfGtYajwN3PUEkieXc755B1idqHLim5uwlyaceXpg79xCE15PiDCW3B2md/NGIMCDx9YOnBeJXWFeW6jHCpTSn2XjKulrInq9sh/1fMiw/bMOCjDDdeDgydBGaqkCJkqEtOQzcbPOM15fjPThC/LjkhC3NlFtBfzohBFKPHPshKGCjj38bQvoYq3zMgGikFzH8hIPTJWGGeJ5xUicnVuVPSUOd4z97eYJH8jamMOP/JY58RACw18Ezd/GX7wvdaCbXl2IE9btYPXYJDawtx+W6ZKlSrjuX/+umfqPIue1hOH90jF0cqydUV1+H94oOhdQ==
          properties :
           x : 6
           y : 393
           width : 150
           height : 24
          dropdown :
           internal_properties : BwAAAAcAAAAFcaDRw/wn/VLGlN+73CMDqD2HI6emkdAw47jwam14OQc+hSKzyKeajO+3gMY4L9fDRs1yWJkiGdoajoLEywo0o4p/I5D1Fe90rJ0omNJrEqiOOLOr042o8PqU9QKAlt3y8EelyhbeaejrJGpGBkGLeoVca3vbHDPsC7JyGzPr2az8TNfH+hIPj/HsRWofuAPZFyZcI+MCqRSCX8Y7zzxSbvvvdnAp6QkMzPsQfmHYYGBj3j4o+Xf2FSh5vQ9yCXbV9CYvmXeZD9m4svA9KRoO26UDof5OeVsNUcYHpEhMDvbVuw3La6fPgiYKRyAx+3LC9HSw7/5USqVc0lvErdTD3zsFG4f62oDN7tnvLiWaqyl5GFy7vCSOV4X40lLoHA7bRKugZX3igLjEy7EcjHzcIMgAMMwEWF3BTLuPLWQjOsJI8KFbuFCH5Z9XkZxyjnvkPsDjMYepbX6gV6PMVCgwHcVc6PT78DBEvo9uVrayGSPmdntFlvMZvuvoshZr0gXUThr0V0EaDAeU5H6u6cCEOOgBIHqeFO6xHcfSL+0fyVGllV1v8mzNv7PWOOML5U2Nu+zYGTyUEG4fi61JuSCacWNxAqTTWaiStoIcTtRO2sPnL5uHLiaQpYMOXktxOFPBIos9oDSPg14/oZI/wbEzoG7wNNUjyWtNMPOWhLxiZTInlO5SCuaCTjsrXmY3XkC8nAc38fntCER5wXXr6u/Jw1N34SG64MkUXd62VFMNVvgM
           type : 7
          type : 14
          code_elements :
           type_code : 23
           p_codes :
            -
              code : |1+
               oSpr est un ClSprint dynamique
               nSpMin est un entier = goApp.Sprint_Num_Actuel() - 5
               nSpMax est un entier = goApp.Sprint_Num_Actuel() + 1
               
               pour tout element oSpr de ClSprint.aoListeSprint().aItems()
               	si nSpMin <= oSpr.ZF_Get_IdUnique() <= nSpMax ALORS
               		ListeInsère(CBO_SprintTacheACrer,oSpr.ZF_Get_IdUnique() + glien(oSpr.ZF_Get_IdUnique()), 1)
               	FIN
               FIN
               si ListeOccurrence(CBO_SprintTacheACrer) > 0 ALORS
               	ListeSelectPlus(CBO_SprintTacheACrer, 1)
               FIN
              type : 14
            -
              type : 35
              enabled : false
            -
              code : |1-
               ExécuteTraitement(TBL_TachesAFaire,trtInit)
              type : 33
            -
              type : 17
              enabled : false
        -
          name : BTN_Recup_tableaux
          identifier : 0x23f88f5813a10657
          internal_properties : BwAAAAcAAAD1ji9DZ92MqvIDHsZccd7xnC2XOnTQ7friPZ7got/M/28DpiSzPaNCAYt5V4TdqtenICHScxa+TEulybXCEKavUwPsA5oGGUo+CojHGq97CMuvlvsd5d7O1Z2Qtvnq6Fk+rOF4VkAx6RSvT1IfbQZa9rJhy/UasVAQgb9lL14BTCfC4MHBYFcBAsrnHRE757LPpSAmHw990eqJ6ESo+sLOgf5qvUTEocRRNUY8fQfwZ7YYVE3EcfjN9GTuEYZwxkunjeQP9Vk7o0klu8hCsncu15m3jf1dpQY50KuBG9n5FgZGJsComO4pv5ErWH7zJwjsbgWLXoBmWtHRCXMT1ktq8rXqi2U4hKTNCMwozWFJiPz8b6RLw7gwyO4vIoqSplUv04XBVvVRC+d7lDKrd657V6VkC1V9lh9I/Ym6NDpYrNuyxvPzyCTeh0GQMwL4hO+uRpLi8P5iiijqeYaRJMTcX+i3S2VKf2u3h1r/LswbMC+2yWhYkgqsEB1Exvx8ipDCRHkRO4Fn0EX+PjIxJAVVGxkVhV/JivQ6tB7CTwiqZzjNu7H03pJS/FJDRF+23x+qbk80+J8f7HFz6fvnncnpnHApALrcHDdwR/DOWudS4JFMgjpSuPSNsAcfI9FgAfEd1NEsxEaaXo5kgDd1syCkSPmLnQWD64VPrAtJLwECXovlLGZYhczUtwGuZnsIpb3MEPL1X0fRf6qSmnwepGiaHp5FT/uJn0AVOpT0EyiJmKoJeBthd1vNxc0tNfUMGMAuDHFZZ3MFXY2Nh4IRaALYe/lYhGKrxf1VqNQWcrY1UOggHMfyBP9HzvDLRdz5OxHiYg==
          properties :
           x : 803
           y : 336
           width : 100
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               vList est un variant
               nLigne est un entier
               
               //récupération des listes du tableau
               oTrell est un ClTrello_SCRUM(ChaîneConstruit("https://api.trello.com/1/members/me/boards"))
               
               TableSupprimeTout(TBL_Tableaux1)
               pour tout vList de oTrell.get_json()
               	nLigne = TableAjouteLigne(TBL_Tableaux1)
               	TBL_Tableaux1[nLigne].COL_Id		= vList.id
               	TBL_Tableaux1[nLigne].COL_Liste	= vList.name
               FIN
               
              type : 18
            -
              type : 161
              enabled : false
        -
          name : TBL_Tableaux1
          identifier : 0x23f88f5813a70761
          internal_properties : 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
          properties :
           x : 491
           y : 362
           width : 412
           height : 106
          columns :
           -
             name : COL_Liste
             identifier : 0x23f88f5813a80761
             internal_properties : BwAAAAcAAACbEXhBV+w/dsPGGen5Kabw3HeOEfoZVNnwTo0OzGR+3cCePkimJ02ngLQiqZEzIvjdJixIvxDcJRVjiimD7hVxzJdY0hMMfVDSA5zP5aR+WB1wUSAAkZ8DsqPR64/yVAWZhOUyJ3L9I7cy8RNSpSM8O8brPgx7XSiQZUhC4RQcD/nNLJJUbw==
             type : 2
             content :
              internal_properties : BwAAAAcAAAAuAQemJcwfwo07+wK/hEJWSZBEZF65bV1DTLlAKXFMgvJKUN5tJcm6927KDMvQjWUMTic5fbPfncS62wvjgBzTTjidwgrdjK/kX+5nTfYa7Aic51/CCFa9jZnZSXiejN4kIA6wVRHijYlr0u24GMUoIZhLfU6hfKRTeAzJupTKSBAo9qqHvoAQqTKSh86CegrNVbTePQNDKZEc6rPUzZCDemnnUIb8j6Myz5/0BltlVl5yGHPg8EiwwoR+MRv26zc/US5rgBKSaJU92pMGLnbB6qSfPQ8z7w4vWVg2dTO70T3F0/K3vO1b1SLa1egFMHO02gTRNc6QdsQl3yOgyRboyy6k+ZxAZOR+ID/Bebh7tN2fwpZCDgNOAKUxtPK8mV7DRaW7kr8zB8gSewLzeJAzTCz66jhfWw3XDHVnttuAp3qP8gXJ2w0Xv+bL5BOdwHE5fq7tcogCtwI4iOPUjS1zsaEoFr3l8vGeiveibkP54+YEswrTLipdF4ziKVVYnVfLM++Mw68xWFkqQbABzDHQhtkiMfkAY53IAkfynPJ3oJdPAFaG6yo31qUYdkOaXuwypOSmayPFl6SiDRgNIgmmzUzHue6aTRjrgboewNsW84Qdsqd4ntpq1jPn9qzo9KAN6CEFNT7ebynm55zFtspLTyuHrQnI6rPO6Hj++7JB+v9XFIWEyMYP0B/GilADYFU9vWmznW56QF1cSXrsrKPZ0ZXnhVP3O1SozjNgxuJ6sQqrjSYRxOLCSCfEWc5srZKUMrB0RrCuCCO4Rh4Er4hHIKkTIEIK3EYO9Pun6PdMiogiOWu2GZeJMACt5NNLUSy2dIxKKxUwLplu1bWYBdi3JdndvYk=
              properties : {}
              type : 2
             code_elements :
              internal_properties : BwAAAAcAAAD2Rkbx+OjeaV6cz3eLdX7jB0Jgs6WDDXWz15HdSBZm9oeZQ2BKnjRAOa1wH4EQ9d5x
              type_code : 3
              p_codes :
               -
                 type : 276
                 enabled : false
               -
                 type : 277
                 enabled : false
               -
                 type : 278
                 enabled : false
           -
             name : COL_Id
             identifier : 0x23f88f5813a90761
             internal_properties : BwAAAAcAAADnqELOYZAKDkEwINuNdY56ALjQNzyc2hNeXoIT/9wLeywDTd+6FBQkk5hGgmPopPmL0Ih2560jQ7MTQMR3YL8xcGVGoH5SfpFFIx8mvCAWYM7WXMjXToRjfBpSiGWpFvVjWamUY6Xwqpqpaj1BeeZJ3SxK+G5QTZDdI/MIRcJpEu91
             type : 2
             content :
              internal_properties : BwAAAAcAAAAuAQemJcwfwo07+wK/hEJWSZBEZF65bV1DTLlAKXFMgvJKUN5tJcm6927KDMvQjWUMTic5fbPfncS62wvjgBzTTjidwgrdjK/kX+5nTfYa7Aic51/CCFa9jZnZSXiejN4kIA6wVRHijYlr0u24GMUoIZhLfU6hfKRTeAzJupTKSBAo9qqHvoAQqTKSh86CegrNVbTePQNDKZEc6rPUzZCDemnnUIb8j6Myz5/0BltlVl5yGHPg8EiwwoR+MRv26zc/US5rgBKSaJU92pMGLnbB6qSfPQ8z7w4vWVg2dTO70T3F0/K3vO1b1SLa1egFMHO02gTRNc6QdsQl3yOgyRboyy6k+ZxAZOR+ID/Bebh7tN2fwpZCDgNOAKUxtPK8mV7DRaW7kr8zB8gSewLzeJAzTCz66jhfWw3XDHVnttuAp3qP8gXJ2w0Xv+bL5BOdwHE5fq7tcogCtwI4iOPUjS1zsaEoFr3l8vGeiveibkP54+YEswrTLipdF4ziKVVYnVfLM++Mw68xWFkqQbABzDHQhtkiMfkAY53IAkfynPJ3oJdPAFaG6yo31qUYdkOaXuwypOSmayPFl6SiDRgNIgmmzUzHue6aTRjrgboewNsW84Qdsqd4ntpq1jPn9qzo9KAN6CEFNT7ebynm55zFtspLTyuHrQnI6rPO6Hj++7JB+v9XFIWEyMYP0B/GilADYFU9vWmznW56QF1cSXrsrKPZ0ZXnhVP3O1SozjNgxuJ6sQqrjSYRxOLCSCfEWc5srZKUMrB0RrCuCCO4Rh4Er4hHIKkTIEIK3EYO9Pun6PdMiogiOWu2GZeJMACt5NNLUSy2dIxKKxUwLplu1bWYBdi3JdndvYk=
              properties : {}
              type : 2
             code_elements :
              internal_properties : BwAAAAcAAAD2Rkbx+OjeaV6cz3eLdX7jB0Jgs6WDDXWz15HdSBZm9oeZQ2BKnjRAOa1wH4EQ9d5x
              type_code : 3
              p_codes :
               -
                 type : 276
                 enabled : false
               -
                 type : 277
                 enabled : false
               -
                 type : 278
                 enabled : false
          type : 9
          controls : []
          code_elements :
           type_code : 9
           p_codes :
            -
              type : 35
              enabled : false
            -
              type : 22
              enabled : false
            -
              type : 24
              enabled : false
            -
              type : 23
              enabled : false
            -
              type : 25
              enabled : false
            -
              type : 230
              enabled : false
            -
              type : 241
              enabled : false
            -
              type : 263
              enabled : false
            -
              type : 262
              enabled : false
            -
              type : 222
              enabled : false
            -
              type : 223
              enabled : false
            -
              type : 224
              enabled : false
     -
       internal_properties : BwAAAAcAAABYXwEEHNoruGDvGxbBs5buWigZEDL+bqXHsOdgGVu1AFcpLc7o/ZgZB9eH7vNXf1UrFBn9HnO750oxtHS5osELjgkiFBjz33K+bFS7VyZbzHYpsvG7gKBhJnz7lTGScZ8lXsxaIQQOSOL4Zz/PQkv071Wjq18=
       controls :
        -
          name : BTN_SansNom1
          identifier : 0x2245fe74602a5128
          internal_properties : BwAAAAcAAAAxUNYeioX6jaS09biGnHkwTAy42+18niBsxuShsY+UMJ+q1Kzlr2DfNzB7y4Din8doIy5blvfCc8/qM8dT/RMtGOtYDAZs4RPEtFR68Ayj2jBS9FFMSQFfgaHIGOUv3qLIQvq1geL5rrPf3nlJsRREivu/+Rj8YQR2SNJOhYaGp4A76ZwfHkvsc1tVtJCcbALsm8qQJ8OWseVRCTBeiJTVuk22xJr6j7K9gwqvoKfAvTrQXqnnhpm19BLC/WhqEqWpZ8FPpf4CZf0MU0aHRr7H7JeT6Oi17gTUZWmm6E3WsenIO+I2R4EWz3FhW5uWHofEvV//O+uT0d8uQmQT96mTjR0XvtyG7JDCLhEUBcVkWNlz9a0Mwg31K1sepyhBlgDW/34cC/ouKb7vhethsbunFG6KsBCA/Jb/7lhrDh4XdU1fsy4OOCdWyaQD0IZC+r0jj3EKWZhJO/DZcP/KNnZhwPtQVyJsNOJN+y9zgBBz13xbciG2L2hK00K6Ob24vNiBKAIqS31+P5tzXYg8rPx8Ge2IXzG7YmeNiIvjD089GAHwGQT0o+WRwnTFIZwWS2XDsAJCV6UutnAM1oc0xGnQCOESB2cdvtQxiz1sbUdYED+qJyQrTit/LAIvIKdRzdRF7MA/lW9CK9HsRB6SFYHIs2WoVusBtgsTqG53HlRrXKKp5N9ur0qW4DYo+6/I+5Vt44yVyYQvIx0AXDULG753FmheNhePaMhdioYzAzn0JklOWRnZi2T2lQoKOadAaU+Ois0z52fZzRSlHIst+c+wtJMuz6hMlKuSh1F3656XgOPRJMM=
          properties :
           x : 159
           y : 84
           width : 80
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               Reponse est une httpRéponse
               sBaseUrl est une chaîne = "https://10.20.30.86/apirest.php/"
               sToken est une chaîne = "TYUBaYZKwbVtqXFQQcbveIoLJGKIRcaQsi9lMwZw"
               sAuthau est une chaîne = "user_token rp7bu1tY2OzAJmvg5GaReGm2kOqz8qf4UMNcGBMP"
               sAuthToken est une chaîne
               
               req est un httpRequête
               
               
               //////////////////////////////////////////////////////////////////
               
               sUrl est une chaîne = sBaseUrl + "initSession"
               
               req.URL = sUrl
               req.Méthode = httpGet
               req.IgnoreErreur = httpIgnoreCertificatInvalide 	//httpIgnoreNomCertificatInvalide
               req.Entête["Content-Type"] = "application/json"
               req.Entête["App-Token"] = sToken
               req.Entête["Authorization"] = sAuthau
               Reponse = HTTPEnvoie(req)
               
               
               soit json_Résultat = JSONVersVariant(Reponse..Contenu)
               sAuthToken = json_Résultat.session_token
               info(sAuthToken)
               
               
               ////////////////////////////////////////////////
               
               Num est un entier = 8900
               sUrl  = sBaseUrl + "Ticket/[%Num%]"
               VariableRAZ(req)
               req.URL = sUrl
               req.Méthode = httpGet
               req.IgnoreErreur = httpIgnoreCertificatInvalide 	//httpIgnoreNomCertificatInvalide
               req.Entête["Content-Type"] = "application/json"
               req.Entête["Session-Token"] = sAuthToken
               req.Entête["App-Token"] = sToken
               Reponse = HTTPEnvoie(req)
               
               
               soit json_Résultat2 = JSONVersVariant(Reponse..Contenu)
               info(json_Résultat2)
               
               ////////////////////////////////////////////////
              type : 18
            -
              type : 161
              enabled : false
     -
       internal_properties : BwAAAAcAAAB204+JV6YL1U1kKAoT6GTsATjeNXrU3lT+22dZFuRfLWm1wxNV6L+RmV23LIpzRvwf5w4JwP6GNUFcOd84egNJxlpXA9UEoxmYZlsV8Me1NU6gdQoIS5AqxApqR+bb3Wiai5nlqwIzw/byRWm2bApcCIzWlmH061uTNSl4xaI=
       controls :
        -
          name : BTN_Plan_test_F_et_P
          identifier : 0x2253bf2c0b562f12
          internal_properties : BwAAAAcAAACXOSOmtZNJf9rNFOq4bW55rTtHkEMDd0bj+A/d4fCzBV39dtIxcUJBzP3n081D+67DzOLug6M4M8zXMtU14DTPFSZVeyxi/fCWNF0z1A23FPgJJnpEXYNMNXeDQl+MYuLrH0/QntHkwplacLrPoJPjMcNsMeBT0KczW7meG5ijYwZH3rcAN20K5F8sBqBazH1wAEaEMfG2VUXKIdpzy9yfQ05ZqTIcfDETWlscTrZnlBjr6d5qyh05dBj5jQRgX1KvmJlZoRxOmYKCyi3h7mgxkdOdhaCiozA/9eBHHZ41i2FWuIwmGdyzcOw+AtUAS7LUIvPsGpX5JyHT9opOMRq7N6+GeN5yXRj0t1sKiOeNjP92mvP45JHwp9UO4VfvFGYm8iXrJgVwJZgLik9Lg82rZ8etUqm0ApKKvx0fkBtS8egaht7bTVslO3t4LLxtsnpp9oRF3HlTGzAa1yljNeBR5MLLLrFf/qr3kQhEjnmZc6oS7yfsWf89LiF+XWxbVkMtgjtKvVrS951GvAlt2fXO8AfN5i3q7Uf8bLBbO4tKMB0bkzJE20GZlEJJ6ZuNK/qxrse3NPT+C6PrF1zFckF6KYgrRTL1N4KmIfwTAC7gY3jSVnFaG1U6qPURjJvjMzCYphsbpjUfM04cNpQpzDTBBXd+FUx2c9u51jZvdhkZSukkyo6MFzX/8KG6i+CS+N+hCBRPNVVUC06ytpOClCQT5R4NfH1qUraZ0uZ2E0cKvG8w4efUr276PrimdTQASaiY+A6p/LUK3ksd8+zPYyzVJhWxEWLEbwcCQmxT6Wza0VRfYWdlWLnVpRMztn0cFCXncIw=
          properties :
           x : 93
           y : 74
           width : 128
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               
               ImportPlanTest("L:\Projets\Informatique\Developpement\Fournitures et poses\PlanTest.xlsx", 5, oProjetDeNom("Menuiserie FP"))
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Plan_test_BaseLun
          identifier : 0x22be8e6905fef4d6
          internal_properties : BwAAAAcAAACQmz1m/R6oyO1t2lYMSltWXfesLB4yUtEeyvmArKsrTFbLt1wuHCee+t/zB313N1jS6KxariX0iPg1r7H/zHe0ACuCPyFke+ZnXNUkOygfuOlrs1+VtjQRJuNWBEkBuYZsEzVyp8x+mFklY/LKCU2WGn232+g8rEpAZsjHwYbUIW7sb/hC5la5tiw/JLTXA+gFi/+2PJ3r4acTeaKrIWCC+WtvBnqc3GXUUwUea4YLnn1DtWB4IB1vn+unx+KqEcpQd5uHOtHJojcKsBcCmySRJ6resbnSqLVCZ1IMaA8g75yODRXq/BQN0MXBXHVurTfj4IR5VmniuyX7q+G7+fVwUr7qA3tx2mi5dq9UqsHEquUUpKQsPlQhbQsWQ6TKz3rQPjufzcnF34qKT6eKd03wU/1RSoblDiWxInoIfwzgM5rbZu4HKsNUFMSMw63yvrQT6VCxDNwngt05Bd52rOBHqr1JNjXA6p/2SO7Hg/SpsSB3190GYn3ORcBqnJ3mdlNdP5l8w4NI1CQJQIQSOJM8jobdWENbmfijN1o6WFSWtntEhfrwZBnqc98HDFzci4rJn5PzZKU2iPbq5TOi51FGPWf/r0i4oWdVSGQ29Ve+L9wrvnHWuo+LV0K/76hWM4T0XdMnDuJLNlPVxJei2Vbp9S7f1vHDt9D9P80PIZf5l3bPYnbI4lrpkooo8zi4wNti5G6gxpZoB82mDtjV2eMZ69NLNOFXAGwBLinLpYGKQRXDI0HI5ERqBGqlsaqztXK6LljBcODpN+7MTbcer9ksl9J8ewh9mhRFr42v8plEcXsBnEo0vk0cqrDUJ+JkDj4Ae4HIc8oJ
          properties :
           x : 93
           y : 146
           width : 128
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               ImportPlanTest("L:\Projets\Informatique\Developpement\Base Logistique\Lunel\Tests\Plan de test Site lunel - Général.xlsx", 10, oProjetDeNom("Base Lunel"))
               
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Calc_retro
          identifier : 0x22d8e70a1fc412d0
          internal_properties : BwAAAAcAAAACVS5z5KYx0D33rqZezc2FmrY8yj1rDF9HEQ4yEbxO8rYbOo+7bUMzrxI40uoqRlKmMAFjscZ0c5tyrsYONUw8GnX79MZz680aqBNIvCawdvu7pPBFBpuSjgU5f6vfqNOJvSS9fRPB4+VE6N4zAhs6D+Onroaq/jdpoKyjn5Pknwl/xkv7kiBAGELlE9GkId+Nm8apa+I91h9R+Kqrg6uwg8XPAA65KeRoRrUnzmxZQ1mjlraldMY5ypn11OhZUvihnUG34nQ+X0J+zJ4Xk08k7IAgjr50aj9l5yZFrTjsknqiVG2ORvDirBmiTZBA81KnAroPxMBm/OZ3m/e01lXE3aV2m2tZEhXH9yT176obXSFG8DN4fNmY2Hle149CON5PvUF2teSghuu8qRRPCAOEu4FEjFlM0mARf3DN0cRbsEE9mhK0kOAJuesbZjca33dcF7gxtUjs47KMWF26lkFmSx9dGKxyC1bJ09GCOYjocCHH7Seh4Hh1/Mfpk+HiqUTsz98+AHW3adkwvy/UWsrlGaqvhm6xdvMefG/zCAQz28bugRi9WoKdZoZm71gS/BU66TvDXYOPLXs71li2NTSvRMn/P4WwLDS2KZXrr23TFGND/F0phHx0bJNAMOTIJPeJeV0d/dyw93B2vTAKZW2wMt43gmQSF3qyL5qEHL0tDpX2td2Oc4FojxAGSniWTOMd4mcSlzdqjm97pO76zkPojGc9Tt+2voG3YkXfuiZQDcEiU2oSdSm41Jr12+39sCUPSiFcxCH82vIqQzoKAuc6WQSz4IVtWeRpquAminFv0y5icTtx0aPFXTMab5c=
          properties :
           x : 543
           y : 109
           width : 80
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1-
               str_res est une structure
               	oTache est un ClTache dynamique
               fin
               
               str_SprRes est une structure
               	astRes est un tableau de str_res
               fin
               
               aStSp est un tableau associatif de str_sprres
               stSp_tmp est un str_sprres
               stResTmp est un str_res
               
               
               oPrj est un ClProjet dynamique
               oTache est un ClTache dynamique
               
               pour TOUT element oPrj de ClProjet.aoListeProjets(Vrai).aItems()
               	pour tout element oTache de oPrj.aoListeTaches().aItems()
               		si oTache.p_bEstRealise et oTache.p_nNum_Sprint_Fin >= 126 ALORS
               			VariableRAZ(stResTmp)
               			stResTmp.oTache = oTache
               			tableauajoute(aStSp[oTache.p_nNum_Sprint_Fin].astRes, stResTmp)
               		FIN
               	FIN
               FIN
               
               
               sNumSprint est une chaîne
               sLigne est une chaîne
               sRes est une chaîne
               pour tout stSp_tmp, sNumSprint de aStSp
               	sRes += sNumSprint + rc
               	
               	pour tout stResTmp de stSp_tmp.astRes
               		
               		sLigne = sNumSprint + tab + ...
               			stResTmp.oTache.p_sCodeTache + tab + ...
               			stResTmp.oTache.p_sDescription + tab + ...
               			stResTmp.oTache.p_nNum_Sprint_Realisation + TAB + ...
               			stResTmp.oTache.p_nPoids
               		
               		sRes += sLigne + RC
               	FIN
               	
               FIN
               
               VersPressePapier(sRes)
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Importer_Client_Diffus1
          identifier : 0x2368aac071706327
          internal_properties : BwAAAAcAAACGHahxSNM9yibotbUK8+ner6vyMmwC5jTUBvVY/vIT5o87VVSfi0sTy/cySQTls6NXDHKJXsChuRceoUdoe7rlqe6fyK68Qw50rsfpNDwzcDpgRzMcQar5XPOhUucGv0f/t3WWnBC022+fZhpGYW34x6w9KDpdzMtKsCapEGTZDrdUfBeDChqjb6etXvMIemKEuptWaA5s5i1Up3oD1yqsleinssWLmQkxyum05ND8Sd+3HgUWINby3DXs1+UP7Ny150TEnTBsqto21ffW16vIW1N2dkT37/xMkV9GH2M9/aRZ0Aj9nMYCfBAr5XohNvCESgiJRTON1Y7st++KgQmnkJ43Axw/0+bpXTFNHcp4a1t8TK1HdNsUcMdz43gbr+kNdalLRh9wbChy7gYR01QafTaItw6hQMkjZcL/4MhIFp6jZlifsrb+ShXRoZa3aRoDb4ZuHUxf+9NyE4djBGgWEUdWIGWvP25yJVmZjzSNYau6iEie9vc75OqJ5+zdMbYzxMtXnCncMAaY/Yk2dbxCRZ8X/3bFifecvaRJqTmVAztwsApvLXbILJc2u7L3qB/mgw+VvF1oighRWSZynEex0GWL/0BMDHBPm73ZBKAOsf6ujuE0XmQbQwoe5vswFXvgA0qdNu2OVpcKyYGIBtU2FQpSwpC2+2JAcfkGQy1tGL8lNhp0YnqH72pn9L5KPaAaaaDEf+mCVBkEonkpkNWChajFLeypTNNvdL/vmniuxLcfmOgl9GagTDB7J5wMrAGzq9P6MVo=
          properties :
           x : 503
           y : 345
           width : 202
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               //ImportProjet("L:\Service informatique\Procedures\Dev_logiciel\Client diffus\User stories Client diffus.xlsx",)
               
               oPrj est un ClProjet <- oProjetDeNom("Client diffus")
               oPrj:NettoieDependances()
               
               //sFichier				est une chaîne
               //
               //oPrj est un ClProjet <- oProjetDeNom("Menuiserie FP")
               //sFichier = Dupplication_Fichier_Avant_Import("L:\Service informatique\Procedures\Dev_logiciel\Menuiserie FP\User stories Meuiserie.xlsx")
               //
               //ImportProjet(sFichier, oPrj)
               //
               //
               //IdFichierXLS			est un xlsDocument
               //i						est un entier
               //nPremiereligne			est un entier	= 2
               ////Declatration VAriables
               //nIdUS					est un entier
               //stTache					est une STR_Tache
               //stUS					est une STR_UserStorie
               //
               //nCol_codeUS				est un entier	= 1
               //nCol_CodeTache			est un entier	= 1
               //nCol_numSprint			est un entier	= 7
               //nCol_numSprintCrea		est un entier	= 10
               //nCol_Poids				est un entier	= 8
               //nCol_fin				est un entier	= 9
               //nCol_Role				est un entier	= 2
               //nCol_nom				est un entier	= 3
               //nCol_Besoin				est un entier	= 3
               //nCol_AfinDe				est un entier	= 4
               //nCol_commentaire		est un entier	= 5
               //nCol_Epic				est un entier	= 11
               //nCol_commentaire_Test	est un entier	= 12
               //
               //
               //
               //nNumeroOrdre est une entier = 0
               //
               //SI sFichier <> "" ALORS
               //	
               //	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
               //	
               //	SI ErreurDétectée = Faux ALORS 
               //		
               //		SI xlsFeuilleEnCours(IdFichierXLS, 1) ALORS	
               //			
               //			
               //			POUR i = nPremiereligne _À_ xlsNbLigne(IdFichierXLS,Vrai)
               //				
               //				//ON ne prend que les lignes qui ont un code et une description.
               //				SI xlsDonnée(IdFichierXLS,i,nCol_codeUS) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_Besoin) <> "" ALORS
               //					
               //					//Si le champ role n'est pas vide => c'est une US
               //					SI xlsDonnée(IdFichierXLS,i,nCol_Role) <> "" ALORS
               //						VariableRAZ(stUS)
               //						stUS.sCodeUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_codeUS)
               //						stUS.sEnTantQue			= xlsDonnée(IdFichierXLS,i,nCol_Role)
               //						stUS.sBesoinUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_Besoin)
               //						stUS.sAfindeUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_AfinDe)
               //						stUS.sCmtrGeneral		= xlsDonnée(IdFichierXLS,i,nCol_commentaire)
               //						stUS.sCmtrTest			= xlsDonnée(IdFichierXLS,i,nCol_commentaire_Test)
               //						stUS.nIDProjet			= oPrj.Get_IdUnique()
               //						stUS.nIDResponsable		= oPrj.p_oUsr_ChefProjet.Get_IdUnique()
               //						
               //						SI xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T" ALORS
               //							stUS.bAtester = Vrai
               //							stUS.eEtatUserStorie = ClUserStory.ECompteNbUS.En_test_fonctionnel
               //						FIN
               //						
               //						//Ajout de l'epic, si présent
               //						stUS.nIdEpic = nCreeEpicSiBesoin(oPrj, xlsDonnée(IdFichierXLS,i,nCol_Epic))
               //						
               //						nIdUS = User_Story_ajout(stUS)
               //						
               //						nNumeroOrdre = 0
               //						
               //					SINON //sinon c'est une tache
               //						
               //						SI PAS (xlsDonnée(IdFichierXLS,i,nCol_nom) = SansEspace("") ET xlsDonnée(IdFichierXLS,i,nCol_numSprint) = SansEspace("")) ALORS
               //							VariableRAZ(stTache)
               //							stTache.sCodeTache				= xlsDonnée(IdFichierXLS,i,nCol_CodeTache)
               //							stTache.nNumSprintCreation		= xlsDonnée(IdFichierXLS,i,nCol_numSprintCrea)
               //							stTache.nNumSprintRealisation	= xlsDonnée(IdFichierXLS,i,nCol_numSprint)
               //							stTache.nNumSprintPrevision		= stTache.nNumSprintRealisation
               //							//stTache.nNumSprintDemarage = stTache.nNumSprintCreation
               //							stTache.nIDUserStorie			= nIdUS
               //							stTache.sDescription			= xlsDonnée(IdFichierXLS,i,nCol_nom)
               //							stTache.sCommentaire			= xlsDonnée(IdFichierXLS,i,nCol_commentaire)
               //							
               //							//affectation du num d'ordre
               //							nNumeroOrdre++
               //							stTache.nOrdre					= nNumeroOrdre
               //							
               //							
               //							//Si le poids n'est pas indiqué --> null
               //							SI xlsDonnée(IdFichierXLS,i,nCol_Poids) <> "" ALORS
               //								stTache.nPoids				= xlsDonnée(IdFichierXLS,i,nCol_Poids)
               //								stTache.nPoids_Prevision	= stTache.nPoids
               //							SINON
               //								stTache.nPoids				= Null
               //								stTache.nPoids_Prevision	= Null
               //							FIN
               //							
               //							SELON Vrai
               //								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "x"
               //									stTache.bDemarree			= Vrai
               //									stTache.bAnnulee			= Faux
               //									stTache.bTermine			= Vrai
               //									stTache.nNumSprintFin		= stTache.nNumSprintCreation 
               //									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               //								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T"
               //									stTache.bDemarree			= Vrai
               //									stTache.bAnnulee			= Faux
               //									stTache.bTermine			= Vrai 
               //									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               //								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "C"
               //									stTache.bDemarree			= Vrai
               //									stTache.bAnnulee			= Faux	
               //									stTache.nNumSprintFin		= 0
               //									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               //								CAS xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "A"
               //									stTache.bAnnulee			= Vrai
               //									stTache.bDemarree			= Faux
               //									stTache.nNumSprintFin		= 0
               //									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
               //								AUTRE CAS
               //									stTache.bAnnulee			= Faux
               //									stTache.bDemarree			= Faux
               //									stTache.nNumSprintFin		= 0
               //									stTache.nNumSprintDemarage	= 0
               //							FIN
               //							Taches_Ajout(stTache)
               //						fin
               //					FIN
               //				fin
               //			FIN
               //			
               //		SINON
               //			Erreur(ErreurInfo(errComplet))
               //		FIN
               //	sinon
               //		erreur(erreurinfo(errComplet))
               //	FIN
               //	
               //	xlsferme(IdFichierXLS)
               //	
               //FIN
               //
               //
               //Import_Des_Criteres_Acceptation(oPrj.Get_IdUnique(), sFichier)
               //Import_Process(oPrj.Get_IdUnique(), sFichier)
               //
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_SansNom3
          identifier : 0x2391008b94e521ee
          internal_properties : BwAAAAcAAABfCrZLcqoVD9T8qEXGZDnImOBEief+ELYsbs3pi/LH63gfSd/mSMc+vqFyqrcFKpK9WEteW7xhkqazwu5CyPaQrYBFT1f17RUY+UM10Byr0kTeOC9uu9Op8Wn6CKn/dnpcvn7kW0xfON25HVjkE1LaPKlhhg2ahaQcPqpkC4xIaUrxT4Cvjp/AWXEJrjZqaqAOSUB0Z6PmvcOnKcLoBhZXxOOAdBpqE9KbYS6VavWiD6hSLJUf7vWRynjqf64glCcL1e9rGYLKSecmt1Q93MCJZo1NcBSBEvSS89lgEkf0p0cime7uD9HmxU+F6fH4RB36hx0jhx9zwZW8fm79HSulG7fl4vzelIS4fN2mUyPylpcVW4G8utVdlZVeTTajeHrUeeRAb64+MXjBPd2Lr10JykiXKVf5cdUeac2UqbOO7l6QZOth/eCJfE8o8clXdcqk0Ho3bA3CauO89XBlg7l2eVzZrP35vW04Now8YwWKmLUcu16pLGENRoFzXoTB2+mObc/LSu77so5qwmHPOe9xau65nBSYO75U83zwRngIZUZ9aolXAE44ZetKWhfLki6IvQdbbk7j7avzN2zTLexlpV6viOaeQ1OAdh5pVGBfKVTXoEm2e2x+b4WkqWrePEVSsVnUQBTjCiDLAV8V0lJcPD7hs45WD6uQJHIHqpCzRA/+saR1MNNhX5XhDH7Z6pbqkBECuIUo2oSvYzQMEkGEnR+tZyAG8UsQNZkoEAQjx+C9gLISwp25SEUt9nzTPKzlCbQ86OZaDGcstRxEmnbZwWCjHB8ldRIWtqr4fjiwIft/Wh0=
          properties :
           x : 733
           y : 35
           width : 80
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1-
               
               def est une Définition = RécupèreDéfinitionType("ClUsr")
               
               
               Trace(def.Nom)
               Trace(def.FamilleDéfinition)
               Trace(def.Type)
               
               Proc	est une Description de procédure
               Prop	est une Description de Propriété
               //Var		est une Description de Variable
               
               Trace("--------------- Procédures --------------------")
               POUR TOUT Proc DE def.Procédure
               	Trace(Proc.Global, Proc.Hérité, Proc.Nom, Proc.Virtuel)
               FIN
               
               Trace("--------------- Propriétés --------------------")
               POUR TOUT Prop DE def.Propriété
               	Trace(Prop.Déclaration, Prop.Définition, Prop.Ecriture, ...
               	Prop.Global, Prop.Hérité, Prop.Lecture, Prop.Nom, Prop.Virtuel)
               FIN
               
               //Trace("--------------- Variables --------------------")
               //POUR TOUT Var DE def.Variable
               //	Trace(Var.Nom, Var.Définition.Type, Var.Définition.Nom)
               //	SELON Var.Définition.Type
               //		CAS 1, 4, 8, 19
               //			// Affichage de la valeur de la variable par indirection
               //			Trace({o,Var})  
               //		CAS 34 // tableau
               //			Trace("Dimension: ", {o,Var.Nom}..Occurrence)
               //		CAS 36 // structure
               //			v est une Description de Variable
               //			Trace("Structure " + Var.Définition.Nom)
               //			Trace("........................................................")
               //			POUR TOUT v DE Var.Définition.Variable
               //				Trace(v.Nom, v.Définition.Type, v.Définition.Nom)
               //			FIN
               //			Trace("........................................................")
               //		AUTRE CAS
               //			
               //	FIN
               //	Trace("======================================================================")
               //FIN
              type : 18
            -
              type : 161
              enabled : false
        -
          name : BTN_Plan_test_Client_diffus
          identifier : 0x23ca59a2cfd8300b
          internal_properties : BwAAAAcAAACMAX4Y42CL2LorItk5vDbnBJtZPPYo8URzwKzRf+xV8vxyNU8BxUtrVFZidcsELTiyZSJPA0xOr2Rm+PVLYY+euLZ8QIRNbednuDb6DOD9exZOVmmDV34xsrpPuKbEq8hx8noQm9xRvITk/jpH1L5ynOeeu3d519EV/AtYRUf9gL/0jWUtzRjszUYhqT6jf9Je+u+0CsVf7qfOX/SxUjg1cXRgZFwA/0rhEQcB5okT20ct+FXBG5x08Bea4JinOlu0a18S8f4b4yfNGtHhj2eOMJBvbPIwW0C6fY+JP+oppjWHl1CxEpq4D1+PcC3tHRsDDZMpZ1wA3INxDuliXeP+Wup3t3OLLyb7bGSO6t8Yb03vpncqz0xEt3A5L4u33EmdyImYzBAWy6w/x+/ukNoT0P7b3yUlmnpukwpML++19+ocWqwgU6ggrU6QsoM3+aIdIkwNB68iaPojyQ2yQ22D6mzNCsTr0U+9gGAm0RmIA/6G2y+pAeom7vBoTeUjrS2TdFHucFRneoODACn8yRgKiGvHvA5a/DTqCeKHkIfj9pdRN5RdrbDWYtmHnWRBDrhTiM/99VLfWhvCD3roLIymSZhDsTsTCHWqxjwjr5LhuXKcWh2vowrBagg7CkqnBKZq5AfPD3Oczq57vH5GIu+VRcs4L/F3JdlxwMh59l21oNXpJ/makvT67E39i7eEiozBLo09ANYoUjBD+B+/xIfR/3gFVPpA3RPiaHms/Tyu/kxWUijk9P/qGfTvS1T/NcOJyoLfUdGkKxUwuxCHYyEZaaiYeWUkItG17sgPIIwer2fONiwP0yim1432e8nKzPtyVbQ1/srwc9lwTkk=
          properties :
           x : 98
           y : 218
           width : 128
           height : 24
          type : 4
          code_elements :
           type_code : 4
           p_codes :
            -
              code : |1+
               ImportPlanTest("P:\Informatique\Developpement\Client diffus\Plan de test Client diffus - Compta.xlsx", 1, oProjetDeNom("Client diffus"))
               
              type : 18
            -
              type : 161
              enabled : false
    type : 16
    controls : []
    code_elements :
     type_code : 24
     p_codes :
      -
        type : 292
        enabled : false
      -
        type : 293
        enabled : false
 menu :
  name : _Menu
  identifier : 0x292573e513b5f221
  internal_properties : BwAAAAcAAABHivBqFH8xYQq/QELUltmClIuqm9KM3lg0XSaBAQ41WqT06R9JfU0qGK5sHUl8/xHCuvP3y9tLeLLOVaAgM2FjnfwSCRBgXqneLsHogwTYpIXuB1zp2uXtmOXYyGd6i+ek6BBvtJ0ylgF/MxkRihdZ26pl/9Jf5c+sxo07G0ZzHfcLEu9WD07gTSld25EPGWjvi/e5TxaHOZSRE8C5Ig+YdJawYdK89l+x1ofEmw3pfCNLUe3tNoiwg4AbC1jLdufmJ97Xc0JHDAy7gJsHBzEWwcuroqy2By4PJ4c6Wg==
  options : []
 languages :
  - fr-FR
 popup_menus : []
 message_bar :
  internal_properties : BwAAAAcAAADG0006i3ptxMcUE+O5cGvDhb43eRlY9UEE1z/7izK93v/ToMiwACETQQw4eQhZuJRMFa6SBwwT+zSdDbdc5HEkXDob51ldPFNKsP+0MWY=
  controls :
   -
     name : CBM_SansNom
     identifier : 0x2cd16922055306a1
     internal_properties : BwAAAAcAAABXOM/T8mToWtkcp88psDaf2DsaOCVJ5Ri+5/NE/POv9xV7NshwgDj1hpREYSGRr0PHgfeF2dtSdSvzbdNTQg5h1ywkOFbP3poVPQ==
     code_elements :
      type_code : 62
      p_codes :
       -
         type : 15
         enabled : false
       -
         type : 16
         enabled : false
       -
         type : 39
         enabled : false
       -
         type : 17
         enabled : false
 code_elements :
  internal_properties : BwAAAAcAAABWIHrh1Yb2YcVvIfiiRDSu3aXMOSCmrRDPwCP2jtbUBEGFOv+qg2ayVXoCZujUnWzZv/mop+WO+JtZ1Q==
  type_code : 1
  p_codes :
   -
     code : |1+
      PROCÉDURE MaFenêtre()
      
      constante
      	cst_fichierutilisateurSCRUM = "L:\Service informatique\Service Développement\Normes et procédures de dev\utilisateurs Scrum.xlsx"
      fin
      //https://developer.atlassian.com/cloud/trello/rest/api-group-cards/#api-cards-post
      
      
      zaLstTacheImportes est un tableau de chaînes
      
      zoUs est un ClUserStory dynamique
   -
     code : |1+
      
      
     type : 34
   -
     code : |1+
      
      
     type : 234
   -
     code : |1+
      
      
     type : 165
   -
     code : |1+
      
      
     type : 177
   -
     type : 180
     enabled : false
   -
     type : 230
     enabled : false
   -
     code : |1+
      
      
     type : 2
  procedures :
   -
     name : Dupplication_Fichier_Avant_Import
     internal_properties : BwAAAAcAAADYuPST6CP+T+K2ZU37o7g3n8Kew/nVjSZD5G6OyRuT2Yo67DV/AZmlWI7RE7NW48hb
     procedure_id : 2256677341532509307
     type_code : 14
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] Dupplication_Fichier_Avant_Import (<sCheminFichier> est chaîne)
      //
      // Paramètres :
      //	sCheminFichier (chaîne ANSI) : <indiquez ici le rôle de sCheminFichier>
      // Valeur de retour :
      // 	chaîne ANSI : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      FONCTION Dupplication_Fichier_Avant_Import(local sCheminFichier est une chaine):chaîne
      
      sCheminDossier est une chaîne						// chemin fichier
      sCheminCopie est une chaine 						// chemin copie
      sCheminRetour est une chaine					 	// chemin soit du fichier dupliquer soit du fichier d'origine
      bDuplicationAutorisé est un booleen = vrai
      
      //trace("Fichier d'origine : " + sCheminFichier)
      
      // on obtient le chemin a l'endroit ou il faut créer le répertoire
      
      sCheminDossier = ComplèteRep(fRepExe())+"RepDuplication"
      
      //on regarde s'il existe, si non on le créer
      SI PAS fRépertoireExiste(sCheminDossier) ALORS
      	// si la création échoue on fait un msg d'erreur
      	SI PAS fRepCrée(sCheminDossier) = Vrai ALORS
      		Info(ErreurInfo(errComplet))	
      		bDuplicationAutorisé = faux
      	FIN
      FIN
      
      // Vérifier la présence d'une ancienne copie existante
      si bDuplicationAutorisé = vrai alors
      	
      	sCheminCopie = ComplèteRep(sCheminDossier) + fExtraitChemin(sCheminFichier,fFichier+fExtension)
      	
      	//vérifier si le fichier existe et le supprimer
      	SI fFichierExiste(sCheminCopie) = Vrai ALORS
      		
      		bDuplicationAutorisé = faux
      		
      		SI PAS fSupprime(sCheminCopie) ALORS
      			Info("Erreur lors de la tentative de suppression du fichier Excel dupliqué : " + sCheminCopie + rc + ErreurInfo(errComplet))
      		sinon
      			bDuplicationAutorisé = vrai
      		FIN
      		
      	FIN
      fin
      
      // Duplication du fichier Excel avant import
      si bDuplicationAutorisé = vrai alors
      	
      	SI PAS fCopieFichier(sCheminFichier, sCheminCopie) = Vrai ALORS
      		Info("Impossible de dupliquer le fichier d'origine : " + sCheminFichier + ErreurInfo(errComplet))
      		Ferme()
      		// renvoi le chemin du dossier d'origine
      		sCheminRetour = sCheminFichier
      	sinon
      		// Renvoi le chemin de la copie
      		sCheminRetour = sCheminCopie	
      	FIN
      	
      sinon
      	// renvoi le chemin du dossier d'origine
      	sCheminRetour = sCheminDossier	
      fin
      
      //Trace("Fichier importé : " + sCheminRetour)
      
      renvoyer sCheminRetour
     type : 458752
   -
     name : Import_Des_Criteres_Acceptation
     internal_properties : BwAAAAcAAADYuPST6CP+T+K2ZU37o7g3n8Kew/nVjSZD5G6OyRuT2Yo67DV/AZmlWI7RE7NW48hb
     procedure_id : 2258147771278417844
     type_code : 14
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //Import_Des_Criteres_Acceptation (<nIDScr_Projet_p> est entier, <FileName_p> est chaîne)
      //
      // Paramètres :
      //	nIDScr_Projet_p (entier) : <indiquez ici le rôle de nIDScr_Projet_p>
      //	FileName_p (chaîne ANSI) : <indiquez ici le rôle de FileName_p>
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE Import_Des_Criteres_Acceptation(local nIDScr_Projet est un entier, local Chemin_fichier est une chaine)
      
      
      nIDfichierXLS est un xlsDocument
      nNumFeuille_Critere_Acceptation est un entier
      sNom_Onglet_Feuille_Excel_Critères_Acceptations est une chaine = "Criteres acceptation"
      
      nNbLignes est un entier // Nombre de ligne total de la feuille
      nLigne est un entier	// Numéro de ligne de la feuille
      sCode_User_Storie est une chaine					// Code de la user storie en cours de traitement
      nIDUser_Storie_Eencours est un entier				// Identifiant de la User storie encours de traitement
      sLibelleEtat_Critere_Acceptation est une chaîne		// Libellé de l'état du critère d'acceptation
      nIDEtat_Critere_Acceptation est un entier			// Identifiant de l'état du critère d'acceptation
      //cstIDEtat_Redaction_Encours est un entier = 1		// Rédaction encours 
      nID_Redacteur est un entier
      nID_Valideur est un entier
      //nID_Desactivation est un entier
      sNumero_Critere est une chaine
      sNameRedacteur est une chaine
      sNameUser est une chaine
      //sNomUserDesactivation est une chaîne
      bEnregistrementCritereComposant est un booléen	// défini si on doit enregistrer le comosant du critère d'acceptation
      sAuMomesntDe est une chaine
      sJAttend_que est une chaine 
      sEtant_Donne_que est une chaine
      
      
      
      //------------------------------------------Numero--Des--Colonnes---------------------------------------------------
      nColNumeroUserStory		est un entier	= 1
      nColNumero_Critere		est un entier	= 2
      nColTitre				est un entier	= 4
      nColNomRedac			est un entier	= 5
      nColCommentaireDemande	est un entier	= 13
      nColCommentaireDev		est un entier	= 14
      nColDateCreation		est un entier	= 6
      nColIDValideur			est un entier	= 11
      nColDateValidation		est un entier	= 12
      nColIDCritAcceptEtat	est un entier	= 10
      nColIDCritAcceptAssoc	est un entier	= 3
      nColEtant_Donne_Que		est un entier	= 7
      nColAuMomentDe			est un entier	= 8
      nColJAttend_que			est un entier	= 9
      
      //------------------------------------------------------------------------------------------------------------------
      
      //Faire une requete pour aller chercher tous les composants types et remplir le tableau avec
      
      
      
      //------------------------------------------------------------------------------------------------------------------
      
      SI Chemin_fichier <>"" ALORS
      	nIDfichierXLS = xlsOuvre(Chemin_fichier,xlsEcriture)
      	SI ErreurDétectée = Faux ALORS
      		
      		// Recherche de la feuille des critères d'acceptation
      		
      		POUR i= 1 _A_ nIDfichierXLS..NombreFeuille
      			xlsFeuilleEnCours(nIDfichierXLS, i)
      			SI nIDfichierXLS..NomFeuille = sNom_Onglet_Feuille_Excel_Critères_Acceptations ALORS
      				//-----------------------------
      				nNumFeuille_Critere_Acceptation = i
      				SORTIR		// Une feuille à été trouvé				
      			FIN	
      		FIN		
      		
      		// Traitement de la feuille des critères d'acceptation
      		SI nNumFeuille_Critere_Acceptation <> 0 ALORS		
      			
      			// on Sélectionne la feuille qui correspond aux critères d'acceptation
      			xlsFeuilleEnCours(nIDfichierXLS, nNumFeuille_Critere_Acceptation)
      			
      			// Parcours de la feuilles Excel des critères sur nNbLignes
      			nNbLignes = xlsNbLigne(nIDfichierXLS, Vrai)
      			
      			// on lit pas la première ligne
      			POUR nLigne = 2 _À_ nNbLignes
      				
      				//----------------------------------------------------------
      				
      				// sert récupérer les composant dans les lignes		
      				bEnregistrementCritereComposant = Faux
      				
      				// ---------------------------------- Lecture du code de la User storie et recherche de l'identifiant de la user storie -------------------------------------- //
      				
      				sCode_User_Storie = xlsDonnée(nIDfichierXLS, nLigne, nColNumeroUserStory)
      				
      				SI sCode_User_Storie <> "" ALORS
      					
      					
      					// Recherche de l'identifiant de la user storie
      					nIDUser_Storie_Eencours = RechercheIdUserStorie(sCode_User_Storie, nIDScr_Projet)
      					
      					SI nIDUser_Storie_Eencours = 0 ALORS
      						Trace("user storie introuvable : " + sCode_User_Storie + " - id. projet " + nIDScr_Projet )
      					FIN
      					
      				FIN
      				
      				
      				// récupération du code du critère en cours d'enregistrement 
      				
      				sNumero_Critere = xlsDonnée(nIDfichierXLS, nLigne, nColNumero_Critere)	
      				
      				SI sNumero_Critere <> "" ALORS
      					
      					
      					// ---------------------------------- Lecture de l'état du critère d'acceptation et recherche de l'identifiant de l'état -------------------------------------- //
      					
      					sLibelleEtat_Critere_Acceptation = xlsDonnée(nIDfichierXLS, nLigne, nColIDCritAcceptEtat)	
      					
      					//recherche de l’état de la User Storie
      					SI sLibelleEtat_Critere_Acceptation <> "" ALORS
      						
      						nIDEtat_Critere_Acceptation = RechercheEtatUserStorie(sLibelleEtat_Critere_Acceptation)	
      						
      					SINON
      						nIDEtat_Critere_Acceptation = ClCritereAccept::cst_Critere_En_cours_de_rédaction
      					FIN
      					
      					
      					// ---------------------------------- Lecture du nom du rédacteur et recherche de l'identifiant -------------------------------------- //
      					sNameRedacteur = xlsDonnée(nIDfichierXLS, nLigne, nColNomRedac)//------Info Manquante
      					
      					SI sNameRedacteur <> "" ALORS
      						nID_Redacteur = RechercheUSR(sNameRedacteur)
      					SINON
      						nID_Redacteur = Null
      					FIN
      					
      					// ---------------------------------- Lecture du nom de l'utilisateur et recherche de l'identifiant -------------------------------------- //
      					
      					sNameUser = xlsDonnée(nIDfichierXLS, nLigne, nColIDValideur)//----- Info Manquante
      					
      					SI sNameUser <> "" ALORS
      						nID_Valideur = RechercheUSR(sNameUser)
      					SINON
      						nID_Valideur = Null
      					FIN
      					
      					// ---------------------------------- Lecture du nom de l'utilisateur et recherche de l'identifiant -------------------------------------- //
      					
      //					sNomUserDesactivation = xlsDonnée(nIDfichierXLS, nLigne, nColIDDesactivation)//------Info Manquante
      //					SI sNomUserDesactivation <> "" ALORS
      //						nID_Desactivation = RechercheUSR(sNomUserDesactivation)
      //					SINON
      //						
      //						nID_Desactivation = Null
      //					FIN
      					
      					//---------------------------------- Ajout du critère d'acceptation Assoc --------------------------------------//     
      					
      					//				sNomCritereAssociation = xlsDonnée(nIDfichierXLS, nLigne, nColIDCritAcceptAssoc)
      					//				si sNomCritereAssociation <> "" alors
      					//					nID_Critere_Assoc = RechercheCritereAssoc(sNomCritereAssociation)
      					//				sinon
      					//					nID_Critere_Assoc = null					
      					//				FIN
      					
      					//-Ajout du Critere d'Acceptation
      					
      					
      					HRAZ(Scr_CritereAccept)
      					Scr_CritereAccept.CommentaireDemand			= xlsDonnée(nIDfichierXLS, nLigne, nColCommentaireDemande)
      					Scr_CritereAccept.CommentaireDev			= xlsDonnée(nIDfichierXLS, nLigne, nColCommentaireDev)
      					Scr_CritereAccept.Titre						= xlsDonnée(nIDfichierXLS, nLigne, nColTitre)
      					
      					si nID_Valideur = 0 alors
      						Scr_CritereAccept.IDSrc_Usr_Valideur..Null	= vrai
      					sinon
      						Scr_CritereAccept.IDSrc_Usr_Valideur	= nID_Valideur
      					FIN
      					
      					Scr_CritereAccept.DateCreation				= ChaîneVersDate(xlsDonnée(nIDfichierXLS, nLigne, nColDateCreation))
      					// null si vide
      					SI Scr_CritereAccept.DateCreation = "" ALORS
      						Scr_CritereAccept.DateCreation			= Null
      					FIN
      					//----------------------------
      					Scr_CritereAccept.DateValidation			= ChaîneVersDate(xlsDonnée(nIDfichierXLS, nLigne, nColDateValidation))
      					// null si vide 
      					SI Scr_CritereAccept.DateValidation = "" ALORS
      						Scr_CritereAccept.DateValidation		= Null
      					FIN
      					//----------------------------------------------
      					// null si vide
      					SI Scr_CritereAccept.DateDesactivation = "" ALORS
      						Scr_CritereAccept.DateDesactivation		= Null
      					FIN
      					
      					si nID_Redacteur = 0 ALORS
      						Scr_CritereAccept.IDSrc_Usr_Redacteur..Null	= vrai
      					sinon
      						Scr_CritereAccept.IDSrc_Usr_Redacteur			= nID_Redacteur
      					FIN
      					
      					Scr_CritereAccept.IDScr_UserStory					= nIDUser_Storie_Eencours 				
      					Scr_CritereAccept.IDScr_CritereAccept_Etat			=  nIDEtat_Critere_Acceptation
      					Scr_CritereAccept.IDScr_CritereAccept_Asso..Null	= vrai
      					
      					SI PAS HAjoute(Scr_CritereAccept) ALORS
      						Erreur(ErreurInfo(errComplet))
      					SINON
      						sEtant_Donne_que								= xlsDonnée(nIDfichierXLS, nLigne, nColEtant_Donne_Que)	
      						sAuMomesntDe									= xlsDonnée(nIDfichierXLS, nLigne, nColAuMomentDe)	
      						sJAttend_que									= xlsDonnée(nIDfichierXLS, nLigne, nColJAttend_que)	
      						
      						SI sEtant_Donne_que <> "" _OU_  sAuMomesntDe <> "" _OU_ sJAttend_que <> "" ALORS
      							bEnregistrementCritereComposant				= Vrai
      						FIN
      					FIN
      				SINON
      					//on enregistre les trois composants types .
      					sEtant_Donne_que		= xlsDonnée(nIDfichierXLS, nLigne, nColEtant_Donne_Que)	
      					sAuMomesntDe			= "" // xlsDonnée(nIDfichierXLS, nLigne, nColAuMomentDe)	
      					sJAttend_que			= xlsDonnée(nIDfichierXLS, nLigne, nColJAttend_que)	
      					
      					SI sEtant_Donne_que <> "" _OU_  sAuMomesntDe <> "" _OU_ sJAttend_que <> "" ALORS
      						bEnregistrementCritereComposant = Vrai
      					FIN
      					
      				FIN
      				
      				
      				SI bEnregistrementCritereComposant = Vrai ALORS
      					
      					SI sEtant_Donne_que <> "" ALORS
      						HRAZ(Scr_CritereAccept_Composant)
      						Scr_CritereAccept_Composant.Description							= sEtant_Donne_que 				
      						Scr_CritereAccept_Composant.IDScr_CritereAccept					= Scr_CritereAccept.IDScr_CritereAccept 
      						Scr_CritereAccept_Composant.IDScr_CritereAccept_Composant_Type	= ClCritereAccept_Composant::cst_EtantDonneQue 
      						SI PAS HAjoute(Scr_CritereAccept_Composant) ALORS
      							Erreur(ErreurInfo(errComplet))
      						FIN
      					FIN
      					
      					SI sAuMomesntDe <> "" ALORS
      						Scr_CritereAccept_Composant.Description							= sAuMomesntDe 				
      						Scr_CritereAccept_Composant.IDScr_CritereAccept					= Scr_CritereAccept.IDScr_CritereAccept
      						Scr_CritereAccept_Composant.IDScr_CritereAccept_Composant_Type	= ClCritereAccept_Composant::cst_AuMomentDe
      						
      						SI PAS HAjoute(Scr_CritereAccept_Composant) ALORS
      							Erreur(ErreurInfo(errComplet))
      						FIN
      					FIN
      					
      					SI sJAttend_que <> "" ALORS
      						Scr_CritereAccept_Composant.Description							= sJAttend_que
      						Scr_CritereAccept_Composant.IDScr_CritereAccept					= Scr_CritereAccept.IDScr_CritereAccept 
      						Scr_CritereAccept_Composant.IDScr_CritereAccept_Composant_Type	= ClCritereAccept_Composant::cst_JattendQue
      						
      						SI PAS HAjoute(Scr_CritereAccept_Composant) ALORS
      							Erreur(ErreurInfo(errComplet))
      						FIN
      					FIN
      				FIN
      			FIN
      			
      			
      			
      		FIN
      		xlsFerme(nIDfichierXLS)
      	SINON
      		Info(ErreurInfo())
      	FIN
      fin
      
      
      
     type : 458752
   -
     name : RechercheEtatUserStorie
     internal_properties : BwAAAAcAAADYuPST6CP+T+K2ZU37o7g3n8Kew/nVjSZD5G6OyRuT2Yo67DV/AZmlWI7RE7NW48hb
     procedure_id : 2258147771278483708
     type_code : 14
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      // RechercheEtatUserStorie ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE RechercheEtatUserStorie(LOCAL sLibelleEtat est une chaine)
      nID_Etat_retour est un entier
      
      // Déclaration de la requête
      sdSourceEtat_Critere_Acceptation est une source de données
      sRequeteIDEtat_Critere_Accetation est une chaine  = chaineconstruit([
      	SELECT 
      		Scr_CritereAccept_Etat.IDScr_CritereAccept_Etat 
      		
      	FROM Scr_CritereAccept_Etat 
      	
      	WHERE Upper(Libelle) LIKE '%%%1%%' or Libelle LIKE '%%%2%%'
      		
      	
      ], Majuscule(sLibelleEtat), sLibelleEtat)
      
      // Exécution de la requête
      goApp.Rsql(sdSourceEtat_Critere_Acceptation ,sRequeteIDEtat_Critere_Accetation)
      	
      // lecture du résultat de la requête
      HLitPremier(sdSourceEtat_Critere_Acceptation)
      SI HTrouve(sdSourceEtat_Critere_Acceptation) ALORS
      	
      	// Récupération de l'identifiant de la requête
      	nID_Etat_retour = sdSourceEtat_Critere_Acceptation.IDScr_CritereAccept_Etat
      	
      FIN
      	
      
      // Annulation de la requête
      HAnnuleDéclaration(sdSourceEtat_Critere_Acceptation)
      
      // Renvoie l'identifiant
      RENVOYER nID_Etat_retour
     type : 458752
   -
     name : RechercheIdUserStorie
     internal_properties : BwAAAAcAAADYuPST6CP+T+K2ZU37o7g3n8Kew/nVjSZD5G6OyRuT2Yo67DV/AZmlWI7RE7NW48hb
     procedure_id : 2258147775573517009
     type_code : 14
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      // RechercheIdUserStorie ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE RechercheIdUserStorie(sCode_User_Storie est une chaine, nIDScr_Projet est un entier)
      
      nIDUserStorie est un entier
      // déclaration de la requete
      sdSource_Recherche_Utilisateur est une source de données
      sRequete_Recherche_Utilisateur est une chaine = chaineconstruit([
      SELECT 
      	IDScr_UserStory 
      
      FROM Scr_UserStory 
      
      WHERE Scr_UserStory.CodeUserStory = '%1' 
      AND Scr_UserStory.IDScr_Projet = %2
      
      ], sCode_User_Storie, nIDScr_Projet)
      
      
      goApp.Rsql(sdSource_Recherche_Utilisateur,  sRequete_Recherche_Utilisateur)
      	
      HLitPremier(sdSource_Recherche_Utilisateur)
      SI HTrouve(sdSource_Recherche_Utilisateur) ALORS// On lit le premier, s'il est trouvé, on l'affecte à la variable.
      	nIDUserStorie = sdSource_Recherche_Utilisateur.IDScr_UserStory
      FIN
      
      HAnnuleDéclaration(sdSource_Recherche_Utilisateur)
      // revoi de l'ID.
      RENVOYER nIDUserStorie
     type : 458752
   -
     name : RechercheUSR
     internal_properties : BwAAAAcAAACUmgjsDVMbsQop5HOx3zNgPpINzVE1A7E7zVS2CsD4/Ru+L19Gp9lyZv2pu5CPQpGucwXTyPluGNiB5Vu4LVvY
     procedure_id : 2258147775573583045
     type_code : 14
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      // RechercheUSR ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE RechercheUSR(sNom_redacteur est une chaine)
      
      nID_Redac_Retour est un entier
      
      
      Source_UserReaserch est une source de données
      
      RequeteUser est une chaine = chaineconstruit([
      SELECT 
      	IDScr_Usr 
      
      FROM Scr_Usr 
      
      WHERE Login_AD = '%1'
      ], sNom_redacteur)
      
      goApp.Rsql(Source_UserReaserch, RequeteUser)
      
      HLitPremier(Source_UserReaserch)
      SI pas HEnDehors(Source_UserReaserch) ALORS// on lit le premier, s'il est trouvé on l'affecte
      	nID_Redac_Retour = Source_UserReaserch.IDScr_Usr
      sinon
      	trace("Utilisateur non trouvé : ""[%sNom_redacteur%]"".")
      	stop
      FIN
      
      HAnnuleDéclaration(Source_UserReaserch)
      //on revoi l'id
      RENVOYER nID_Redac_Retour
     type : 458752
   -
     name : Import_Process
     internal_properties : BwAAAAcAAADYuPST6CP+T+K2ZU37o7g3n8Kew/nVjSZD5G6OyRuT2Yo67DV/AZmlWI7RE7NW48hb
     procedure_id : 2260007719609282616
     type_code : 14
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //Import_Process (<nIDScr_Projet> est entier, <Chemin_fichier> est chaîne)
      //
      // Paramètres :
      //	nIDScr_Projet (entier) : <indiquez ici le rôle de nIDScr_Projet_p>
      //	Chemin_fichier (chaîne ANSI) : <indiquez ici le rôle de FileName_p>
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE Import_Process(local nIDScr_Projet est un entier, local Chemin_fichier est une chaine)
      
      
      nIDfichierXLS est un xlsDocument
      nNumFeuille_Process est un entier
      sNom_Onglet_Process est une chaine = "Process"
      nNbLignes est un entier // Nombre de ligne total de la feuille
      nLigne est un entier	// Numéro de ligne de la feuille
      
      
      nIdProcess est un entier
      nIdAxe est un entier
      nIdInter est un entier
      
      sProcess est une chaîne
      sAxe est une chaîne
      sInter est une chaîne
      sUS est une chaîne
      
      
      //------------------------------------------Numero--Des--Colonnes---------------------------------------------------
      nColProcess est un entier = 1
      nColAxe est un entier = 2
      nColInter est un entier = 3
      nColType est un entier = 4
      nColUS est un entier = 5
      nColLienCondErr est un entier = 6
      
      
      sReq est une chaîne
      nOrdre est un entier
      nOrdreInter est un entier
      
      
      STR_Cond_Lien est une structure
      	sNomInter est une chaîne
      	nIdProcess est un entier
      fin
      aStLiensErr est un tableau associatif de STR_Cond_Lien
      stLienErrTmp est un STR_Cond_Lien
      
      
      
      //------------------------------------------------------------------------------------------------------------------
      
      SI Chemin_fichier <>"" ALORS
      	nIDfichierXLS = xlsOuvre(Chemin_fichier,xlsEcriture)
      	SI ErreurDétectée = Faux ALORS
      		
      		// Recherche de la feuille des critères d'acceptation
      		
      		POUR i= 1 _A_ nIDfichierXLS..NombreFeuille
      			xlsFeuilleEnCours(nIDfichierXLS, i)
      			SI nIDfichierXLS..NomFeuille = sNom_Onglet_Process ALORS
      				//-----------------------------
      				nNumFeuille_Process = i
      				SORTIR		// Une feuille à été trouvé				
      			FIN	
      		FIN
      		
      		
      		// Traitement de la feuille des critères d'acceptation
      		SI nNumFeuille_Process <> 0 ALORS		
      			
      			// on Sélectionne la feuille qui correspond aux critères d'acceptation
      			xlsFeuilleEnCours(nIDfichierXLS, nNumFeuille_Process)
      			
      			// Parcours de la feuilles Excel des critères sur nNbLignes
      			nNbLignes = xlsNbLigne(nIDfichierXLS, Vrai)
      			
      			// on lit pas la première ligne
      			POUR nLigne = 2 _À_ nNbLignes
      				
      				
      				//----------------------------------------------------------
      				// process
      				sProcess = SansEspace(xlsDonnée(nIDfichierXLS, nLigne, nColProcess))
      				si sProcess <> "" ALORS
      					
      					//A t on déja traité un process ?
      					si nIdProcess <> 0 ALORS
      						//Oui : finalisation de celui ci.
      						CreeLiensconditions()
      					FIN
      					
      					
      					Scr_Process_Metier.Libelle		= sProcess
      					Scr_Process_Metier.IDScr_Projet	= nIDScr_Projet
      					si pas HAjoute(Scr_Process_Metier) ALORS
      						ExceptionDéclenche(1,HErreurInfo(hErrComplet))
      					FIN
      					nIdProcess = Scr_Process_Metier.IDScr_Process_Metier
      					nOrdre = 0
      					nOrdreInter = 0
      				FIN
      				
      				
      				//----------------------------------------------------------
      				// axe
      				sAxe = SansEspace(xlsDonnée(nIDfichierXLS, nLigne, nColAxe))
      				si sAxe <> "" ALORS
      					
      					sdGetIdAxe est une Source de Données
      					sReq = ChaîneConstruit([
      						SELECT 
      							Scr_Process_Metier_Axe.IDScr_Process_Metier_Axe
      						FROM Scr_Process_Metier_Axe
      						WHERE Scr_Process_Metier_Axe.Libelle like '%%%1%%'
      							AND Scr_Process_Metier_Axe.IDScr_Process_Metier = %2
      					], ClZF_App.sFormateTexteSQL(sAxe), nIdProcess)
      					
      					goapp.RSQL(sdGetIdAxe,sReq)
      				
      					HLitPremier(sdGetIdAxe)
      					si HEnDehors(sdGetIdAxe) ALORS
      						nOrdre++
      						
      						Scr_Process_Metier_Axe.IDScr_Process_Metier	= nIdProcess
      						Scr_Process_Metier_Axe.Libelle				= sAxe
      						Scr_Process_Metier_Axe.Ordre				= nOrdre
      						si pas HAjoute(Scr_Process_Metier_Axe) ALORS
      							ExceptionDéclenche(1,HErreurInfo(hErrComplet))
      						FIN
      						nIdAxe = Scr_Process_Metier_Axe.IDScr_Process_Metier_Axe
      					sinon
      						nIdAxe = sdGetIdAxe.IDScr_Process_Metier_Axe
      					FIN
      						
      					HAnnuleDéclaration(sdGetIdAxe)
      				FIN
      				
      				
      				
      				//----------------------------------------------------------
      				// Inter
      				sInter = xlsDonnée(nIDfichierXLS, nLigne, nColInter)
      				si sInter <> "" ALORS
      					
      					nIdInter = sIdInterDeDesc(sInter, nIdProcess)
      					si nIdInter = 0 alors
      						hraz(Scr_Process_Metier_Intervenant)
      						selon xlsDonnée(nIDfichierXLS, nLigne, nColType)
      							cas "Action manuelle"
      								Scr_Process_Metier_Intervenant.IDScr_Process_Metier_Intervenant_Type = ClProcess_Metier_Intervenant.cstTypeInter_Action_manuelle
      							CAS "Action par intervenant"
      								Scr_Process_Metier_Intervenant.IDScr_Process_Metier_Intervenant_Type = ClProcess_Metier_Intervenant.cstTypeInter_Action_par_intervenant
      							CAS "Action automatique"
      								Scr_Process_Metier_Intervenant.IDScr_Process_Metier_Intervenant_Type = ClProcess_Metier_Intervenant.cstTypeInter_Action_automatique
      							CAS "Attente"
      								Scr_Process_Metier_Intervenant.IDScr_Process_Metier_Intervenant_Type = ClProcess_Metier_Intervenant.cstTypeInter_Attente
      							CAS "Sous process"
      								Scr_Process_Metier_Intervenant.IDScr_Process_Metier_Intervenant_Type = ClProcess_Metier_Intervenant.cstTypeInter_Sous_process
      							CAS "Condition"
      								Scr_Process_Metier_Intervenant.IDScr_Process_Metier_Intervenant_Type = ClProcess_Metier_Intervenant.cstTypeInter_Condition
      						fin
      						
      
      						nOrdreInter++
      						Scr_Process_Metier_Intervenant.IDScr_Process_Metier_Axe		= nIdAxe
      						Scr_Process_Metier_Intervenant.Description					= sInter
      						Scr_Process_Metier_Intervenant.OrdreAbsolu					= nOrdreInter
      						si pas HAjoute(Scr_Process_Metier_Intervenant) ALORS
      							ExceptionDéclenche(1,HErreurInfo(hErrComplet))
      						FIN
      						nIdInter = Scr_Process_Metier_Intervenant.IDScr_Process_Metier_Intervenant
      						
      						//Pour les conditions, on mémorise le lien de l'intervenant, pour la sortie en erreur
      						si Scr_Process_Metier_Intervenant.IDScr_Process_Metier_Intervenant_Type = ClProcess_Metier_Intervenant.cstTypeInter_Condition alors
      							VariableRAZ(stLienErrTmp)
      							stLienErrTmp.sNomInter	= xlsDonnée(nIDfichierXLS, nLigne, nColLienCondErr)
      							stLienErrTmp.nIdProcess	= nIdProcess
      							aStLiensErr[nIdInter]	= stLienErrTmp
      						fin
      					FIN
      				FIN
      				
      				
      				//----------------------------------------------------------
      				// Inter / US
      				sUS = xlsDonnée(nIDfichierXLS, nLigne, nColUS)
      				si sUS <> "" ALORS
      					
      					sdGetIdUS est une Source de Données
      					sReq = ChaîneConstruit([
      						SELECT 
      							Scr_UserStory.IDScr_UserStory
      						FROM Scr_UserStory
      						WHERE Scr_UserStory.CodeUserStory like '%%%1%%'
      							AND Scr_UserStory.IDScr_Projet = %2
      					], sUS, nIDScr_Projet)
      					
      					goapp.RSQL(sdGetIdUS,sReq)
      					
      					HLitPremier(sdGetIdUS)
      					si pas HEnDehors(sdGetIdUS) ALORS
      						hraz(Scr_UserStory_Scr_Process_Metier_Intervenant)
      						Scr_UserStory_Scr_Process_Metier_Intervenant.IDScr_Process_Metier_Intervenant	= nIdInter
      						Scr_UserStory_Scr_Process_Metier_Intervenant.IDScr_UserStory					= sdGetIdUS.IDScr_UserStory
      						si pas HAjoute(Scr_UserStory_Scr_Process_Metier_Intervenant) ALORS
      							ExceptionDéclenche(1,HErreurInfo(hErrComplet))
      						FIN
      					sinon
      						erreur("")
      					FIN
      					HAnnuleDéclaration(sdGetIdUS)
      				FIN
      			fin
      			
      			
      			CreeLiensconditions()
      			
      		FIN
      		xlsFerme(nIDfichierXLS)
      	SINON
      		Info(ErreurInfo())
      	FIN
      fin
      
      
      procedure interne CreeLiensconditions()
      	sIdInter est une chaîne
      	pour tout stLienErrTmp, sIdInter de aStLiensErr
      		
      		HLitRecherche(Scr_Process_Metier_Intervenant,IDScr_Process_Metier_Intervenant,sIdInter,hIdentique+hLimiteParcours)
      		si HTrouve(Scr_Process_Metier_Intervenant) ALORS
      			
      			Scr_Process_Metier_Intervenant.IDScr_Process_Metier_Intervenant_Controle_Renvoi = ...
      				sIdInterDeDesc(stLienErrTmp.sNomInter, stLienErrTmp.nIdProcess)
      			
      			si Scr_Process_Metier_Intervenant.IDScr_Process_Metier_Intervenant_Controle_Renvoi = 0 ALORS
      				ExceptionDéclenche(1,"Intervenant non trouvé (liaison d'erreur)")
      			sinon
      				si pas hmodifie(Scr_Process_Metier_Intervenant) ALORS
      					ExceptionDéclenche(1,HErreurInfo(hErrComplet))
      				FIN
      			FIN
      			
      		sinon
      			ExceptionDéclenche(1,"Intervenant non trouvé")
      		FIN
      		
      	FIN
      FIN
      
      
      
      procédure interne sIdInterDeDesc(sDesc_p est une chaîne, nIdPrj_P est un entier):entier
      	nRetour est un entier
      	sdGetIdInter est une Source de Données
      	
      	sReq = ChaîneConstruit([
      		SELECT 
      			Scr_Process_Metier_Intervenant.IDScr_Process_Metier_Intervenant
      		FROM Scr_Process_Metier_Intervenant
      			INNER JOIN Scr_Process_Metier_Axe ON (Scr_Process_Metier_Axe.IDScr_Process_Metier_Axe = Scr_Process_Metier_Intervenant.IDScr_Process_Metier_Axe)
      		WHERE Scr_Process_Metier_Intervenant.Description = '%1'
      --		WHERE Scr_Process_Metier_Intervenant.Description like '%%%1%%'
      			AND Scr_Process_Metier_Axe.IDScr_Process_Metier = %2
      	], ClZF_App.sFormateTexteSQL(sDesc_p), nIdPrj_P)
      	
      	goApp.Rsql(sdGetIdInter,sReq)
      	
      	HLitPremier(sdGetIdInter)
      	SI pas HEnDehors(sdGetIdInter) ALORS
      		nRetour = sdGetIdInter.IDScr_Process_Metier_Intervenant
      	FIN
      
      	HAnnuleDéclaration(sdGetIdInter)
      	renvoyer nRetour
      fin
     type : 458752
   -
     name : oProjetDeNom
     procedure_id : 2278571440226310764
     type_code : 14
     code : |1+
      procédure oProjetDeNom(sNom_P est une chaîne):ClProjet
      
      oPrj est un ClProjet dynamique
      
      HLitRecherche(Scr_Projet,Nom,sNom_P,hIdentique+hLimiteParcours)
      si HTrouve(Scr_Projet) ALORS
      	oPrj <- ClProjet.GetObj(Scr_Projet.IDScr_Projet)
      FIN
      
      renvoyer oPrj
     type : 458752
   -
     name : Taches_Ajout
     internal_properties : BwAAAAcAAADYuPST6CP+T+K2ZU37o7g3n8Kew/nVjSZD5G6OyRuT2Yo67DV/AZmlWI7RE7NW48hb
     procedure_id : 1168615465491789369
     type_code : 14
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] Taches_Ajout (<stTache> est STR_Tache)
      //
      // Paramètres :
      //	stTache (STR_Tache) : <indiquez ici le rôle de stTache>
      // Valeur de retour :
      // 	entier : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE Taches_Ajout(LOCAL stTache est un STR_Tache):entier
      nIDTache est un entier
      
      
      
      //Ajout de la tache :
      HRAZ(Scr_Tache)
      Scr_Tache.CodeTache		= stTache.sCodeTache
      Scr_Tache.Description	= stTache.sDescription
      
      Si stTache.nPoids = Null alors
      	Scr_Tache.Poids..null = Vrai
      sinon
      	Scr_Tache.Poids = stTache.nPoids
      fin
      
      si stTache.nNumSprintFin = 0 ALORS
      	Scr_Tache.Num_Sprint_Fin..Null = Vrai 
      sinon
      	Scr_Tache.Num_Sprint_Fin = stTache.nNumSprintFin
      fin
      
      si stTache.nNumSprintDemarage = 0 ALORS
      	Scr_Tache.Num_Sprint_Demarrage..Null = vrai
      sinon
      	Scr_Tache.Num_Sprint_Demarrage = stTache.nNumSprintDemarage
      fin
      
      si stTache.nNumSprintRealisation = 0 ALORS
      	Scr_Tache.Num_Sprint_Realisation..Null = Vrai 
      sinon
      	Scr_Tache.Num_Sprint_Realisation = stTache.nNumSprintRealisation
      fin
      
      Scr_Tache.IDScr_Usr_createur		= goApp.m_oUsrCnx.ZF_Get_IdUnique()
      
      SI stTache.nNumSprintDemarage > 0 ALORS
      	Scr_Tache.IDScr_Usr_Dev			= goApp.m_oUsrCnx.ZF_Get_IdUnique()
      FIN
      
      Scr_Tache.Ordre						= stTache.nOrdre
      Scr_Tache.CMTR						= stTache.sCommentaire
      
      si stTache.nNumSprintCreation = 0 et stTache.nNumSprintDemarage <> 0 ALORS
      	//Scr_Tache.Num_Sprint_Creation		= goApp.m_nNumeroDuSprintActuel
      	stTache.nNumSprintCreation = stTache.nNumSprintDemarage
      	//	ExceptionDéclenche(1, "Sprint de création inexistant")
      fin
      si stTache.nNumSprintCreation <> 0 alors
      	Scr_Tache.Num_Sprint_Creation		= stTache.nNumSprintCreation
      sinon
      	Scr_Tache.Num_Sprint_Creation = 1
      	trace("Sprint de création non définit : ",stTache.sCodeTache)
      fin
      
      
      si stTache.nNumSprintRealisation <> 0 alors
      	Scr_Tache.Num_Sprint_Previsionnel	= stTache.nNumSprintRealisation
      sinon
      	Scr_Tache.Num_Sprint_Previsionnel..null	= vrai
      FIN
      
      si stTache.nPoids = 0 et pas stTache.bAnnulee alors
      //si stTache.nPoids = 0 et pas stTache.bAnnulee ET PAS stTache.bTermine alors
      	Scr_Tache.Poids_Previsionnel = ClTache.cstPoidsEstimatifTacheNonCote
      sinon
      	Scr_Tache.Poids_Previsionnel = stTache.nPoids
      fin
      
      
      nPosDiez est un entier
      sNumTicket est une chaîne
      nPosDiez = Position(stTache.sDescription,"#")
      si nPosDiez > 0 ALORS
      	sNumTicket = stTache.sDescription[[nPosDiez + 1 sur 4]]
      	si VérifieExpressionRégulière(sNumTicket,"[0-9]{4}") ALORS
      		Scr_Tache.NumTicketIncident = sNumTicket
      	sinon
      		sNumTicket = stTache.sDescription[[nPosDiez + 1 SUR 3]]
      		SI VérifieExpressionRégulière(sNumTicket,"[0-9]{3}") ALORS
      			Scr_Tache.NumTicketIncident = sNumTicket
      		FIN
      	FIN
      FIN
      
      
      
      scr_tache.Top_Realise		= stTache.bTermine
      scr_tache.Top_Brouillon		= faux	//stTache.bBrouillon
      //Scr_Tache.Top_EstDemarree = stTache.bDemarree
      Scr_Tache.Top_Annule		= stTache.bAnnulee
      
      Scr_Tache.IDScr_UserStory	= stTache.nIDUserStorie
      
      SI PAS HAjoute(Scr_Tache) alors
      	ExceptionDéclenche(1, "erreur dans l'ajout de la tache" + rc + erreurInfo(errComplet))
      FIN
      
      nIDTache = Scr_Tache.IDScr_Tache
      
      //On renvoie l'ID genéré automatiquement 
      renvoyer nIDTache
      
      
      
     type : 458752
   -
     name : User_Story_ajout
     internal_properties : BwAAAAcAAADGLvhEj417wjOY53sfgb/R0CSSmEKCHf2OGrc9P2/gi8qq4vk+90h91lDYz4g7KLaGGD6GTFS+olD+ahWXOvi74GCTMvBWKt4AbyIhMLsbD5hpp52HHKHC64+H
     procedure_id : 1168615469786823514
     type_code : 14
     code : |1-
      // Résumé : Ajoute une UserStory dans la base de données
      // Syntaxe :
      //[ <Résultat> = ] User_Story_ajout (<stUserStorie> est STR_UserStorie)
      //
      // Paramètres :
      //	stUserStorie (STR_UserStorie) : <indiquez ici le rôle de stUserStorie>
      // Valeur de retour :
      // 	entier : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE User_Story_ajout(stUserStorie est un STR_UserStorie):entier
      nIdUserStorie est un entier
      
      HRAZ(Scr_UserStory)
      Scr_UserStory.CodeUserStory			= stUserStorie.sCodeUserStorie
      Scr_UserStory.JAiBesoinDe			= stUserStorie.sBesoinUserStorie
      Scr_UserStory.AfinDe				= stUserStorie.sAfindeUserStorie
      Scr_UserStory.IDScr_Projet			= stUserStorie.nIDProjet
      Scr_UserStory.IDScr_Usr_Valideur	= stUserStorie.nIDResponsable
      Scr_UserStory.EntantQue				= stUserStorie.sEnTantQue
      Scr_UserStory.EstTesteParEquipeDev	= stUserStorie.bAtester
      Scr_UserStory.CMTR_Global			= stUserStorie.sCmtrGeneral
      Scr_UserStory.CMTR_RetourDeTest		= stUserStorie.sCmtrTest
      
      si stUserStorie.bAtester ALORS
      	Scr_UserStory.IDSrc_Environnement_Test = 1
      	Scr_UserStory.DateMiseADispo_enTestFonctionnel = DateSys()
      FIN
      
      si stUserStorie.nIdEpic = 0 ALORS
      	Scr_UserStory.IDScr_Epic..null	= vrai
      sinon
      	Scr_UserStory.IDScr_Epic		= stUserStorie.nIdEpic
      FIN
      
      si Scr_UserStory.IDSrc_Environnement_Test = 0 ALORS
      	Scr_UserStory.IDSrc_Environnement_Test..Null = vrai
      FIN
      
      
      SI PAS HAjoute(Scr_UserStory) ALORS
      	Info("erreur dans l'ajout de l'US", ErreurInfo())
      FIN
      
      nIdUserStorie = Scr_UserStory.IDScr_UserStory
      
      
      hraz(Scr_Historique)
      Scr_Historique.IDScr_UserStory	= nIdUserStorie
      Scr_Historique.IDScr_Usr		= goapp.m_oUsrCnx.ZF_Get_IdUnique()
      Scr_Historique.Date_Evt			= DateHeureSys()
      Scr_Historique.CMTR				= "Import de la user story"
      //Scr_Historique.IDScr_Tache..Null= Vrai
      //Scr_Historique.id..Null= Vrai
      SI PAS HAjoute(Scr_Historique) ALORS
      	Info("erreur dans l'ajout de l'historique de l'US", ErreurInfo())
      FIN
      
      RENVOYER nIdUserStorie
     type : 458752
   -
     name : nCreeEpicSiBesoin
     procedure_id : 1168622792707113099
     type_code : 14
     code : |1-
      procédure nCreeEpicSiBesoin(oPrj est un ClProjet, sEpic est une chaîne):entier
      
      nRetour est un entier
      oEpic est un ClEpic dynamique
      
      SI sEpic <> "" ALORS
      	oEpic <- ClEpic.Get_EpicDeNom(oPrj, sEpic)
      	SI oEpic = Null ALORS
      		oEpic = allouer un ClEpic
      		oEpic.p_oProjet = oPrj
      		oEpic.p_sNom = sEpic
      		oEpic.ZF_Enregistre()
      	FIN
      	nRetour = oEpic.ZF_Get_IdUnique()
      SINON
      	nRetour = 0
      FIN
      
      renvoyer nRetour
     type : 458752
   -
     name : ImportProjet
     procedure_id : 1272089693007117400
     type_code : 14
     code : |1+
      procédure ImportProjet(sFicImport_P est une chaîne, oPrj_P est un ClProjet)
      
      IdFichierXLS			est un xlsDocument
      i						est un entier
      sFichier				est une chaîne
      nPremiereligne			est un entier	= 2
      nIdUS					est un entier
      stTache					est une STR_Tache
      stUS					est une STR_UserStorie
      sTesteur				est une chaîne
      //oUsr					est un ClUsr dynamique
      
      nCol_codeUS				est un entier	= 1
      nCol_codeTache			est un entier	= 1
      nCol_numSprint			est un entier	= 7
      nCol_numSprintCrea		est un entier	= 10
      nCol_TesteurUS			est un entier	= 8
      nCol_Poids				est un entier	= 8
      nCol_fin				est un entier	= 9
      nCol_Role				est un entier	= 2
      nCol_nom				est un entier	= 3
      nCol_Besoin				est un entier	= 3
      nCol_AfinDe				est un entier	= 4
      nCol_commentaire		est un entier	= 5
      nCol_Epic				est un entier	= 11
      nCol_commentaire_Test	est un entier	= 12
      
      aLstTesteurs			est un tableau d'entiers
      
      nNumeroOrdre			est une entier
      
      
      // Ouvre le sélecteur de fichiers
      sFichier = Dupplication_Fichier_Avant_Import(sFicImport_P)
      
      
      
      SI sFichier <> "" ALORS
      	
      	oPrj_P:NettoieDependances()
      	
      	//Importer les epics, avant le chargement
      	Import_Epics(oPrj_P, sFichier)
      	
      	
      	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
      	
      	SI ErreurDétectée = Faux ALORS 
      		
      		SI xlsFeuilleEnCours(IdFichierXLS, 1) ALORS	
      			
      			
      			POUR i = nPremiereligne _À_ xlsNbLigne(IdFichierXLS,Vrai)
      				
      				//ON ne prend que les lignes qui ont un code et une description.
      				SI xlsDonnée(IdFichierXLS,i,nCol_codeUS) <> "" ET xlsDonnée(IdFichierXLS,i,nCol_Besoin) <> "" ALORS
      					
      					//Si le champ role n'est pas vide => c'est une US
      					SI xlsDonnée(IdFichierXLS,i,nCol_Role) <> "" ALORS
      						VariableRAZ(stUS)
      						stUS.sCodeUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_codeUS)
      						stUS.sEnTantQue			= xlsDonnée(IdFichierXLS,i,nCol_Role)
      						stUS.sBesoinUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_Besoin)
      						stUS.sAfindeUserStorie	= xlsDonnée(IdFichierXLS,i,nCol_AfinDe)
      						stUS.sCmtrGeneral		= xlsDonnée(IdFichierXLS,i,nCol_commentaire)
      						stUS.sCmtrTest			= xlsDonnée(IdFichierXLS,i,nCol_commentaire_Test)
      						stUS.nIDProjet			= oPrj_P.ZF_Get_IdUnique()
      						
      						SI xlsDonnée(IdFichierXLS,i,nCol_fin) ~= "T" ALORS
      							stUS.bAtester = Vrai
      							stUS.eEtatUserStorie = ClUserStory.ECompteNbUS.En_test_fonctionnel
      						FIN
      						
      						sTesteur = xlsDonnée(IdFichierXLS,i,nCol_TesteurUS)
      						si SansEspace(sTesteur) <> "" ALORS
      							stUS.nIDResponsable = nGetIdUsrDeNom(sTesteur)
      						sinon
      							stUS.nIDResponsable	= oPrj_P.p_oUsr_ChefProjet.ZF_Get_IdUnique()
      						FIN
      						
      						//On liste tous les testeurs du projet (sauf le cdp).
      						si TableauCherche(aLstTesteurs,tcLinéaire,stUS.nIDResponsable) <= 0 et stUS.nIDResponsable <> oPrj_P.p_oUsr_ChefProjet.ZF_Get_IdUnique() ALORS
      							TableauAjoute(aLstTesteurs,stUS.nIDResponsable)
      						FIN
      						
      						//Ajout de l'epic, si pas présent
      						stUS.nIdEpic = nCreeEpicSiBesoin(oPrj_P, xlsDonnée(IdFichierXLS,i,nCol_Epic))
      						
      						nIdUS = User_Story_ajout(stUS)
      						
      						nNumeroOrdre = 0
      						
      					SINON //sinon c'est une tache
      						
      						SI PAS (xlsDonnée(IdFichierXLS,i,nCol_nom) = SansEspace("") ET xlsDonnée(IdFichierXLS,i,nCol_numSprint) = SansEspace("")) ALORS
      							VariableRAZ(stTache)
      							stTache.sCodeTache				= xlsDonnée(IdFichierXLS,i,nCol_codeTache)
      							stTache.nNumSprintCreation		= xlsDonnée(IdFichierXLS,i,nCol_numSprintCrea)
      							stTache.nNumSprintRealisation	= xlsDonnée(IdFichierXLS,i,nCol_numSprint)
      							stTache.nNumSprintPrevision		= stTache.nNumSprintRealisation
      							stTache.nIDUserStorie			= nIdUS
      							stTache.sDescription			= xlsDonnée(IdFichierXLS,i,nCol_nom)
      							stTache.sCommentaire			= xlsDonnée(IdFichierXLS,i,nCol_commentaire)
      							
      							//affectation du num d'ordre
      							nNumeroOrdre++
      							stTache.nOrdre					= nNumeroOrdre
      							
      							
      							//Si le poids n'est pas indiqué --> null
      							SI xlsDonnée(IdFichierXLS,i,nCol_Poids) <> "" ALORS
      								stTache.nPoids				= xlsDonnée(IdFichierXLS,i,nCol_Poids)
      								stTache.nPoids_Prevision	= stTache.nPoids
      							SINON
      								stTache.nPoids				= Null
      								stTache.nPoids_Prevision	= Null
      							FIN
      							
      							SELON Vrai
      								CAS Majuscule(xlsDonnée(IdFichierXLS,i,nCol_fin)) ~= "X"
      									stTache.bDemarree			= Vrai
      									stTache.bAnnulee			= Faux
      									stTache.bTermine			= Vrai
      									stTache.nNumSprintFin		= stTache.nNumSprintRealisation 
      									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
      								CAS Majuscule(xlsDonnée(IdFichierXLS,i,nCol_fin)) ~= "T"
      									stTache.bDemarree			= Vrai
      									stTache.bAnnulee			= Faux
      									stTache.bTermine			= Vrai 
      									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
      								CAS Majuscule(xlsDonnée(IdFichierXLS,i,nCol_fin)) ~= "C"
      									trace("tache '[%stTache.sCodeTache%]' en mode 'C'")
      									stTache.bDemarree			= Vrai
      									stTache.bAnnulee			= Faux	
      									stTache.nNumSprintFin		= 0
      									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
      								CAS Majuscule(xlsDonnée(IdFichierXLS,i,nCol_fin)) ~= "A"
      									stTache.bAnnulee			= Vrai
      									stTache.bDemarree			= Faux
      									stTache.nNumSprintFin		= 0
      									stTache.nNumSprintDemarage	= stTache.nNumSprintRealisation
      								AUTRE CAS
      									stTache.bAnnulee			= Faux
      									stTache.bDemarree			= Faux
      									stTache.nNumSprintFin		= 0
      									stTache.nNumSprintDemarage	= 0
      							FIN
      							Taches_Ajout(stTache)
      						FIN
      					FIN
      				FIN
      			FIN
      			
      		SINON
      			Erreur(ErreurInfo(errComplet))
      		FIN
      	SINON
      		Erreur(ErreurInfo(errComplet))
      	FIN
      	
      	xlsFerme(IdFichierXLS)
      	
      
      	nIdUstTesteur			est un entier
      	oUsrInvite				est un ClUsr dynamique
      	anInvites				est un ClcolUsr
      	bTrouve					est un booléen
      	bSauvePrj				est un booléen
      	anInvites <- oPrj_P.aoInvite_Liste(Vrai)
      	
      	POUR TOUT nIdUstTesteur DE aLstTesteurs
      		bTrouve = Faux
      		POUR TOUT ÉLÉMENT oUsrInvite DE anInvites.aItems()
      			SI oUsrInvite.ZF_Get_IdUnique() = nIdUstTesteur ALORS
      				bTrouve = Vrai
      				//SORTIR
      			FIN
      		FIN
      		SI PAS bTrouve ALORS
      			oPrj_P.Invite_Ajoute(ClUsr.GetObj(nIdUstTesteur))
      			bSauvePrj = vrai
      		FIN
      	FIN
      	si bSauvePrj ALORS
      		oPrj_P.ZF_Enregistre()
      	FIN
      	
      FIN
      
      
      Import_Des_Criteres_Acceptation(oPrj_P.ZF_Get_IdUnique(), sFichier)
      Import_Process(oPrj_P.ZF_Get_IdUnique(), sFichier)
      Import_Blocages(sFichier)
      
     type : 458752
   -
     name : Import_Blocages
     internal_properties : BwAAAAcAAADYuPST6CP+T+K2ZU37o7g3n8Kew/nVjSZD5G6OyRuT2Yo67DV/AZmlWI7RE7NW48hb
     procedure_id : 1308599542259847443
     type_code : 14
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //Import_Blocages (<sChemin_fichier_P> est chaîne)
      //
      // Paramètres :
      //	sChemin_fichier_P (chaîne ANSI) : <indiquez ici le rôle de FileName_p>
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE Import_Blocages(local sChemin_fichier_P est une chaine)
      
      
      nIDfichierXLS est un xlsDocument
      nNumFeuille_Critere_Acceptation est un entier
      sNom_Onglet_Blocage est une chaine = "Blocages"
      
      nNbLignes est un entier // Nombre de ligne total de la feuille
      nLigne est un entier	// Numéro de ligne de la feuille
      sCodeTache est une chaîne
      oTache est un ClTache dynamique
      
      //------------------------------------------Numero--Des--Colonnes---------------------------------------------------
      nCol_codeTache est un entier = 1
      nCol_IndoBlocage est un entier = 2
      
      
      //------------------------------------------------------------------------------------------------------------------
      
      //Faire une requete pour aller chercher tous les composants types et remplir le tableau avec
      
      
      
      //------------------------------------------------------------------------------------------------------------------
      
      SI sChemin_fichier_P <>"" ALORS
      	nIDfichierXLS = xlsOuvre(sChemin_fichier_P,xlsEcriture)
      	SI ErreurDétectée = Faux ALORS
      		
      		// Recherche de la feuille des critères d'acceptation
      		
      		POUR nNumFeuille_Critere_Acceptation= 1 _A_ nIDfichierXLS..NombreFeuille
      			xlsFeuilleEnCours(nIDfichierXLS, nNumFeuille_Critere_Acceptation)
      			SI nIDfichierXLS..NomFeuille = sNom_Onglet_Blocage ALORS
      				nNumFeuille_Critere_Acceptation = nNumFeuille_Critere_Acceptation
      				SORTIR		// Une feuille à été trouvée	
      			FIN	
      		FIN		
      		
      		// Traitement de la feuille des critères d'acceptation
      		SI nNumFeuille_Critere_Acceptation <> 0 et nNumFeuille_Critere_Acceptation <= nIDfichierXLS..NombreFeuille ALORS		
      			
      			// on Sélectionne la feuille qui correspond aux critères d'acceptation
      			xlsFeuilleEnCours(nIDfichierXLS, nNumFeuille_Critere_Acceptation)
      			
      			// Parcours de la feuilles Excel des critères sur nNbLignes
      			nNbLignes = xlsNbLigne(nIDfichierXLS, Vrai)
      			
      			// on lit pas la première ligne
      			POUR nLigne = 2 _À_ nNbLignes
      				
      				sCodeTache  = xlsDonnée(nIDfichierXLS,nLigne,nCol_codeTache)
      				SI sCodeTache <> "" ALORS
      					HLitRecherche(Scr_Tache,CodeTache,sCodeTache,hIdentique+hLimiteParcours)
      					SI HTrouve(Scr_Tache) ALORS
      						oTache <- ClTache.GetObj(Scr_Tache.IDScr_Tache)
      						SI PAS oTache.p_nStatut DANS(ClTache.cstStatut_Annulee, ClTache.cstStatut_realise) ALORS
      							oTache.p_nStatut		= ClTache.cstStatut_Suspendu
      							oTache.p_sCMTR_Blocage	= xlsDonnée(nIDfichierXLS,nLigne,nCol_IndoBlocage)
      							oTache.ZF_Enregistre()
      						SINON
      							Trace("Tache en suspend, mais dans un mauvais statut clôturé : [%oTache.p_sCodeTache%] (Ligne : [%nLigne%] [%sChemin_fichier_P%])")
      						FIN
      					sinon
      						Trace("Tache non trouvée : [%sCodeTache%] (Ligne : [%nLigne%] [%sChemin_fichier_P%])")
      					FIN
      				FIN
      			FIN
      			
      			
      			
      		FIN
      		xlsFerme(nIDfichierXLS)
      	SINON
      		Info(ErreurInfo())
      	FIN
      fin
      
      
      
     type : 458752
   -
     name : Import_Epics
     internal_properties : BwAAAAcAAADYuPST6CP+T+K2ZU37o7g3n8Kew/nVjSZD5G6OyRuT2Yo67DV/AZmlWI7RE7NW48hb
     procedure_id : 1310453736740040819
     type_code : 14
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //Import_Epics (<nIDScr_Projet> est entier, <Chemin_fichier> est chaîne)
      //
      // Paramètres :
      //	nIDScr_Projet (entier) : <indiquez ici le rôle de nIDScr_Projet_p>
      //	Chemin_fichier (chaîne ANSI) : <indiquez ici le rôle de FileName_p>
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE Import_Epics(oPrj_P est un ClProjet, local Chemin_fichier est une chaine)
      
      nIDfichierXLS est un xlsDocument
      nNumFeuille_Critere_Acceptation est un entier
      sNom_Onglet est une chaine = "Groupements"
      
      nNbLignes est un entier // Nombre de ligne total de la feuille
      nLigne est un entier	// Numéro de ligne de la feuille
      
      oEpic est un ClEpic dynamique
      
      //------------------------------------------Numero--Des--Colonnes---------------------------------------------------
      nCol_Ordre est un entier = 1
      nCol_Nom est un entier = 2
      //------------------------------------------------------------------------------------------------------------------
      
      nIDfichierXLS = xlsOuvre(Chemin_fichier,xlsEcriture)
      SI ErreurDétectée = Faux ALORS
      	
      	// Recherche de la feuille des critères d'acceptation
      	
      	POUR i= 1 _A_ nIDfichierXLS..NombreFeuille
      		xlsFeuilleEnCours(nIDfichierXLS, i)
      		SI nIDfichierXLS..NomFeuille = sNom_Onglet ALORS
      			nNumFeuille_Critere_Acceptation = i
      			SORTIR		// Une feuille à été trouvé				
      		FIN	
      	FIN		
      	
      	// Traitement de la feuille des critères d'acceptation
      	SI nNumFeuille_Critere_Acceptation <> 0 ALORS
      		sNom est une chaîne
      		// on Sélectionne la feuille qui correspond aux critères d'acceptation
      		xlsFeuilleEnCours(nIDfichierXLS, nNumFeuille_Critere_Acceptation)
      		
      		// Parcours de la feuilles Excel des critères sur nNbLignes
      		nNbLignes = xlsNbLigne(nIDfichierXLS, Vrai)
      		
      		// on lit pas la première ligne
      		POUR nLigne = 2 _À_ nNbLignes
      			sNom = xlsDonnée(nIDfichierXLS,nLigne,nCol_Nom)
      			si pas sNom dans ("", "-") alors
      				oEpic			= allouer un ClEpic()
      				oEpic.p_oProjet	= oPrj_P
      				oEpic.p_nOrdre	= xlsDonnée(nIDfichierXLS,nLigne,nCol_Ordre)
      				oEpic.p_sNom	= sNom
      				oEpic.ZF_Enregistre()
      			FIN
      		FIN
      	FIN
      	xlsFerme(nIDfichierXLS)
      SINON
      	Info(ErreurInfo())
      FIN
      
      
      
     type : 458752
   -
     name : nGetIdUsrDeNom
     internal_properties : BwAAAAcAAABKymYtaqUAzXQEVw+9bf750YRo9fPXjzVU9nCMz+VJE0R8rvO9w2fz6hBTkTHIcVrN
     procedure_id : 1331802773614339003
     type_code : 14
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] nGetIdUsrDeNom (<sNom_P> est chaîne)
      //
      // Paramètres :
      //	sNom_P (chaîne ANSI) : <indiquez ici le rôle de nNNumAD_P>
      // Valeur de retour :
      // 	Type indéterminé : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      FONCTION GLOBAL nGetIdUsrDeNom(LOCAL sNom_P est une chaîne)
      
      HLitRecherche(Scr_Usr,Scr_Usr.Nom..nom,sNom_P,hIdentique+hLimiteParcours)
      si pas HTrouve(Scr_Usr) ALORS
      	ExceptionDéclenche(1,"Nom utilisateur ""[%sNom_P%]"" introuvable.")
      FIN
      RENVOYER Scr_Usr.IDScr_Usr
     type : 458752
   -
     name : ImportPlanTest
     procedure_id : 1350672961535932897
     type_code : 14
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //ImportPlanTest (<sFic_P> est chaîne)
      //
      // Paramètres :
      //	sFic_P (chaîne ANSI) : <indiquez ici le rôle de sFic_P>
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      procédure ImportPlanTest(sFic_P est une chaîne, nNbOnglet_P est un entier, oProjet_P est un ClProjet)
      
      
      str_etat est une Structure
      	sNomTache			est une chaîne
      	bPresValide			est un booléen
      	bPresAFaire			est un booléen
      	bPresNonValide		est un booléen
      	sListeCmtsNonValide	est une chaîne
      	sEtat				est une chaîne
      	sAuteur				est une chaîne
      	nNbreTests			est un entier
      FIN
      
      IdFichierXLS		est un xlsDocument
      Xlsnbligne_			est un entier
      nId					est un entier
      sFichier			est une chaîne
      sCodeTache			est une chaîne
      nNumOnglet			est un entier
      
      //Ligne et Colonne des fichiers
      nCol_CodeTache		est un entier	= 5
      nCol_Etat			est un entier	= 8
      nCol_DteRetour		est un entier	= 0
      nCol_Retour			est un entier	= 9
      
      aTacheNonValidee	est un tableau associatif de str_etat
      stEtat_Tmp			est un str_etat
      
      sEtat_EnCours		est une chaîne	= "En cours de dev"
      sEtat_EnAttente		est une chaîne	= "En attente"
      sEtat_AValider		est une chaîne	= "A valider"
      sEtat_EstValide		est une chaîne	= "Validé"
      sEtat_Tech			est une chaîne	= "Technique - A ne pas valider"
      sEtat_ARevoir		est une chaîne	= "A revoir"
      sEtat_ASupp			est une chaîne	= "A supprimer"
      oTache				est un ClTache dynamique
      sRes				est une chaîne	= "Traité par" + tab + "Code tache" + tab + "Tache" + tab + "Statut dev" + tab + "Action" + tab + "Retour de test"
      
      sFichier = Dupplication_Fichier_Avant_Import(sFic_P)
      
      
      SI sFichier <> "" ALORS
      	
      	IdFichierXLS = xlsOuvre(sFichier,xlsEcriture)
      	
      	SI ErreurDétectée = Faux ALORS
      		
      		POUR nNumOnglet = 1 _À_ nNbOnglet_P
      			Trace("Onglet : [%nNumOnglet%]")
      			xlsFeuilleEnCours(IdFichierXLS, nNumOnglet)
      			
      			Xlsnbligne_ = xlsNbLigne(IdFichierXLS,Vrai)
      			
      			POUR nId = 2 _À_ Xlsnbligne_
      				sCodeTache = SansEspace(xlsDonnée(IdFichierXLS,nId,nCol_CodeTache))
      				
      				//si sCodeTache = "BLM001i" alors stop
      				
      				SI sCodeTache <> "" ALORS
      					oTache <- ClTache.GetObj_de_code(sCodeTache)
      					SI oTache = Null ALORS
      						Trace("Tache non trouvée : [%sCodeTache%] (ligne [%nId%])")
      					SINON
      						
      						SI aTacheNonValidee[sCodeTache]..Vide ALORS
      							aTacheNonValidee[sCodeTache] = allouer un str_etat
      							
      							aTacheNonValidee[sCodeTache].sNomTache		= oTache.p_sDescription
      							
      							SI oTache.p_oUsr_Dev = Null ALORS
      								aTacheNonValidee[sCodeTache].sAuteur	= "Non attribué"
      							SINON
      								aTacheNonValidee[sCodeTache].sAuteur	= oTache.p_oUsr_Dev.p_sNom
      							FIN
      							
      							aTacheNonValidee[sCodeTache].sEtat = oTache.sLibDeStatut()
      							SI oTache.bEstValidee() ALORS
      								aTacheNonValidee[sCodeTache].sEtat		+= " (validé)"
      							FIN
      							
      						FIN
      						
      						stEtat_Tmp = aTacheNonValidee[sCodeTache]
      						
      						SELON SansEspace(xlsDonnée(IdFichierXLS,nId,nCol_Etat))
      							CAS sEtat_EnCours
      								stEtat_Tmp.bPresAFaire = Vrai
      								
      							CAS sEtat_EnAttente
      								stEtat_Tmp.bPresAFaire = Vrai
      								
      							CAS sEtat_AValider
      								//On compte la tache
      								stEtat_Tmp.nNbreTests++
      								
      							CAS sEtat_EstValide
      								stEtat_Tmp.bPresValide = Vrai
      								
      							CAS sEtat_ARevoir
      								stEtat_Tmp.bPresNonValide = Vrai
      								stEtat_Tmp.sListeCmtsNonValide += [RC] + xlsDonnée(IdFichierXLS,nId,nCol_Retour)
      
      								//On compte la tache
      								stEtat_Tmp.nNbreTests++
      								
      							CAS sEtat_ASupp
      								//On compte la tache, pour la supprimer
      								stEtat_Tmp.nNbreTests++
      
      							cas sEtat_Tech
      								
      							AUTRE CAS
      								Trace("Statut non géré : ""[%xlsDonnée(IdFichierXLS,nId,nCol_Etat)%]"" (ligne [%nId%]).")
      						FIN
      						
      						
      						aTacheNonValidee[sCodeTache] = stEtat_Tmp
      						
      					FIN
      				FIN
      			FIN
      		FIN
      		Trace("---------------------")
      		TableauTrie(aTacheNonValidee,ttClé)
      		sAction est une chaîne
      		
      		POUR TOUT stEtat_Tmp, sCodeTache de aTacheNonValidee
      //			Trace("---------------------")
      //			Trace(sCodeTache)
      //			Trace("A faire : [%stEtat_Tmp.bPresAFaire%]")
      //			Trace("Est validé : [%stEtat_Tmp.bPresValide%]")
      //			Trace("Non validé  : [%stEtat_Tmp.bPresNonValide%]")
      //			Trace("Cmtr : [%stEtat_Tmp.sListeCmtsNonValide%]")
      			
      			
      			oTache <- ClTache.GetObj_de_code(sCodeTache)
      			
      			sAction = ""
      			SI stEtat_Tmp.bPresValide ET PAS stEtat_Tmp.bPresAFaire ALORS
      				si pas oTache.p_bEstRealise ALORS
      					sAction = "A passer en ""valider"" dans trello (tous les tests sont ok)"
      				FIN
      			FIN
      			
      			SI stEtat_Tmp.bPresAFaire ALORS
      				SI oTache.p_bEstRealise ALORS
      					sAction = "Si tout est réalisé : passer tous les tests en ""A valider""."
      				FIN
      			FIN
      			
      			SI stEtat_Tmp.bPresNonValide ALORS
      				sAction = "A Corriger	" + Replace(stEtat_Tmp.sListeCmtsNonValide, [RC, caract(10), caract(13)], " / ") 
      			FIN
      			
      			si sAction = "" alors
      				si stEtat_Tmp.nNbreTests > 0 ALORS
      					sAction = stEtat_Tmp.nNbreTests + " tests à faire valider"
      				sinon
      					si oTache.p_bEstRealise et pas oTache.bEstValidee() ALORS
      						sAction = "Tache validable"
      					FIN
      				FIN
      				SI oTache.p_bAnnule ALORS
      					sAction = stEtat_Tmp.nNbreTests + " tests à supprimer"
      				FIN
      			FIN
      			
      			LigLog("[%stEtat_Tmp.sAuteur%]	[%sCodeTache%]	[%stEtat_Tmp.sNomTache%]	[%stEtat_Tmp.sEtat%]	[%sAction%]")
      		FIN
      		
      		
      		
      		oEpic_tmp est un ClEpic dynamique
      		oUS_tmp est un ClUserStory dynamique
      		
      		pour tout element oEpic_tmp de oProjet_P.aoEpics().aItems()
      			LigLog(oEpic_tmp.p_sNom + " :")
      			
      			pour tout element oUS_tmp de oEpic_tmp.aoUS().aItems()
      				pour tout element oTache de oUS_tmp.aoListeTaches().aItems()
      					si oTache.p_bEstRealise et pas oTache.bEstValidee() et aTacheNonValidee[oTache.p_sCodeTache]..Vide ALORS
      						sAction = "Rappel US : " + Replace(oUS_tmp.sNommination_US(), [RC, Caract(10), Caract(13)], " / ")
      						LigLog("[%oTache.p_oUsr_Dev.p_sNom%]	[%oTache.p_sCodeTache%]	[%oTache.p_sDescription%]	Non présent dans le plan de test	[%sAction%]")
      					FIN
      				FIN
      			FIN
      		FIN
      		
      		
      		VersPressePapier(sRes)
      		xlsFerme(IdFichierXLS)
      	FIN
      FIN
      
      	Procédure interne LigLog(sLigne_P est une chaîne)
      		Trace(sLigne_P)
      		sRes += [RC] + sLigne_P
      	FIN
     type : 458752
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : BwAAAAcAAADC0CS8G15q6D6u9NEbSzWCzsCJ0gDMewDW0j2Yh5VkV+eIhtJcLbtn3e/39y4+eowpHswixWhdMhQ6INYlizFgMZQCtYz7wooaXKAQIXOu8q8ZPYuMY8KtmF7B32+rDkXZ1zT0F49GpF4=
  original_name : Modele1
resources :
 string_res :
  identifier : 0x1ca5c59d001c0f64
  internal_properties : BwAAAAcAAACFrAzp/7Q0S84R+ikNeRgtAIFcvdVNEy0l/bgnbB29kPtJH0AWHFq9qw==
  strings :
   -
     text : {}
     index : 0
custom_note :
 internal_properties : BwAAAAcAAAC68/W0/adbG0nFCRhrE42B5HRnbDzVHaz86sSQyxlBk7I=
associated_test :
 name : TEST_Moulinette1.wxt
rad :
 internal_properties : BwAAAAcAAABoAN7PLpwJW3EiA7WVZdCA5EwrCA1rvutcDHooMWKe
