#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : ClDbProcess_Metier
 major_version : 27
 minor_version : 0
 type : 4
 description : ""
 subtype : 0
class :
 identifier : 0x143d679b01fa4e06
 internal_properties : BwAAAAcAAAB2/vstTMCJbS/hlxjFxirSqKvCUuv8YxgpWyl7S3iA
 code_elements :
  type_code : 10
  p_codes :
   -
     code : |1+
      ClDbProcess_Metier est une Classe
      	hérite de ClZF_ObjDB
      PUBLIC
      	m_sLibelle		est une chaîne	<MAPPING=Libelle>
      	m_sCMTR			est une chaîne	<MAPPING=CMTR>
      	
      	m_bModeEdition	est un booléen
      	m_oAxes			est un ClcolProcess_Metier_Axe dynamique
      prive
      	m_oProjet		est un ClDbProjet dynamique
      	m_sNomFen		est une chaîne
      FIN
      
     type : 131072
  procedures :
   -
     name : Constructeur
     procedure_id : 1458435769788878342
     type_code : 27
     code : |1+
      PROCEDURE Constructeur(nID_P est un entier = 0)
      
      //Déclaration du constructeur de la classe d'accès aux données.
      Ancêtre.Constructeur(Scr_Process_Metier..Nom, Scr_Process_Metier.IDScr_Process_Metier..Nom, nID_P)
      
      
      
      //Mémorisation du nom de la fenêtre conteneur
      //:m_sNomFen = sNomFen_P
      //
      //Dimension(:m_aoAxes, 0)
      
      
      //Chargement des données dans l'instance.
      //:ZF_Charge()
      
     type : 589824
   -
     name : Destructeur
     procedure_id : 1458435769788943878
     type_code : 28
     code : |1+
      
      
      PROCEDURE Destructeur()
      oInter est un ClDbProcess_Metier_Intervenant dynamique
      pour tout element oInter de :aoIntervenants().aItems()
      	liberer oInter
      FIN
      
      oAxe est un ClDbProcess_Metier_Axe dynamique
      POUR TOUT ELEMENT oAxe DE :m_oAxes.aItems()
      	libérer oAxe
      FIN
      
     type : 655360
   -
     name : Affiche
     procedure_id : 1458435769789009414
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //Affiche ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      
      //	sConteneur_P (chaîne ANSI - valeur par défaut="") : <indiquez ici le rôle de sConteneur_P>
      PROCEDURE Affiche()
      
      
      oAxe est un champs
      oInterTmp est un ClDbProcess_Metier_Intervenant dynamique
      
      //Réinitialisation de l'état de la fenetre
      {:m_sNomFen, indFenêtre}..AffichageActif	= Faux
      {:m_sNomFen, indFenêtre}..LargeurInitiale	= {:m_sNomFen, indFenêtre}..Largeur
      {:m_sNomFen, indFenêtre}..HauteurInitiale	= {:m_sNomFen, indFenêtre}..Hauteur
      :Efface()
      
      
      //Représentation des axes :
      oAxeTmp est un ClDbProcess_Metier_Axe dynamique
      nPosY est un entier
      POUR TOUT oAxeTmp DE :m_oAxes.aItems()
      	
      	nPosY = (oAxeTmp.Ordre - 1) * (ClDbProcess_Metier_Intervenant.cstHauterurBox + ClDbProcess_Metier_Intervenant.cstMargeHBox * 2) + ClDbProcess_Metier_Intervenant.cstMargeVBox
      	
      	oAxe <- ChampCrée(:sCheminChamps("btnAxe" + oAxeTmp.Ordre), ...
      		typLibellé, ...
      		ClDbProcess_Metier_Intervenant.cstMargeHBox, ...
      		nPosY, ...
      		100, ...
      		ClDbProcess_Metier_Intervenant.cstHauterurBox)
      	
      	oAxe..CadrageVertical		= chCentre
      	oAxe..CadrageHorizontal		= cvMilieu
      	oAxe..CouleurFond			= COL_Scrum.gnCouleur_Gris_TFonce
      	oAxe..Couleur				= Blanc
      	oAxe..Libellé				= oAxeTmp.Libelle
      FIN
      
      
      //Dessin des boites
      pour tout element oInterTmp DE :aoIntervenants().aItems()
      	oInterTmp.GenBox()
      FIN
      
      
      
      //Jonction entre les boites
      STR_LienPrec est une structure
      	sNomChamps est une chaîne
      	bCondition est un booléen
      fin
      
      sChampsPrec est une chaîne
      oFil est un champ
      aBox est un tableau de STR_LienPrec
      stBoxTmp est un STR_LienPrec
      oTmpCondition est un ClDbProcess_Metier_Intervenant_Condition dynamique
      bPrecEstCondition est un booléen
      
      POUR TOUT element oInterTmp DE :aoIntervenants().aItems()
      	
      	si Dimension(aBox) < oInterTmp.OrdreAbsolu ALORS
      		Dimension(aBox, oInterTmp.OrdreAbsolu)
      	FIN
      	
      	VariableRAZ(stBoxTmp)
      	stBoxTmp.sNomChamps				= oInterTmp.m_sNomBox
      	stBoxTmp.bCondition				= bPrecEstCondition
      	aBox[oInterTmp.OrdreAbsolu]		= stBoxTmp
      	
      	//Est on sur un intervenant de type 'condition' ?
      	si oInterTmp..classe = ClDbProcess_Metier_Intervenant_Condition ALORS
      		//Oui : On dessine ses liens
      		oTmpCondition <- oInterTmp
      		oTmpCondition.GenLiens()
      		
      		bPrecEstCondition = vrai
      	sinon
      		bPrecEstCondition = faux
      	FIN
      fin
      
      
      pour tout stBoxTmp de aBox
      	
      	si sChampsPrec <> "" ALORS
      		//Dessin du fil, entre l'intervenant précédent et celui en cours.
      		oFil <- ChampCrée(:sCheminChamps("fil_" + sChampsPrec + "_" + DonneIdentifiant()), typFil)
      		oFil..ChampDépart	= :sCheminChamps(sChampsPrec)
      		oFil..ChampArrivée	= :sCheminChamps(stBoxTmp.sNomChamps)
      		
      		si stBoxTmp.bCondition ALORS
      			oFil..Couleur	= COL_Scrum.gnCouleur_VertVif
      		FIN
      	FIN
      	
      	
      	sChampsPrec = stBoxTmp.sNomChamps
      FIN
      
      
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //Reparamétrage de la fenetre, pour gérer les ascendeurs.
      nZoneAffiche_Largeur est un entier
      nZoneAffiche_hauteur est un entier
      nNbBox est un entier
      nNbBox = Dimension(:aoIntervenants())
      
      //Calcul de la largeur des la zone de dessin.
      nZoneAffiche_Largeur = (nNbBox + 1) * (ClDbProcess_Metier_Intervenant.cstLargeurBox + 2 * ClDbProcess_Metier_Intervenant.cstMargeVBox) + ClDbProcess_Metier_Intervenant.cstMargeVBox
      {:m_sNomFen, indFenêtre}..LargeurInitiale	= Max({:m_sNomFen, indFenêtre}..Largeur, nZoneAffiche_Largeur)
      
      //Calcul de la hauteur des la zone de dessin.
      nZoneAffiche_hauteur = (Dimension(:m_oAxes.aItems()) + 1) * (ClDbProcess_Metier_Intervenant.cstHauterurBox + ClDbProcess_Metier_Intervenant.cstMargeVBox)
      {:m_sNomFen, indFenêtre}..HauteurInitiale	= Max({:m_sNomFen, indFenêtre}..Hauteur, nZoneAffiche_hauteur)
      
      
      {:m_sNomFen, indFenêtre}..AffichageActif		= vrai
      
     type : 458752
   -
     name : aoIntervenants
     procedure_id : 1458435769789074950
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] aoIntervenants ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	ClColProcess_Metier_Intervenant : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      FONCTION aoIntervenants():ClColProcess_Metier_Intervenant
      
      aoRetour est un ClColProcess_Metier_Intervenant
      oAxeTmp est un ClDbProcess_Metier_Axe dynamique
      oInterTmp est un ClDbProcess_Metier_Intervenant dynamique
      
      POUR TOUT element oAxeTmp DE :m_oAxes.aItems()
      	POUR TOUT ELEMENT oInterTmp DE oAxeTmp.m_oIntervenants.aItems()
      		aoRetour.ZF_addItem(oInterTmp)
      		//AjouteRéférence(aoRetour,oInterTmp)
      	FIN
      FIN
      aoRetour.ZF_Tri("OrdreAbsolu")
      
      
      renvoyer aoRetour
     type : 458752
   -
     name : Efface
     procedure_id : 1458435769789140486
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //Efface ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      
      PROCEDURE PRIVÉE Efface()
      
      sChamps est une chaîne
      
      POUR TOUT element oAxeTmp DE :m_oAxes.aItems()
      	sChamps = :sCheminChamps("btnAxe" + oAxeTmp.Ordre)
      	
      	SI ChampExiste(sChamps) ALORS
      		ChampSupprime(sChamps)
      	FIN
      FIN
      
      oInterTmp est un objet dynamique ClDbProcess_Metier_Intervenant
      POUR TOUT element oInterTmp DE :aoIntervenants().aItems()
      	
      	//Le champs est il déclaré ?
      	si oInterTmp.m_sNomBox <> "" ALORS
      		//Oui : récupération du nom complet.
      		sChamps = :sCheminChamps(oInterTmp.m_sNomBox)
      				
      		//Si le champs existe dans l'interface, on le supprime.
      		SuppChampsSiExiste(sChamps)
      		SuppChampsSiExiste(sChamps + ClDbProcess_Metier_Intervenant.cstSuffix_prev)
      		SuppChampsSiExiste(sChamps + ClDbProcess_Metier_Intervenant.cstSuffix_suiv)
      		SuppChampsSiExiste(sChamps + ClDbProcess_Metier_Intervenant.cstSuffix_Up)
      		SuppChampsSiExiste(sChamps + ClDbProcess_Metier_Intervenant.cstSuffix_Down)
      	FIN
      FIN
      
      	Procédure interne SuppChampsSiExiste(sChamps_p est une chaîne)
      		SI ChampExiste(sChamps_p) ALORS
      			ChampSupprime(sChamps_p)
      		FIN
      	fin
     type : 458752
   -
     name : sCheminChamps
     procedure_id : 1458435769789206022
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //sCheminChamps ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      
      //	sChamps_P (chaîne ANSI) : <indiquez ici le rôle de sChamps_P>
      FONCTION sCheminChamps(sChamps_P est une chaîne)
      
      //Retourne le chemin complet du champ (en prenant en compte le conteneur)
      SI :m_sNomFen = "" ALORS
      	RENVOYER sChamps_P
      SINON
      	RENVOYER :m_sNomFen + "." + sChamps_P
      FIN
     type : 458752
   -
     name : _nPosInterLibre
     procedure_id : 1458435769789337094
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //_nPosInterLibre ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      FONCTION _nPosInterLibre()
      
      nRetour est un entier
      
      oAxe est un ClDbProcess_Metier_Axe dynamique
      pour tout element oAxe de :m_oAxes.aItems()
      	nRetour += oAxe.m_oIntervenants.ZF_nTaille()
      FIN
      renvoyer nRetour
     type : 458752
   -
     name : oInterDePosition
     procedure_id : 1458435769789402630
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //oInterDePosition ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      //	nPosition_P (entier) : <indiquez ici le rôle de nPosition_P>
      FONCTION oInterDePosition(nPosition_P est un entier)
      
      oAxe est un ClDbProcess_Metier_Axe dynamique
      oInter est un ClDbProcess_Metier_Intervenant dynamique
      oRetour est un ClDbProcess_Metier_Intervenant dynamique
      
      pour tout element oAxe de :m_oAxes.aItems()
      	pour tout element oInter de oAxe.m_oIntervenants.aItems()
      		//Est on sur la position demandée ?
      		si oInter.OrdreAbsolu = nPosition_P ALORS
      			oRetour <- oInter
      		FIN
      	FIN
      FIN
      
      renvoyer oRetour
     type : 458752
   -
     name : nNbreInter
     procedure_id : 1458435769789468166
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //nNbreInter ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      FONCTION nNbreInter()
      
      nNbre est un entier
      oAxe est un ClDbProcess_Metier_Axe dynamique
      
      pour tout element oAxe de :m_oAxes.aItems()
      	nNbre += oAxe.m_oIntervenants.ZF_nTaille()
      FIN
      
      renvoyer nNbre
     type : 458752
   -
     name : pre_enregistre
     procedure_id : 1458435769789533702
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //pre_enregistre ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE VIRTUELLE pre_enregistre()
      
      Scr_Process_Metier.IDScr_Projet	= :m_oProjet.ZF_Get_IdUnique()
     type : 458752
   -
     name : Init_ObjBD
     procedure_id : 1458435769789599238
     type_code : 12
     code : |1+
      // Redéfinition de la méthode ClObjDB.ZF_Init_ObjBD
      PROCÉDURE  Init_ObjBD()
      
      
      oAxeTmp est un ClDbProcess_Metier_Axe dynamique
      
      SI pas :ZF_bModeAjout() ALORS
      	HLitRecherche(Scr_Process_Metier_Axe,IDScr_Process_Metier,:ZF_Get_IdUnique(),hIdentique+hLimiteParcours)
      	TANTQUE HTrouve(Scr_Process_Metier_Axe)
      		oAxeTmp <- ClDbProcess_Metier_Axe.GetObj(Scr_Process_Metier_Axe.IDScr_Process_Metier_Axe)
      		oAxeTmp.p_oProcessParent = objet
      		HLitSuivant(Scr_Process_Metier_Axe,IDScr_Process_Metier)
      	FIN
      	
      	:m_oProjet <- ClDbProjet.GetObj(Scr_Process_Metier.IDScr_Projet)
      //	:m_oProjet <- allouer un ClDbProjet(Scr_Process_Metier.IDScr_Projet)
      FIN
      
     type : 458752
   -
     name : GetObj
     procedure_id : 1458509548843724170
     type_code : 12
     code : |1-
      PROCÉDURE GLOBALE GetObj(LOCAL nIdUnique_P est un entier)<métier>:ClDbProcess_Metier
      
      sClasse est une chaîne = ClDbProcess_Metier
      RENVOYER ClZF_ObjDB.ZF_GetObj(sClasse, nIdUnique_P)
     type : 458752
  properties :
   -
     name : p_oProjet
     identifier : 0x143d679b01fb4e06
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_oProjet() : ClDbProjet
         
         renvoyer :m_oProjet
        type : 1966080
      -
        code : |1-
         procédure publique p_oProjet(oValeur est ClDbProjet)
         
         :m_oProjet <- oValeur
        type : 2031616
     template_refs : []
   -
     name : p_sNomFen
     identifier : 0x143d679b01fc4e06
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_sNomFen() : chaîne
         
         renvoyer :m_sNomFen
        type : 1966080
      -
        code : |1-
         procédure publique p_sNomFen(sValeur est une chaîne)
         
         :m_sNomFen=sValeur
        type : 2031616
     template_refs : []
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : BwAAAAcAAAA6ih3UbgNXHwTtiPSFUEj+2fi/m7v4QV2rqidAupM=
  original_name : ClProcess_Metier
resources :
 string_res :
  identifier : 0x1e2d8d7b013e4742
  internal_properties : BwAAAAcAAAAnMYFQ1bL/vz9ehh7L22SNNSlIzGTOI8h5F/WtgDNP
custom_note :
 internal_properties : BwAAAAcAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
