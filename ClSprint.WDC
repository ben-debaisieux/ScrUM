#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : ClSprint
 major_version : 27
 minor_version : 0
 type : 4
 description : ""
 subtype : 0
class :
 identifier : 0x1e8df41f3f4be8f8
 internal_properties : BwAAAAcAAAB2/vstTMCJbS/hlxjFxirSqKvCUuv8YxgpWyl7S3iA
 code_elements :
  internal_properties : BwAAAAcAAACmcEcPUOl8P88f4DqAteA6m/Mt111GGOClrNjaLJ9vO63bNEtdrqYoCCnjX1eG34p8AOi72Du5JSuppQ==
  type_code : 10
  p_codes :
   -
     code : |1-
      ClSprint est une Classe
      		Hérite de ClZF_ObjDB
      
      	m_sNoteDebutDeSprint	est une chaîne							<MAPPING=NoteDebutDeSprint>
      prive
      	m_bTop_Termine			est un booléen							<MAPPING=Top_Termine>
      	m_nVelociteMoyenneRes	est un entier sur 2 octets				<MAPPING=VelociteMoyenneRes>
      	m_nNbreSemaines			est un entier sans signe sur 1 octet	<MAPPING=NbreSemaines>
      	m_dDateDebut			est une Date							<MAPPING=DateDebut>
      	m_dDateFin				est une date							<MAPPING=DateFin>
      	m_nNbPointsRealise		est un entier sur 2 octets				<MAPPING=NbPointsRealise>
      	m_nNumSprint			est un entier
      	
      global
      	mg_nNumSprint_max		est un entier
      FIN
       
     type : 131072
  procedures :
   -
     name : Constructeur
     procedure_id : 2201684207897274616
     type_code : 27
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //Constructeur ( [<nID_P> est entier])
      //
      // Paramètres :
      //	nID_P (entier - valeur par défaut=0) : <indiquez ici le rôle de nID_P>
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      
      
      
      PROCEDURE Constructeur(local nID_P est un entier = 0)
      
      ancetre.constructeur(Scr_Sprint..Nom, Scr_Sprint.Num_Sprint..nom,nID_P)
      
      //:ZF_Charge()
     type : 589824
   -
     name : Destructeur
     procedure_id : 2201684207897340152
     type_code : 28
     code : |1-
      
      
      PROCEDURE Destructeur()
     type : 655360
   -
     name : Calcul_Velocite_Moyenne_old
     procedure_id : 2201687502152376146
     type_code : 12
     code : |1+
      // Résumé : Calcule la velocité
      // Syntaxe :
      //Calcul_Velocite_Moyenne_old ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE GLOBAL Calcul_Velocite_Moyenne_old():Vide
      
      nNbrSprint est un entier = 1 //compte le nombre de sprint pour le calcul de la moyenne
      nPointsSprint est un entier = 0 //compte le nb de points accumulé de chaque sprint
      nVelocitéMoyenne est un entier
      nNumSprint est un entier
      nNumSprintActuel est un entier = goApp.m_nNumeroDuSprintActuel
      oSprint est un ClSprint dynamique
      
      sdToutLesSprint est une source de données
      sReq est une chaîne
      
      sReq = [
      	
      	SELECT
      		Scr_Sprint.Num_Sprint,
      		Scr_Sprint.NbPointsRealise
      	
      	FROM Scr_Sprint
      	
      	WHERE Scr_Sprint.Top_Termine = 1
      	
      	ORDER BY Scr_Sprint.Num_Sprint
      	
      ]
      
      //Recherche de tout les sprint avec le nb de point réalisé
      goApp.Rsql(sdToutLesSprint, sReq)
      HLitPremier(sdToutLesSprint,hSansRafraîchir)
      tantque pas HEnDehors(sdToutLesSprint)
      	
      	nNumSprint = sdToutLesSprint.Num_Sprint
      	//si le Sprint n'est pas le sprint actuel alors on ajoute au total et on divise par le nombre de sprint
      	SI nNumSprint <> nNumSprintActuel alors
      		nPointsSprint += sdToutLesSprint.NbPointsRealise
      		nVelocitéMoyenne			= nPointsSprint / nNbrSprint //vélocité moyenne = Points du Sprint / nbrDeSprint
      		goApp.m_nVelociteMoyenne	= nVelocitéMoyenne
      	Sinon //Si c'est le sprint actuel on lui donne la vélocité du dernier sprint passé 
      		nVelocitéMoyenne			= goapp.m_nVelociteMoyenne 
      	fin
      	
      	
      	//puis on modifie la vélocité moyenne dans la base de données
      	oSprint <- ClSprint.GetObj(nNumSprint)
      	si oSprint.m_nVelociteMoyenneRes <> nVelocitéMoyenne alors
      		oSprint.m_nVelociteMoyenneRes = nVelocitéMoyenne
      		oSprint.ZF_Enregistre()
      	fin
      	
      	nNbrSprint++ 
      	HLitSuivant(sdToutLesSprint)
      FIN
      
      HAnnuleDéclaration(sdToutLesSprint)
      
     type : 458752
   -
     name : pre_enregistre
     procedure_id : 2201733491911491716
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //pre_enregistre ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      
      PROCEDURE VIRTUELLE pre_enregistre():Vide
      
      
      //Pour les Sprint historique : On verifie que la date du sprint est inferieure à la date actuelle pour determiner si le sprint est términé ou pas
      SI :m_dDateFin < DateDuJour() ALORS
      	:m_bTop_Termine = Vrai
      FIN
      
      si :ZF_bModeAjout() ALORS
      	//Réinitialisation du sprint max mémorisé.
      	::mg_nNumSprint_max = 0
      FIN
      
      si :m_nNumSprint <> 0 ALORS
      	:p_ZF_nIdUnique = :m_nNumSprint
      	Scr_Sprint.Num_Sprint = :m_nNumSprint
      FIN
     type : 458752
   -
     name : sSprint_Date
     procedure_id : 2201733960063036308
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] sSprint_Date ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	chaîne ANSI : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      //	nNumSprint (entier) : <indiquez ici le rôle de nNumSprint>
      FONCTION sSprint_Date():chaîne 
      
      renvoyer DateVersChaîne(:m_dDateDebut, "JJ/MM") + " - " + DateVersChaîne(:m_dDateFin, "JJ/MM/AA")
     type : 458752
   -
     name : Sprint_Num_Actuel
     procedure_id : 2201734612900380129
     type_code : 12
     code : |1+
      // Résumé : Renvoie le numéro du sprint actuel / Renvoie le dernier sprint réalisé si aucun sprint trouvé
      // Syntaxe :
      //[ <Résultat> = ] Sprint_Num_Actuel ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	entier : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      FONCTION GLOBAL Sprint_Num_Actuel():entier
      
      nNumSprint est un entier
      dDateActuelle est une date = DateDuJour()
      
      sdToutLesSprints est une source de Données
      sReq est une chaîne
      
      sReq = [
      	SELECT Scr_Sprint.Num_Sprint,
      		   Scr_Sprint.VelociteMoyenneRes
      	FROM Scr_Sprint
      	WHERE Scr_Sprint.Top_Termine = 0
      ]
      
      goApp.Rsql(sdToutLesSprints,sReq)
      SI HLitPremier(sdToutLesSprints) > 0 
      	Si Htrouve(sdToutLesSprints) alors
      		//On récupère le numéro du sprint
      		nNumSprint = sdToutLesSprints.Num_Sprint
      		goApp.m_nVelociteMoyenne = sdToutLesSprints.VelociteMoyenneRes
      	Sinon
      		info("aucun sprint trouvé", ErreurInfo())
      	FIN
      SINON
      	//A faire : NumSprintActuel : gerer le cas pas de sprint trouvé : erreur ??
      	//Si aucun sprint en cours on renvoie le dernier sprint réalisé
      	//nNumSprint = NumDernierSprintRealise()
      FIN
      
      HAnnuleDéclaration(sdToutLesSprints)
      
      RENVOYER nNumSprint
      
     type : 458752
   -
     name : Sprint_Points_Realise_Maj
     procedure_id : 2201735682347617264
     type_code : 12
     code : |1-
      // Résumé : Met a jour le nb de points réalisé en un sprint
      // Syntaxe :
      //Sprint_Points_Realise_Maj (<nSprint_p> est entier)
      //
      // Paramètres :
      //	nSprint_p (entier) : Numero du sprint
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      //	nPoints_p (entier) : Le nombre de points
      PROCEDURE GLOBAL Sprint_Points_Realise_Maj(LOCAL nSprint_p est un entier):Vide
      
      nPoint est un entier
      
      sdRechercheNbPointRealise est une source de données
      sReq est une chaîne
      
      //Recherche du nombre de points
      sReq = [
      	SELECT SUM(Scr_Tache.Poids) AS Total
      	FROM Scr_Tache
      	WHERE Scr_Tache.Num_Sprint_Fin = [%nSprint_p%]
      ]
      
      goApp.Rsql(sdRechercheNbPointRealise,sReq)
      HLitPremier(sdRechercheNbPointRealise)
      si htrouve(sdRechercheNbPointRealise) ALORS
      	nPoint = sdRechercheNbPointRealise.Total
      FIN
      
      //Modification dans la base de données
      HLitRecherche(Scr_Sprint,Num_Sprint,nSprint_p,hIdentique+hLimiteParcours)
      SI HTROUVE(Scr_Sprint) ALORS
      	Scr_Sprint.NbPointsRealise = nPoint
      	Si pas HModifie(Scr_Sprint) alors
      		INFO("le poids réalisé du sprint n'a pas pu etre modifié", ErreurInfo())
      	FIN
      FIN
      
      HAnnuleDéclaration(sdRechercheNbPointRealise)
     type : 458752
   -
     name : Sprint_Charge_Totale
     procedure_id : 2201736073189666648
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] Sprint_Charge_Totale (<nSelecteur> est entier)
      //
      // Paramètres :
      //	nSelecteur (entier) : <indiquez ici le rôle de nSelecteur>
      // Valeur de retour :
      // 	entier : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      //	nNumSprint_p (entier) : <indiquez ici le rôle de nNumSprint_p>
      FONCTION Sprint_Charge_Totale(LOCAL nSelecteur est un ClTache.ETypeCharge):entier
      
      nPtsSprint est un entier
      
      sChoixPoids est une chaine
      sChoixSprint est une chaîne
      SI nSelecteur = ClTache.ETypeCharge.Charge_réelle ALORS
      	sChoixSprint	= "Scr_Tache.Num_Sprint_Realisation"
      	sChoixPoids		= "Scr_Tache.Poids" 
      SINON
      	sChoixSprint	= "Scr_Tache.Num_Sprint_Previsionnel"
      	sChoixPoids		= "Scr_Tache.Poids_Previsionnel"	
      FIN
      
      sdRecherchePointsRestant est une source de données
      sReq est une chaine
      
      sReq = [
      	SELECT
      		SUM([%sChoixPoids%]) as Points
      	
      	FROM Scr_Tache
      	
      	WHERE
      		[%sChoixSprint%] = [%:ZF_Get_IdUnique()%]
      		AND Scr_Tache.Top_Brouillon = 0
      ]
      
      goApp.Rsql(sdRecherchePointsRestant,sReq)
      HLitPremier(sdRecherchePointsRestant)
      SI HTrouve (sdRecherchePointsRestant) ALORS
      	nPtsSprint = sdRecherchePointsRestant.Points
      SINON
      	nPtsSprint = 0
      FIN
      
      HAnnuleDéclaration(sdRecherchePointsRestant)
      
      RENVOYER nPtsSprint
     type : 458752
   -
     name : SetNumSprint
     procedure_id : 2201931623291545985
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //SetNumSprint (<nNumSprint_P> est entier)
      //
      // Paramètres :
      //	nNumSprint_P (entier) : <indiquez ici le rôle de nNumSprint_P>
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE SetNumSprint(LOCAL nNumSprint_P est un entier):vide
      
      :m_nNumSprint = nNumSprint_P
     type : 458752
   -
     name : Sprint_Taches
     procedure_id : 2210671800307639896
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] Sprint_Taches ()
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	tableau : // 	Aucune
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      //	nNumSprint_p (entier) : <indiquez ici le rôle de nNumSprint>
      PROCEDURE Sprint_Taches():tableau de str_Tache
      
      // a faire : a supprimer
      
      
      //Tableau des taches du sprint
      aTaches est un tableau de STR_Tache
      
      //Structure d'une tache
      stTache est un STR_Tache
      
      sReq est une chaine
      sdRechercheTaches est une source de Données
      
      sReq = [
      	SELECT 
      		Scr_UserStory.JAiBesoinDe,
      		Scr_Tache.IDScr_Tache,
      		(Scr_Tache.Num_Sprint_Demarrage <> 0) AS Top_EstDemarree,
      		Scr_Tache.Num_Sprint_Fin,
      		case when (Scr_Tache.Num_Sprint_Fin = 0 AND Scr_Tache.Num_Sprint_Demarrage <> 0) then
      			2
      		else
      			case when Scr_Tache.Num_Sprint_Fin <> 0 then
      				3
      			else
      				1
      			end
      		end AS val_etat		
      	
      	FROM Scr_Tache
      		INNER JOIN Scr_UserStory ON (Scr_UserStory.IDScr_UserStory = Scr_Tache.IDScr_UserStory)
      	
      	WHERE Scr_Tache.Num_Sprint_Demarrage = [%:ZF_Get_IdUnique()%]
      	
      	ORDER BY val_etat
      ]
      
      goApp.Rsql(sdRechercheTaches,sReq)
      	
      pour TOUT sdRechercheTaches 
      	stTache = COL_Scrum.Tache_Charger(sdRechercheTaches.IDScr_Tache) //Procédure qui rempli la structure
      	selon sdRechercheTaches.val_etat
      		cas 1 : 
      			stTache.sEtat = "A faire"
      		cas 2 :
      			stTache.setat = "Commencée"
      		cas 3 :
      			stTache.setat = "Terminée"
      		AUTRE CAS	
      	FIN
      	
      	stTache.sBesoinUserStory = sdRechercheTaches.JAiBesoinDe
      	
      	tableauajoute(aTaches,stTache)
      	
      FIN
      
      HAnnuleDéclaration(sdRechercheTaches)
      
      RENVOYER aTaches
     type : 458752
   -
     name : GetObj
     procedure_id : 2241264049049551761
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] GetObj (<nIdUnique_P> est entier)
      //
      // Paramètres :
      //	nIdUnique_P (entier) : <indiquez ici le rôle de nIdUnique_P>
      // Valeur de retour :
      // 	Type indéterminé : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE globale GetObj(local nIdUnique_P est un entier):ClSprint
      
      renvoyer ClZF_ObjDB.ZF_GetObj("ClSprint", nIdUnique_P)
     type : 458752
   -
     name : nGetNbPointsRealises
     procedure_id : 2254433534979421645
     type_code : 12
     code : |1-
      procédure nGetNbPointsRealises():entier
      
      nRetour est un entier
      sdCountPoint est une Source de Données
      sReq est une chaîne
      
      
      si :m_bTop_Termine ALORS
      	nRetour = :m_nNbPointsRealise
      sinon
      	
      	sReq = [
      		
      		SELECT
      			SUM(Scr_Tache.Poids) AS NbrPoints
      		
      		FROM Scr_Tache
      		
      		WHERE 
      			Scr_Tache.Num_Sprint_Fin = [%:ZF_Get_IdUnique()%]
      			and Scr_Tache.Top_Brouillon = 0
      			and Scr_Tache.Top_Annule = 0			
      	]
      	
      	goapp.RSQL(sdCountPoint,sReq)
      	HLitPremier(sdCountPoint)
      	si pas HEnDehors(sdCountPoint) ALORS
      		nRetour = sdCountPoint.NbrPoints
      	FIN
      	
      	HAnnuleDéclaration(sdCountPoint)
      FIN
      
      renvoyer nRetour
     type : 458752
   -
     name : aoListeSprint
     procedure_id : 2255173321961142998
     type_code : 12
     code : |1-
      procédure publique globale aoListeSprint():ClColSprint
      
      //sdRechercheSprint est une source de données
      sReq est une chaîne
      oSprints est un ClColSprint
      
      sReq = [
      	SELECT
      		Scr_Sprint.*
      	FROM
      		Scr_Sprint
      	ORDER BY
      		Scr_Sprint.Num_Sprint
      ]
      
      oSprints.ZF_LoadSQL(sReq)
      
      renvoyer oSprints
     type : 458752
   -
     name : DefSprint
     procedure_id : 2257054495737300322
     type_code : 12
     code : |1-
      procédure DefSprint(local dDateDebut_p est une date, LOCAL dDateFin_p est une date, LOCAL nNbreSemaines_p est un entier):vide
      
      :m_dDateDebut		= dDateDebut_p
      :m_dDateFin			= dDateFin_p
      :m_nNbreSemaines	= nNbreSemaines_p
     type : 458752
   -
     name : Controlle_Sprint
     procedure_id : 2272833892188169618
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] Controlle_Sprint (<nSprint_p> est entier)
      //
      // Paramètres :
      //	nSprint_p (entier) : <indiquez ici le rôle de nSprint_p>
      // Valeur de retour :
      // 	booléen : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      FONCTION GLOBAL Controlle_Sprint(LOCAL nSprint_p est un entier):booléen
      
      bSprintValide est un booléen
      
      HLitRecherche(Scr_Sprint,Num_Sprint,nSprint_p,hIdentique+hLimiteParcours)
      
      SI htrouve(Scr_Sprint) ALORS
      	bSprintValide = vrai
      SINON
      	bSprintValide = faux
      FIN
      
      RENVOYER bSprintValide
      
     type : 458752
   -
     name : nGetNbPointsDemarre
     procedure_id : 2274444891316853447
     type_code : 12
     code : |1-
      procédure nGetNbPointsDemarre():entier
      
      nRetour est un entier
      sdCountPoint est une Source de Données
      sReq est une chaîne
      
      sReq = [
      	
      	SELECT
      		SUM(Scr_Tache.Poids) AS NbrPoints
      	
      	FROM Scr_Tache
      	
      	WHERE 
      		Scr_Tache.Num_Sprint_Demarrage = [%:ZF_Get_IdUnique()%]
      		and Scr_Tache.Top_Brouillon = 0
      		and Scr_Tache.Top_Annule = 0
      		
      ]
      goapp.RSQL(sdCountPoint,sReq)
      HLitPremier(sdCountPoint,hSansRafraîchir)
      si pas HEnDehors(sdCountPoint) ALORS
      	nRetour = sdCountPoint.NbrPoints
      FIN
      
      HAnnuleDéclaration(sdCountPoint)
      
      
      renvoyer nRetour
     type : 458752
   -
     name : SyncNbreSemaine
     procedure_id : 2278200462441652197
     type_code : 12
     code : |1+
      procédure prive SyncNbreSemaine():vide
      
      
      duDuréeSprint est une Durée
      
      si DateValide(:m_dDateDebut) et DateValide(:m_dDateFin) ALORS
      	//calcul de la durée du sprint
      	duDuréeSprint = :m_dDateFin - :m_dDateDebut
      	:m_nNbreSemaines = ArrondiSupérieur(duDuréeSprint..Jour / 7)
      sinon
      	:m_nNbreSemaines = 0
      FIN
     type : 458752
   -
     name : sExport
     procedure_id : 1156463435441237022
     type_code : 12
     code : |1+
      procédure sExport():JSON
      sRetour est un JSON
      
      sRetour.id					= :ZF_Get_IdUnique()
      sRetour.sprint_start_note	= :m_snotedebutdesprint
      sRetour.is_finish			= :m_btop_termine
      sRetour.date_start			= :m_ddatedebut
      sRetour.date_end			= :m_ddatefin
      sRetour.nb_point_realized	= :m_nnbpointsrealise
      sRetour.nb_weeks			= :m_nnbresemaines
      sRetour.avg_velocity		= :m_nvelocitemoyenneres
      
      RENVOYER sRetour
     type : 458752
   -
     name : oGet_SprintDeDate
     procedure_id : 1160913622703208309
     type_code : 12
     code : |1+
      procédure global oGet_SprintDeDate(dDte_P est une date):ClSprint
      
      oSpr est un ClSprint dynamique
      sdNumSpr est une Source de Données
      sReq est une chaîne
      
      
      
      sReq = [
      	
      SELECT top 1
      	Scr_Sprint.Num_Sprint
      
      FROM Scr_Sprint
      
      where Scr_Sprint.DateDebut <= '[%dDte_P%]'
      	
      ORDER BY Scr_Sprint.Num_Sprint desc	
      ]
      
      goapp.RSQL(sdNumSpr,sReq)
      HLitPremier(sdNumSpr,hSansRafraîchir)
      si pas HEnDehors(sdNumSpr) alors
      	oSpr <- ::GetObj(sdNumSpr.Num_Sprint)
      FIN
      HAnnuleDéclaration(sdNumSpr)
      
      renvoyer oSpr
     type : 458752
   -
     name : nGetNumSprintMax
     procedure_id : 1204318776987445115
     type_code : 12
     code : |1+
      procédure publique globale nGetNumSprintMax():entier
      
      sdSprintMax est une Source de Données
      sReq est une chaîne
      
      
      si ::mg_nNumSprint_max = 0 ALORS
      	
      	sReq = [
      		SELECT
      			MAX(Num_Sprint) AS Num_Sprint
      		FROM Scr_Sprint
      	]
      	
      	goapp.RSQL(sdSprintMax,sReq)
      	HLitPremier(sdSprintMax,hSansRafraîchir)
      	si pas HEnDehors(sdSprintMax) ALORS
      		::mg_nNumSprint_max = sdSprintMax.Num_Sprint
      	FIN
      	
      	HAnnuleDéclaration(sdSprintMax)
      FIN
      
      
      renvoyer ::mg_nNumSprint_max
     type : 458752
   -
     name : Init_ObjBD
     procedure_id : 1422514578997170067
     type_code : 12
     code : |1+
      // Redéfinition de la méthode ClObjDB.ZF_Init_ObjBD
      PROCÉDURE  Init_ObjBD()
      
     type : 458752
   -
     name : Calcul_Velocite_Moyenne
     procedure_id : 1439980665438804919
     type_code : 12
     code : |1+
      // Résumé : Calcule la velocité
      // Syntaxe :
      //Calcul_Velocite_Moyenne ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE GLOBAL Calcul_Velocite_Moyenne():Vide
      
      nNbrSprint			est un entier	= 1	//compte le nombre de sprint pour le calcul de la moyenne
      nPointsSprint		est un entier	= 0	//compte le nb de points accumulé de chaque sprint
      nVelocitéMoyenne	est un entier
      nNumSprintActuel	est un entier	= goApp.m_nNumeroDuSprintActuel
      oSprint				est un ClSprint dynamique
      sReq				est une chaîne
      oColSprints			est un ClColSprint
      
      sReq = [
      	
      	SELECT
      		Scr_Sprint.*
      	
      	FROM Scr_Sprint
      	
      	WHERE Scr_Sprint.Top_Termine = 1
      	
      	ORDER BY Scr_Sprint.Num_Sprint
      	
      ]
      oColSprints.ZF_LoadSQL(sReq)
      pour tout element oSprint de oColSprints.aItems()
      	
      	si nNumSprintActuel > oSprint.ZF_Get_IdUnique() ALORS
      		nPointsSprint				+= oSprint.p_nNbPointsRealise
      		nVelocitéMoyenne			= nPointsSprint / nNbrSprint //vélocité moyenne = Points du Sprint / nbrDeSprint
      		goApp.m_nVelociteMoyenne	= nVelocitéMoyenne
      	SINON //Si c'est le sprint actuel on lui donne la vélocité du dernier sprint passé 
      		nVelocitéMoyenne			= goApp.m_nVelociteMoyenne 
      	FIN
      	
      	si oSprint.p_nVelociteMoyenneRes <> nVelocitéMoyenne ALORS
      		oSprint.m_nVelociteMoyenneRes = nVelocitéMoyenne
      		oSprint.ZF_Enregistre()
      	FIN
      	
      	nNbrSprint++ 
      FIN
     type : 458752
  properties :
   -
     name : p_dDateDebut
     identifier : 0x1f52aa7e011a5da9
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_dDateDebut() : date
         
         renvoyer :m_dDateDebut
        type : 1966080
      -
        code : |1+
         procédure p_dDateDebut(dDateDebut_p est une date):Vide
         
         :m_dDateDebut = dDateDebut_p
         
         //Recalcul du nombre de semaines.
         :SyncNbreSemaine()
        type : 2031616
     template_refs : []
   -
     name : p_dDateFin
     identifier : 0x1f52aa8d011b9bea
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_dDateFin() : date
         
         renvoyer :m_dDateFin
        type : 1966080
      -
        code : |1+
         procédure p_dDateFin(dDateFin_p est une date):Vide
         
         :m_dDateFin = dDateFin_p
         
         //Recalcul du nombre de semaines.
         :SyncNbreSemaine()
        type : 2031616
     template_refs : []
   -
     name : p_nNbreSemaines
     identifier : 0x1f52aaaf011c1f05
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_nNbreSemaines() : entier sans signe sur 4 octets
         
         renvoyer :m_nNbreSemaines
        type : 1966080
     template_refs : []
   -
     name : p_nVelociteMoyenneRes
     identifier : 0x1f52ae3d0200ffb1
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_nVelociteMoyenneRes() : entier
         
         renvoyer :m_nVelociteMoyenneRes
        type : 1966080
     template_refs : []
   -
     name : p_bTop_Termine
     identifier : 0x1f52af610207782a
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_bTop_Termine() : booléen
         
         renvoyer :m_bTop_Termine
        type : 1966080
      -
        code : |1-
         procédure publique p_bTop_Termine(bValeur est un booléen)
         :ZF_EstModif()
         :m_bTop_Termine=bValeur
        type : 2031616
     template_refs : []
   -
     name : p_nNbPointsRealise
     identifier : 0x117810d4060ef077
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_nNbPointsRealise() : entier
         
         renvoyer :m_nNbPointsRealise
        type : 1966080
     template_refs : []
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : BwAAAAcAAAA6ih3UbgNXHwTtiPSFUEj+2fi/m7v4QV2rqidAupM=
resources :
 string_res :
  identifier : 0x1e8df41f3f4ce8f8
  internal_properties : BwAAAAcAAAAnMYFQ1bL/vz9ehh7L22SNNSlIzGTOI8h5F/WtgDNP
custom_note :
 internal_properties : BwAAAAcAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
