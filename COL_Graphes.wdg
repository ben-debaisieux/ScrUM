#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : COL_Graphes
 major_version : 27
 minor_version : 0
 type : 7
 description : ""
 subtype : 0
procedure_set :
 identifier : 0x11dff08f06a11b31
 internal_properties : BwAAAAcAAABGLu41kG7fjQV3iS4F72qmnKaNh5694reolNKIW0iw
 code_elements :
  type_code : 31
  p_codes :
   -
     code : |1+
      
      CONSTANTE
      	cstObjectifChargeCumule	= 4
      	cstObjectifChargeCumuleTies	= 1.5
      FIN
      
      
      
      //////////////////////////////////////////////////////////////////////////
      STR_Temps_validation_Spr est une Structure
      	nDemarre	est un entier
      	nFin		est un entier
      	nCumul		est un entier
      	nObjectif	est un entier
      	sEtiquette	est une chaîne
      FIN
      
      STR_Temps_validation est une Structure
      	sTitre		est une chaîne
      	aStSeries	est un tableau associatif de STR_Temps_validation_Spr
      FIN
      
      
      //////////////////////////////////////////////////////////////////////////
      STR_Evol_Charge_Projet_Spr est une Structure
      	nCharge			est un entier
      	nChargeCumul	est un entier
      	nChargeImpond	est un entier
      	nChargeEngage	est un entier
      	sEtiquette		est une chaîne
      FIN
      
      STR_Evol_Charge_Projet est une Structure
      	sTitre		est une chaîne
      	aStSeries	est un tableau associatif de STR_Evol_Charge_Projet_Spr
      FIN
      
      
      //////////////////////////////////////////////////////////////////////////
      STR_Anticipation_Charge_Projet_Spr est une Structure
      	nCharge			est un entier
      	nChargeAnnulee	est un entier
      	sEtiquette		est une chaîne
      FIN
      
      STR_Anticipation_Charge_Projet est une Structure
      	sTitre		est une chaîne
      	aStSeries	est un tableau associatif de STR_Anticipation_Charge_Projet_Spr
      FIN
      
      
      //////////////////////////////////////////////////////////////////////////
      STR_Projection_Spr est une Structure
      	nProj		est un entier
      	nReal		est un entier
      FIN
      
      STR_Projection est une Structure
      	sTitre		est une chaîne
      	aStSeries	est un tableau associatif de STR_Projection_Spr
      FIN
      
      
      //////////////////////////////////////////////////////////////////////////
      STR_Charge_Spr est une Structure
      	nPts		est un entier
      FIN
      
      STR_Charge_InfoPrj est une Structure
      	sNom		est une chaîne
      	nCouleur	est un entier
      	aSpr		est un tableau associatif de STR_Charge_Spr
      FIN
      
      STR_Charge est une Structure
      	sTitre			est une chaîne
      	nVelocite		est un entier
      	aStProjets		est un tableau associatif de STR_Charge_InfoPrj
      	aStListeSprints	est un tableau associatif de chaîne
      FIN
      
     type : 720896
  procedures :
   -
     name : InfoProjet
     procedure_id : 1288012627202703584
     type_code : 15
     code : |1+
      procédure InfoProjet(sChamp_P est une chaîne, oProjet_P est un ClDbProjet, oEpic_P est un ClDbEpic dynamique = Null) <ui>
      
      sTitre			est une chaîne
      bAPrendre		est un booléen
      zcst_Teste		est une chaîne	= "Testé"
      zcst_Developpe	est une chaîne	= "Développé"
      zcst_Non_Teste	est une chaîne	= "Non testé"
      zcst_A_Faire	est une chaîne	= "A faire"
      sZcst_En_Cours	est une chaîne	= "En cours"
      zcst_Annule		est une chaîne	= "Annulé"
      
      nFinies			est un entier
      nATester		est un entier
      nAnnulee		est un entier
      nEnCours		est un entier
      nAFaire			est un entier
      oUS				est un ClDbUserStory dynamique
      
      pour tout element oUS de ClColUserStory.oFromProjet(oProjet_P).aitems()
      	bAPrendre = vrai
      	
      	si oEpic_P <> null alors
      		si oUS.p_oIDScr_Epic = null ALORS
      			bAPrendre = faux
      		sinon
      			
      			SI oUS.p_oIDScr_Epic.ZF_Get_IdUnique() <> oEpic_P.ZF_Get_IdUnique() ALORS
      				bAPrendre = Faux
      			FIN
      		FIN
      	sinon
      		si oUS.p_oIDScr_Epic <> null alors		//Epuration de vieux stocks historique.
      			SI oUS.p_oIDScr_Epic.p_sNom DANS ("Statistiques (post lancement)", "Poseurs (post lancement)", "Signature électronique (post lancement)", "Base Lunel fournisseur (post lancement)", "") ALORS
      				bAPrendre = Faux
      				Trace("Groupement ignoré : " + oUS.p_oIDScr_Epic.p_sNom)
      			FIN
      		FIN
      	fin
      	
      	si bAPrendre ALORS
      		//oUS.User_Story_Etat()
      		selon oUS.Get_EtatUS()
      			cas ClDbUserStory.ECompteNbUS.Terminee
      				nFinies++
      			cas ClDbUserStory.ECompteNbUS.En_test_fonctionnel
      				nATester++
      			cas ClDbUserStory.ECompteNbUS.Annulée
      				nAnnulee++
      			cas ClDbUserStory.ECompteNbUS.EnCours
      				nEnCours++
      			cas ClDbUserStory.ECompteNbUS.A_faire
      				nAFaire++
      			AUTRE CAS
      				
      		FIN
      	FIN
      FIN
      
      
      //Affichage des infos dans le graphe :
      
      graphe est un champ <- {sChamp_P, indChamp}
      
      sTitre = "Avancement du projet " + oProjet_P.p_sNom
      SI oEpic_P <> Null ALORS
      	sTitre += RC + oEpic_P.p_sNom
      FIN
      
      MultitâcheRepeint()
      grSupprimeTout(graphe)
      grType(graphe,grSecteurMultiniveau)
      
      grTitre(graphe, sTitre)
      
      grMAJAutomatiqueEtiquetteCatégorie(graphe, Vrai)
      
      grSMNAjouteDonnée(graphe, zcst_Developpe + TAB + zcst_Teste, nFinies)
      grSMNCouleurPortion(graphe,zcst_Developpe, COL_Scrum.gnCouleur_VertVif)
      grSMNCouleurPortion(graphe,zcst_Developpe + TAB + zcst_Teste, COL_Scrum.gnCouleur_BleuPale)
      
      grSMNAjouteDonnée(graphe, zcst_Developpe + TAB + zcst_Non_Teste, nATester)
      grSMNCouleurPortion(graphe,zcst_Developpe + TAB + zcst_Non_Teste, COL_Scrum.gnCouleur_RougeOrange)
      
      grSMNAjouteDonnée(graphe, sZcst_En_Cours, nEnCours)
      grSMNCouleurPortion(graphe,sZcst_En_Cours, COL_Scrum.gnCouleur_Orange_pale)
      
      grSMNAjouteDonnée(graphe, zcst_A_Faire, nAFaire)
      grSMNCouleurPortion(graphe,zcst_A_Faire, COL_Scrum.gnCouleur_JauneVif)
      
      grSMNAjouteDonnée(graphe, zcst_Annule, nAnnulee)
      grSMNCouleurPortion(graphe,zcst_Annule, COL_Scrum.gnCouleur_Gris)
      MultitâcheRepeint()
      
      grDessine(graphe)
      
      
      
     type : 458752
   -
     name : EvolCharge
     procedure_id : 1288167898864427811
     type_code : 15
     code : |1+
      procédure EvolCharge(sChamp_P est une chaîne, oProjet_P est un ClDbProjet, bAvecImpond_P est un booléen)
      
      
      //Affichage des infos dans le graphe :
      graphe est un champ <- {sChamp_P, indChamp}
      
      grSupprimeTout(graphe)
      
      
      stAnalyse		est un col_graphes.STR_Evol_Charge_Projet
      stSprint_Tmp	est un col_graphes.STR_Evol_Charge_Projet_Spr
      nCle			est un entier
      
      stAnalyse = col_graphes.Graphe_Evol_Charge_projet(oProjet_P.ZF_Get_IdUnique())
      
      grSupprimeSérie(graphe)
      grLibellé(graphe, grAfficheEtiquette, Vrai)
      grTitre(graphe, stAnalyse.sTitre)
      
      POUR TOUT stSprint_Tmp DE stAnalyse.aStSeries
      	nCle++
      	grEtiquetteCatégorie(graphe,nCle,stSprint_Tmp.sEtiquette)
      	grAjouteDonnée(graphe,1, nCle,stSprint_Tmp.nCharge)
      	grAjouteDonnée(graphe,2, nCle,stSprint_Tmp.nChargeCumul)
      	SI bAvecImpond_P ALORS
      		grAjouteDonnée(graphe,3, nCle,stSprint_Tmp.nChargeImpond)
      		grAjouteDonnée(graphe,4, nCle,stSprint_Tmp.nChargeEngage)
      	FIN
      FIN
      
      grEtiquetteSérie(graphe,1,"Charge ajoutée")
      grCouleurSérie(graphe,1,COL_Scrum.gnCouleur_OrangeVif)
      
      grEtiquetteSérie(graphe,2,"Charge cumulée")
      grCouleurSérie(graphe,2,COL_Scrum.gnCouleur_BleuVif)
      
      SI bAvecImpond_P ALORS
      	grEtiquetteSérie(graphe,3,"Charge avec proj. impond.")
      	grCouleurSérie(graphe,3,COL_Scrum.gnCouleur_Gris)
      	grTypeSérie(graphe,3,grCourbe)
      	
      	grEtiquetteSérie(graphe,4,"Charge engagée")
      	grCouleurSérie(graphe,4,COL_Scrum.gnCouleur_VertVif)
      FIN
      
      grDessine(graphe)
     type : 458752
   -
     name : Graph_Projection
     procedure_id : 1394688817552830202
     type_code : 15
     code : |1+
      procédure Graph_Projection()<ui>:STR_Projection
      
      stRetour				est un STR_Projection
      stSp_Tmp				est un STR_Projection_Spr
      
      rNbSprintRestantEstime	est un réel
      nPointsTotal			est un entier	= ClDbTache.Charge_Totale()
      nVelociteMoyenne		est un entier	= goApp.m_nVelociteMoyenne
      oSprint					est un ClDbSprint dynamique
      nNbPointsRestant		est un entier
      
      
      stSp_Tmp.nProj = nPointsTotal
      stSp_Tmp.nReal = nPointsTotal
      
      pour tout element oSprint de ClColSprint.oListeSprint().aItems()
      	
      	SI oSprint.p_bTop_Termine ALORS
      		stSp_Tmp.nReal -= oSprint.nGetNbPointsFini()
      		nNbPointsRestant = stSp_Tmp.nReal
      	SINON
      		stSp_Tmp.nReal -= nVelociteMoyenne
      	FIN
      	
      	stSp_Tmp.nProj -= nVelociteMoyenne
      	
      	
      	stSp_Tmp.nProj = max(stSp_Tmp.nProj, 0)
      	stSp_Tmp.nReal = max(stSp_Tmp.nReal, 0)
      	
      	stRetour.aStSeries[oSprint.sSprint_Date()] = stSp_Tmp
      	
      	si stSp_Tmp.nProj = 0 ALORS
      		sortir
      	FIN
      FIN
      
      rNbSprintRestantEstime = Abs(nNbPointsRestant / nVelociteMoyenne)
      
      stRetour.sTitre = "Projection" + RC + " Nombre de sprints restants estimé : " + Gauche(NumériqueVersChaîne(rNbSprintRestantEstime),4)
      
      renvoyer stRetour
     type : 458752
   -
     name : Graphe_anticipation_de_charge
     procedure_id : 1394688821847863596
     type_code : 15
     code : |1-
      procédure Graphe_anticipation_de_charge(local znIdProjet_P est un entier)<UI>:STR_Anticipation_Charge_Projet
      
      stRetour		est un STR_Anticipation_Charge_Projet
      oTache			est un ClDbTache dynamique
      oPrj			est un ClDbProjet dynamique
      nAnticipation	est un entier
      
      
      stRetour.sTitre	= "Analyse de l'anticipation de la charge du projet" + rc
      
      
      oPrj <- ClDbProjet.GetObj(znIdProjet_P)
      stRetour.sTitre += oPrj.p_sNom
      POUR TOUT ELEMENT oTache DE ClColTache.oFromProjet(oPrj).aItems()	//oPrj.aoListeTaches().aItems()
      	si (oTache.p_bEstRealise ou oTache.p_bAnnule) et oTache.p_nNum_Sprint_Realisation <> 0 alors
      		nAnticipation = oTache.p_nNum_Sprint_Realisation - oTache.p_nNum_Sprint_Creation
      		stRetour.aStSeries[nAnticipation].sEtiquette = nAnticipation
      		si pas oTache.p_bAnnule ALORS
      			stRetour.aStSeries[nAnticipation].nCharge	+= oTache.p_nPoids
      		sinon
      			stRetour.aStSeries[nAnticipation].nChargeAnnulee	+= oTache.p_nPoids
      		FIN
      	fin
      FIN
      
      renvoyer stRetour
     type : 458752
   -
     name : Graphe_Charge_Sprints
     procedure_id : 1394688821847929304
     type_code : 15
     code : |1-
      procédure Graphe_Charge_Sprints(LOCAL nSprint_p est un entier, ...
      	LOCAL nNbSprint_p est un entier, ...
      	LOCAL eSelecteur_p est un ClDbTache.ETypeCharge,
      	local bModeProjet_p est un booléen)<metier>:STR_Charge
      		
      
      oColSprints		est un ClColSprint dynamique	<- ClColSprint.oListeSprint(nSprint_p, nSprint_p + nNbSprint_p)
      oColTaches		est un ClColTache dynamique		<- ClColTache.oFromSprints(oColSprints, eSelecteur_p)
      oTache			est un ClDbTache dynamique
      oListeProj		est un ClColProjet()
      oSprint			est un ClDbSprint dynamique
      nNumSprRetenu	est un entier
      stRetour		est un STR_Charge
      sRegroupement	est une chaine
      nPoints			est un entier
      stProjet_Tmp	est un STR_Charge_InfoPrj
      aUsrCdp			est un tableau associatif de ClDbUsr dynamique
      oPrj			est un ClDbProjet dynamique
      
      
      stRetour.sTitre = "Planification des taches"
      SELON eSelecteur_p
      	CAS ClDbTache.ETypeCharge.Charge_réelle
      		stRetour.sTitre += " en production"
      	CAS ClDbTache.ETypeCharge.Charge_prévisionelle
      		stRetour.sTitre += " prévisionnel"	
      FIN
      
      pour tout oTache de oColTaches.aItems()
      	oListeProj.ZF_addItem(oTache.p_oUserStoryParent.p_oIDScr_Projet)
      fin
      aUsrCdp <- ClColUsr_Projet.aoUsersCDPFromColProjet(oListeProj)
      
      POUR TOUT oTache DE oColTaches.aItems()
      		
      	SELON eSelecteur_p
      		CAS ClDbTache.ETypeCharge.Charge_réelle
      			nNumSprRetenu = oTache.p_nNum_Sprint_Realisation
      			nPoints = oTache.p_nPoids
      		CAS ClDbTache.ETypeCharge.Charge_prévisionelle
      			nNumSprRetenu = oTache.p_nNum_Sprint_Previsionnel
      			nPoints = oTache.p_nPoids_Previsionnel
      		autres cas
      			ClZF_App.mg_oExSelonCasNonTraite.ZF_Declenche([eSelecteur_p])
      	FIN
      	
      	oSprint <- ClDbSprint.GetObj(nNumSprRetenu)
      	si stRetour.aStListeSprints[nNumSprRetenu]..vide alors
      		//Récupération des étiquettes des sprints
      		stRetour.aStListeSprints[nNumSprRetenu] = oSprint.ZF_Get_IdUnique() + RC + oSprint.sSprint_Date()
      	fin
      	
      	//ajout des données dans le graphe
      	oPrj <- oTache.p_oUserStoryParent.p_oIDScr_Projet
      	si bModeProjet_p alors
      		sRegroupement	= oPrj.ZF_Get_IdUnique()
      	sinon
      		sRegroupement	= oPrj.p_sGroupement
      	fin
      	SI stRetour.aStProjets[sRegroupement]..Vide ALORS
      		stRetour.aStProjets[sRegroupement] = allouer un STR_Charge_InfoPrj
      		
      		VariableRAZ(stProjet_Tmp)
      		//donne une couleur à la série
      		stProjet_Tmp.nCouleur			= DonneCouleur(TableauOccurrence(stRetour.aStProjets), coulSérieDéfaut)
      		
      		SI bModeProjet_p ALORS
      			//nom du projet pour le nom de l'étiquette 
      			stProjet_Tmp.sNom				= aUsrCdp[oPrj.ZF_Get_IdUnique()].p_sNom + RC + oPrj.p_sNom
      		sinon
      			//nom du groupement pour le nom de l'étiquette 
      			stProjet_Tmp.sNom				= sRegroupement
      		FIN
      		stRetour.aStProjets[sRegroupement]	= stProjet_Tmp
      	FIN
      	SI stRetour.aStProjets[sRegroupement].aSpr[nNumSprRetenu]..Vide ALORS
      		stRetour.aStProjets[sRegroupement].aSpr[nNumSprRetenu] = allouer un STR_Charge_Spr
      	FIN
      	stRetour.aStProjets[sRegroupement].aSpr[nNumSprRetenu].nPts += nPoints
      FIN
      
      
      
      stRetour.nVelocite = goApp.m_nVelociteMoyenne
      
      
      
      renvoyer stRetour
     type : 458752
   -
     name : Graphe_Evol_Charge_projet
     procedure_id : 1394688821847995043
     type_code : 15
     code : |1-
      procédure Graphe_Evol_Charge_projet(local znIdProjet_P est un entier)<UI>:STR_Evol_Charge_Projet
      
      stRetour		est un STR_Evol_Charge_Projet
      nCumul			est un entier
      nCumulEngage	est un entier
      oSprint			est un ClDbSprint dynamique
      oTache			est un ClDbTache dynamique
      oPrj			est un ClDbProjet dynamique
      sNumSprint		est une chaîne
      
      
      stRetour.sTitre	= "Analyse de l'évolution de la charge du projet" + rc
      
      POUR TOUT ELEMENT oSprint DE ClColSprint.oListeSprint().aItems()
      	sNumSprint										= oSprint.ZF_Get_IdUnique()
      	
      	stRetour.aStSeries[sNumSprint]					= allouer un STR_Evol_Charge_Projet_Spr
      	stRetour.aStSeries[sNumSprint].sEtiquette		= sNumSprint + " - " + oSprint.sSprint_Date()
      	
      FIN
      
      
      
      oPrj <- ClDbProjet.GetObj(znIdProjet_P)
      stRetour.sTitre += oPrj.p_sNom
      POUR TOUT ELEMENT oTache DE ClColTache.oFromProjet(oPrj).aItems()		//oPrj.aoListeTaches().aItems()
      	stRetour.aStSeries[oTache.p_nNum_Sprint_Creation].nCharge			+= oTache.p_nPoids
      	stRetour.aStSeries[oTache.p_nNum_Sprint_Realisation].nChargeEngage	+= oTache.p_nPoids
      FIN
      
      
      
      POUR TOUT stSprint_Tmp, sCle de stRetour.aStSeries
      	SI sCle = "0" ou Val(sCle) > goApp.m_nNumeroDuSprintActuel ou (nCumul = 0 et stSprint_Tmp.nCharge = 0) ALORS
      		TableauSupprime(stRetour.aStSeries, sCle)
      	sinon
      		nCumul									+= stSprint_Tmp.nCharge
      		nCumulEngage							+= stSprint_Tmp.nChargeEngage
      		stRetour.aStSeries[sCle].nChargeCumul	= nCumul
      		stRetour.aStSeries[sCle].nChargeEngage	= nCumulEngage
      		stRetour.aStSeries[sCle].nChargeImpond	= nCumul * (1 + ClDbProjet.cstTauxImponderable * (nCumul - nCumulEngage) / nCumul)
      	FIN
      fin
      
      
      
      renvoyer stRetour
     type : 458752
   -
     name : Graphe_Temps_validation
     procedure_id : 1394688821848060767
     type_code : 15
     code : |1-
      procédure Graphe_Temps_validation(local nIdProjet_P est un entier)<métier>:STR_Temps_validation
      
      stRetour		est un STR_Temps_validation
      nCumul			est un entier
      oSprint			est un ClDbSprint dynamique
      oTache			est un ClDbTache dynamique
      oPrj			est un ClDbProjet dynamique
      sNumSprint		est une chaîne
      oSprints		est un ClColSprint dynamique <- ClColSprint.oListeSprint()
      
      stRetour.sTitre	= "Analyse des temps de mise en production des taches réalisées" + rc
      
      POUR TOUT ELEMENT oSprint DE oSprints.aItems()
      	sNumSprint										= oSprint.ZF_Get_IdUnique()
      	
      	stRetour.aStSeries[sNumSprint]					= allouer un STR_Temps_validation_Spr
      	stRetour.aStSeries[sNumSprint].sEtiquette		= sNumSprint + " - " + oSprint.sSprint_Date()
      	
      	
      	SI Val(sNumSprint) < goApp.m_nNumeroDuSprintActuel ALORS
      		stRetour.aStSeries[sNumSprint].nObjectif	= oSprint.p_nVelociteMoyenneRes
      	SINON
      		stRetour.aStSeries[sNumSprint].nObjectif	= goApp.m_nVelociteMoyenne
      	FIN
      	
      	SI nIdProjet_P = 0 ALORS
      		stRetour.aStSeries[sNumSprint].nObjectif		= stRetour.aStSeries[sNumSprint].nObjectif * cstObjectifChargeCumule
      	sinon
      		stRetour.aStSeries[sNumSprint].nObjectif		= stRetour.aStSeries[sNumSprint].nObjectif * cstObjectifChargeCumuleTies
      	FIN
      FIN
      
      SI nIdProjet_P = 0 ALORS
      	//Tous les projets
      	aPtsDemarre	est un tableau associatif d'entiers	= ClColTache.anGetNbPointsSprints(oSprints, ClColTache.cstGetPointsDemarres)
      	aPtsFini	est un tableau associatif d'entiers	= ClColTache.anGetNbPointsSprints(oSprints, ClColTache.cstGetPointsFini)
      	POUR TOUT ELEMENT oSprint DE oSprints.aItems()
      		sNumSprint									= oSprint.ZF_Get_IdUnique()
      		stRetour.aStSeries[sNumSprint].nDemarre		= aPtsDemarre[oSprint.ZF_Get_IdUnique()]
      		stRetour.aStSeries[sNumSprint].nFin			= aPtsFini[oSprint.ZF_Get_IdUnique()]
      //		stRetour.aStSeries[sNumSprint].nDemarre		= oSprint.nGetNbPointsDemarre()
      //		stRetour.aStSeries[sNumSprint].nFin			= oSprint.nGetNbPointsFini()
      	FIN
      	
      	stRetour.sTitre += "Tout projets"
      	
      SINON
      	oPrj <- ClDbProjet.GetObj(nIdProjet_P)
      
      	//Projet en cours
      	POUR TOUT ELEMENT oTache DE ClColTache.oFromProjet(oPrj).aItems()		//oPrj.aoListeTaches().aItems()
      		//trace(ChaîneConstruit("Début*%1*Fin*%2*poids*%3*code%4", oTache.p_nNum_Sprint_Demarrage, oTache.p_nNum_Sprint_Fin, oTache.p_nPoids, oTache.p_sCodeTache))
      		SI oTache.p_nNum_Sprint_Demarrage <> 0 ALORS
      			stRetour.aStSeries[oTache.p_nNum_Sprint_Demarrage].nDemarre += oTache.p_nPoids
      		FIN
      		SI oTache.p_nNum_Sprint_Fin <> 0 ALORS
      			stRetour.aStSeries[oTache.p_nNum_Sprint_Fin].nFin += oTache.p_nPoids
      		FIN
      	FIN
      	
      	stRetour.sTitre += oPrj.p_sNom
      FIN
      
      
      POUR TOUT stSprint_Tmp, sCle de stRetour.aStSeries
      	SI sCle = "0" ou Val(sCle) > goApp.m_nNumeroDuSprintActuel ou (nCumul = 0 et stSprint_Tmp.nDemarre = 0) ALORS
      		TableauSupprime(stRetour.aStSeries, sCle)
      	sinon
      		nCumul += stSprint_Tmp.nDemarre - stSprint_Tmp.nFin
      		stRetour.aStSeries[sCle].nCumul = nCumul
      	FIN
      fin
      
      
      
      renvoyer stRetour
     type : 458752
   -
     name : ProjectionEpic
     procedure_id : 1528257091093553642
     type_code : 15
     code : |1+
      procédure ProjectionEpic(sChamp_P est une chaîne, oProjet_P est un ClDbProjet) <ui>
      
      STR_Groupement est une structure
      	sTitre			est une chaîne
      	nPointsMacro	est un entier
      	nPointsCotation	est un entier
      	nPointsReal		est un entier
      fin
      aStEpics		est un tableau de STR_Groupement
      stEpic			est un STR_Groupement
      oEpic			est un ClDbEpic dynamique
      bAfficher		est un booléen
      
      pour tout element oEpic de ClColEpic.oFromprojet(oProjet_P).aitems()
      	VariableRAZ(stEpic)
      	
      	
      	stEpic.sTitre		= oEpic.p_sNom
      	stEpic.nPointsMacro	= oEpic.p_nEstimation
      	
      	
      	oUS	est un ClDbUserStory dynamique
      	pour tout oUS de ClColUserStory.oFrom_Epic(oEpic).aItems()
      		oTache est un ClDbTache dynamique
      		pour tout oTache de ClColTache.aoFromUS(oUS).aItems()
      			
      			stEpic.nPointsCotation += oTache.p_nPoids
      			
      			si oTache.p_bEstRealise ALORS
      				stEpic.nPointsReal += oTache.p_nPoids
      			FIN
      		FIN
      	FIN
      	
      	//Est il nécessaire d'afficher ce groupement ?
      	bAfficher = Faux
      	SI oEpic.p_nEstimation <> 0 ALORS
      		bAfficher = Vrai
      	sinon
      		si stEpic.nPointsCotation <> stEpic.nPointsReal ALORS
      			bAfficher = Vrai
      		FIN
      	FIN
      	
      	si bAfficher alors
      		//On ordonne le tableau en sens inverse pour que ce soit cohérent en affichage.
      		TableauInsère(aStEpics, 1, stEpic)
      	FIN
      FIN
      
      
      
      //Affichage des infos dans le graphe :
      
      graphe est un champ <- {sChamp_P, indChamp}
      
      
      grSupprimeTout(graphe)
      grType(graphe,grHistoHorizontal)
      
      grTitre(graphe, "Projections du projet """ + oProjet_P.p_sNom + """")
      
      grEtiquetteSérie(graphe,1,"Estimation macro")
      grEtiquetteSérie(graphe,2,"Cotation")
      grEtiquetteSérie(graphe,3,"Réalisé")
      
      nInd est un entier
      pour tout stEpic, nInd de aStEpics
      	grAjouteDonnée(graphe, 1,nInd,stEpic.nPointsMacro)
      	grAjouteDonnée(graphe, 2,nInd,stEpic.nPointsCotation)
      	grAjouteDonnée(graphe, 3,nInd,stEpic.nPointsReal)
      	grEtiquetteCatégorie(graphe,nInd,stEpic.sTitre)
      FIN
      
      grDessine(graphe)
     type : 458752
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : BwAAAAcAAAA6ih3UbgNXHwTtiPSFUEj+2fi/m7v4QV2rqidAupM=
  original_name : COL_SansNom1
resources :
 string_res :
  identifier : 0x11dff087069ffd68
  internal_properties : BwAAAAcAAAAnMYFQ1bL/vz9ehh7L22SNNSlIzGTOI8h5F/WtgDNP
custom_note :
 internal_properties : BwAAAAcAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
