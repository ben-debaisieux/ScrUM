#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : CLZF_GenDataMySQL
 major_version : 27
 minor_version : 0
 type : 4
 description : ""
 subtype : 0
class :
 identifier : 0x1527022300500d57
 internal_properties : BwAAAAcAAAB2/vstTMCJbS/hlxjFxirSqKvCUuv8YxgpWyl7S3iA
 code_elements :
  type_code : 10
  p_codes :
   -
     code : |1+
      CLZF_GenDataMySQL est une Classe
      	hérite de CLZF_GenData
      fin
     type : 131072
  procedures :
   -
     name : Constructeur
     procedure_id : 1524189348240624983
     type_code : 27
     code : |1-
      PROCÉDURE Constructeur(OlGen_p est un ClZF_GenCodeFic)
      Ancêtre.Constructeur(OlGen_p)
     type : 589824
   -
     name : Destructeur
     procedure_id : 1524189348240690519
     type_code : 28
     code : |1+
      procédure Destructeur()
      
     type : 655360
   -
     name : GetDefRubSQL
     procedure_id : 1524716246256163338
     type_code : 12
     code : |1-
      // Redéfinition de la méthode CLZF_GenData.GetDefRubSQL
      PROCÉDURE  GetDefRubSQL():tableau associatif de CLZF_GenData.STR_RubSQL
      
      aRetour		est un tableau associatif de CLZF_GenData.STR_RubSQL
      
      
      
      sReq		est une chaîne
      sdDefTbl	est une Source de Données
      stRub		est un CLZF_GenData.STR_RubSQL
      
      
      sReq = [
      	SELECT 
      		COLUMNS.COLUMN_NAME AS Rubrique,
      		COLUMNS.COLUMN_TYPE AS Type,
      		COLUMNS.NUMERIC_PRECISION,
      		COLUMNS.NUMERIC_SCALE,
      		COLUMNS.CHARACTER_MAXIMUM_LENGTH AS Taille,
      		COLUMNS.IS_NULLABLE AS EstNullable,
      		COLUMNS.COLUMN_DEFAULT AS ValeurDefaut,
      		KEY_COLUMN_USAGE.CONSTRAINT_NAME AS ContrainteAsso,
      		KEY_COLUMN_USAGE.REFERENCED_TABLE_NAME AS Nom_Table_CleReferencee,
      		KEY_COLUMN_USAGE.REFERENCED_COLUMN_NAME AS Nom_CleReference
      	
      	FROM INFORMATION_SCHEMA.COLUMNS
      		INNER JOIN INFORMATION_SCHEMA.TABLES ON (TABLES.TABLE_NAME = COLUMNS.TABLE_NAME)
      		LEFT OUTER JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE ON (KEY_COLUMN_USAGE.TABLE_NAME = COLUMNS.TABLE_NAME
      			AND KEY_COLUMN_USAGE.COLUMN_NAME = COLUMNS.COLUMN_NAME)
      	WHERE TABLES.TABLE_SCHEMA = DATABASE()
      		AND TABLES.TABLE_NAME = '[%:m_oColGen.p_sNomTable%]'
      ]
      ClZF_ObjDbLs.mg_oApp.Rsql(sdDefTbl, sReq)
      
      POUR TOUT sdDefTbl
      	
      	
      	sTaille est une chaîne = remplace(SansEspace(ExtraitChaîne(sdDefTbl.Type, 2, "(")), ")", "")
      	VariableRAZ(stRub)
      
      	stRub.sType					= SansEspace(extraitchaine(sdDefTbl.Type, 1, "("))
      	SELON Majuscule(stRub.sType)
      		CAS "DECIMAL"
      			stRub.nTaille			= sdDefTbl.NUMERIC_PRECISION
      			stRub.nScale			= sdDefTbl.NUMERIC_SCALE
      			
      		AUTRE CAS
      			stRub.nTaille			= val(sTaille)
      			
      	FIN
      //	stRub.nTaille				= val(sTaille)		//sdDefTbl.Taille
      	stRub.bEstNullable			= (sdDefTbl.EstNullable = "YES")
      	stRub.sValeurDefaut			= remplace(sdDefTbl.ValeurDefaut, "_utf8mb4\'\'", "''")	
      	stRub.bEstIndexUnique		= (sdDefTbl.ContrainteAsso = "PRIMARY")
      	stRub.sRefTablePK			= sdDefTbl.Nom_Table_CleReferencee
      	stRub.sRefRubIdPK			= sdDefTbl.Nom_CleReference
      	stRub.sNomContrainteDef		= sdDefTbl.ValeurDefaut..Null ? "" sinon :sNomRelDF(:m_oColGen.p_sNomTable, sdDefTbl.Rubrique)
      	
      	aRetour[sdDefTbl.Rubrique]	= stRub
      FIN
      
      
      RENVOYER aRetour
     type : 458752
   -
     name : sRubSqlDeTypeHF
     procedure_id : 1526400883051755961
     type_code : 12
     code : |1-
      // Redéfinition de la méthode CLZF_GenData.sRubSqlDeTypeHF
      PROCÉDURE protege sRubSqlDeTypeHF(stRub_p est un ClZF_GenCodeFic.STR_DefRub)<métier>:chaîne
      
      sRetour est une chaîne
      
      SELON stRub_p.nTypeRubHF
      	CAS hRubBinaire
      		sRetour = "BLOB"
      	CAS hRubBooléen
      		sRetour = "BOOL"
      	CAS hRubCaractère
      		sRetour = "CHAR(" + stRub_p.nTaille + ")"
      	CAS hRubDate8
      		sRetour = "DATE"
      	CAS hRubDateHeure
      		sRetour = "DATETIME"
      //	CAS hRubDurée
      //		sRetour = ""
      	CAS hRubEntier1
      		sRetour = "TINYINT"
      	CAS hRubEntier2
      		sRetour = "SMALLINT"
      	CAS hRubEntier4
      		sRetour = "INT"
      	CAS hRubEntier8
      		sRetour = "BIGINT"
      	CAS hRubEntierNonSigné1
      		sRetour = "TINYINT UNSIGNED"
      	CAS hRubEntierNonSigné2
      		sRetour = "SMALLINT UNSIGNED"
      	CAS hRubEntierNonSigné4
      		sRetour = "INT UNSIGNED"
      	CAS hRubEntierNonSigné8
      		sRetour = "BIGINT UNSIGNED"
      	CAS hRubHeure
      		sRetour = "TIME"
      	CAS hRubIDAuto
      		sRetour = "BIGINT"
      	CAS hRubIDAuto4
      		sRetour = "INT"
      	CAS hRubImage
      		sRetour = "BLOB"
      	CAS hRubMémoBinaire
      		sRetour = "BLOB"
      //	CAS hRubMémoBinaire4
      //		sRetour = ""
      	CAS hRubMémoTexte
      		sRetour = "TEXT"
      //	CAS hRubMémoUnicode
      //		sRetour = ""
      	CAS hRubMonétaire
      		sRetour = ""
      	CAS hRubNumérique
      		sRetour = "DECIMAL ([%stRub_p.nTaille%], [%stRub_p.nScale%])"
      	CAS hRubRéel4
      		sRetour = "FLOAT"
      	CAS hRubRéel8
      		sRetour = "DOUBLE"
      //	CAS hRubRéelTurbo
      //		sRetour = ""
      	CAS hRubTexte
      		sRetour = "VARCHAR(" + stRub_p.nTaille + ")"
      //	CAS hRubTexteUnicode
      //		sRetour = ""
      //	cas hRubHeure
      	AUTRE CAS
      		ClZF_App.mg_oExSelonCasNonTraite.ZF_Declenche([stRub_p.nTypeRubHF])
      FIN
      
      RENVOYER sRetour
     type : 458752
   -
     name : GenCodeDiff
     procedure_id : 1526400883051821685
     type_code : 12
     code : |1+
      // Redéfinition de la méthode CLZF_GenData.GenCodeDiff
      PROCÉDURE  GenCodeDiff():Vide
      
      sRub			est une chaîne
      sCode			est une chaîne
      stRubSql		est un CLZF_GenData.STR_RubSQL
      aStRubSQL		est un tableau associatif de CLZF_GenData.STR_RubSQL
      //aRubs			est un tableau associatif de CLZF_GenData.STR_RubSQL
      sIndicateurPK	est une chaîne
      
      //
      //aRubs = :GetDefRubSQL()
      //
      //
      //SI aRubs..Occurrence = 0 ALORS
      //	:m_bCreeTable	= Vrai
      //SINON
      //	:m_bCreeTable	= Faux
      //FIN
      //
      //
      //
      //POUR TOUT sRub DE :m_oColGen.aLstRubs()
      //	SI aRubs[sRub]..Vide ALORS
      //		VariableRAZ(stRubSql)
      //	SINON
      //		stRubSql = aRubs[sRub]
      //	FIN
      //	
      //	aStRubSQL[sRub]	= :stGenSQLRub(sRub, stRubSql)
      //FIN
      
      aStRubSQL = :GenCodeDiffInit()
      
      SI :m_bCreeTable ALORS
      	//Table en création :
      	sTypeId est une chaîne
      	
      	//Récupération du type de la rubrique
      	sTypeId = :sRubSqlDeTypeHF(:m_oColGen.p_stDefId)
      	
      	//Ajout de l'auto incrément si le type est définit comme tel
      	SI :m_oColGen.p_stDefId.nTypeRubHF DANS (hRubIDAuto4, hRubIDAuto) ALORS
      		sIndicateurPK = "AUTO_INCREMENT"
      	FIN
      	
      	//Définition de la rubrique de la colonne ID.
      	sCode += TAB + "[%:m_oColGen.p_sNomRubId%] [%sTypeId%] not null [%sIndicateurPK%]," + RC
      	
      	//Rénération de la définition de toutes les rubriques.
      	POUR TOUT stRubSql, sRub de aStRubSQL
      		sCode += TAB + stRubSql.sCodeSQL + "," + RC
      	FIN
      	
      	sCode += TAB + "PRIMARY KEY ([%:m_oColGen.p_sNomRubId%])"
      //	sCode += TAB + "CONSTRAINT PK_[%:m_oColGen.p_sNomTable%]_[%:m_oColGen.p_sNomRubId%] PRIMARY KEY NONCLUSTERED ([%:m_oColGen.p_sNomRubId%])"
      	
      	POUR TOUT stRubSql, sRub de aStRubSQL
      		SI stRubSql.sCodeKey <> "" ALORS
      			sCode += "," + RC + TAB + stRubSql.sCodeKey
      		FIN
      	FIN
      	
      	
      	sCode = [
      	CREATE TABLE [%:m_oColGen.p_sNomTable%] (
      	[%sCode%]
      	) ENGINE = InnoDB;
      	
      	]
      SINON
      	
      	POUR TOUT stRubSql, sRub de aStRubSQL
      		SI sRub <> :m_oColGen.p_sNomRubId _ET_ stRubSql.nTypeAlterRub <> CLZF_GenData.cstTypeAlterFK_RAS ALORS
      			sCode += [RC + RC] + "# " + sRub
      			sCode += RC + stRubSql.sCodeDropDef
      			sCode += RC + stRubSql.sCodeSQL
      			sCode += RC + stRubSql.sCodeAddDef
      		FIN
      	FIN
      	
      	POUR TOUT stRubSql, sRub de aStRubSQL
      		SI sRub <> :m_oColGen.p_sNomRubId ALORS
      			sCode += [RC + RC] + stRubSql.sCodeKey
      		FIN
      	FIN
      	
      FIN
      
      
      :m_sCode = sCode
      
     type : 458752
   -
     name : bRubCompatible
     procedure_id : 1526400883051887377
     type_code : 12
     code : |1+
      // Redéfinition de la méthode CLZF_GenData.bRubCompatible
      PROCÉDURE  bRubCompatible(nTypeHF_p est un entier, sTypeSGBD_p est une chaîne):booléen
      
      
      bRetour est un booléen
      SELON Majuscule(sTypeSGBD_p)
      		
      	CAS "BOOL"
      		bRetour = nTypeHF_p DANS (hRubBooléen)
      		
      	CAS "CHAR"
      		bRetour = nTypeHF_p DANS (hRubCaractère)
      		
      	CAS "DATE"
      		bRetour = nTypeHF_p DANS (hRubDate8)
      		
      	CAS "DATETIME"
      		bRetour = nTypeHF_p DANS (hRubDateHeure)
      		
      	CAS "TINYINT"
      		bRetour = nTypeHF_p DANS (hRubEntier1, hRubBooléen)
      		
      	CAS "SMALLINT"
      		bRetour = nTypeHF_p DANS (hRubEntier2)
      		
      	CAS "INT"
      		bRetour = nTypeHF_p DANS (hRubEntier4, hRubIDAuto4)
      		
      	CAS "BIGINT"
      		bRetour = nTypeHF_p DANS (hRubEntier8, hRubIDAuto)
      		
      	CAS "TINYINT UNSIGNED"
      		bRetour = nTypeHF_p DANS (hRubEntierNonSigné1)
      		
      	CAS "SMALLINT UNSIGNED"
      		bRetour = nTypeHF_p DANS (hRubEntierNonSigné2)
      		
      	CAS "INT UNSIGNED"
      		bRetour = nTypeHF_p DANS (hRubEntierNonSigné4)
      		
      	CAS "BIGINT UNSIGNED"
      		bRetour = nTypeHF_p DANS (hRubEntierNonSigné8)
      		
      	CAS "TIME"
      		bRetour = nTypeHF_p DANS (hRubHeure)
      		
      	CAS "BLOB"
      		bRetour = nTypeHF_p DANS (hRubImage, hRubMémoBinaire)
      		
      	CAS "TEXT", "LONGTEXT", "MEDIUMTEXT", "TINYTEXT"
      		bRetour = nTypeHF_p DANS (hRubMémoTexte)
      		
      	/*CAS ""
      		bRetour = nTypeHF_p DANS (hRubMonétaire)*/
      		
      	CAS "FLOAT"
      		bRetour = nTypeHF_p DANS (hRubRéel4)
      		
      	CAS "DOUBLE"
      		bRetour = nTypeHF_p DANS (hRubRéel8)
      		
      	CAS "VARCHAR"
      		bRetour = nTypeHF_p DANS (hRubTexte)
      
      	CAS "DECIMAL"
      		bRetour = nTypeHF_p DANS (hRubNumérique)
      
      	AUTRE CAS
      		bRetour = Faux
      FIN
      
      RENVOYER bRetour
      
     type : 458752
   -
     name : stGenSQLRub
     procedure_id : 1526400883051953054
     type_code : 12
     code : |1+
      // Redéfinition de la méthode CLZF_GenData.stGenSQLRub
      PROCÉDURE  stGenSQLRub(sRub_p est une chaîne, stRubSql_p est un CLZF_GenData.STR_RubSQL)<métier>:CLZF_GenData.STR_RubSQL
      
      
      
      stRetour est un CLZF_GenData.STR_RubSQL = :identifieEtatElements(sRub_p, stRubSql_p)
      
      
      SELON stRetour.nTypeAlterRub
      	CAS CLZF_GenData.cstTypeAlterRub_SuppRub
      		stRetour.sCodeSQL += "ALTER TABLE [%:m_oColGen.p_sNomTable%] DROP COLUMN [%sRub_p%];"
      	CAS CLZF_GenData.cstTypeAlterRub_CreeTable
      		stRetour.sCodeSQL += sRub_p
      	CAS CLZF_GenData.cstTypeAlterRub_CreeRub
      		stRetour.sCodeSQL += "ALTER TABLE [%:m_oColGen.p_sNomTable%] ADD [%sRub_p%]"
      	CAS CLZF_GenData.cstTypeAlterRub_ModRub
      		stRetour.sCodeSQL += "ALTER TABLE [%:m_oColGen.p_sNomTable%] MODIFY COLUMN [%sRub_p%]"
      	AUTRE CAS
      		//Ras
      FIN
      
      
      
      SI PAS stRetour.nTypeAlterRub DANS(CLZF_GenData.cstTypeAlterRub_SuppRub, CLZF_GenData.cstTypeAlterRub_RAS) ALORS
      	
      	stRetour.sCodeSQL += " " + stRetour.sType
      	
      	SI PAS stRetour.bEstNullable ALORS
      		stRetour.sCodeSQL += " NOT"
      	FIN
      	stRetour.sCodeSQL += " NULL"
      	
      	
      	
      	
      	//Génération du code de contrainte par défaut
      	sNomDF est une chaîne
      	sNomDF = :sNomRelDF(:m_oColGen.p_sNomTable, sRub_p)
      	
      	
      	SI stRetour.nTypeAlterDef DANS(::cstTypeAlterDef_Cree, ::cstTypeAlterDef_Mod) ALORS
      		
      		SI stRetour.nTypeAlterRub = CLZF_GenData.cstTypeAlterRub_CreeTable ALORS
      			stRetour.sCodeSQL += " DEFAULT ([%stRetour.sValeurDefaut%])"
      //			stRetour.sCodeSQL += " CONSTRAINT [%sNomDF%] DEFAULT ([%stRetour.sValeurDefaut%])"
      		SINON
      			stRetour.sCodeAddDef = [
      			ALTER TABLE [%:m_oColGen.p_sNomTable%] ALTER COLUMN [%sRub_p%] SET DEFAULT ([%stRetour.sValeurDefaut%]);
      			]
      		FIN
      	FIN
      	
      	SI stRetour.nTypeAlterDef DANS(::cstTypeAlterDef_Supp, ::cstTypeAlterDef_Mod) ALORS
      		stRetour.sCodeDropDef = [
      			ALTER TABLE [%:m_oColGen.p_sNomTable%] ALTER COLUMN [%sRub_p%] DROP DEFAULT;
      		]
      		
      	FIN
      	
      	//Sauf si on est en création on termine le code de déclaration avec le séparateur.
      	SI PAS stRetour.nTypeAlterRub = CLZF_GenData.cstTypeAlterRub_CreeTable ALORS
      		stRetour.sCodeSQL += ";"
      	FIN
      	
      	
      	
      	
      	
      	//Génération du code de contrainte FK
      	SI stRetour.nTypeAlterFK = ::cstTypeAlterFK_Cree ALORS
      		
      		sNomFK est une chaîne
      		sNomFK = ::sNomRelFK(:m_oColGen.p_sNomTable, sRub_p, stRetour.sRefTablePK, stRetour.sRefRubIdPK)
      		
      		SI stRetour.nTypeAlterRub DANS(CLZF_GenData.cstTypeAlterRub_CreeTable) ALORS
      			stRetour.sCodeKey = "CONSTRAINT [%sNomFK%] FOREIGN KEY ([%sRub_p%]) REFERENCES [%stRetour.sRefTablePK%] ([%stRetour.sRefRubIdPK%]) ON DELETE NO ACTION ON UPDATE NO ACTION"
      		SINON
      			stRetour.sCodeKey = [
      				ALTER TABLE [%:m_oColGen.p_sNomTable%] ADD CONSTRAINT [%sNomFK%] FOREIGN KEY([%sRub_p%])
      					REFERENCES [%stRetour.sRefTablePK%] ([%stRetour.sRefRubIdPK%]) ON DELETE NO ACTION ON UPDATE NO ACTION;
      			]
      		FIN
      	FIN
      FIN
      
      RENVOYER stRetour
     type : 458752
   -
     name : sNomRelFK
     procedure_id : 1527177108319339598
     type_code : 12
     code : |1+
      // Redéfinition de la méthode CLZF_GenData.sNomRelFK
      PROCÉDURE PROTÉGÉE sNomRelFK(LOCAL sTableFK_p est une chaîne, LOCAL sRubriqueFK_p est une chaîne, LOCAL sTablePK_p est une chaîne, LOCAL sRubriquePK_p est une chaîne)<métier>:chaîne
      renvoyer Gauche(Ancêtre.sNomRelFK(sTableFK_p, sRubriqueFK_p, sTablePK_p, sRubriquePK_p), 64)
     type : 458752
   -
     name : sRubHFDeTypeSql
     procedure_id : 1614353734180064753
     type_code : 12
     code : |1-
      // Redéfinition de la méthode CLZF_GenData.sRubHFDeTypeSql
      PROCÉDURE  sRubHFDeTypeSql(sType_p est une chaîne)<métier>:entier
      
      nTypeRetour est un entier
      
      SELON Minuscule(sType_p)
      	CAS "year" :
      		nTypeRetour	= hRubEntierNonSigné2
      	CAS "varchar" :
      		nTypeRetour	= hRubTexte
      	CAS "tinyint" :
      		nTypeRetour	= hRubEntier1
      	CAS "timestamp" :
      		nTypeRetour	= hRubEntier4
      	CAS "text" :
      		nTypeRetour	= hRubMémoTexte
      	CAS "smallint" :
      		nTypeRetour	= hRubEntier2
      	CAS "set" :
      		nTypeRetour	= hRubEntier1
      	CAS "mediumint" :
      		nTypeRetour	= hRubEntier4
      	CAS "int" :
      		nTypeRetour	= hRubEntier4
      	CAS "geometry" :
      		nTypeRetour	= hRubBinaire
      	CAS "enum" :
      		nTypeRetour	= hRubEntier1
      	CAS "decimal" :
      		nTypeRetour	= hRubRéel8
      	CAS "datetime" :
      		nTypeRetour	= hRubDateHeure
      	CAS "char" :
      		nTypeRetour	= hRubCaractère
      	CAS "blob" :
      		nTypeRetour	= hRubBinaire
      	AUTRE CAS
      		ClZF_App.mg_oExSelonCasNonTraite.ZF_Declenche([sType_p])
      FIN
      
      renvoyer nTypeRetour
     type : 458752
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : BwAAAAcAAAA6ih3UbgNXHwTtiPSFUEj+2fi/m7v4QV2rqidAupM=
  original_name : Classe1
resources :
 string_res :
  identifier : 0x1527021b004aed5b
  internal_properties : BwAAAAcAAAAnMYFQ1bL/vz9ehh7L22SNNSlIzGTOI8h5F/WtgDNP
custom_note :
 internal_properties : BwAAAAcAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
