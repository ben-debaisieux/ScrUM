#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : CLZF_GenData
 major_version : 27
 minor_version : 0
 type : 4
 description : ""
 subtype : 0
class :
 identifier : 0x1474fee70285aea9
 internal_properties : BwAAAAcAAAB2/vstTMCJbS/hlxjFxirSqKvCUuv8YxgpWyl7S3iA
 code_elements :
  type_code : 10
  p_codes :
   -
     code : |1+
      STR_Export_rubs est une Structure
      	sValeur		est une chaîne
      	bNull		est un booléen
      	bAProteger	est un booléen
      fin
      	
      STR_Export est une Structure
      	sNomPropriete	est une chaîne
      	sNomRub			est une chaîne
      	sLibelle		est une chaîne
      	bTypeTexte		est un booléen
      	sValeurs		est un tableau de STR_Export_rubs
      FIN
      
      STR_RubSQL est une structure
      	sType			est une chaîne
      	nTaille			est un entier
      	bEstNullable	est un booléen
      	sValeurDefaut	est une chaîne
      	bEstIndexUnique	est un booléen
      	sRefTablePK		est une chaîne
      	sRefRubIdPK		est une chaîne
      	sNomContrainteDef est une chaîne
      	
      	nTypeAlterRub	est un entier
      	nTypeAlterFK	est un entier
      	nTypeAlterDef	est un entier
      	sCodeSQL		est une chaîne
      	sCodeKey		est une chaîne
      	sCodeDropDef	est une chaîne
      	sCodeAddDef		est une chaîne
      	sWarning		est une chaîne
      fin
      
      CLZF_GenData est une Classe
      protege
      	m_oColGen 			est un ClZF_GenCodeFic dynamique
      	m_aExport			est un tableau de STR_Export
      	m_sCode				est une chaîne
      	m_bCreeTable		est un booléen
      	
      	m_taRubsSQLReel 	est un tableau associatif de STR_RubSQL
      	m_taRubsSQLAttendu	est un tableau associatif de STR_RubSQL
      
      GLOBAL
      public
      	gm_oExRecupValsTest	est un ClZF_Exception dynamique
      fin
      
      
      
      constante
      	cstTypeAlterRub_RAS			= 0
      	cstTypeAlterRub_CreeTable	= 1
      	cstTypeAlterRub_CreeRub		= 2
      	cstTypeAlterRub_ModRub		= 3
      	cstTypeAlterRub_SuppRub		= 4
      	
      	cstTypeAlterFK_RAS			= 0
      	cstTypeAlterFK_Cree			= 1
      	//cstTypeAlterFK_Supp			= 2
      	
      	cstTypeAlterDef_RAS			= 0
      	cstTypeAlterDef_Cree		= 1
      	cstTypeAlterDef_Mod			= 2
      	cstTypeAlterDef_Supp		= 3
      fin
      
      gm_oExRecupValsTest = allouer un ClZF_Exception("Impossible de récupérer les valeurs de clé étrangère de la table : %1")
     type : 131072
  procedures :
   -
     name : Constructeur
     procedure_id : 1474083246190276265
     type_code : 27
     code : |1+
      procédure Constructeur(OlGen_p est un ClZF_GenCodeFic)
      :m_oCOlGen <- OlGen_p
     type : 589824
   -
     name : Destructeur
     procedure_id : 1474083246190341801
     type_code : 28
     code : |1+
      procédure Destructeur()
      
     type : 655360
   -
     name : GenereData
     procedure_id : 1474083735816924746
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //GenereData ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure GenereData()
      
      nInd		est un entier
      stRubActu	est un STR_Export
      stVal		est un STR_Export_rubs
      
      TableauSupprimeTout(m_aExport)
      
      SI :m_oCOlGen.p_bClasseExiste ALORS
      	
      	sRub			est une chaîne
      	stRubAnaTmp		est un ClZF_GenCodeFic.str_DefRub
      	
      	POUR TOUT ÉLÉMENT stRubAnaTmp, sRub DE :m_oCOlGen.m_aRub
      		//trace(sRub)
      		VariableRAZ(stRubActu)
      		
      		stConfRub est un ClZF_GenCodeFic.STR_DescRub
      		stConfRub				= :m_oCOlGen.m_stConfigTbl.taRubs[sRub]
      		
      		
      		stRubActu.sNomPropriete	= stRubAnaTmp.sNomPropriete
      		stRubActu.sLibelle		= stRubAnaTmp.sLibelleRubrique
      		stRubActu.sNomRub		= sRub
      		stRubActu.bTypeTexte	= (stRubAnaTmp.nTypeRub = ClZF_GenCodeFic.cstDefRubChaine)
      		
      		SI :m_oCOlGen.m_aPK_de_FK[sRub]..Vide ALORS
      			//La rubrique n'est pas FK : génération de données aléatoires
      			POUR nInd = 1 _À_ :m_oCOlGen.m_stConfigTbl.nNbLigneGen
      				
      				VariableRAZ(stVal)
      				
      				
      				SELON stRubAnaTmp.nTypeRubHF
      					CAS hRubTexte, hRubTexteUnicode, hRubMémoTexte, hRubMémoUnicode
      						nTaille		est un entier	= Hasard(taille(stConfRub.sValMin), taille(stConfRub.sValMax))
      						nNumChar	est un entier
      						
      						stVal.sValeur = droite(:m_oCOlGen.p_sNomUsage + " " + DonneIdentifiant() + " ", nTaille)
      						POUR nNumChar = taille(stVal.sValeur) _À_ nTaille
      							SI Hasard(6) = 1 ALORS
      								stVal.sValeur += " "
      							SINON
      								stVal.sValeur += Caract(Hasard(33, 126))
      							FIN
      						FIN
      						
      						stVal.bAProteger = Vrai
      						
      					CAS hRubEntier1, hRubEntier2, hRubEntier4, hRubEntier8, hRubEntierNonSigné1, hRubEntierNonSigné2, hRubEntierNonSigné4, hRubEntierNonSigné8
      						stVal.sValeur = NumériqueVersChaîne(Hasard(Val(stConfRub.sValMin), Val(stConfRub.sValMax)))
      						
      					CAS hRubMonétaire
      						stVal.sValeur = NumériqueVersChaîne(Hasard(Val(stConfRub.sValMin) * 100, Val(stConfRub.sValMax) * 100) / 100)
      						
      					CAS hRubBooléen
      						stVal.sValeur = (hasard(2) = 1)
      						
      					CAS hRubDate8, hRubDate6, hRubDateHeure
      						nJour est un entier = DateVersEntier(datesys)
      						nJour	= Hasard(nJour - 1500, nJour)
      						stVal.sValeur	= EntierVersDate(nJour)
      						
      						stVal.bAProteger = Vrai
      						
      					AUTRE CAS
      						
      						SI stRubActu.bTypeTexte ALORS
      							stVal.sValeur = "azertyuiop"
      							stVal.bAProteger = vrai
      						SINON
      							stVal.sValeur = "999"
      						FIN
      				FIN
      				
      				TableauAjoute(stRubActu.sValeurs, stVal)
      			FIN
      			
      			
      		SINON
      			VariableRAZ(stVal)
      			stRelTmp est un ClZF_GenCodeFic.STR_Rel = :m_oCOlGen.m_aPK_de_FK[sRub]
      			oColFicPK est un ClZF_GenCodeFic(stRelTmp.sTablePK)
      			oColFicPK.Analyse()
      			tabAValeurs est un tableau de entiers = nIdExist(oColFicPK)
      			
      			//La rubrique est FK : Récupération de données existantes
      			POUR nInd = 1 _À_ :m_oCOlGen.m_stConfigTbl.nNbLigneGen
      				SI bNullRand(stConfRub.nPctNull) ou TableauOccurrence(tabAValeurs) = 0 ALORS
      					stVal.sValeur = "NULL"
      					stVal.bNull = vrai
      				SINON
      					//trace(sRub)
      					stVal.sValeur = nIdRand(tabAValeurs)
      				FIN
      				TableauAjoute(stRubActu.sValeurs, stVal)
      			FIN
      		FIN
      		
      		TableauAjoute(m_aExport, stRubActu)
      	FIN
      FIN
      
      
      
      	PROCÉDURE INTERNE bNullRand(nPct_P est un entier):booléen
      		SI Hasard(100) < nPct_P ALORS
      			RENVOYER Vrai
      		SINON
      			RENVOYER Faux
      		FIN
      		
      	FIN
      
      
      	PROCÉDURE INTERNE nIdExist(oClasseGen_p est un ClZF_GenCodeFic):tableau d'entiers
      		aRetour	est un tableau d'entiers
      		sdIds	est une source de données
      		sReq	est une chaîne
      		
      		sReq	= [
      		SELECT [%oClasseGen_p.p_sNomRubId%] AS Id
      		FROM [%oClasseGen_p.p_sNomTable%]
      		]
      		quand exception dans
      			goapp.Rsql(sdIds, sReq)
      			POUR TOUT sdIds
      				TableauAjoute(aRetour,sdIds.Id)
      			FIN
      		FAIRE
      			gm_oExRecupValsTest.ZF_Declenche([oClasseGen_p.p_sNomTable])
      		fin
      		
      		RENVOYER aRetour
      	FIN
      
      
      	PROCÉDURE INTERNE nIdRand(aIds est un tableau d'entiers):entier
      		nIndTbl est un entier = Hasard(aIds..Occurrence)
      		RENVOYER aIds[nIndTbl]
      	FIN
      
      
     type : 458752
   -
     name : VersTexte
     procedure_id : 1474083877550943738
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] VersTexte ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	chaîne ANSI : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure VersTexte()<metier>:chaine
      
      
      sRetour	est une chaîne
      sLigne	est une chaîne
      nInd est un entier
      stRubActu	est un STR_Export
      
      
      sLigne = "ID"
      POUR TOUT stRubActu DE m_aExport
      	sLigne += [TAB] + stRubActu.sLibelle
      FIN
      sRetour += [RC] + sLigne
      
      /*
      sLigne = "ID"<§cs:10§>
      POUR TOUT stRubActu DE aExport<§cs:10§>
      	sLigne += [TAB] + stRubActu.sNomPropriete<§cs:10§>
      FIN<§cs:10§>
      sRetour += [RC] + sLigne<§cs:10§>
      */
      
      POUR nInd = 1 _À_ :m_oCOlGen.m_stConfigTbl.nNbLigneGen
      	sLigne = nInd
      	POUR TOUT stRubActu DE m_aExport
      		sLigne += [TAB] + stRubActu.sValeurs[nInd].sValeur
      	FIN
      	sRetour += [RC] + sLigne
      FIN
      
      
      renvoyer sRetour
     type : 458752
   -
     name : VersSQL
     procedure_id : 1474088894073454542
     type_code : 12
     code : |1-
      procedure VersSQL()<metier>:chaine
      
      sRetour		est une chaîne
      sLigne		est une chaîne
      nInd		est un entier
      stVal		est un STR_Export_rubs
      sPatern		est une chaîne
      sVal		est une chaine
      stRubActu	est un STR_Export
      nNbOccurence est un entier
      
      POUR TOUT stRubActu DE m_aExport
      	sPatern += [", "] + stRubActu.sNomRub
      FIN
      
      sPatern = "INSERT INTO [%:m_oCOlGen.p_sNomTable%] ([%sPatern%]) VALUES (%1)"
      
      
      si :m_oCOlGen.p_bTableHyerarchisee ALORS
      	nNbOccurence = 1
      sinon
      	nNbOccurence = :m_oCOlGen.m_stConfigTbl.nNbLigneGen
      FIN
      
      POUR nInd = 1 _À_ nNbOccurence
      	sLigne = ""
      	POUR TOUT stRubActu DE m_aExport
      		
      		stVal	= stRubActu.sValeurs[nInd]
      		sVal	= stVal.sValeur
      		
      		si stVal.bAProteger ALORS
      			
      			sVal = Remplace(sVal, "'", "''")
      			
      			sVal = "'" + sVal + "'"
      		FIN
      		
      		sLigne += [", "] + sVal
      	FIN
      	
      	sRetour += [RC] + ChaîneConstruit(sPatern, sLigne)
      FIN
      
      RENVOYER sRetour
     type : 458752
   -
     name : bProteger
     procedure_id : 1474822705166598823
     type_code : 12
     code : |1-
      procedure globale bProteger(nTypeHF_p est un entier)<métier>:booleen
      
      bRetour est un booléen
      
      selon nTypeHF_p
      	CAS hRubBinaire, ...
      		hRubCaractère, ...
      		hRubDate6, ...
      		hRubDate8, ...
      		hRubDateHeure, ...
      		hRubDurée, ...
      		hRubHeure, ...
      		hRubImage, ...
      		hRubInvalide, ...
      		hRubMémoBinaire, ...
      		hRubMémoBinaire4, ...
      		hRubMémoTexte, ...
      		hRubMémoUnicode, ...
      		hRubTexte, ...
      		hRubTexteUnicode
      		
      		bRetour = vrai
      		
      	CAS hRubBooléen, ...
      		hRubEntier1, ...
      		hRubEntier2, ...
      		hRubEntier4, ...
      		hRubEntier8, ...
      		hRubEntierNonSigné1, ...
      		hRubEntierNonSigné2, ...
      		hRubEntierNonSigné4, ...
      		hRubEntierNonSigné8, ...
      		hRubMonétaire, ...
      		hRubNumEnr, ...
      		hRubNumérique, ...
      		hRubRéel4, ...
      		hRubRéel8, ...
      		hRubRéelTurbo, ...
      		hRubIDAuto, ...
      		hRubIDAuto4
      		
      		bRetour = faux
      		
      	AUTRE CAS
      		ExceptionDéclenche(1, "Type non prévu")
      FIN
      
      
      
      
      
      
      renvoyer bRetour
     type : 458752
   -
     name : GetDefRubSQL
     procedure_id : 1524442154309637174
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      // GetDefRubSQL ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure abstraite GetDefRubSQL():tableau associatif de CLZF_GenData.STR_RubSQL
     type : 458752
   -
     name : sRubSqlDeTypeHF
     procedure_id : 1524442850095025336
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      // sRubSqlDeTypeHF ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure abstraite sRubSqlDeTypeHF(nType_p est un entier, nTaille_p est un entier = 0)<métier>:chaîne
      
      /*
      sRetour est une chaîne<§cs:10§>
      <§cs:10§>
      SELON nType_p<§cs:10§>
      	CAS hRubBinaire<§cs:10§>
      		sRetour = ""<§cs:10§>
      	CAS hRubBooléen<§cs:10§>
      		sRetour = ""<§cs:10§>
      	CAS hRubCaractère<§cs:10§>
      		sRetour = ""<§cs:10§>
      	CAS hRubDate8<§cs:10§>
      		sRetour = ""<§cs:10§>
      	CAS hRubDateHeure<§cs:10§>
      		sRetour = ""<§cs:10§>
      	CAS hRubDurée<§cs:10§>
      		sRetour = ""<§cs:10§>
      	CAS hRubEntier1<§cs:10§>
      		sRetour = ""<§cs:10§>
      	CAS hRubEntier2<§cs:10§>
      		sRetour = ""<§cs:10§>
      	CAS hRubEntier4<§cs:10§>
      		sRetour = ""<§cs:10§>
      	CAS hRubEntier8<§cs:10§>
      		sRetour = ""<§cs:10§>
      	CAS hRubEntierNonSigné1<§cs:10§>
      		sRetour = ""<§cs:10§>
      	CAS hRubEntierNonSigné2<§cs:10§>
      		sRetour = ""<§cs:10§>
      	CAS hRubEntierNonSigné4<§cs:10§>
      		sRetour = ""<§cs:10§>
      	CAS hRubEntierNonSigné8<§cs:10§>
      		sRetour = ""<§cs:10§>
      	CAS hRubHeure<§cs:10§>
      		sRetour = ""<§cs:10§>
      	CAS hRubIDAuto<§cs:10§>
      		sRetour = ""<§cs:10§>
      	CAS hRubIDAuto4<§cs:10§>
      		sRetour = ""<§cs:10§>
      	CAS hRubImage<§cs:10§>
      		sRetour = ""<§cs:10§>
      	CAS hRubMémoBinaire<§cs:10§>
      		sRetour = ""<§cs:10§>
      	CAS hRubMémoBinaire4<§cs:10§>
      		sRetour = ""<§cs:10§>
      	CAS hRubMémoTexte<§cs:10§>
      		sRetour = ""<§cs:10§>
      	CAS hRubMémoUnicode<§cs:10§>
      		sRetour = ""<§cs:10§>
      	CAS hRubMonétaire<§cs:10§>
      		sRetour = ""<§cs:10§>
      	CAS hRubNumérique<§cs:10§>
      		sRetour = ""<§cs:10§>
      	CAS hRubRéel4<§cs:10§>
      		sRetour = ""<§cs:10§>
      	CAS hRubRéel8<§cs:10§>
      		sRetour = ""<§cs:10§>
      	CAS hRubRéelTurbo<§cs:10§>
      		sRetour = ""<§cs:10§>
      	CAS hRubTexte<§cs:10§>
      		sRetour = ""<§cs:10§>
      	CAS hRubTexteUnicode<§cs:10§>
      		sRetour = ""<§cs:10§>
      	AUTRE CAS<§cs:10§>
      		ClZF_App.mg_oExSelonCasNonTraite.ZF_Declenche([nType_p])<§cs:10§>
      FIN<§cs:10§>
      <§cs:10§>
      RENVOYER sRetour<§cs:10§>
      */
     type : 458752
   -
     name : GenCodeDiff
     procedure_id : 1524443472865820862
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //GenCodeDiff ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure abstraite GenCodeDiff():vide
     type : 458752
   -
     name : bRubCompatible
     procedure_id : 1526042781332094889
     type_code : 12
     code : |1+
      procédure abstraite bRubCompatible(nTypeHF_p est un entier, sTypeSGBD_p est une chaîne):booleen
      
     type : 458752
   -
     name : stGenSQLRub
     procedure_id : 1526048596719364265
     type_code : 12
     code : |1+
      procedure abstraite stGenSQLRub(sRub_p est une chaine, stRubSql_p est un CLZF_GenData.STR_RubSQL)<metier>:CLZF_GenData.STR_RubSQL
      
     type : 458752
   -
     name : identifieEtatElements
     procedure_id : 1526042094137167451
     type_code : 12
     code : |1+
      procédure protegee identifieEtatElements(sRub_p est une chaîne, stRubSql_p est un CLZF_GenData.STR_RubSQL)<metier>:CLZF_GenData.STR_RubSQL
      
      
      stRetour	est un CLZF_GenData.STR_RubSQL
      stInfoRub	est un ClZF_GenCodeFic.STR_DefRub
      
      
      SI :m_oColGen.m_aRub[sRub_p]..Vide ET stRubSql_p.sType <> "" ET PAS sRub_p = :m_oColGen.p_sNomRubId ALORS
      	stRetour.nTypeAlterRub = CLZF_GenData.cstTypeAlterRub_SuppRub
      SINON
      	stInfoRub				= :m_oColGen.m_aRub[sRub_p]
      	
      	stRetour				= stRubSql_p
      	stRetour.nTypeAlterRub	= cstTypeAlterRub_RAS
      	
      	//Récupération du type et de la définition
      	stRetour.sType	= :sRubSqlDeTypeHF(stInfoRub.nTypeRubHF, stInfoRub.nTaille)
      	stRetour.bEstNullable	= stInfoRub.bNullable
      	stRetour.nTaille		= stInfoRub.nTaille
      FIN
      
      //Est on en création de table ?
      SI :m_bCreeTable ALORS
      	stRetour.nTypeAlterRub = CLZF_GenData.cstTypeAlterRub_CreeTable
      SINON
      	//Non :
      	//La rubrique existe t elle ?
      	SI PAS :m_oColGen.m_aRub[sRub_p]..Vide ET stRubSql_p.sType = "" ALORS
      		stRetour.nTypeAlterRub = CLZF_GenData.cstTypeAlterRub_CreeRub
      	FIN
      FIN
      
      SI stRetour.nTypeAlterRub = cstTypeAlterRub_RAS ALORS
      	SI PAS bRubCompatible(stInfoRub.nTypeRubHF, stRubSql_p.sType) OU ...		//Type différent
      			(stInfoRub.nTypeRubHF dans (hRubTexte, hRubTexteUnicode, hRubCaractère) et stInfoRub.nTaille <> stRubSql_p.nTaille) OU ...	//Taille défférent où cela a une incidence
      			stInfoRub.bNullable <> stRubSql_p.bEstNullable ALORS				//Nullabilité différente
      		
      		stRetour.nTypeAlterRub = CLZF_GenData.cstTypeAlterRub_ModRub
      	FIN
      FIN
      
      
      
      //Identification de ce qu'il faut générer comme code, pour les contraintes "défaut"
      stRetour.nTypeAlterDef = cstTypeAlterDef_RAS
      
      SI stRetour.nTypeAlterRub DANS (CLZF_GenData.cstTypeAlterRub_SuppRub, CLZF_GenData.cstTypeAlterRub_ModRub) OU ...	//Modification rubrique
      		stInfoRub.bNullable ET stRubSql_p.sNomContrainteDef <> "" ALORS												//Contrainte défaut à supprimer
      	
      	SELON stRetour.nTypeAlterRub
      		CAS CLZF_GenData.cstTypeAlterRub_SuppRub
      			stRetour.nTypeAlterDef = cstTypeAlterDef_Supp
      		CAS CLZF_GenData.cstTypeAlterRub_ModRub
      			stRetour.nTypeAlterDef = cstTypeAlterDef_Mod
      			
      		AUTRE CAS
      			
      	FIN
      FIN
      
      SI PAS stInfoRub.bNullable ET (stRubSql_p.sNomContrainteDef = "" OU ...	//Contrainte défaut manquante
      		stRetour.nTypeAlterRub DANS (CLZF_GenData.cstTypeAlterRub_CreeTable, CLZF_GenData.cstTypeAlterRub_CreeRub, CLZF_GenData.cstTypeAlterRub_ModRub)) ALORS
      	
      	SELON stRetour.nTypeAlterRub
      		CAS CLZF_GenData.cstTypeAlterRub_CreeTable, CLZF_GenData.cstTypeAlterRub_CreeRub
      			
      			//La contrainte défaut est à créer
      			stRetour.nTypeAlterDef = cstTypeAlterDef_Cree
      			
      			//Récupération de la valeur par défaut a appliquer à la rubrique
      			stRetour.sValeurDefaut	= stInfoRub.sValDef
      			SI ::bProteger(stInfoRub.nTypeRubHF) ALORS
      				stRetour.sValeurDefaut = "'" + stRetour.sValeurDefaut + "'"
      			FIN
      			
      		CAS CLZF_GenData.cstTypeAlterRub_ModRub
      			stRetour.nTypeAlterDef = cstTypeAlterDef_Mod
      			
      		AUTRE CAS
      			
      	FIN
      FIN
      
      
      //Identification de ce qu'il faut générer comme code, pour les contraintes "clé étrangères"
      stRel_tmp est un ClZF_GenCodeFic.STR_Rel
      SI :m_oColGen.m_aPK_de_FK[sRub_p]..Occurrence > 0 ALORS
      	stRel_tmp				= :m_oColGen.m_aPK_de_FK[sRub_p]
      	
      	stRetour.sRefTablePK	= stRel_tmp.sTablePK
      	stRetour.sRefRubIdPK	= stRel_tmp.sRubriquePK
      FIN
      
      //Faut il créer une clé étrangère ?
      SI stRetour.sRefTablePK = "" ALORS
      	stRetour.nTypeAlterFK = cstTypeAlterFK_RAS
      SINON
      	stRetour.nTypeAlterFK = cstTypeAlterFK_Cree
      FIN
      
      
      renvoyer stRetour
      
      
     type : 458752
   -
     name : GenCodeDiffInit
     procedure_id : 1526047733430212544
     type_code : 12
     code : |1-
      procedure protege GenCodeDiffInit()<metier>:tableau associatif de CLZF_GenData.STR_RubSQL
      
      aStRubSQL		est un tableau associatif de CLZF_GenData.STR_RubSQL
      aRubs			est un tableau associatif de CLZF_GenData.STR_RubSQL
      stRubSql		est un CLZF_GenData.STR_RubSQL
      
      aRubs = :GetDefRubSQL()
      
      
      SI aRubs..Occurrence = 0 ALORS
      	:m_bCreeTable	= Vrai
      SINON
      	:m_bCreeTable	= Faux
      FIN
      
      
      
      POUR TOUT sRub DE :m_oColGen.aLstRubs()
      	SI aRubs[sRub]..Vide ALORS
      		VariableRAZ(stRubSql)
      	SINON
      		stRubSql = aRubs[sRub]
      	FIN
      	
      	aStRubSQL[sRub]	= :stGenSQLRub(sRub, stRubSql)
      FIN
      
      
      renvoyer aStRubSQL
     type : 458752
   -
     name : sNomRelDF
     procedure_id : 1526415945504390885
     type_code : 12
     code : |1+
      procedure protegee sNomRelDF(sTable_p, sRubrique_p)<metier>:chaine
      
      renvoyer "DF_[%sTable_p%]_[%sRubrique_p%]"
     type : 458752
   -
     name : sNomRelFK
     procedure_id : 1526416821677988133
     type_code : 12
     code : |1+
      procedure PROTÉGÉE sNomRelFK(sTableFK_p, sRubriqueFK_p, sTablePK_p, sRubriquePK_p)<metier>:chaine
      
      renvoyer gauche("FK_[%sTableFK_p%]_[%sRubriqueFK_p%]_[%sTablePK_p%]_[%sRubriquePK_p%]", 128)
      
     type : 458752
  properties :
   -
     name : p_sCode
     identifier : 0x152813b6013e5300
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_sCode() : chaîne
         
         renvoyer m_sCode
        type : 1966080
     template_refs : []
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : BwAAAAcAAAA6ih3UbgNXHwTtiPSFUEj+2fi/m7v4QV2rqidAupM=
  original_name : Classe1
resources :
 string_res :
  identifier : 0x1474fed5027f69ff
  internal_properties : BwAAAAcAAAAnMYFQ1bL/vz9ehh7L22SNNSlIzGTOI8h5F/WtgDNP
custom_note :
 internal_properties : BwAAAAcAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
