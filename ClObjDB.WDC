#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : ClObjDB
 major_version : 25
 minor_version : 0
 type : 4
 description : ""
 subtype : 0
class :
 identifier : 0x1e494c4397e0b0e1
 internal_properties : BQAAAAUAAAB2/vstTMCJbS/hlxjFxirSqKvCUuv8YxgpWyl7S3iA
 code_elements :
  type_code : 10
  p_codes :
   -
     code : |1+
      ClObjDB est une Classe
      	PROTÉGÉ
      		m_nIdUnique est un entier
      		m_bEstSupprime est un booléen
      		m_bEnregistrementEnCours est un booléen
      	PRIVÉ
      		m_nPointeur est un entier sur 8 octet
      		m_sNom_Col_Id_Auto est une chaîne
      		m_sNomTable est une chaîne
      		m_bModif est un booléen
      		
      	GLOBAL
      		gaoInstances est un tableau associatif de clobjdb dynamique
      FIN
      
     type : 131072
  procedures :
   -
     name : Constructeur
     procedure_id : 2182359347632451809
     type_code : 27
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //Constructeur (<sNomTable_P> est chaîne, <sNomColIdAuto_P> est chaîne [, <nId_P> est entier])
      //
      // Paramètres :
      //	sNomTable_P (chaîne ANSI) : < indiquez ici le rôle de P_sNomTable >
      //	sNomColIdAuto_P (chaîne ANSI) : <indiquez ici le rôle de sNomColIdAuto_P>
      //	nId_P (entier - valeur par défaut=0) : <indiquez ici le rôle de nId_P>
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      
      
      
      PROCEDURE Constructeur(sNomTable_P est une chaîne , sNomColIdAuto_P est une chaîne , nId_P est un entier = 0)
      
      
      sRefObj est une chaîne
      
      
      //Mémorisation des infos de l'entité de base de données
      :m_sNomTable		= sNomTable_P
      :m_sNom_Col_Id_Auto	= sNomColIdAuto_P
      
      
      si nId_P <> 0 ALORS
      	//Mémorisation de l'ID unique
      	:m_nIdUnique = nId_P
      	
      	//L’instance est elle déja en mémoire ?
      	sRefObj = :sGetNomInstance()
      	SI ::gaoInstances[sRefObj]..Vide ALORS
      		//Non : On la mémorise
      		::gaoInstances[sRefObj] <- objet
      	sinon
      		si enmodetest() alors trace("Doublon : " + sRefObj)
      	fin
      sinon
      	//En création, on considère que l'objet est déja en modification.
      	:m_bModif = vrai
      FIN
      
      
      //Mémorisation de l'adresse de l'objet
      :SyncPointeur()
      
     type : 589824
   -
     name : Destructeur
     procedure_id : 2182359347632517345
     type_code : 28
     code : |1+
      
      
      PROCEDURE Destructeur()
      
      si :m_bModif ALORS
      	trace(ChaîneConstruit("Libération d'un objet non enregistré : %1 ID : %2", ...
      		:m_sNomTable,...
      		:m_nIdUnique))
      FIN
     type : 655360
   -
     name : Enregistre
     procedure_id : 2182359347632583069
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //Enregistre ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      
      PROCEDURE VIRTUELLE Enregistre()
      
      bLeverTopEnreg est un booléen
      
      
      goapp.TranDebut()
      
      quand exception dans
      	
      	//On s'assure qu'on enregistre bien l'instance d'origine.
      	si pas :bVerifPointeur() alors
      		ExceptionDéclenche(1,ChaîneConstruit([
      			Erreur : la référence de l'objet "%1" est différente de celle d'origine.
      			L'objet a été dupliqué.
      			], objet..Classe))
      	FIN
      	
      	
      	//A t on déja le top 'en cours d'enregistrement actif ? (en cas de dérivation de la procédure d'enregistrement)
      	si pas :m_bEnregistrementEnCours ALORS
      		//Non : On le passe à vrai
      		:m_bEnregistrementEnCours = vrai
      		bLeverTopEnreg = vrai
      	FIN
      	
      	
      	//Est ce que l'enregistrement courant correspond à l'enregistrement de la classe ?
      	SI :Get_IdUnique() <> {:m_sNomTable + "." + :m_sNom_Col_Id_Auto,indRubrique} ALORS
      		//Non : Repositionnement, mais sans actualisation des membres de l'instance.
      		:Charge(Vrai)
      	FIN
      	
      	MémoireVersFichier(objet,:m_sNomTable)
      	
      	
      	SI :bModeAjout() ALORS
      		
      		//Traitements précédent l'enregistrement
      		:pre_enregistre()
      		
      		SI :m_bEstSupprime ALORS
      			//Rien a faire : l'élément n'était pas enregistré
      		SINON
      			SI PAS HAjoute(:m_sNomTable) ALORS
      				ExceptionDéclenche(1, "Echec de l'enregistrement : " + RC + HErreurInfo(hErrComplet))
      			sinon
      				:m_nIdUnique = {:m_sNomTable + "." + :m_sNom_Col_Id_Auto,indRubrique}
      			FIN
      		FIN
      		
      		//Traitements post enregistrement
      		:post_enregistre()
      		
      	SINON
      		
      		//Traitements précédent l'enregistrement
      		:pre_enregistre()
      		
      		SI :m_bEstSupprime ALORS
      			
      			SI PAS HSupprime(:m_sNomTable) ALORS
      				ExceptionDéclenche(1, "Echec de l'enregistrement : " + RC + HErreurInfo(hErrComplet))
      			sinon
      				sRef est une chaîne
      				sRef = :sGetNomInstance()
      				si pas ::gaoInstances[sRef]..vide ALORS
      					TableauSupprime(::gaoInstances,sRef)
      				FIN
      			FIN
      			
      		SINON
      			
      			SI PAS HModifie(:m_sNomTable) ALORS
      				ExceptionDéclenche(1, "Echec de l'enregistrement : " + RC + HErreurInfo(hErrComplet))
      			FIN
      		FIN
      		
      		//Traitements post enregistrement
      		:post_enregistre()
      	FIN
      	
      	goapp.TranFin()
      	
      	//On mémorise que l'enregistrement est effectué.
      	:m_bModif = faux
      faire
      	sMsg est une chaîne 
      	sMsg = ExceptionInfo(errMessage)
      	goapp.TranAnnule()
      	ExceptionPropage()
      sinon
      	//A t on initialisé le top 'en cours d'enregistrement' dans la procédure ?
      	si bLeverTopEnreg ALORS
      		//Oui :
      		//On le desactive.
      		:m_bEnregistrementEnCours = faux
      	FIN
      FIN
     type : 458752
   -
     name : Supprimer
     procedure_id : 2182369050085894722
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //Supprimer ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      
      PROCEDURE Supprimer()
      
      :m_bEstSupprime = Vrai
     type : 458752
   -
     name : Get_IdUnique
     procedure_id : 2182372829741356947
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] Get_IdUnique ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	entier : <indiquez ici les valeurs possibles ainsi que leur interprétation>
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      
      FONCTION Get_IdUnique()
      
      RENVOYER :m_nIdUnique
     type : 458752
   -
     name : Charge
     procedure_id : 2182375673090453766
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //Charge ( [<bSansRechargement_P> est booléen])
      //
      // Paramètres :
      //	bSansRechargement_P (booléen - valeur par défaut=0) : <indiquez ici le rôle de bSansRechargement_P>
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      
      PROCEDURE virtuelle PROTÉGÉE Charge(bSansRechargement_P est un booléen = faux)
      
      
      si :bModeAjout() alors
      	hraz(:m_sNomTable)
      sinon
      	
      	
      	HLitRecherche(:m_sNomTable, :m_sNom_Col_Id_Auto, :Get_IdUnique(), hIdentique+hLimiteParcours)
      	SI PAS HTrouve(:m_sNomTable) ALORS
      		ExceptionDéclenche(1, ChaîneConstruit([
      			Enregistrement introuvable : %1.%2 = %3
      			], :m_sNomTable, ...
      			:m_sNom_Col_Id_Auto, ...
      			:Get_IdUnique()))
      		
      	FIN
      FIN
      
      si pas bSansRechargement_P ALORS
      	FichierVersMémoire(objet, :m_sNomTable)
      FIN
      
     type : 458752
   -
     name : pre_enregistre
     procedure_id : 2196877300998161298
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //pre_enregistre ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE PROTÉGÉE VIRTUELLE pre_enregistre()
      
     type : 458752
   -
     name : bModeAjout
     procedure_id : 2199524728066726420
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] bModeAjout ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	booléen : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      FONCTION bModeAjout():booléen
      
      renvoyer (:m_nIdUnique = 0)
     type : 458752
   -
     name : post_enregistre
     procedure_id : 2203200653517288002
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //post_enregistre ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE PROTÉGÉE VIRTUELLE post_enregistre()
      
     type : 458752
   -
     name : GetObj
     procedure_id : 2241094388807434852
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] GetObj (<sClasse_P> est chaîne, <nIdUnique_P> est entier)
      //
      // Paramètres :
      //	sClasse_P (chaîne ANSI) : <indiquez ici le rôle de sClasse_P>
      //	nIdUnique_P (entier) : <indiquez ici le rôle de nIdUnique_P>
      // Valeur de retour :
      // 	ClObjDB : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE globale GetObj(sClasse_P est une chaîne, nIdUnique_P est un entier):ClObjDB
      
      
      
      //A t on déja instancié cet objet ?
      si pas ::gaoInstances[sClasse_P + nIdUnique_P]..Vide ALORS
      	//Oui : on retourne l'objet
      	RENVOYER ::gaoInstances[sClasse_P + nIdUnique_P]
      sinon
      	selon sClasse_P
      		cas "ClUsr"
      			RENVOYER = allouer un ClUsr(nIdUnique_P)
      		cas "ClProjet"
      			RENVOYER = allouer un ClProjet(nIdUnique_P)
      		cas "ClEpic"
      			RENVOYER = allouer un ClEpic(nIdUnique_P)
      		cas "ClUserStory"
      			RENVOYER = allouer un ClUserStory(nIdUnique_P)
      		cas "ClTache"
      			RENVOYER = allouer un ClTache(nIdUnique_P)
      		cas "ClSprint"
      			RENVOYER = allouer un ClSprint(nIdUnique_P)
      		cas "ClCritereAccept"
      			RENVOYER = allouer un ClCritereAccept(nIdUnique_P)
      		cas "ClCritereAccept_Composant"
      			RENVOYER = allouer un ClCritereAccept_Composant(nIdUnique_P)
      		cas "ClSchem"
      			RENVOYER = allouer un ClSchem(nIdUnique_P)
      		cas "ClSchem_Axe"
      			RENVOYER = allouer un ClSchem_Axe(nIdUnique_P)
      		cas "ClSchem_Inter_Attente"
      			RENVOYER = allouer un ClSchem_Inter_Attente(nIdUnique_P)
      		cas "ClSchem_Inter_Auto"
      			RENVOYER = allouer un ClSchem_Inter_Auto(nIdUnique_P)
      		cas "ClSchem_Inter_Condition"
      			RENVOYER = allouer un ClSchem_Inter_Condition(nIdUnique_P)
      		cas "ClSchem_Inter_Manu"
      			RENVOYER = allouer un ClSchem_Inter_Manu(nIdUnique_P)
      		cas "ClSchem_Inter_Operateur"
      			RENVOYER = allouer un ClSchem_Inter_Operateur(nIdUnique_P)
      		cas "ClSchem_Inter_SousProcess"
      			RENVOYER = allouer un ClSchem_Inter_SousProcess(nIdUnique_P)
      		cas "ClMessage"
      			RENVOYER = allouer un ClMessage(nIdUnique_P)
      		AUTRE CAS
      			RENVOYER null
      	FIN
      FIN
     type : 458752
   -
     name : sGetNomInstance
     procedure_id : 2241783371164075602
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //sGetNomInstance ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE prive sGetNomInstance()
      
      renvoyer objet..Classe + :Get_IdUnique()
     type : 458752
   -
     name : Get_est_supprime
     procedure_id : 2241833128364771972
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] Get_est_supprime ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	booléen : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE Get_est_supprime()
      renvoyer :m_bEstSupprime
     type : 458752
   -
     name : LibereInstancesMemo
     procedure_id : 2241842654647772656
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //LibereInstancesMemo ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE globale LibereInstancesMemo()
      
      oInstance est un objet dynamique
      POUR TOUT ELEMENT oInstance DE ClObjDB.gaoInstances
      	liberer oInstance
      FIN
      TableauSupprimeTout(ClObjDB.gaoInstances)
     type : 458752
   -
     name : Purge_cache_obj
     procedure_id : 2245475530661232052
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //Purge_cache_obj ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE globale Purge_cache_obj()
      
      TableauSupprimeTout(::gaoInstances)
     type : 458752
   -
     name : sExport
     procedure_id : 1156363233832661064
     type_code : 12
     code : |1-
      procédure  sExport():json 
      Ret est un json
      renvoyer Ret
     type : 458752
   -
     name : bVerifPointeur
     procedure_id : 1161153986262919272
     type_code : 12
     code : |1-
      procédure bVerifPointeur():booléen
      nRefObj est un entier sur 8 octets = &objet
      renvoyer :m_nPointeur = nRefObj
     type : 458752
   -
     name : EstModif
     procedure_id : 1166840673275814176
     type_code : 12
     code : |1+
      procédure protegé EstModif()
      :m_bModif = vrai
     type : 458752
   -
     name : SyncPointeur
     procedure_id : 1166840939563848762
     type_code : 12
     code : |1-
      procédure SyncPointeur()
      :m_nPointeur = &objet
     type : 458752
   -
     name : bEstModifie
     procedure_id : 1204312575051391418
     type_code : 12
     code : |1+
      procédure bEstModifie()
      renvoyer :m_bModif
     type : 458752
  properties :
   -
     name : p_bEnregistrementEnCours
     identifier : 0x1f6738c368121a82
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_bEnregistrementEnCours() : booléen
         renvoyer :m_bEnregistrementEnCours
        type : 1966080
     template_refs : []
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : BQAAAAUAAAA6ih3UbgNXHwTtiPSFUEj+2fi/m7v4QV2rqidAupM=
resources :
 string_res :
  identifier : 0x1e494c4397e1b0e1
  internal_properties : BQAAAAUAAAAnMYFQ1bL/vz9ehh7L22SNNSlIzGTOI8h5F/WtgDNP
custom_note :
 internal_properties : BQAAAAUAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
