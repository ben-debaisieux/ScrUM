#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : ClGLPI_Moteur
 major_version : 27
 minor_version : 0
 type : 4
 description : ""
 subtype : 0
class :
 identifier : 0x1390637205c1176a
 internal_properties : BwAAAAcAAAB2/vstTMCJbS/hlxjFxirSqKvCUuv8YxgpWyl7S3iA
 code_elements :
  type_code : 10
  p_codes :
   -
     code : |1+
      ClGLPI_Moteur est une Classe
      	m_sSessionToken 	est chaine
      	m_opclEntite		est une ClGLPI_Entite dynamique
      	m_aopclEntite		est un tableau de ClGLPI_Entite dynamique
      	m_sURL				est une chaine
      	m_nMethode			est un entier
      	m_sParam			est une chaine
      	m_bList				est un booleen
      	m_vBody				est un variant
      fin
      
      STR_GLPI_ITEMS est une structure
      	nID est un entier
      	sNom est une chaine
      fin
      
      CONSTANTE
      	cstGLPI_Categories_Autres = 11
      	cstGLPI_Categories_Droits_Acces = 12
      	cstGLPI_Categories_Imprimantes = 5
      	cstGLPI_Categories_Mail = 6
      	cstGLPI_Categories_Materiel = 4
      	cstGLPI_Categories_Pistolet_Zebra = 9
      	cstGLPI_Categories_Telephonie = 7
      	//cstGLPI_Categories_Wifi = 0
      	cstGLPI_Categories_WinMat = 8
      	cstGLPI_Type_Membre_User = 1
      	cstGLPI_Type_Membre_Group = 2
      	cstGLPI_URL_Complet = "https://glpi.union-materiaux.fr/apirest.php/"
      	cstGLPI_URL = "https://glpi.union-materiaux.fr/"
      	cstGLPI_APP_TOKEN = "TYUBaYZKwbVtqXFQQcbveIoLJGKIRcaQsi9lMwZw"
      	// IP test nouveau environnement glpi
      	//cstGLPI_URL_Complet	= "http://10.20.30.113/apirest.php/"
      	//cstGLPI_URL			= "http://10.20.30.113/"
      	
      	cstGLPI_Type_Demandeur = 1
      	cstGLPI_Type_Attribué_A = 2
      FIN
     type : 131072
  procedures :
   -
     name : Constructeur
     procedure_id : 1409736024740992874
     type_code : 27
     code : |1-
      procédure Constructeur(oGLPI_Entite est une ClGLPI_Entite dynamique)
      
      m_opclEntite 		<- oGLPI_Entite
      m_bList 			= faux
     type : 589824
   -
     name : Constructeur
     procedure_id : 1409736024740992874
     type_code : 27
     code : |1-
      procédure Constructeur(aOGLPI_Entite)
      aOGLPI_Entite 		<- aOGLPI_Entite
      m_bList 			= vrai
     type : 589825
   -
     name : Destructeur
     procedure_id : 1409736024741058410
     type_code : 28
     code : |1+
      procédure Destructeur()
      KillSession()
     type : 655360
   -
     name : GetAccessToken
     procedure_id : 1409736656101529494
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] GetAccessToken ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	booléen : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure GetAccessToken()
      restRequete 	est une restRequete
      restReponse 	est une restRéponse
      jsonAccessToken	est un json
      
      restRequete..Méthode 			= "GET"
      restRequete..ContentType 		= "application/json"
      //restRequete..url 				= "https://glpi.union-materiaux.fr/apirest.php/initSession"
      restRequete..url 				= cstGLPI_URL_Complet + "initSession"
      restRequete["App-Token"]		= cstGLPI_APP_TOKEN
      restRequete["Authorization"]	= "user_token rp7bu1tY2OzAJmvg5GaReGm2kOqz8qf4UMNcGBMP"	
      
      restReponse = RESTEnvoie(restRequete)
      
      si pas restReponse.CodeEtat dans (200, 201) ALORS
      	erreur("Impossible de récupérer le token")
      	renvoyer faux
      FIN
      
      jsonAccessToken = restReponse.Contenu
      
      m_sSessionToken = jsonAccessToken.session_token
      
      renvoyer vrai
     type : 458752
   -
     name : Exec
     procedure_id : 1409742037697000865
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] Exec (<vRetour> est variant [, <bAvecEnteteAccept> est booléen])
      //
      // Paramètres :
      //	vRetour (variant) : <indiquez ici le rôle de vRetour>
      // 	bAvecEnteteAccept (booléen - valeur par défaut=1) : <indiquez ici le rôle de bAvecEnteteAccept>
      
      // Valeur de retour :
      // 	booléen : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      //	bJson (booléen - valeur par défaut=0) : <indiquez ici le rôle de bJson>
      procédure Exec(vRetour est un variant, LOCAL bAvecEnteteAccept est un booléen = vrai)
      restRequete		est une restRequete
      restReponse		est une restRéponse
      
      si m_sSessionToken = "" ALORS
      	si pas GetAccessToken() ALORS
      		renvoyer faux
      	FIN
      FIN
      
      si pas ChaîneOccurrence(m_surl, "https") ALORS
      	m_surl = remplace(m_surl, "http", "https")	
      FIN
      
      restRequete..Méthode			= m_nMethode
      restRequete..ContentType		= "application/json"
      si m_sParam = "" ALORS
      	restRequete..URL				= m_sURL
      sinon
      	restRequete..URL				= m_sURL + m_sParam	
      FIN
      
      si m_vBody <> null ALORS
      	restRequete.Contenu = variantversjson(m_vBody)
      FIN
      
      restRequete["App-Token"]		= cstGLPI_APP_TOKEN
      restRequete["session-token"]	= m_sSessionToken
      restRequete["session-token"]	= m_sSessionToken
      
      SI bAvecEnteteAccept ALORS
      	restRequete["Accept"]	= "application/octet-stream"
      FIN
      
      restReponse						= RESTEnvoie(restRequete)
      
      SI restReponse.CodeEtat = 0 ALORS
      	nNbrEssaie est un entier
      	TANTQUE restReponse.CodeEtat = 0 _ET_ nNbrEssaie < 6
      		nNbrEssaie++
      		Temporisation(500)
      		restReponse						= RESTEnvoie(restRequete)
      	FIN
      FIN
      
      SI PAS restReponse.CodeEtat DANS (200, 201, 206) ALORS
      	Erreur("Impossible d’exécuter la requête", restReponse.Contenu)
      	RENVOYER Faux
      FIN
      
      si chaineoccurrence(restReponse.ContentType,  "application/json") <> 0 _et_ pas Contient(m_sURL, "killSession") ALORS
      	vRetour = JSONVersVariant(restReponse.Contenu)	
      sinon
      	vRetour = restReponse.Contenu	
      FIN
      
      
      
      renvoyer vrai
     type : 458752
   -
     name : GetTicketsOpenedWinmat
     procedure_id : 1409745409246653957
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] GetTicketsOpenedWinmat (<nStatut> est entier, <sCategorie> est chaîne [, <sDate_p> est chaîne [, <nIDUser_p> est entier]])
      //
      // Paramètres :
      //	nStatut (entier) : <indiquez ici le rôle de nStatut>
      //	sCategorie (chaîne ANSI) : <indiquez ici le rôle de sCategorie>
      //	sDate_p (chaîne ANSI - valeur par défaut="") : <indiquez ici le rôle de sDate_p>
      //	nIDUser_p (entier - valeur par défaut=0) : <indiquez ici le rôle de nIDUser_p>
      
      // Valeur de retour :
      // 	booléen : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      //	nStatut (entier) : <indiquez ici le rôle de nStatut>
      procédure GetTicketsOpenedWinmat(nStatut est un entier, sCategorie est une chaine, sDate_p est une chaine="", nIDUser_p est un entier = 0)
      sID		est une chaine
      oTicket	est un ClGLPI_ticket dynamique
      vData	est un variant
      vRetour	est un Variant
      sParam	est une chaine
      
      sParam			= "?&criteria[0][link]=AND&criteria[0][field]=12&criteria[0][searchtype]=equals&criteria[0][value]=" + nStatut
      
      SI sCategorie <> "" ALORS
      	sParam			+= "&criteria[1][link]=AND&criteria[1][field]=7&criteria[1][searchtype]=contains&criteria[1][value]=" + sCategorie
      FIN
      
      SI sDate_p <> "" ALORS
      	sParam			+= "&criteria[2][link]=AND&criteria[2][field]=15&criteria[2][searchtype]=morethan&criteria[2][value]=" + sDate_p
      FIN
      
      SI nIDUser_p <> 0 ALORS
      	sParam			+= "&criteria[3][link]=AND&criteria[3][field]=5&criteria[3][searchtype]=equals&criteria[3][value]=" + nIDUser_p
      FIN
      
      sParam			+= "&range=0-200"
      
      InitRequete(cstGLPI_URL_Complet + "search/Ticket", httpGet, sParam) 
      
      SI PAS Exec(vRetour) ALORS
      	RENVOYER Faux
      FIN
      
      vData = vRetour.data
      
      si vData <> null ALORS
      	POUR TOUT vTicket de vData
      		oTicket	= allouer un ClGLPI_Ticket
      		sID		= vTicket."2"
      		GetTicket(sID, oTicket, vTicket."7")
      		TableauAjoute(m_aopclEntite, oTicket)
      	FIN
      FIN
      
      renvoyer vrai
      
     type : 458752
   -
     name : GetTicket
     procedure_id : 1409767592755216243
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] GetTicket (<sID> est chaîne, <oTicket> est ClGLPI_Ticket [, <sCategorie_p> est chaîne])
      //
      // Paramètres :
      //	sID (chaîne ANSI) : <indiquez ici le rôle de sID>
      //	oTicket (ClGLPI_Ticket) : <indiquez ici le rôle de oTicket>
      //	sCategorie_p (chaîne ANSI - valeur par défaut="Winmat") : <indiquez ici le rôle de sCategorie_p>
      
      // Valeur de retour :
      // 	booléen : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure GetTicket(local sID est une chaine, oTicket est un ClGLPI_Ticket, LOCAL sCategorie_p est une chaine = "Winmat")<métier>:booleen
      avLinks	est un tableau de variant
      vRetour est un variant
      nIndice	est un entier
      sURL	est une chaine
      stLink	est une ClGLPI_Ticket.STR_links
      
      InitRequete(cstGLPI_URL_Complet + "Ticket/" + sID)
      
      si pas exec(vRetour) ALORS
      	renvoyer faux
      FIN
      
      avLinks = vRetour.links
      oTicket.m_sSujet 			= vRetour.name
      oTicket.m_nId 				= vRetour.id
      oTicket.m_dhDateCreation 	= vRetour.date_creation
      oTicket.m_nIDPriorite 		= vRetour.priority
      oTicket.m_spriorite			= oTicket.GetPriorityName(val(vRetour.priority))
      oTicket.m_bufDescription	= HTMLVersTexte(vRetour.content)
      oTicket.m_sType				= oTicket.GetTypeName(val(vRetour.type))
      //TODO a récupérer quand on aura les droits
      oTicket.m_sCategorie		= sCategorie_p
      oTicket.m_sStatut			= oTicket.GetStatusName(val(vRetour.status))
      
      pour tout vLinks de avLinks
      	stLink.sRel 	= vLinks.rel
      	stLink.shref 	= vLinks.href
      	tableauajoute(oTicket.m_astLinks, stLink)
      FIN
      nIndice = tableaucherche(oTicket.m_astLinks, tcLinéaire, "sRel", "Location")
      
      si nIndice <> -1 ALORS
      	sURL = oTicket.m_astLinks[nIndice].shref
      	GetTicketLocation(sURL, oTicket)
      FIN
      
      sURL = cstGLPI_URL_Complet + "User/" + vRetour.users_id_recipient
      oTicket.m_sUtilisateur = GetTicketUsername(sURL)
      nIndice = tableaucherche(oTicket.m_astLinks, tcLinéaire, "sRel", "User")
      
      si nIndice <> -1 ALORS
      	sURL = oTicket.m_astLinks[nIndice].shref
      	oTicket.m_sUtilisateur = GetTicketUsername(sURL)
      FIN
      
      nIndice = tableaucherche(oTicket.m_astLinks, tcLinéaire, "sRel", "Document_Item")
      
      si nIndice <> -1 ALORS
      	sURL = oTicket.m_astLinks[nIndice].shref
      	GetTicketDocuments(sURL, oTicket)
      FIN
      //ITILFollowup
      nIndice = TableauCherche(oTicket.m_astLinks, tcLinéaire, "sRel", "ITILFollowup")
      
      si nIndice <> -1 ALORS
      	sURL = oTicket.m_astLinks[nIndice].shref
      	GetTicketFollowups(sURL, oTicket.m_astSuiviCom, oTicket)
      FIN
      
      nIndice = TableauCherche(oTicket.m_astLinks, tcLinéaire, "sRel", "TicketFollowup")
      
      SI nIndice <> -1 ALORS
      	sURL = oTicket.m_astLinks[nIndice].sHref
      	GetTicketFollowups(sURL, oTicket.m_astSuiviCom, oTicket)
      FIN
      
      // Ticket_User
      nIndice = TableauCherche(oTicket.m_astLinks, tcLinéaire, "sRel", "Ticket_User")
      
      SI nIndice <> -1 ALORS
      	sURL = oTicket.m_astLinks[nIndice].sHref
      	GetTicketUserAssign(oTicket.m_nId,oTicket)
      FIN
      
      // Group_Ticket
      nIndice = TableauCherche(oTicket.m_astLinks, tcLinéaire, "sRel", "Group_Ticket")
      
      SI nIndice <> -1 ALORS
      	sURL = oTicket.m_astLinks[nIndice].sHref
      	GetTicketGroupAssign(oTicket.m_nId,oTicket)
      FIN
      
      // on récupère les infos des plugin fields
      oTicket.m_stPluginFields_Info = GetTicketFieldPluggin(oTicket.m_nId)
      
      renvoyer vrai
     type : 458752
   -
     name : GetTicketLocation
     procedure_id : 1409785485624528811
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] GetTicketLocation (<sURL> est chaîne, <oTicket> est ClGLPI_Ticket)
      //
      // Paramètres :
      //	sURL (chaîne ANSI) : <indiquez ici le rôle de sURL>
      //	oTicket (ClGLPI_Ticket) : <indiquez ici le rôle de oTicket>
      
      // Valeur de retour :
      // 	booléen : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure GetTicketLocation(sURL est une chaine, oTicket est un ClGLPI_Ticket) : booléen
      vRetour est un Variant
      
      InitRequete(sURL)
      
      si pas Exec(vRetour) ALORS
      	renvoyer faux
      FIN
      
      oTicket.m_sLieu = vRetour.name
      
      renvoyer vrai
     type : 458752
   -
     name : GetTicketUsername
     procedure_id : 1409786336028120816
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] GetTicketUsername (<sURL> est chaîne)
      //
      // Paramètres :
      //	sURL (chaîne ANSI) : <indiquez ici le rôle de sURL>
      // Valeur de retour :
      // 	chaîne ANSI : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      //	oTicket (ClGLPI_Ticket) : <indiquez ici le rôle de oTicket>
      procédure GetTicketUsername(sURL est une chaine) : chaine
      vRetour est un variant
      sNom 	est une chaine
      sPrenom est une chaine
      sNom_Renvoyer est une chaine
      
      InitRequete(sURL)
      
      si pas Exec(vRetour) ALORS
      	renvoyer ""
      FIN
      
      SI CONTIENT(sURL,"Group") ALORS
      	
      	// group
      	SI PAS contient(sURL,"0") ALORS
      		sNom_Renvoyer = vRetour.name
      	FIN
      SINON
      	// User
      	sPrenom	= vRetour.firstname
      	sNom	= vRetour.realname  
      	
      	sNom_Renvoyer = sPrenom + " " + sNom
      	
      	SI SansEspace(sNom_Renvoyer) = ""
      		sNom_Renvoyer = vRetour.name
      	FIN
      	
      FIN
      
      
      renvoyer sNom_Renvoyer
     type : 458752
   -
     name : GetTicketDocuments
     procedure_id : 1409796296059336361
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] GetTicketDocuments (<sURL> est chaîne, <oTicket> est ClGLPI_Ticket)
      //
      // Paramètres :
      //	sURL (chaîne ANSI) : <indiquez ici le rôle de sURL>
      //	oTicket (ClGLPI_Ticket) : <indiquez ici le rôle de oTicket>
      
      // Valeur de retour :
      // 	booléen : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure GetTicketDocuments(sURL est une chaine, oTicket est un ClGLPI_Ticket) : booléen
      vRetour 	est un variant
      stDoc		est un ClGLPI_Ticket.STR_Documents
      nIDDocument est un entier
      
      
      InitRequete(sURL)
      
      si pas Exec(vRetour) ALORS
      	renvoyer faux
      FIN
      
      pour tout vDocument de vRetour
      	sURL = cstGLPI_URL_Complet + "Document/" + vDocument.documents_id 
      	
      	nIDDocument = vDocument.documents_id
      	
      	SI nIDDocument <> 0 ALORS
      		SI PAS GetTicketDocument(sURL, stDoc) ALORS
      			RENVOYER Faux
      		FIN
      		TableauAjoute(oTicket.m_astDocument	, stDoc)
      	FIN
      FIN
      
      renvoyer vrai
     type : 458752
   -
     name : GetTicketDocument
     procedure_id : 1409798117125566154
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] GetTicketDocument (<sURL> est chaîne, <stDoc> est STR_Documents)
      //
      // Paramètres :
      //	sURL (chaîne ANSI) : <indiquez ici le rôle de sURL>
      //	stDoc (STR_Documents) : <indiquez ici le rôle de stDoc>
      // Valeur de retour :
      // 	booléen : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure GetTicketDocument(sURL est une chaîne, stDoc est un ClGLPI_Ticket.STR_Documents) : booleen
      vRetour 	est un variant
      sFilePath 	est une chaine
      
      InitRequete(sURL)
      
      si pas exec(vRetour,Faux) ALORS
      	renvoyer faux
      FIN
      
      sFilePath = vRetour.filepath
      stDoc.sNom 			= vRetour.filename
      stDoc.sExtension 	= extraitchaine(sFilePath, 1, "/")
      stDoc.nid 			= vRetour.id
      //stDoc.buFFichier	= GetTicketDocumentBuffer(val(vRetour.document_id))
      
      SI PAS Exec(vRetour,Vrai) ALORS
      	RENVOYER Faux
      FIN
      stDoc.buFFichier	= vRetour
      
      renvoyer vrai
     type : 458752
   -
     name : GetTicketDocumentBuffer
     procedure_id : 1409799774983000699
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] GetTicketDocumentBuffer (<nIDDocument> est entier)
      //
      // Paramètres :
      //	nIDDocument (entier) : <indiquez ici le rôle de nIDDocument>
      // Valeur de retour :
      // 	Type indéterminé : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure GetTicketDocumentBuffer(nIDDocument est un entier)
      vRetour est un variant
      vBody est un variant
      
      vBody = [
      {"input": {"id": [%nIDDocument%]}}
      ]
      
      InitRequete(cstGLPI_URL_Complet + "Document/&alt=media",<vBody>:vBody)
      
      si pas exec(vRetour) ALORS
      	renvoyer ""
      FIN
      
      renvoyer vRetour
     type : 458752
   -
     name : GetTicketFollowups
     procedure_id : 1409811921168219006
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] GetTicketFollowups (<sURL> est chaîne, <aStSuivi> est tableau (STR_Suivi_Commentaire), <oTicket> est ClGLPI_Ticket)
      //
      // Paramètres :
      //	sURL (chaîne ANSI) : <indiquez ici le rôle de sURL>
      //	aStSuivi (tableau (STR_Suivi_Commentaire)) : <indiquez ici le rôle de tab>
      //	oTicket (ClGLPI_Ticket) : <indiquez ici le rôle de oTicket>
      
      // Valeur de retour :
      // 	booléen : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure GetTicketFollowups(sURL est une chaine, aStSuivi Est un tableau de ClGLPI_Ticket.STR_Suivi_Commentaire, oTicket est un ClGLPI_Ticket)
      vRetour		est un variant
      stSuivi 	est une ClGLPI_Ticket.STR_Suivi_Commentaire
      nIDDoc		est un entier
      stDoc 		est un ClGLPI_Ticket.STR_Documents
      nIndice est un entier
      sURL_Doc est une chaine
      
      
      InitRequete(sURL)
      
      SI PAS Exec(vRetour) ALORS
      	RENVOYER Faux
      FIN
      
      pour tout vSuivi de vRetour
      	stSuivi.sUtilisateur 	= GetTicketUsername(cstGLPI_URL_Complet + "User/" + vSuivi.users_id)
      	stSuivi.dhCreation		= vSuivi.date_creation
      	stSuivi.sDateAffichage	= DateHeureVersChaîne(stSuivi.dhCreation, "JJ/MM/AAAA HH:mm")
      	stSuivi.buContent		= HTMLverstexte(vSuivi.content)
      	
      	tableauajoute(aStSuivi, stSuivi)
      	
      	sURL_Doc = cstGLPI_URL_Complet + "ITILFollowup/[%vSuivi.id%]/Document_Item/"
      	
      	GetTicketDocuments(sURL_Doc, oTicket)
      	
      FIN
      
      RENVOYER Vrai
     type : 458752
   -
     name : UpdateTicketStatut
     procedure_id : 1409817749439082675
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] UpdateTicketStatut (<nIDTicket> est entier, <nStatut> est entier)
      //
      // Paramètres :
      //	nIDTicket (entier) : <indiquez ici le rôle de nIDTicket>
      //	nStatut (entier) : <indiquez ici le rôle de nStatut>
      
      // Valeur de retour :
      // 	booléen : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      //	nGroupe (entier) : <indiquez ici le rôle de nGroupe>
      procédure UpdateTicketStatut(local nIDTicket est un entier, LOCAL nStatut est un entier)
      vRetour	est un variant
      vInput	est un variant
      vBody 	est un variant
      
      //Maj du statut
      m_surl 			= cstGLPI_URL_Complet + "Ticket/"
      m_nMethode 		= httpput
      m_sParam		= ""
      vInput.id 		= nIDTicket
      vInput.status 	= nStatut
      
      
      vBody.input = vInput	
      
      InitRequete(cstGLPI_URL_Complet + "Ticket/", httpPut, *, vBody)	
      si pas Exec(vRetour) ALORS
      	renvoyer faux
      FIN
      
      
      renvoyer vrai
      
     type : 458752
   -
     name : UpdateTicketUser
     procedure_id : 1410119771435331963
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] UpdateTicketUser (<nIDTicket> est entier)
      //
      // Paramètres :
      //	nIDTicket (entier) : <indiquez ici le rôle de nIDTicket>
      
      // Valeur de retour :
      // 	booléen : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      //	nStatut (entier) : <indiquez ici le rôle de nStatut>
      procédure UpdateTicketUser(nIDTicket est un entier)
      vRetour	est un variant
      vInput	est un variant
      vBody	est un variant
      
      //Maj de l'attribution si le user n'est pas attribué
      m_sURL			= cstGLPI_URL_Complet + "Ticket/" + nIDTicket + "/ticket_user"
      m_nMethode		= httppost
      
      vInput.tickets_id	= nIDTicket
      vInput.users_id		= ClGLPI_Ticket.cst_User_ID
      vInput.type			= ClGLPI_Ticket.cst_AssigneA_Type
      
      vBody.input	= vInput	
      
      InitRequete(cstGLPI_URL_Complet + "Ticket/" + nIDTicket + "/ticket_user", httpPost, *, vBody)
      
      SI PAS Exec(vRetour) ALORS
      	RENVOYER Faux
      FIN
      
      renvoyer vrai
      
     type : 458752
   -
     name : KillSession
     procedure_id : 1410121283264695927
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] KillSession ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	booléen : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure privée KillSession()
      vRetour est un variant
      
      InitRequete(cstGLPI_URL_Complet + "killSession")
      
      si pas exec(vRetour) ALORS
      	erreur("Impossible de détruire la session")
      	renvoyer faux
      FIN
      
      renvoyer vrai
     type : 458752
   -
     name : CreateFollowup
     procedure_id : 1410151193427972175
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] CreateFollowup (<sContenu>)
      //
      // Paramètres :
      //	sContenu : <indiquez ici le rôle de sContenu>
      // Valeur de retour :
      // 	booléen : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure CreateFollowup(sContenu)
      vRetour est un variant
      oTicket est un ClGLPI_Ticket
      vInput	est un variant
      stSuivi est un ClGLPI_Ticket.STR_Suivi_Commentaire
      vBody 	est un variant
      
      oTicket = m_opclEntite
      
      vInput.tickets_id	= oTicket.m_nId
      vInput.users_id		= ClGLPI_Ticket.cst_User_ID
      vInput.content		= sContenu
      
      vBody.input		= vInput	
      
      InitRequete(ChaîneConstruit(cstGLPI_URL_Complet + "Ticket/%1/TicketFollowup", oTicket.m_nId), httpPost, "", vBody)
      
      si pas exec(vRetour) ALORS
      	renvoyer faux
      FIN
      
      stSuivi.dhCreation 		= dateheuresys()
      stSuivi.dhCreation 		= dateverschaine(stSuivi.dhCreation, "JJ/MM/AAAA HH:mm")
      stSuivi.sUtilisateur 	= ClGLPI_Ticket.cst_Utilisateur_Defaut
      stSuivi.buContent 		= sContenu
      
      tableauajoute(oTicket.m_astSuiviCom, stSuivi)
      
      m_opclEntite = oTicket
      
      renvoyer vrai
     type : 458752
   -
     name : InitRequete
     procedure_id : 1410154174136297092
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //InitRequete (<sURL> est chaîne [, <nMethode> est entier [, <sParam> est chaîne [, <vBody> est variant]]])
      //
      // Paramètres :
      //	sURL (chaîne ANSI) : <indiquez ici le rôle de sURL>
      //	nMethode (entier - valeur par défaut=1) : <indiquez ici le rôle de nMethode>
      //	sParam (chaîne ANSI - valeur par défaut="") : <indiquez ici le rôle de sParam>
      //	vBody (variant - valeur par défaut=0) : <indiquez ici le rôle de vBody>
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure PROTEGE InitRequete(sURL est chaine, nMethode est entier = httpget, sParam est chaine = "" , vBody est un variant = null)
      
      m_sURL		= sURL
      m_sParam	= sParam
      m_nMethode	= nMethode
      m_vBody		= vBody
     type : 458752
   -
     name : UpdateTicketCategory
     procedure_id : 1443141644839928466
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] UpdateTicketCategory (<nIDTicket> est entier, <nCategory> est entier)
      //
      // Paramètres :
      //	nIDTicket (entier) : <indiquez ici le rôle de nIDTicket>
      //	nCategory (entier) : <indiquez ici le rôle de nStatut>
      
      // Valeur de retour :
      // 	booléen : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure UpdateTicketCategory(local nIDTicket est un entier, LOCAL nCategory est un entier)
      vRetour	est un variant
      vInput	est un variant
      vBody 	est un variant
      
      //Maj du statut
      m_surl 			= cstGLPI_URL_Complet + "Ticket/"
      m_nMethode 		= httpput
      m_sParam		= ""
      vInput.id 		= nIDTicket
      vInput.itilcategories_id = nCategory
      
      vBody.input = vInput	
      
      InitRequete(cstGLPI_URL_Complet + "Ticket/", httpPut, *, vBody)	
      si pas Exec(vRetour) ALORS
      	renvoyer faux
      FIN
      
      
      renvoyer vrai
      
     type : 458752
   -
     name : GetCategories
     procedure_id : 1443210183934100160
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] GetCategories ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	variant : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure GetCategories()
      
      
      // attention problème de droit
      // droit super admin
      
      vRetour	est un variant
      
      //Maj du statut
      m_sURL						= cstGLPI_URL_Complet + "ITILCategory"
      m_nMethode					= httpGet
      m_sParam					= ""
      	
      
      InitRequete(cstGLPI_URL_Complet + "ITILCategory", httpGet)	
      SI PAS Exec(vRetour) ALORS
      
      FIN
      
      
      
      
      RENVOYER vRetour
     type : 458752
   -
     name : UpdateTicketAssign
     procedure_id : 1443861558677629416
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] UpdateTicketAssign (<nIDTicket> est entier, <sIDMembre_p> est chaîne [, <nType_Membre_p> est entier])
      //
      // Paramètres :
      //	nIDTicket (entier) : <indiquez ici le rôle de nIDTicket>
      //	sIDMembre_p (chaîne ANSI) : <indiquez ici le rôle de nGroupe>
      //	nType_Membre_p (entier - valeur par défaut=1) : <indiquez ici le rôle de nType_Membre_p>
      
      // Valeur de retour :
      // 	booléen : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure UpdateTicketAssign(LOCAL nIDTicket est un entier, LOCAL sIDMembre_p est une chaine,nType_Membre_p est un entier = cstGLPI_Type_Membre_User)
      
      
      vRetour	est un Variant
      vInput	est un Variant
      vBody	est un Variant
      sUrl est une chaine
      
      
      //Maj attribution
      SI nType_Membre_p = cstGLPI_Type_Membre_User ALORS
      	sUrl				= cstGLPI_URL_Complet + "Ticket/[%nIDTicket%]/Ticket_User/"
      	vInput.tickets_id	= nIDTicket
      	vInput.users_id		= sIDMembre_p
      SINON
      	sUrl				= cstGLPI_URL_Complet + "Ticket/[%nIDTicket%]/Group_Ticket/"
      	vInput.groups_id = sIDMembre_p
      	vInput.tickets_id	= nIDTicket
      FIN
      
      // élément qui ne change pas
      vInput.type					= "2"
      vInput.use_notification		= "1"
      vBody.input					= vInput
      
      m_sURL						= sUrl
      m_nMethode					= httpPost
      m_sParam					= ""
      
      
      InitRequete(sUrl, httpPost, *, vBody)	
      SI PAS Exec(vRetour) ALORS
      	RENVOYER Faux
      FIN
      
      
      RENVOYER Vrai
     type : 458752
   -
     name : GetInfoUser
     procedure_id : 1444291424782818633
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] GetInfoUser ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	booléen : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure GetInfoUser()
      
      
      vRetour	est un Variant
      sLien est une chaine = cstGLPI_URL_Complet + "User?criteria[0][field]=is_active&criteria[0][value]=1&criteria[1][link]=AND&criteria[1][field]=is_deleted&criteria[1][value]=0&range=0-1500"
      
      
      //Maj du statut
      m_sURL						= sLien
      m_nMethode					= httpGet
      m_sParam					= ""
      
      
      
      InitRequete(sLien, httpGet)	
      SI PAS Exec(vRetour) ALORS
      	RENVOYER Faux
      FIN
      
      
      RENVOYER vRetour
     type : 458752
   -
     name : GetTicketUserAssign
     procedure_id : 1446178749140001469
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] GetTicketUserAssign (<nIDTicket_p> est entier, <oTicket> est ClGLPI_Ticket)
      //
      // Paramètres :
      //	nIDTicket_p (entier) : <indiquez ici le rôle de nIDTicket_p>
      //	oTicket (ClGLPI_Ticket) : <indiquez ici le rôle de oTicket>
      
      // Valeur de retour :
      // 	booléen : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      //	nType (entier) : <indiquez ici le rôle de nType>
      procédure GetTicketUserAssign(LOCAL nIDTicket_p est un entier, oTicket est un ClGLPI_Ticket)
      
      vRetour			est un Variant
      stAffectation	est un ClGLPI_Ticket.STR_GLPI_USER_GROUP_Info
      nIndice			est un entier
      sURL			est une chaine
      
      //Maj du statut
      m_sURL						= cstGLPI_URL_Complet + "Ticket/[%nIDTicket_p%]/Ticket_User"
      m_nMethode					= httpGet
      m_sParam					= ""
      
      
      InitRequete(cstGLPI_URL_Complet + "Ticket/[%nIDTicket_p%]/Ticket_User", httpGet)	
      SI PAS Exec(vRetour) ALORS
      	RENVOYER Faux
      SINON
      	SI vRetour..Occurrence > 0 ALORS
      		POUR i = 1 _À_ vRetour..Occurrence
      			stAffectation.nID	= vRetour[i].users_id
      			stAffectation.nType	= cstGLPI_Type_Membre_User
      			
      			SI stAffectation.nID > 0 ALORS
      				sURL				= cstGLPI_URL_Complet + "User/[%stAffectation.nID%]"
      				
      				stAffectation.sNom	= GetTicketUsername(sURL)
      				
      				SELON vRetour[i].type
      					CAS cstGLPI_Type_Attribué_A
      						TableauAjoute(oTicket.m_astAffectation_Ticket,stAffectation)
      					CAS cstGLPI_Type_Demandeur
      						TableauAjoute(oTicket.m_astDemandeur_Ticket,stAffectation)
      					AUTRE CAS
      						
      				FIN
      			FIN
      		FIN
      	FIN
      FIN
      
      
      
      
      RENVOYER Vrai
     type : 458752
   -
     name : GetInfoGroup
     procedure_id : 1580518441323274495
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] GetInfoGroup (<sFiltre_Prefixe_p> est chaîne)
      //
      // Paramètres :
      //	sFiltre_Prefixe_p (chaîne ANSI) : <indiquez ici le rôle de sFiltre_Prefixe_p>
      // Valeur de retour :
      // 	tableau associatif (STR_GLPI_ITEMS) : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure GetInfoGroup(LOCAL sFiltre_Prefixe_p est une chaine):Tableau associatif de STR_GLPI_ITEMS
      
      sFinCrochet est une chaine = "]"
      aStGroupes est un Tableau associatif de STR_GLPI_ITEMS
      nID est un entier
      //sBody est une chaine
      
      vRetour	est un Variant
      sLien est une chaine = cstGLPI_URL_Complet + "search/Group?criteria[0][field]=1&criteria[0][searchtype]=contains&criteria[0][value]=[%sFiltre_Prefixe_p%]&forcedisplay[0]=2"
      
      
      //Maj du statut
      m_sURL						= sLien
      m_nMethode					= httpGet
      m_sParam = ""
      
      
      SI PAS Exec(vRetour) ALORS
      	
      SINON
      	POUR i = 1 _À_ vRetour.data..Occurrence
      		
      		nID = vRetour.data[i]."2"
      		SI PAS aStGroupes[nID]..Existe ALORS
      			aStGroupes[nID] = allouer un STR_GLPI_ITEMS
      			aStGroupes[nID].nID = nID
      			aStGroupes[nID].sNom = vRetour.data[i]."1"
      		FIN
      	FIN
      FIN
      
      
      RENVOYER aStGroupes
     type : 458752
   -
     name : GetTicketGroupAssign
     procedure_id : 1599052024072144163
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] GetTicketGroupAssign (<nIDTicket_p> est entier)
      //
      // Paramètres :
      //	nIDTicket_p (entier) : <indiquez ici le rôle de nIDTicket_p>
      // Valeur de retour :
      // 	booléen : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure GetTicketGroupAssign(LOCAL nIDTicket_p est un entier, oTicket est un ClGLPI_Ticket)
      
      
      vRetour	est un Variant
      stAffectation est un ClGLPI_Ticket.STR_GLPI_USER_GROUP_Info
      nIndice est un entier
      sUrl est une chaine
      
      //Maj du statut
      m_sURL						= cstGLPI_URL_Complet + "Ticket/[%nIDTicket_p%]/Group_Ticket"
      m_nMethode					= httpGet
      m_sParam					= ""
      
      
      InitRequete(cstGLPI_URL_Complet + "Ticket/[%nIDTicket_p%]/Group_Ticket", httpGet)	
      SI PAS Exec(vRetour) ALORS
      	RENVOYER Faux
      SINON
      	SI vRetour..Occurrence > 0 ALORS
      		POUR i = 1 _À_ vRetour..Occurrence
      			stAffectation.nID	= vRetour[i].groups_id
      			stAffectation.nType	= cstGLPI_Type_Membre_Group
      			
      			
      			
      			SI stAffectation.nID > 0 ALORS
      				sUrl				= cstGLPI_URL_Complet + "Group/[%stAffectation.nID%]"
      				
      				stAffectation.sNom	= GetTicketUsername(sUrl)
      				
      				SELON vRetour[i].type
      					CAS cstGLPI_Type_Attribué_A
      						TableauAjoute(oTicket.m_astAffectation_Ticket,stAffectation)
      					CAS cstGLPI_Type_Demandeur
      						TableauAjoute(oTicket.m_astDemandeur_Ticket,stAffectation)
      					AUTRE CAS
      						
      				FIN
      				
      			FIN
      		FIN
      	FIN
      FIN
      
      
      
      
      RENVOYER Vrai
     type : 458752
   -
     name : GetTicketFieldPluggin
     procedure_id : 1636525094090263408
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //GetTicketFieldPluggin (<nID_Ticket_p> est entier)
      //
      // Paramètres :
      //	nID_Ticket_p (entier) : <indiquez ici le rôle de nSID_Ticket_p>
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure GetTicketFieldPluggin(LOCAL nID_Ticket_p est un entier):clglpi_ticket.STR_PluginFields_Info
      
      vRetour est un Variant
      stPluginFields_Info est un clglpi_ticket.STR_PluginFields_Info
      
      // info affinage
      InitRequete(cstGLPI_URL_Complet + "Ticket/[%nID_Ticket_p%]/PluginFieldsTicketaffinage")
      
      //InitRequete(cstGLPI_URL_Complet + "listSearchOptions/Ticket")
      
      SI PAS Exec(vRetour) ALORS
      	//RENVOYER Faux
      SINON
      	// requete OK on récupère les infos
      	SI vRetour..Occurrence > 0 ALORS
      		stPluginFields_Info.nCotation = vRetour[1].cotationfield
      		stPluginFields_Info.nSprint = vRetour[1].sprintfield
      		stPluginFields_Info.nValeurAjoute = vRetour[1].valeurajoutefield
      		stPluginFields_Info.sTachesScrum = vRetour[1].tachescrumfield
      	FIN
      FIN
      
      // info expert métier
      InitRequete(cstGLPI_URL_Complet + "Ticket/[%nID_Ticket_p%]/PluginFieldsTicketexpertmtier")
      
      //InitRequete(cstGLPI_URL_Complet + "listSearchOptions/Ticket")
      
      SI PAS Exec(vRetour) ALORS
      	//RENVOYER Faux
      SINON
      	// requete OK on récupère les infos
      	SI vRetour..Occurrence > 0 ALORS
      		InitRequete(cstGLPI_URL_Complet + "PluginFieldsExpertmtierfieldDropdown/[%vRetour[1].plugin_fields_expertmtierfielddropdowns_id%]")
      		
      		//InitRequete(cstGLPI_URL_Complet + "listSearchOptions/Ticket")
      		
      		SI PAS Exec(vRetour) ALORS
      			//RENVOYER Faux
      		SINON
      			// requete OK on récupère les infos
      			stPluginFields_Info.sExpertMetier = vRetour.completename
      		FIN
      	FIN
      FIN
      
      // retour de test
      InitRequete(cstGLPI_URL_Complet + "Ticket/[%nID_Ticket_p%]/PluginFieldsTickettestsutilisateur")
      
      //InitRequete(cstGLPI_URL_Complet + "listSearchOptions/Ticket")
      
      SI PAS Exec(vRetour) ALORS
      	//RENVOYER Faux
      SINON
      	// requete OK on récupère les infos
      	SI vRetour..Occurrence > 0 ALORS
      		stPluginFields_Info.bRetourDeTest		= vRetour[1].retourdetestfield
      	FIN
      FIN
      
      
      RENVOYER stPluginFields_Info
     type : 458752
   -
     name : getListTicket
     procedure_id : 1637540553268457914
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] getListTicket (<aID_Ticket_p> est tableau (entier))
      //
      // Paramètres :
      //	aID_Ticket_p (tableau (entier)) : <indiquez ici le rôle de aID_Ticket_p>
      
      // Valeur de retour :
      // 	booléen : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure getListTicket(LOCAL aID_Ticket_p est un tableau d'entier)
      
      sCriteria est une chaine
      vRetour est un variant
      sAccoladeFermante est une chaine = "]"
      oTicket	est un ClGLPI_Ticket dynamique
      vData	est un Variant
      siD est une chaine
      
      // on parcoure les ID des ticket pour construire la requete
      POUR i = 1 _À_ aID_Ticket_p..Occurrence
      	SI i = 1 ALORS
      		sCriteria = "?&criteria[[%i-1%]][link]=OR&criteria[[%i-1%]][field]=1&criteria[[%i-1%]][searchtype]=equals&criteria[[%i-1%]][value]=[%aID_Ticket_p[i]%]"
      	SINON
      		sCriteria += "&criteria[[%i-1%]][link]=OR&criteria[[%i-1%]][field]=1&criteria[[%i-1%]][searchtype]=equals&criteria[[%i-1%]][value]=[%aID_Ticket_p[i]%]"
      	FIN
      FIN
      
      
      
      InitRequete(cstGLPI_URL_Complet + "search/Ticket[%sCriteria%]")
      
      SI PAS Exec(vRetour) ALORS
      	RENVOYER Faux
      FIN
      
      vData = vRetour.data
      
      SI vData <> Null ALORS
      	POUR TOUT vTicket DE vData
      		oTicket	= allouer un ClGLPI_Ticket
      		siD		= vTicket."2"
      		GetTicket(siD, oTicket, vTicket."7")
      		TableauAjoute(m_aopclEntite, oTicket)
      	FIN
      FIN
      
      RENVOYER Vrai
     type : 458752
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : BwAAAAcAAAA6ih3UbgNXHwTtiPSFUEj+2fi/m7v4QV2rqidAupM=
  original_name : Classe1
resources :
 string_res :
  identifier : 0x1390636005bbcfa3
  internal_properties : BwAAAAcAAAAnMYFQ1bL/vz9ehh7L22SNNSlIzGTOI8h5F/WtgDNP
custom_note :
 internal_properties : BwAAAAcAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
