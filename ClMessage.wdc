#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : ClMessage
 major_version : 26
 minor_version : 0
 type : 4
 description : ""
 subtype : 0
class :
 identifier : 0x1fa82f0203eed18e
 internal_properties : BgAAAAYAAAB2/vstTMCJbS/hlxjFxirSqKvCUuv8YxgpWyl7S3iA
 code_elements :
  type_code : 10
  p_codes :
   -
     code : |1+
      ClMessage est une Classe
      	herite de ClObjDB
      	
      
      	m_oMsgparent			est un ClMessage dynamique
      	
      prive
      	m_oUsr					est un ClUsr dynamique
      	m_oUserStory			est un ClUserStory dynamique
      	m_oTache				est un ClTache dynamique
      	m_oCritereAccept		est un ClCritereAccept dynamique
      
      	m_sCMTR					est une chaîne		<MAPPING=CMTR>
      	m_bTop_Visible			est un booléen 		<MAPPING=Top_Visible>
      	m_dhDteCreation			est une dateheure	<mapping=DteCreation>
      	
      	m_aoMsgEnfant			est un tableau de ClMessage dynamique
      	m_bGererParent			est un booléen	//Précise, lors de l'ajout ou suppression, qu'il faut ajouter le message actuel, au message parent.
      fin
     type : 131072
  procedures :
   -
     name : Constructeur
     procedure_id : 2281124896965644686
     type_code : 27
     code : |1+
      procédure Constructeur(LOCAL nId_P est un entier = 0)
      
      ClObjDB.Constructeur(Scr_Message..Nom, Scr_Message.IDScr_Message..Nom, nId_P)
      
      
      //Chargement des données dans l'instance.
      :Charge()
      
      
      SI :bModeAjout() ALORS
      	:m_oUsr	<- goApp.m_oUsrCnx
      	:m_bTop_Visible = vrai
      sinon
      	//Récupération du rédacteur du message
      	:m_oUsr <- clusr.GetObj(Scr_Message.IDScr_Usr)
      	
      	//Récupération de l'US, si le message est associé à une US.
      	si Scr_Message.IDScr_UserStory..Null ALORS
      		:m_oUserStory = null
      	sinon
      		:m_oUserStory <- ClUserStory.GetObj(Scr_Message.IDScr_UserStory)
      	FIN
      	
      	//Récupération de la tache, si le message est associé à une tache.
      	si Scr_Message.IDScr_Tache..Null ALORS
      		:m_oTache = null
      	SINON
      		:m_oTache <- ClTache.GetObj(Scr_Message.IDScr_Tache)
      	FIN
      	
      	//Récupération du critère d'acceptation, si le message est associé à un critère.
      	si Scr_Message.IDScr_CritereAccept..Null ALORS
      		:m_oCritereAccept = null
      	SINON
      		:m_oCritereAccept <- ClCritereAccept.GetObj(Scr_Message.IDScr_CritereAccept)
      	FIN
      	
      	//Récupération du message parent, si le message est associé à un autre message.
      	si Scr_Message.IDScr_Message_Parent..Null ALORS
      		:m_oMsgparent = null
      	SINON
      		:m_oMsgparent <- ClMessage.GetObj(Scr_Message.IDScr_Message_Parent)
      	FIN
      	
      	//----------------------------------------------------------------------------------------
      	sReq est une chaîne
      	sdMsgUsr est une source de donnees
      	
      	//Récupération des messages de l'entité.
      	sReq = ChaîneConstruit([
      		
      		SELECT
      			Scr_Message.IDScr_Message
      			
      		FROM Scr_Message
      		
      		where Scr_Message.IDScr_Message_Parent = %1
      		
      	], nId_P)
      	SI goApp.Rsql(sdMsgUsr,sReq) ALORS
      		POUR TOUT sdMsgUsr
      			TableauAjouteRéférence(:m_aoMsgEnfant, ClMessage.GetObj(sdMsgUsr.IDScr_Message))
      		FIN
      	FIN
      	HAnnuleDéclaration(sdMsgUsr)
      
      FIN
      
     type : 589824
   -
     name : Destructeur
     procedure_id : 2281124896965710222
     type_code : 28
     code : |1+
      procédure Destructeur()
      
     type : 655360
   -
     name : Message_Fils
     internal_properties : BgAAAAYAAADYuPST6CP+T+K2ZU37o7g3n8Kew/nVjSZD5G6OyRuT2Yo67DV/AZmlWI7RE7NW48hb
     procedure_id : 2281126322895054266
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] Message_Fils (<nIDMessage_p> est entier)
      //
      // Paramètres :
      //	nIDMessage_p (entier) : <indiquez ici le rôle de nIDMessage>
      // Valeur de retour :
      // 	tableau : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE globale Message_Fils(LOCAL nIDMessage_p est un entier):tableau de ClMessage
      aMessagesFils est un tableau de ClMessage
      oMessage est un ClMessage
      
      sdRechercheMessagesFils est une source de données
      sReq est une chaine
       
      sReq =ChaîneConstruit([
      	SELECT
      		Scr_Message.IDScr_Message
      	
      	FROM
      		Scr_Message
      	
      	WHERE
      		Scr_Message.IDScr_Message_Parent = %1
      ], nIDMessage_p)
      
      SI goApp.Rsql(sdRechercheMessagesFils,sReq) ALORS
      	Pour TOUT sdRechercheMessagesFils
      		oMessage <- ClMessage.getobj(sdRechercheMessagesFils.IDScr_Message)
      		TableauAjouteRéférence(aMessagesFils,oMessage) 
      	FIN
      FIN
      
      HAnnuleDéclaration(sdRechercheMessagesFils)
      
      Renvoyer aMessagesFils
     type : 458752
   -
     name : GetObj
     procedure_id : 2281127873378543039
     type_code : 12
     code : |1-
      // Redéfinition de la méthode ClObjDB.GetObj
      PROCÉDURE GLOBALE GetObj(local nIdUnique_P est un entier):ClMessage
      
      renvoyer ClObjDB.GetObj("ClMessage", nIdUnique_P)
     type : 458752
   -
     name : pre_enregistre
     procedure_id : 2281129153279095356
     type_code : 12
     code : |1-
      // Redéfinition de la méthode ClObjDB.pre_enregistre
      PROCÉDURE PROTÉGÉE VIRTUELLE pre_enregistre()
      
      nNbreCle est un entier
      
      
      :m_bGererParent = Faux
      
      
      
      si pas :m_bEstSupprime alors
      	//Si pas d'utilisateur renseigné, on considère que c'est l'utilisateur en cours.
      	si :m_oUsr = Null ALORS
      		:m_oUsr <- goApp.m_oUsrCnx
      	FIN
      	Scr_Message.IDScr_Usr						= :m_oUsr.Get_IdUnique()
      	
      	//Enregistrement de la user story (si une, est associée)
      	si :m_oUserStory = Null ALORS
      		Scr_Message.IDScr_UserStory..Null		= vrai
      	sinon
      		Scr_Message.IDScr_UserStory				= :m_oUserStory.Get_IdUnique()
      		nNbreCle++
      	fin
      	
      	//Enregistrement du critère d'acceptation (si un, est associée)
      	si :m_oCritereAccept = Null ALORS
      		Scr_Message.IDScr_CritereAccept..Null	= vrai
      	sinon
      		Scr_Message.IDScr_CritereAccept			= :m_oCritereAccept.Get_IdUnique()
      		nNbreCle++
      	fin
      	
      	//Enregistrement de la tache (si une, est associé)
      	si :M_oTache = Null ALORS
      		Scr_Message.IDScr_Tache..Null			= vrai
      	sinon
      		Scr_Message.IDScr_Tache					= :m_oTache.Get_IdUnique()
      		nNbreCle++
      	FIN
      	
      	//Enregistrement d'un message parent (si un, est associé)
      	si :m_oMsgparent = Null ALORS
      		Scr_Message.IDScr_Message_Parent..Null	= Vrai
      	sinon
      		Scr_Message.IDScr_Message_Parent		= :m_oMsgparent.Get_IdUnique()
      		nNbreCle++
      		
      		
      		//En cas d'ajout, on mémorise qu'il faut gérer le messages, du parent.
      		SI :bModeAjout() ALORS
      			:m_bGererParent = Vrai
      		FIN
      	FIN
      	
      	//On s'assure que le message est associé à une et une seule entité.
      	si nNbreCle <> 1 ALORS
      		ExceptionDéclenche(1, ChaîneConstruit("État du message incohérent : %1 ID affectés", nNbreCle))
      	FIN
      	
      	
      	si pas datevalide(:m_dhDteCreation) ALORS
      		:m_dhDteCreation						= DateHeureSys()
      		Scr_Message.DteCreation					= :m_dhDteCreation
      	FIN
      sinon
      	
      	si :m_aoMsgEnfant..Occurrence ALORS
      		ExceptionDéclenche(1, "Impossible de supprimer un message, ayant des réponses.")
      	FIN
      	
      	//Desenregistrement d'un message parent (si un, est associé)
      	SI :m_oMsgparent <> Null ALORS
      		:m_bGererParent = Vrai
      	fin
      fin
     type : 458752
   -
     name : ReinitAffiliation
     procedure_id : 2281177243962100806
     type_code : 12
     code : |1+
      procédure privée ReinitAffiliation()
      
      :m_oUserStory		= null
      :m_oTache			= null
      :m_oCritereAccept	= null
     type : 458752
   -
     name : aoMessagesDeUsr_Old
     procedure_id : 2281357048476047394
     type_code : 12
     code : |1+
      procédure GLOBALE aoMessagesDeUsr_Old(oUsr_P est un ClUsr):tableau de ClMessage dynamique
      
      
      aoRetour	est un tableau de ClMessage dynamique
      sdMsgUsr	est une Source de Données
      sReq		est une chaîne
      
      //Récupération des messages de l'utilisateur.
      sReq = ChaîneConstruit([
      	
      	SELECT
      		Scr_Message.IDScr_Message
      	FROM Scr_Message
      	where Scr_Message.IDScr_Usr = %1
      		AND Scr_Message.Top_Visible = 1
      	
      ], oUsr_P.Get_IdUnique())
      SI goapp.RSQL(sdMsgUsr,sReq) ALORS
      	POUR TOUT sdMsgUsr
      		TableauAjouteRéférence(aoRetour, ClMessage.GetObj(sdMsgUsr.IDScr_Message))
      	FIN
      FIN
      HAnnuleDéclaration(sdMsgUsr)
      
      renvoyer aoRetour
     type : 458752
   -
     name : aoListeMessage
     procedure_id : 1163692080071249625
     type_code : 12
     code : |1+
      procédure globale aoListeMessage(oEntite_P est un ClObjDB dynamique):tableau de ClMessage dynamique
      
      aoRetour	est un tableau de ClMessage dynamique
      sdMsgUsr	est une Source de Données
      sReq		est une chaîne
      sRubFiltre	est une chaîne
      
      
      selon oEntite_P..classe
      	cas "ClTache"
      		sRubFiltre = Scr_Message.IDScr_Tache..nom
      	cas "ClUserStory"
      		sRubFiltre = Scr_Message.IDScr_UserStory..Nom
      	cas "ClUsr"
      		sRubFiltre = Scr_Message.IDScr_Usr..Nom
      	cas "ClMessage"
      		sRubFiltre = Scr_Message.IDScr_Message_Parent..Nom
      	cas "ClCritereAccept"
      		sRubFiltre = Scr_Message.IDScr_CritereAccept..Nom
      	AUTRE CAS
      		ExceptionDéclenche(1, ChaîneConstruit("L'entité %1 ne permet pas la gestion des messages.", oEntite_P..Classe))
      FIN
      
      
      //Récupération des messages de l'entité.
      sReq = ChaîneConstruit([
      	SELECT
      		Scr_Message.IDScr_Message
      		
      	from Scr_Message
      	
      	where Scr_Message.%2 = %1
      		AND Scr_Message.Top_Visible = 1
      	
      	ORDER BY Scr_Message.DteCreation
      ], oEntite_P.Get_IdUnique(), sRubFiltre)
      SI goApp.Rsql(sdMsgUsr,sReq) ALORS
      	POUR TOUT sdMsgUsr
      		TableauAjouteRéférence(aoRetour, ClMessage.GetObj(sdMsgUsr.IDScr_Message))
      	FIN
      FIN
      HAnnuleDéclaration(sdMsgUsr)
      
      RENVOYER aoRetour
     type : 458752
   -
     name : post_enregistre
     procedure_id : 1167836178190360666
     type_code : 12
     code : |1-
      // Redéfinition de la méthode ClObjDB.post_enregistre
      PROCÉDURE PROTÉGÉE VIRTUELLE post_enregistre()
      
      si :m_oMsgparent <> Null et :m_bGererParent ALORS
      	si pas :m_bEstSupprime alors
      		TableauAjouteRéférence(:m_oMsgparent.p_aoMsgEnfant, objet)
      	sinon
      		TableauSupprimeRéférence(:m_oMsgparent.p_aoMsgEnfant, objet)
      	FIN
      FIN
     type : 458752
   -
     name : sExport
     procedure_id : 1168693079858492886
     type_code : 12
     code : |1+
      // Redéfinition de la méthode ClObjDB.sExport
      PROCÉDURE sExport():JSON 
      
      sRetour	est un JSON
      nInd	est un entier
      oMsg	est un ClMessage dynamique
      
      sRetour.id			= :m_nIdUnique
      sRetour.user		= :m_oUsr
      sRetour.comment		= :m_sCMTR
      sRetour.visible		= :m_bTop_Visible
      sRetour.time		= :m_dhDteCreation
      
      nInd = 0
      POUR TOUT ELEMENT oMsg DE :m_aoMsgEnfant
      	nInd++
      	sRetour.answer[nInd] = oMsg.sExport()
      FIN
      
      RENVOYER sRetour
     type : 458752
  properties :
   -
     name : p_oTache
     identifier : 0x1fa85ee70011ea39
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_oTache() : ClTache
         
         renvoyer :m_oTache
        type : 1966080
      -
        code : |1-
         procédure publique p_oTache(oValeur est ClTache)
         
         :ReinitAffiliation()
         :EstModif()
         
         :m_oTache <- oValeur
        type : 2031616
     template_refs : []
   -
     name : p_oUserStory
     identifier : 0x1fa85ef2001216b7
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_oUserStory() : ClUserStory
         
         renvoyer :m_oUserStory
        type : 1966080
      -
        code : |1-
         procédure publique p_oUserStory(oValeur est ClUserStory)
         
         :ReinitAffiliation()
         :EstModif()
         
         :m_oUserStory <- oValeur
        type : 2031616
     template_refs : []
   -
     name : p_oUsr
     identifier : 0x1fa861f70013e1b3
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_oUsr() : ClUsr
         
         renvoyer :m_oUsr
        type : 1966080
      -
        code : |1-
         procédure publique p_oUsr(oValeur est ClUsr)
         
         :EstModif()
         :m_oUsr <- oValeur
        type : 2031616
     template_refs : []
   -
     name : p_dhDteCreation
     identifier : 0x1029998c069914b7
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_dhDteCreation() : dateheure
         
         renvoyer :m_dhDteCreation
        type : 1966080
      -
        code : |1-
         procédure publique p_dhDteCreation(dhValeur est une dateheure)
         
         :EstModif()
         
         :m_dhDteCreation = dhValeur
        type : 2031616
     template_refs : []
   -
     name : p_aoMsgEnfant
     identifier : 0x10299be2069a360f
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_aoMsgEnfant()
         
         renvoyer :m_aoMsgEnfant
        type : 1966080
      -
        code : |1-
         procédure publique p_aoMsgEnfant(Valeur)
         
         :EstModif()
         
         :m_aoMsgEnfant <- Valeur
        type : 2031616
     template_refs : []
   -
     name : p_sCMTR
     identifier : 0x1032978f065c5590
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_sCMTR() : chaîne
         
         renvoyer :m_sCMTR
        type : 1966080
      -
        code : |1-
         procédure publique p_sCMTR(sValeur est une chaîne)
         
         :EstModif()
         
         :m_sCMTR=sValeur
        type : 2031616
     template_refs : []
   -
     name : p_bTop_Visible
     identifier : 0x103297d206605d0d
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_bTop_Visible() : booléen
         
         renvoyer :m_bTop_Visible
        type : 1966080
      -
        code : |1-
         procédure publique p_bTop_Visible(bValeur est un booléen)
         
         :EstModif()
         
         :m_bTop_Visible=bValeur
        type : 2031616
     template_refs : []
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : BgAAAAYAAAA6ih3UbgNXHwTtiPSFUEj+2fi/m7v4QV2rqidAupM=
  original_name : Classe1
resources :
 string_res :
  identifier : 0x1fa82ef703e8a8f7
  internal_properties : BgAAAAYAAAAnMYFQ1bL/vz9ehh7L22SNNSlIzGTOI8h5F/WtgDNP
custom_note :
 internal_properties : BgAAAAYAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
