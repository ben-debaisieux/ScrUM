#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : ClZF_ColObjDB
 major_version : 27
 minor_version : 0
 type : 4
 description : ""
 subtype : 0
class :
 identifier : 0x13c3277019cc6b58
 internal_properties : BwAAAAcAAAB2/vstTMCJbS/hlxjFxirSqKvCUuv8YxgpWyl7S3iA
 code_elements :
  type_code : 10
  p_codes :
   -
     code : |1+
      ClZF_ColObjDB est une Classe, abstraite
      prive
      	m_bEstCharge est un booléen
      	m_aoObj est un tableau de ClZF_ObjDB dynamique
      	
      public
      GLOBAL
      	mg_oEx_IndiceInexistant est un ClZF_Exception dynamique
      fin
      
      mg_oEx_IndiceInexistant = allouer un ClZF_Exception("Indice hors de porté : il doit être compris ente 0 et %1")
     type : 131072
  procedures :
   -
     name : Constructeur
     internal_properties : BwAAAAcAAABPVzr0hBjj+cPjOeRhkjsKfhRbRm6Vm5sOFq0e/ChT2AIbIH7WFUjW5X9+ohvY7O6oW25Jv9xwmIZ5+EFBYSm9evfFbuI6aetzxgXcRiCDDYHkYhcZBpS9i8ZAgY7zz73JNgcUW9K3yh+j9P1D9dXP3KxSma+3+hBgDcYJKmfMe/CTw3dAZ2RSdGqMkPy8mwd22F9C1Bq0eS4Cyn2zrN0yUqPRmIufRJP89IQsulAtnyXphf9ARUcXw1nCcOXxrbqgwxHUbYzHtiwMMpSWnjjkY1NxqXnq8UodRiOEUi07KmeG603Lau7Cm5Ul8Do38eQcGY9RNohd6QaZpe0exa+y3LIqEiUbl/i+C6B4vNs=
     procedure_id : 1424025269601921880
     type_code : 27
     code : |1-
      procédure Constructeur()
      :init()
     type : 589824
   -
     name : Destructeur
     procedure_id : 1424025269601987416
     type_code : 28
     code : |1-
      procédure Destructeur()
     type : 655360
   -
     name : ZF_addItem
     procedure_id : 1424025269602052952
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //ZF_addItem (<oEntite_p> est ClZF_ObjDbLs)
      //
      // Paramètres :
      //	oEntite_p (ClZF_ObjDbLs) : <indiquez ici le rôle de oEntite_p>
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure ZF_addItem(oEntite_p est un ClZF_ObjDbLs)<métier>:vide
      
      si :ZF_recherche(oEntite_p) = 0 ALORS
      	:ZF_addRef_int(oEntite_p)
      FIN
     type : 458752
   -
     name : ZF_recherche
     procedure_id : 1424025269602118488
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] ZF_recherche (<oObj_p> est ClZF_ObjDbLs)
      //
      // Paramètres :
      //	oObj_p (ClZF_ObjDbLs) : <indiquez ici le rôle de nIdUnique_p>
      
      // Valeur de retour :
      // 	entier : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure ZF_recherche(oObj_p est un ClZF_ObjDbLs)<métier>:entier
      
      nInd est un entier
      nPointeurRech est un entier sur 8 octets = oObj_p.p_nPointeur
      
      pour tout element oTmp, nInd de :aItems()
      	si oTmp.p_nPointeur = nPointeurRech ALORS
      		renvoyer nInd
      	FIN
      FIN
      
      renvoyer 0
     type : 458752
   -
     name : addItemById
     procedure_id : 1424025269602184024
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] addItemById (<nId_P> est entier)
      //
      // Paramètres :
      //	nId_P (entier) : <indiquez ici le rôle de nId_P>
      // Valeur de retour :
      // 	Type indéterminé : // 	Aucune
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure abstraite addItemById(LOCAL nId_P est un entier)<métier>:vide
     type : 458752
   -
     name : ZF_vider
     procedure_id : 1424025269602249560
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //ZF_vider ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure ZF_vider()<métier>:vide
      dimension(m_aoObj, 0)
     type : 458752
   -
     name : ZF_addRef_int
     procedure_id : 1424025269602315096
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //ZF_addRef_int (<oObj_P> est ClZF_ObjDbLs)
      //
      // Paramètres :
      //	oObj_P (ClZF_ObjDbLs) : <indiquez ici le rôle de oObj_P>
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure prive ZF_addRef_int(oObj_P est un ClZF_ObjDbLs)<métier>:vide
      TableauAjouteRéférence(m_aoObj,oObj_P)
     type : 458752
   -
     name : aItems
     procedure_id : 1424025269602380632
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] aItems ()
      //
      // Paramètres :
      //	Aucun
      
      // Valeur de retour :
      // 	tableau (ClZF_ObjDB dynamique) : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure abstraite aItems()<métier>:tableau de ClZF_ObjDB dynamique
      
     type : 458752
   -
     name : ZF_nTaille
     procedure_id : 1424025269602446168
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] ZF_nTaille ()
      //
      // Paramètres :
      //	Aucun
      
      // Valeur de retour :
      // 	entier : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure ZF_nTaille()<métier>:entier
      renvoyer TableauOccurrence(m_aoObj)
     type : 458752
   -
     name : ZF_InitCol
     procedure_id : 1424025269602511704
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //ZF_InitCol (<oListeEnfant_p>)
      //
      // Paramètres :
      // 	oListeEnfant_p : <indiquez ici le rôle de oListeEnfant_p>
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure protégée ZF_InitCol(oListeEnfant_p)<métier>:vide
      :m_aoObj <- oListeEnfant_p
     type : 458752
   -
     name : Init
     procedure_id : 1424025269602577240
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      // Init ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure abstraite Init()<métier>:vide
      
     type : 458752
   -
     name : ZF_oItem
     procedure_id : 1424025269602642776
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] ZF_oItem (<nPos_P> est entier)
      //
      // Paramètres :
      //	nPos_P (entier) : <indiquez ici le rôle de nPos_P>
      // Valeur de retour :
      // 	variant : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure ZF_oItem(local nPos_P est un entier)<métier>:ClZF_ObjDB
      renvoyer :m_aoObj[nPos_P]
     type : 458752
   -
     name : ZF_Supp
     procedure_id : 1424365336575907092
     type_code : 12
     code : |1+
      procédure publique ZF_Supp(oObj_p est un ClZF_ObjDB)<métier>:vide
      nPos est un entier = :ZF_recherche(oObj_p)
      si nPos > 0 ALORS
      	:ZF_Supp(nPos)
      FIN
      
      
     type : 458752
   -
     name : ZF_Supp
     procedure_id : 1424365336575907092
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //ZF_Supp (<oObj_p> est ClZF_ObjDB)
      //
      // Paramètres :
      //	oObj_p (ClZF_ObjDB) : <indiquez ici le rôle de nPos_P>
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure publique ZF_Supp(nPos_P est un entier)<métier>:vide
      TableauSupprime(:m_aoObj, nPos_P)
     type : 458753
   -
     name : ZF_LoadSQL
     procedure_id : 1424025269602773848
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //ZF_LoadSQL (<sSql_P> est chaîne)
      //
      // Paramètres :
      //	sSql_P (chaîne ANSI) : <indiquez ici le rôle de sSql_P>
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure ZF_LoadSQL(sSql_P est une chaîne) <métier>:vide
      
      sdLoadColSQL est une source de données
      bRecupObj est un booléen
      
      ClZF_ObjDbLs.mg_oApp.Rsql(sdLoadColSQL,sSql_P)
      
      HLitPremier(sdLoadColSQL, hSansRafraîchir)
      si ChaîneOccurrence(HListeRubrique(sdLoadColSQL), rc) > 0 alors
      	bRecupObj = faux
      	
      	//Appel au pré chargement des données dépendantes (s'il y en a)
      	:pre_load(sdLoadColSQL)
      	HLitPremier(sdLoadColSQL, hSansRafraîchir)
      	
      sinon
      	bRecupObj = vrai
      FIN
      
      tantque pas HEnDehors(sdLoadColSQL)
      	
      	si bRecupObj alors
      		:addItemById(HRécupèreRubrique(sdLoadColSQL, 1))
      	sinon
      		:addItemBySource(sdLoadColSQL)
      	fin
      	HLitSuivant(sdLoadColSQL)
      FIN
      :m_bEstCharge = vrai
      
      
      HAnnuleDéclaration(sdLoadColSQL)
     type : 458752
   -
     name : addItemBySource
     procedure_id : 1424025269602839384
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //addItemBySource (<sdSource_p> est source de données)
      //
      // Paramètres :
      //	sdSource_p (source de données) : <indiquez ici le rôle de nId_P>
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      //	sClasse_p (chaîne ANSI) : <indiquez ici le rôle de sClasse_p>
      //	nId_p (entier) : <indiquez ici le rôle de nId_p>
      procédure abstraite addItemBySource(sdSource_p est une source de données)<métier>:vide
      
     type : 458752
   -
     name : ZF_addItemBySource_prot
     procedure_id : 1424025269602904920
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //ZF_addItemBySource_prot (<sdSource_p> est objet source de données, <oObjBd_p> est ClZF_ObjDbLs dynamique, <nId_p> est entier)
      //
      // Paramètres :
      //	sdSource_p (objet source de données) : <indiquez ici le rôle de sdSource_p>
      //	oObjBd_p (ClZF_ObjDbLs dynamique) : <indiquez ici le rôle de oObjBd_p>
      //	nId_p (entier) : <indiquez ici le rôle de nId_p>
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      //	sClasse_p (chaîne ANSI) : <indiquez ici le rôle de sClasse_p>
      procédure protege ZF_addItemBySource_prot(sdSource_p est une source de données, oObjBd_p est un ClZF_ObjDbLs dynamique, local nId_p est un entier)<métier>:vide
      
      bObjEnCache est un booléen
      sCle est une chaîne
      
      sCle  = ClZF_ObjDB.ZF_sCleOdb(oObjBd_p..Classe, nId_p)
      
      ////Si l'objet est déja référencé : on libère cette référence
      //SI pas ClZF_App.mg_aoInstances[sCle]..Vide ALORS
      //	TableauSupprime(ClZF_App.mg_aoInstances,sCle)
      //FIN
      
      //Référencement de l'objet chargé (si pas déja en mémoire)
      SI ClZF_App.mg_aoInstances[sCle]..Vide ALORS
      	oObjBd_p.ZF_Charge_source(sdSource_p)
      	ClZF_App.mg_aoInstances[sCle] <- oObjBd_p
      SINON
      	bObjEnCache = vrai
      	oObjBd_p <- ClZF_App.mg_aoInstances[sCle]
      FIN
      
      //Métriques : Récupération du nombre de déclarations (avec ou sans cache)
      goApp.m_aMetriques[1].nNbDeclarationObjBd++
      SI bObjEnCache ALORS
      	goApp.m_aMetriques[1].nNbDeclarationObjBd_Cache++
      SINON
      	goApp.m_aMetriques[1].nNbDeclarationObjBd_NonCache++
      FIN
      
      
      :ZF_addItem(oObjBd_p)
     type : 458752
   -
     name : pre_load
     procedure_id : 1429594330365713019
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //pre_load (<sdSource_P> est source de données)
      //
      // Paramètres :
      //	sdSource_P (source de données) : <indiquez ici le rôle de sdSource_P>
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure protégée pre_load(sdSource_P est une source de données<utile>)
      
     type : 458752
   -
     name : ZF_LoadArray
     procedure_id : 1431074629166656569
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //ZF_LoadArray (<aIDs_P> est tableau (entier))
      //
      // Paramètres :
      //	aIDs_P (tableau (entier)) : <indiquez ici le rôle de sSql_P>
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure ZF_LoadArray(aIDs_P est un tableau d'entiers) <métier>:vide
      
      nId est un entier
      
      pour tout nId de aIDs_P
      	:addItemById(nId)
      FIN
      :m_bEstCharge = vrai
     type : 458752
   -
     name : oItem
     procedure_id : 1458698583437345665
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] oItem (<nPos_p>)
      //
      // Paramètres :
      // 	nPos_p : <indiquez ici le rôle de nPos_p>
      // Valeur de retour :
      // 	ClZF_ObjDbLs : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure oItem(nPos_p):ClZF_ObjDbLs
      
      si pas(0 < nPos_p <= :ZF_nTaille()) ALORS
      	mg_oEx_IndiceInexistant.ZF_Declenche([:ZF_nTaille()])
      FIN
      
      renvoyer :m_aoObj[nPos_p]
     type : 458752
   -
     name : ZF_Tri
     procedure_id : 1458735958317189940
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //ZF_Tri (<sOrdre_p> est chaîne)
      //
      // Paramètres :
      //	sOrdre_p (chaîne ANSI) : <indiquez ici le rôle de sOrdre_p>
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure ZF_Tri(sOrdre_p est une chaîne):vide
      
      TableauTrie(:m_aoObj, ttMembre, sOrdre_p)
     type : 458752
  properties :
   -
     name : p_bEstCharge
     identifier : 0x13f7cc5803214fce
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_bEstCharge() : booléen
         
         renvoyer m_bEstCharge
        type : 1966080
      -
        code : |1-
         procédure publique p_bEstCharge(bValeur est un booléen)
         
         m_bEstCharge=bValeur
        type : 2031616
     template_refs : []
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : BwAAAAcAAAA6ih3UbgNXHwTtiPSFUEj+2fi/m7v4QV2rqidAupM=
  original_name : Classe1
resources :
 string_res :
  identifier : 0x13696d040aa53da2
  internal_properties : BwAAAAcAAAAnMYFQ1bL/vz9ehh7L22SNNSlIzGTOI8h5F/WtgDNP
custom_note :
 internal_properties : BwAAAAcAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
