#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : ClTrello_req
 major_version : 27
 minor_version : 0
 type : 4
 description : ""
 subtype : 0
class :
 identifier : 0x11f3a87f004d701e
 internal_properties : BwAAAAcAAAB2/vstTMCJbS/hlxjFxirSqKvCUuv8YxgpWyl7S3iA
 code_elements :
  type_code : 10
  p_codes :
   -
     code : |1+
      ClTrello_req est une Classe, abstraite
      	m_sURL est une chaîne
      	
      //global
      //	mg_sAuth est une chaîne
      fin
      constante
      
      	sAuth								= "?key=5b1c38be737f85f556604d643b571003&token=0c6e5cd1de31ab1fe63b8919526ab4884dbb1d7def9b4d85739ac9098675ed1b"
      	
      //	cst_List_ID_A_faire					= "5e6f30b2e199570356971064"
      //	cst_List_ID_Dev_en_cours			= "5e6f30c62a48854eb7642c3e"
      //	cst_List_ID_A_faire_tester_par_DEV2	= "5e6f30de31befa31788b71d5"
      //	cst_List_ID_Test_unitaire			= "5e6f30e807d6880a18b8314d"
      //	cst_List_ID_A_livrer_en_pré_prod	= "5e6f310d215ade036fad954c"
      //	cst_List_ID_Test_fonctionnel		= "5e6f30ec3182fc07d11df6d2"
      //	cst_List_ID_A_livrer_en_prod		= "5e6f30fc13de16288ca8955e"
      //	cst_List_ID_Fini					= "5e6f30ff28bd738d4e6a9e64"
      //	cst_List_ID_Fini_sprint_précédents	= "5e969a2a7ee6e164742a03bf"
      //	
      //	cst_Label_Prioritaire				= "5e6f30a17669b2254985944b"
      //	cst_Label_Suspend					= "5e6f30a17669b2254985944c"
      //	cst_Label_Attente					= "5e6f30a17669b22549859449"
      //	cst_Label_Comptabilise				= "5e6f30a17669b22549859465"
      //	
      //	cst_TableauScrum					= "AcWZ1BSV"
      //	cst_TableauKanban					= "5a9e4eacd0c55e84ed2ddbd2"
      fin
      
      STR_TICKET_TRELLO est une structure
      	sID est une chaine
      	sSujet est une chaîne
      	sDescription est une chaine
      	sIDStatut est une chaine
      	sIDLabel est une chaine
      	sIDPrioritaire est une chaine
      	sIDEnAttente est une chaine
      	sIDMembers est une chaine
      	sDate_Echeance est une chaine // date format iso-8601
      	aPieces_Jointes est un tableau de chaine
      	astCommentaires est un tableau de ClGLPI_Ticket.STR_Suivi_Commentaire
      fin
      
      STR_Commentaire_Trello est une structure
      	sCommentaire	est une chaîne
      	sID_Ticket		est une chaine
      FIN
      
     type : 131072
  procedures :
   -
     name : Constructeur
     procedure_id : 1293562781404917790
     type_code : 27
     code : |1+
      procédure Constructeur(sUrl_P est une chaîne)
      
      :m_sURL = sUrl_P + 	sAuth
     type : 589824
   -
     name : Destructeur
     procedure_id : 1293562781404983326
     type_code : 28
     code : |1+
      procédure Destructeur()
      
     type : 655360
   -
     name : get_json
     procedure_id : 1293562863009446783
     type_code : 12
     code : |1-
      procédure get_json()
      
      vRep est un Variant
      sReponse est une chaîne
      
      
      tantque sReponse = ""
      	HTTPRequête(:m_sURL)	
      	sReponse = HTTPDonneRésultat()
      	quand Exception dans
      		vRep = JSONVersVariant(sReponse)
      	faire
      		trace("Exception : " + ExceptionInfo())
      		Multitâche(-100)
      		sReponse = ""
      	fin
      FIN
      
      renvoyer vRep
     type : 458752
   -
     name : Add_Trello_Ticket
     procedure_id : 1440248726493028455
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] Add_Trello_Ticket (<stTicket_Trello_p> est STR_TICKET_TRELLO)
      //
      // Paramètres :
      //	stTicket_Trello_p (STR_TICKET_TRELLO) : <indiquez ici le rôle de stTicket_Trello_p>
      // Valeur de retour :
      // 	Type indéterminé : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure GLOBALE Add_Trello_Ticket(LOCAL stTicket_Trello_p est un STR_TICKET_TRELLO)
      
      sReponse	est une chaîne
      sBody		est une chaîne
      jsBody		est un JSON
      sParams		est une chaîne
      sReq		est une chaîne
      sCheminDoc	est une chaine
      sFormulaire	est une chaine
      sRetour_Procédure est une chaine
      sCommentaire est une chaine
      
      // paramètres pour l'ajout de la carte
      sParams += "&idList=" + stTicket_Trello_p.sIDStatut
      sParams += "&name=" + encode_param(stTicket_Trello_p.sSujet)
      sParams += "&desc=" + encode_param(stTicket_Trello_p.sDescription)
      
      // regarde si le ticket est prioritaire ou un bug
      SI stTicket_Trello_p.sIDPrioritaire <> "" _OU_ stTicket_Trello_p.sIDLabel <> "5a9e4eac35b91abfde76e3c5" ALORS
      	sParams += "&pos=0"
      SINON
      	sParams += "&pos=bottom"
      FIN
      
      // ajoute le label sélectionné
      sParams += "&idLabels=" + stTicket_Trello_p.sIDLabel
      
      SI stTicket_Trello_p.sIDPrioritaire <> "" ALORS
      	sParams += "," + stTicket_Trello_p.sIDPrioritaire
      FIN
      
      SI stTicket_Trello_p.sIDEnAttente <> "" ALORS
      	sParams += "," + stTicket_Trello_p.sIDEnAttente
      FIN
      
      
      // ajout members
      SI stTicket_Trello_p.sIDMembers <> "" ALORS
      	sParams += "&idMembers="+stTicket_Trello_p.sIDMembers
      FIN
      
      // ajout date échéance
      SI stTicket_Trello_p.sDate_Echeance <> "" ALORS
      	sParams += "&due="+stTicket_Trello_p.sDate_Echeance
      FIN
      
      
      // url ajout carte
      sReq = ChaîneConstruit("https://api.trello.com/1/cards%1%2", ClTrello_req.sAuth, sParams)
      HTTPRequête(sReq,"","","POST")
      sReponse = HTTPDonneRésultat(httpEntête)
      
      SI ExtraitChaîne(sReponse, 1, RC) = "HTTP/1.1 200 OK" ALORS
      	sBody	= HTTPDonneRésultat(httpRésultat)
      	jsBody	= ChaîneVersJSON(sBody)
      	
      	SI TableauOccurrence(stTicket_Trello_p.astCommentaires) > 0 ALORS
      		
      		stSuivi est un ClGLPI_Ticket.STR_Suivi_Commentaire
      		
      		TableauTrie(stTicket_Trello_p.astCommentaires, ttMembre, "-dhCreation")
      		
      		POUR TOUT stSuivi DE stTicket_Trello_p.astCommentaires
      			sCommentaire = ""
      			// nom formulaire
      			sFormulaire	= "Doc"
      			
      			sCommentaire	= stSuivi.sUtilisateur + "(" + stSuivi.sDateAffichage + ")" + " : "
      			sCommentaire	+= [RC] + stSuivi.buContent
      			
      			sCommentaire = HTMLVersTexte(sCommentaire)
      			
      			sCommentaire = ChaîneVersUTF8(sCommentaire)
      
      			
      			// créé formulaire
      			HTTPCréeFormulaire(sFormulaire)
      			
      			
      			sReq		= ChaîneConstruit("https://api.trello.com/1/cards/%2/actions/comments%1", ClTrello_req.sAuth,jsBody.id,sCommentaire)
      			
      			HTTPAjouteParamètre(sFormulaire, "text", sCommentaire)
      			
      			// ajout de la pièce jointe
      			SI HTTPEnvoieFormulaire(sFormulaire,sReq,httpPost,"","","multipart/form-data") ALORS
      				// retour de l'ajout de la pièce jointe
      				sReponse = HTTPDonneRésultat(httpRésultat)
      			SINON
      				// erreur
      				sRetour_Procédure = ErreurInfo(errComplet)
      			FIN
      			
      		FIN
      		
      	FIN
      	
      	// parcoure toutes les pièces jointes du ticket 
      	POUR nLigne = 1 _À_ TableauOccurrence(stTicket_Trello_p.aPieces_Jointes)		
      		
      		// ajoute le fichier temp
      		sCheminDoc = stTicket_Trello_p.aPieces_Jointes[nLigne]
      		
      		// url de l'ajout de pièce jointe
      		sReq		= ChaîneConstruit("https://api.trello.com/1/cards/%2/attachments%1", ClTrello_req.sAuth,jsBody.id)
      		
      		// nom formulaire
      		sFormulaire	= "Doc"
      		
      		// créé formulaire
      		HTTPCréeFormulaire(sFormulaire)
      		
      		// ajoute le fichier
      		HTTPAjouteFichier(sFormulaire,"file",sCheminDoc,fContentType(sCheminDoc))
      		
      		// ajout de la pièce jointe
      		SI HTTPEnvoieFormulaire(sFormulaire,sReq,httpPost,"","","multipart/form-data") ALORS
      			// retour de l'ajout de la pièce jointe
      			sReponse = HTTPDonneRésultat(httpRésultat)
      		SINON
      			// erreur
      			sRetour_Procédure = ErreurInfo(errComplet)
      		FIN
      	FIN
      	
      SINON
      	// erreur création carte
      	sRetour_Procédure = "Echec de la création de la carte : " + stTicket_Trello_p.sSujet
      FIN
      
      
      	PROCÉDURE INTERNE encode_param(sParam_P est une chaîne):chaîne
      		//	https://developer.mozilla.org/fr/docs/Glossary/percent-encoding
      		sRetour est une chaîne = Encode(sParam_P, encodeURLDepuisUnicode)
      		sRetour	= Remplace(sRetour, "#", "%23")
      		sRetour	= Remplace(sRetour, "&", "%26")
      		//		sRetour = remplace(sRetour, " ", "%20")
      		RENVOYER sRetour
      	FIN
      
      RENVOYER sRetour_Procédure
     type : 458752
   -
     name : Rechercher_Ticket
     procedure_id : 1453866628973517590
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] Rechercher_Ticket (<sTitre_p> est chaîne)
      //
      // Paramètres :
      //	sTitre_p (chaîne ANSI) : <indiquez ici le rôle de sTitle_p>
      // Valeur de retour :
      // 	tableau (chaîne ANSI) : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure GLOBALE Rechercher_Ticket(LOCAL sTitre_p est une chaine):Tableau de chaine
      
      // variables
      rest_Requete	est un restRequête
      rest_Reponse	est un restRéponse
      vRetour			est un Variant
      sContenu est une chaine
      aID_Ticket_Retour est un tableau de chaine
      
      sTitre_p		= Remplace(sTitre_p,"\","\\")
      sTitre_p		= Remplace(sTitre_p,Caract(34),"\" + Caract(34))
      
      
      // url pour récupérer informations sur un utilisateur
      rest_Requete..URL						= "https://api.trello.com/1/search" +  ClTrello_req.sAuth
      
      rest_Requete..Méthode					= httpGet
      
      rest_Requete..ContentType				= "application/json"
      
      sContenu = [
      {
      	"query":"[%sTitre_p%]"
      }
      ]
      
      rest_Requete..Contenu = ChaîneVersJSON(sContenu)
      
      // envoi de la requête
      rest_Reponse							= RESTEnvoie(rest_Requete)
      
      SI rest_Reponse..CodeEtat PAS DANS (200,201,202) ALORS
      	
      SINON
      	// récupère variant
      	vRetour		= JSONVersVariant(rest_Reponse..Contenu)
      	
      	POUR i = 1 _À_ TableauOccurrence(vRetour.cards)
      		tableauajoute(aID_Ticket_Retour,vRetour.cards[i].id)
      	FIN
      FIN
      
      RENVOYER aID_Ticket_Retour
     type : 458752
   -
     name : Recup_Commentaire_Ticket
     procedure_id : 1453941619061900979
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] Recup_Commentaire_Ticket (<sID_Ticket_p> est chaîne)
      //
      // Paramètres :
      //	sID_Ticket_p (chaîne ANSI) : <indiquez ici le rôle de sID_Ticket_p>
      // Valeur de retour :
      // 	variant : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure globale Recup_Commentaire_Ticket(LOCAL sID_Ticket_p est une chaine)
      
      // variables
      rest_Requete		est un restRequête
      rest_Reponse		est un restRéponse
      vRetour est un variant
      aRetour				est un tableau de chaine
      
      
      // url pour récupérer informations sur un utilisateur
      rest_Requete..URL						= "https://api.trello.com/1/cards/" + sID_Ticket_p + "/actions" +  ClTrello_req.sAuth
      
      rest_Requete..Méthode					= httpGet
      
      rest_Requete..ContentType				= "application/json"
      
      
      // envoi de la requête
      rest_Reponse							= RESTEnvoie(rest_Requete)
      
      SI rest_Reponse..CodeEtat PAS DANS (200,201,202) ALORS
      	
      SINON
      	// récupère variant
      	vRetour		= JSONVersVariant(rest_Reponse..Contenu)
      	
      	POUR i = 1 _À_ TableauOccurrence(vRetour)
      		TableauAjoute(aRetour,vRetour[i].data.text)
      	FIN
      	
      FIN
      
      
      RENVOYER aRetour
      
      
      
      
     type : 458752
   -
     name : ADD_Commentaire_Ticket
     procedure_id : 1454221556490097144
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //ADD_Commentaire_Ticket (<sCommentaire_p> est chaîne, <sID_Ticket_p> est chaîne)
      //
      // Paramètres :
      //	sCommentaire_p (chaîne ANSI) : <indiquez ici le rôle de sCommentaire_p>
      //	sID_Ticket_p (chaîne ANSI) : <indiquez ici le rôle de sID_Ticket_p>
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure GLOBALE ADD_Commentaire_Ticket(LOCAL sCommentaire_p est une chaine, LOCAL sID_Ticket_p est une chaine):booléen
      
      sFormulaire est une chaîne
      sFormulaire = "doc"
      sReq est une chaine
      bRetour est un booléen
      sReponse est une chaine
      
      // créé formulaire
      HTTPCréeFormulaire(sFormulaire)
      
      
      sReq		= ChaîneConstruit("https://api.trello.com/1/cards/%2/actions/comments%1", ClTrello_req.sAuth,sID_Ticket_p,sCommentaire_p)
      
      HTTPAjouteParamètre(sFormulaire, "text", sCommentaire_p)
      
      // ajout de la pièce jointe
      SI HTTPEnvoieFormulaire(sFormulaire,sReq,httpPost,"","","multipart/form-data") ALORS
      	// retour de l'ajout de la pièce jointe
      	sReponse = HTTPDonneRésultat(httpRésultat)
      	bRetour = vrai
      SINON
      	// erreur
      	sReponse = ErreurInfo(errComplet)
      	bRetour = faux
      FIN
      
      RENVOYER bRetour
     type : 458752
   -
     name : bLabelPresent
     procedure_id : 1475401835498686072
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] bLabelPresent (<aListeLabel_p> est tableau (chaîne), <aLabelRech_p> est tableau (chaîne))
      //
      // Paramètres :
      //	aListeLabel_p (tableau (chaîne ANSI)) : <indiquez ici le rôle de aListeLabel_p>
      //	aLabelRech_p (tableau (chaîne ANSI)) : <indiquez ici le rôle de sLabel_p>
      
      // Valeur de retour :
      // 	booléen : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure publique globale bLabelPresent(aListeLabel_p est un tableau de chaine, aLabelRech_p  est un tableau de chaine)<metier>:booleen
      
      bTrouve est un booléen
      nLigneLabel est un entier
      
      POUR nLigneLabel = 1 _À_ TableauOccurrence(aListeLabel_p)
      	SI TableauCherche(aLabelRech_p,tcLinéaire,aListeLabel_p[nLigneLabel]) > 0 ALORS
      		bTrouve = Vrai
      	FIN
      FIN
      
      renvoyer bTrouve
     type : 458752
   -
     name : Recup_Liste_Ticket_Trello
     procedure_id : 1575701833119499405
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] Recup_Liste_Ticket_Trello (<sIDColonne_Tableau_p> est chaîne [, <aStTicket_p> est tableau (STR_TICKET_TRELLO)])
      //
      // Paramètres :
      //	sIDColonne_Tableau_p (chaîne ANSI) : <indiquez ici le rôle de sIDColonne_Tableau>
      //	aStTicket_p (tableau (STR_TICKET_TRELLO)) : <indiquez ici le rôle de aStTicket_p>
      
      // Valeur de retour :
      // 	tableau (STR_TICKET_TRELLO) : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure GLOBALE Recup_Liste_Ticket_Trello(LOCAL sIDColonne_Tableau_p est une chaine,LOCAL aStTicket_p est un tableau de STR_TICKET_TRELLO = []):tableau de STR_TICKET_TRELLO
      
      // variables
      rest_Requete		est un restRequête
      rest_Reponse		est un restRéponse
      vRetour				est un Variant
      stTicket est un STR_TICKET_TRELLO
      
      
      // url pour récupérer informations sur un utilisateur
      rest_Requete..URL						= "https://api.trello.com/1/lists/[%sIDColonne_Tableau_p%]/cards" +  ClTrello_req.sAuth
      
      rest_Requete..Méthode					= httpGet
      
      rest_Requete..ContentType				= "application/json"
      
      
      // envoi de la requête
      rest_Reponse							= RESTEnvoie(rest_Requete)
      
      SI rest_Reponse..CodeEtat PAS DANS (200,201,202) ALORS
      	
      SINON
      	// récupère variant
      	vRetour		= JSONVersVariant(rest_Reponse..Contenu)
      	
      	POUR i = 1 _À_ TableauOccurrence(vRetour)
      		VariableRAZ(stTicket)
      		
      		stTicket.sID = vRetour[i].id
      		stTicket.sDescription = vRetour[i].desc
      		stTicket.sSujet = vRetour[i].name
      		
      		TableauAjoute(aStTicket_p,stTicket)
      	FIN
      FIN
      
      RENVOYER aStTicket_p
     type : 458752
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : BwAAAAcAAAA6ih3UbgNXHwTtiPSFUEj+2fi/m7v4QV2rqidAupM=
  original_name : Classe1
resources :
 string_res :
  identifier : 0x11f3a8590047da37
  internal_properties : BwAAAAcAAAAnMYFQ1bL/vz9ehh7L22SNNSlIzGTOI8h5F/WtgDNP
custom_note :
 internal_properties : BwAAAAcAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
