#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : ClDbSprint
 major_version : 27
 minor_version : 0
 type : 4
 description : ""
 subtype : 0
class :
 identifier : 0x140d071767e64566
 internal_properties : BwAAAAcAAAB2/vstTMCJbS/hlxjFxirSqKvCUuv8YxgpWyl7S3iA
 code_elements :
  internal_properties : BwAAAAcAAACmcEcPUOl8P88f4DqAteA6m/Mt111GGOClrNjaLJ9vO63bNEtdrqYoCCnjX1eG34p8AOi72Du5JSuppQ==
  type_code : 10
  p_codes :
   -
     code : |1+
      ClDbSprint est une Classe
      		Hérite de ClZF_ObjDB
      
      	m_sNoteDebutDeSprint	est une chaîne							<MAPPING=NoteDebutDeSprint>
      prive
      	m_bTop_Termine			est un booléen							<MAPPING=Top_Termine>
      	m_nVelociteMoyenneRes	est un entier sur 2 octets				<MAPPING=VelociteMoyenneRes>
      	m_nNbreSemaines			est un entier sans signe sur 1 octet	<MAPPING=NbreSemaines>
      	m_dDateDebut			est une Date							<MAPPING=DateDebut>
      	m_dDateFin				est une date							<MAPPING=DateFin>
      	m_nNbPointsRealise		est un entier sur 2 octets				<MAPPING=NbPointsRealise>
      	m_nNumSprint			est un entier
      	
      FIN
      
      
      
      
     type : 131072
  procedures :
   -
     name : Constructeur
     procedure_id : 1444818852565042534
     type_code : 27
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //Constructeur ( [<nID_P> est entier])
      //
      // Paramètres :
      //	nID_P (entier - valeur par défaut=0) : <indiquez ici le rôle de nID_P>
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      
      
      
      PROCEDURE Constructeur(local nID_P est un entier)
      
      ancetre.constructeur(Scr_Sprint..Nom, Scr_Sprint.Num_Sprint..nom,nID_P)
      
      //si nID_P = 0 ALORS trace(dbgInfo(dbgPile))
      //stop si nID_P = 0
     type : 589824
   -
     name : Destructeur
     procedure_id : 1444818852565108070
     type_code : 28
     code : |1-
      
      
      PROCEDURE Destructeur()
     type : 655360
   -
     name : pre_enregistre
     procedure_id : 1444818852565239142
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //pre_enregistre ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      
      PROCEDURE VIRTUELLE pre_enregistre()<métier>:Vide
      
      
      //Pour les Sprint historique : On verifie que la date du sprint est inferieure à la date actuelle pour determiner si le sprint est términé ou pas
      SI :m_dDateFin < DateDuJour() ALORS
      	:m_bTop_Termine = Vrai
      FIN
      
      si :ZF_bModeAjout() ALORS
      	//Réinitialisation du sprint max mémorisé.
      	ClColSprint.mg_nNumSprint_max = 0
      FIN
      
      si :m_nNumSprint > 0 ALORS
      	:p_ZF_nIdUnique = :m_nNumSprint
      	Scr_Sprint.Num_Sprint = :m_nNumSprint
      FIN
     type : 458752
   -
     name : sSprint_Date
     procedure_id : 1444818852565304678
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] sSprint_Date ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	chaîne ANSI : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      //	nNumSprint (entier) : <indiquez ici le rôle de nNumSprint>
      FONCTION sSprint_Date()<métier>:chaîne 
      
      renvoyer DateVersChaîne(:m_dDateDebut, "JJ/MM") + " - " + DateVersChaîne(:m_dDateFin, "JJ/MM/AA")
     type : 458752
   -
     name : Sprint_Points_Realise_Maj
     procedure_id : 1444818852565435750
     type_code : 12
     code : |1-
      // Résumé : Met a jour le nb de points réalisé en un sprint
      // Syntaxe :
      //Sprint_Points_Realise_Maj ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      //	nPoints_p (entier) : Le nombre de points
      //	nSprint_p (entier) : Numero du sprint
      PROCEDURE Sprint_Points_Realise_Maj()<métier>:Vide
      
      
      sdRechercheNbPointRealise	est une source de données
      sReq						est une chaîne
      
      //Recherche du nombre de points
      sReq = [
      	SELECT SUM(Scr_Tache.Poids) AS Total
      	FROM Scr_Tache
      	WHERE Scr_Tache.Num_Sprint_Fin = [%:ZF_Get_IdUnique()%]
      ]
      
      mg_oApp.Rsql(sdRechercheNbPointRealise,sReq)
      HLitPremier(sdRechercheNbPointRealise)
      si htrouve(sdRechercheNbPointRealise) ALORS
      	:p_nNbPointsRealise = sdRechercheNbPointRealise.Total
      FIN
      
      HAnnuleDéclaration(sdRechercheNbPointRealise)
     type : 458752
   -
     name : nGetNbPoints_charge
     procedure_id : 1444818852565501286
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] nGetNbPoints_charge (<nSelecteur> est ClDbTache.ETypeCharge)
      //
      // Paramètres :
      //	nSelecteur (ClDbTache.ETypeCharge) : <indiquez ici le rôle de nSelecteur>
      
      // Valeur de retour :
      // 	entier : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      //	nNumSprint_p (entier) : <indiquez ici le rôle de nNumSprint_p>
      FONCTION nGetNbPoints_charge(LOCAL nSelecteur est un ClDbTache.ETypeCharge)<métier>:entier
      
      nPtsSprint est un entier
      
      //sChoixPoids est une chaine
      //sChoixSprint est une chaîne
      SI nSelecteur = ClDbTache.ETypeCharge.Charge_réelle ALORS
      	nPtsSprint		= ClColTache.nGetNbPointsSprint(Objet, ClColTache.cstGetPointsReal)
      //	sChoixSprint	= "Scr_Tache.Num_Sprint_Realisation"
      //	sChoixPoids		= "Scr_Tache.Poids" 
      SINON
      	nPtsSprint		= ClColTache.nGetNbPointsSprint(objet, ClColTache.cstGetPointsPrev)
      //	sChoixSprint	= "Scr_Tache.Num_Sprint_Previsionnel"
      //	sChoixPoids		= "Scr_Tache.Poids_Previsionnel"	
      FIN
      
      //sdRecherchePointsRestant est une source de données
      //sReq est une chaine
      //
      //sReq = [
      //	SELECT
      //		SUM([%sChoixPoids%]) as Points
      //	
      //	FROM Scr_Tache
      //	
      //	WHERE
      //		[%sChoixSprint%] = [%:ZF_Get_IdUnique()%]
      //		AND Scr_Tache.Top_Brouillon = 0
      //]
      //
      //::mg_oApp.Rsql(sdRecherchePointsRestant,sReq)
      //HLitPremier(sdRecherchePointsRestant)
      //SI HTrouve (sdRecherchePointsRestant) ALORS
      //	nPtsSprint = sdRecherchePointsRestant.Points
      //SINON
      //	nPtsSprint = 0
      //FIN
      //
      //HAnnuleDéclaration(sdRecherchePointsRestant)
      
      RENVOYER nPtsSprint
     type : 458752
   -
     name : SetNumSprint
     procedure_id : 1444818852565566822
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //SetNumSprint (<nNumSprint_P> est entier)
      //
      // Paramètres :
      //	nNumSprint_P (entier) : <indiquez ici le rôle de nNumSprint_P>
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE SetNumSprint(LOCAL nNumSprint_P est un entier)<métier>:vide
      
      :m_nNumSprint = nNumSprint_P
     type : 458752
   -
     name : GetObj
     procedure_id : 1444818852565697894
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] GetObj (<nIdUnique_P> est entier)
      //
      // Paramètres :
      //	nIdUnique_P (entier) : <indiquez ici le rôle de nIdUnique_P>
      // Valeur de retour :
      // 	Type indéterminé : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE globale GetObj(local nIdUnique_P est un entier)<métier>:ClDbSprint
      sClasse est une chaine = ClDbSprint
      RENVOYER ClZF_ObjDB.ZF_GetObj(sClasse, nIdUnique_P)
     type : 458752
   -
     name : nGetNbPointsFini
     procedure_id : 1444818852565763430
     type_code : 12
     code : |1-
      procédure nGetNbPointsFini()<métier>:entier
      renvoyer ClColTache.nGetNbPointsSprint(objet, ClColTache.cstGetPointsFini)
     type : 458752
   -
     name : DefSprint
     procedure_id : 1444818852565894502
     type_code : 12
     code : |1-
      procédure DefSprint(local dDateDebut_p est une date, LOCAL dDateFin_p est une date, LOCAL nNbreSemaines_p est un entier)<métier>:vide
      
      :m_dDateDebut		= dDateDebut_p
      :m_dDateFin			= dDateFin_p
      :m_nNbreSemaines	= nNbreSemaines_p
     type : 458752
   -
     name : nGetNbPointsDemarre
     procedure_id : 1444818852566025574
     type_code : 12
     code : |1-
      procédure nGetNbPointsDemarre()<métier>:entier
      renvoyer ClColTache.nGetNbPointsSprint(objet, ClColTache.cstGetPointsDemarres)
     type : 458752
   -
     name : SyncNbreSemaine
     procedure_id : 1444818852566091110
     type_code : 12
     code : |1+
      procédure prive SyncNbreSemaine()<métier>:vide
      
      
      duDuréeSprint est une Durée
      
      si DateValide(:m_dDateDebut) et DateValide(:m_dDateFin) ALORS
      	//calcul de la durée du sprint
      	duDuréeSprint = :m_dDateFin - :m_dDateDebut
      	//stop si duDuréeSprint..Jour > 10
      	:m_nNbreSemaines = ArrondiSupérieur(duDuréeSprint..Jour / 7)
      sinon
      	:m_nNbreSemaines = 0
      FIN
     type : 458752
   -
     name : Init_ObjBD
     procedure_id : 1444818852566353254
     type_code : 12
     code : |1+
      // Redéfinition de la méthode ClObjDB.ZF_Init_ObjBD
      PROCÉDURE  Init_ObjBD()
      
     type : 458752
   -
     name : Calcul_Velocite_Moyenne
     procedure_id : 1444818852566418790
     type_code : 12
     code : |1+
      // Résumé : Calcule la velocité
      // Syntaxe :
      //Calcul_Velocite_Moyenne ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE GLOBAL Calcul_Velocite_Moyenne()<metier>:Vide
      
      nNbrSprint			est un entier	= 1	//compte le nombre de sprint pour le calcul de la moyenne
      nPointsSprint		est un entier	= 0	//compte le nb de points accumulé de chaque sprint
      nVelocitéMoyenne	est un entier
      nNumSprintActuel	est un entier	= goApp.m_nNumeroDuSprintActuel
      oSprint				est un ClDbSprint dynamique
      sReq				est une chaîne
      oColSprints			est un ClColSprint()
      
      sReq = [
      	
      	SELECT
      		Scr_Sprint.*
      	
      	FROM Scr_Sprint
      	
      	WHERE Scr_Sprint.Top_Termine = 1
      	
      	ORDER BY Scr_Sprint.Num_Sprint
      	
      ]
      oColSprints.ZF_LoadSQL(sReq)
      pour tout element oSprint de oColSprints.aItems()
      	
      	si nNumSprintActuel > oSprint.ZF_Get_IdUnique() ALORS
      		nPointsSprint				+= oSprint.p_nNbPointsRealise
      		nVelocitéMoyenne			= nPointsSprint / nNbrSprint //vélocité moyenne = Points du Sprint / nbrDeSprint
      		goApp.m_nVelociteMoyenne	= nVelocitéMoyenne
      	SINON //Si c'est le sprint actuel on lui donne la vélocité du dernier sprint passé 
      		nVelocitéMoyenne			= goApp.m_nVelociteMoyenne 
      	FIN
      	
      	si oSprint.p_nVelociteMoyenneRes <> nVelocitéMoyenne ALORS
      		oSprint.m_nVelociteMoyenneRes = nVelocitéMoyenne
      		oSprint.ZF_Enregistre()
      	FIN
      	
      	nNbrSprint++ 
      FIN
     type : 458752
   -
     name : oGet_SprintDeDate
     procedure_id : 1454721306253146521
     type_code : 12
     code : |1+
      procédure global oGet_SprintDeDate(dDte_P est une date)<metier>:ClDbSprint
      
      oSpr		est un ClDbSprint dynamique
      sdNumSpr	est une Source de Données
      sReq		est une chaîne
      
      
      //a faire : TOP 1
      sReq = [
      SELECT
      	Scr_Sprint.Num_Sprint
      
      FROM Scr_Sprint
      
      where '[%dDte_P%]' BETWEEN Scr_Sprint.DateDebut AND Scr_Sprint.DateFin
      	
      ORDER BY Scr_Sprint.Num_Sprint desc	
      ]
      
      ::mg_oApp.RSQL(sdNumSpr,sReq)
      HLitPremier(sdNumSpr,hSansRafraîchir)
      si pas HEnDehors(sdNumSpr) alors
      	oSpr <- ::GetObj(sdNumSpr.Num_Sprint)
      FIN
      HAnnuleDéclaration(sdNumSpr)
      
      renvoyer oSpr
     type : 458752
   -
     name : sRepresentation
     procedure_id : 1542545858114305193
     type_code : 12
     code : |1+
      // Redéfinition de la méthode ClZF_ObjDbLs.sRepresentation
      PROCÉDURE sRepresentation() <métier>:chaîne
      renvoyer "Sprint " + :ZF_Get_IdUnique()
     type : 458752
  properties :
   -
     name : p_dDateDebut
     identifier : 0x140d071767e74566
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_dDateDebut()<métier> : date
         
         renvoyer :m_dDateDebut
        type : 1966080
      -
        code : |1+
         procédure p_dDateDebut(dDateDebut_p est une date)<métier>:Vide
         
         :m_dDateDebut = dDateDebut_p
         
         //Recalcul du nombre de semaines.
         :SyncNbreSemaine()
        type : 2031616
     template_refs : []
   -
     name : p_dDateFin
     identifier : 0x140d071767e84566
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_dDateFin()<métier> : date
         
         renvoyer :m_dDateFin
        type : 1966080
      -
        code : |1+
         procédure p_dDateFin(dDateFin_p est une date)<métier>:Vide
         
         :m_dDateFin = dDateFin_p
         
         //Recalcul du nombre de semaines.
         :SyncNbreSemaine()
        type : 2031616
     template_refs : []
   -
     name : p_nNbreSemaines
     identifier : 0x140d071767e94566
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_nNbreSemaines()<métier> : entier sans signe sur 4 octets
         
         renvoyer :m_nNbreSemaines
        type : 1966080
     template_refs : []
   -
     name : p_nVelociteMoyenneRes
     identifier : 0x140d071767ea4566
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_nVelociteMoyenneRes()<métier> : entier
         
         renvoyer :m_nVelociteMoyenneRes
        type : 1966080
     template_refs : []
   -
     name : p_bTop_Termine
     identifier : 0x140d071767eb4566
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_bTop_Termine()<métier> : booléen
         
         renvoyer :m_bTop_Termine
        type : 1966080
      -
        code : |1-
         procédure publique p_bTop_Termine(bValeur est un booléen)<métier>:vide
         
         si :m_bTop_Termine <> bValeur alors
         	:m_bTop_Termine = bValeur
         	:ZF_EstModif()
         FIN
        type : 2031616
     template_refs : []
   -
     name : p_nNbPointsRealise
     identifier : 0x140d071767ec4566
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_nNbPointsRealise()<métier> : entier
         
         renvoyer :m_nNbPointsRealise
        type : 1966080
      -
        code : |1+
         procédure p_nNbPointsRealise(nValeur_p est un entier)<métier>:vide
         
         SI :m_nNbPointsRealise <> nValeur_p ALORS
         	:m_nNbPointsRealise = nValeur_p
         	:ZF_EstModif()
         FIN
         
        type : 2031616
     template_refs : []
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : BwAAAAcAAAA6ih3UbgNXHwTtiPSFUEj+2fi/m7v4QV2rqidAupM=
  original_name : ClSprint
resources :
 string_res :
  identifier : 0x1e8df41f3f4ce8f8
  internal_properties : BwAAAAcAAAAnMYFQ1bL/vz9ehh7L22SNNSlIzGTOI8h5F/WtgDNP
custom_note :
 internal_properties : BwAAAAcAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
associated_test :
 name : TEST_ClDbSprint.wxt
