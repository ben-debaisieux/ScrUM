#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : ClTache
 major_version : 26
 minor_version : 0
 type : 4
 description : ""
 subtype : 0
class :
 identifier : 0x1e85e352228e3dbc
 internal_properties : BgAAAAYAAAB2/vstTMCJbS/hlxjFxirSqKvCUuv8YxgpWyl7S3iA
 code_elements :
  internal_properties : BgAAAAYAAACmcEcPUOl8P88f4DqAteA6m/Mt111GGOClrNjaLJ9vO63bNEtdrqYoCCnjX1eG34p8AOi72Du5JSuppQ==
  type_code : 10
  p_codes :
   -
     code : |1-
      ClTache est une Classe
      		Hérite de ClObjDB
      		Hérite de ClHistorique
      PUBLIC
      	m_oUserStoryParent			est un objet ClUserStory dynamique
      
      prive
      	m_sCodeTache				est une chaîne				<MAPPING=CodeTache>
      	m_sDescription				est une chaîne				<MAPPING=description>
      	m_nPoids					est un entier sur 2 octets	<MAPPING=Poids>
      	m_nPoids_Previsionnel		est un entier sur 2 octets	<MAPPING=Poids_previsionnel>
      	m_nOrdre					est un entier sur 2 octets	<MAPPING=Ordre>
      	m_bEstRealise				est un booléen				<MAPPING=Top_Realise>
      	m_bAnnule					est un booléen				<MAPPING=Top_Annule>
      	m_bBrouillon				est un booléen				<MAPPING=Top_Brouillon>
      	m_nStatut					est un entier				<MAPPING=Statut>
      	m_bTache_tech				est un booléen				<MAPPING=Top_Tache_tech>
      	m_sCMTR						est une chaîne				<MAPPING=CMTR>
      	m_sCMTR_Blocage				est une chaîne				<MAPPING=CMTR_Blocage>
      	m_nNumTicketIncident		est un entier				<MAPPING=NumTicketIncident>
      	m_nNum_Sprint_Creation		est un entier				<MAPPING=Num_Sprint_Creation>
      	m_nNum_Sprint_Demarrage		est un entier				<MAPPING=Num_Sprint_Demarrage>
      	m_nNum_Sprint_Realisation	est un entier				<MAPPING=Num_Sprint_Realisation>
      	m_nNum_Sprint_Previsionnel	est un entier				<MAPPING=Num_Sprint_Previsionnel>
      	m_nNum_Sprint_Fin			est un entier				<MAPPING=Num_Sprint_Fin>
      	
      	m_oUsr_Dev					est un objet ClUsr dynamique
      	m_oUsr_createur				est un objet ClUsr dynamique
      	
      FIN
      
      constante
      	cstPoidsEstimatifTacheNonCote		= 2
      	cstOffsetEstimatifTacheNonPlanif	= 3
      	
      	cstStatut_Brouillon					= 1
      	cstStatut_a_coter					= 2
      	cstStatut_a_faire					= 3
      	cstStatut_en_cours					= 4
      	cstStatut_realise					= 5
      	cstStatut_Annulee					= 6
      	cstStatut_Suspendu					= 7
      fin
      
      ETypeCharge est une énumération
      	Charge_réelle
      	Charge_prévisionelle
      fin
      
      ETypeEtatTacheAFaire est une énumération
      	PasseEtActuelle
      	Future
      	Toutes
      fin
       
     type : 131072
  procedures :
   -
     name : Constructeur
     procedure_id : 2199413934947057084
     type_code : 27
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //Constructeur ( [<nId_P> est entier])
      //
      // Paramètres :
      //	nId_P (entier - valeur par défaut=0) : <indiquez ici le rôle de nId_P>
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      
      
      
      //	oUS_Parente : <indiquez ici le rôle de oUS_Parente>
      PROCEDURE Constructeur(LOCAL nId_P est un entier = 0)
      
      ClObjDB.constructeur(Scr_Tache..nom, Scr_Tache.IDScr_Tache..Nom, nId_P)
      
      
      //Chargement des données dans l'instance.
      :Charge()
      
      
      si :bModeAjout() ALORS
      	:m_oUsr_createur			<- goApp.m_oUsrCnx
      	:m_nNum_Sprint_Creation		= goApp.Sprint_Num_Actuel()
      sinon
      	//Si la tache a été enregistrée sans 'créateur' on l'affecte à l'utilisateur en cours.
      	si :m_oUsr_createur = Null ALORS
      		:m_oUsr_createur		= goApp.m_oUsrCnx
      	FIN
      FIN
      
      
      SI PAS Scr_Tache.IDScr_Usr_createur..Null ALORS
      	:m_ousr_createur			<- ClUsr.GetObj(Scr_Tache.IDScr_Usr_createur)
      FIN
      
      SI PAS Scr_Tache.IDScr_UserStory..Null ALORS
      	:m_oUserStoryParent			<- ClUserStory.GetObj(Scr_Tache.IDScr_UserStory)
      FIN
      
      SI PAS Scr_Tache.IDScr_Usr_Dev..Null ALORS
      	:m_oUsr_Dev					<- ClUsr.GetObj(Scr_Tache.IDScr_Usr_Dev)
      FIN
      
      //si :m_nStatut = 0 et nId_P <> 0 ALORS
      //	stop
      //	//:m_nStatut = :get_statut_tache()
      //FIN
     type : 589824
   -
     name : Destructeur
     procedure_id : 2199413934947122620
     type_code : 28
     code : |1-
      
      
      PROCEDURE Destructeur()
     type : 655360
   -
     name : pre_enregistre
     procedure_id : 2201352850469531838
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //pre_enregistre ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE VIRTUELLE pre_enregistre()
      
      m_EnrActu est un Enregistrement de Scr_Tache
      m_EnrOrigine est un Enregistrement de Scr_Tache
      
      SI :m_bEstSupprime ALORS
      	//On supprimer tous les historiques de la suer story
      	:CleanHisto()
      	
      SINON
      	SI PAS :bModeAjout() ALORS
      		//En modification :
      		
      		//On actualise les données en mémoire, pour générer l'historique.
      		m_EnrActu = Scr_Tache
      		:Charge(Vrai)
      		m_EnrOrigine = Scr_Tache
      		Scr_Tache = m_EnrActu
      	sinon
      		//En mode ajout :
      		
      		// Si on a pas de staut, on le calcule, en fonction des infos de la tache.
      		si :m_nStatut = 0 ALORS
      			:m_nStatut = :get_statut_tache()
      			SI :m_nStatut = 0 ALORS
      				ExceptionDéclenche(1,"Identification du statut de la tache impossible.")
      			FIN
      		FIN
      	FIN
      	
      	
      	//Enregistrement de l'utilisateur rédacteur (par défaut l'utilisateur courant)
      	Scr_Tache.IDScr_Usr_createur				= :m_oUsr_createur.Get_IdUnique()
      	
      	
      	si :m_oUserStoryParent = Null ALORS
      		Scr_Tache.IDScr_UserStory..null			= vrai
      	sinon
      		Scr_Tache.IDScr_UserStory				= :m_oUserStoryParent.Get_IdUnique()
      	FIN
      	
      	//Enregistrement du sprint de démarrage.
      	si :m_nNum_Sprint_Demarrage = 0 ALORS
      		Scr_Tache.Num_Sprint_Demarrage..Null	= vrai
      	sinon
      		si :m_oUsr_Dev = Null ALORS
      			ExceptionDéclenche(1,"Impossible de démarrer une tache, sans développeur associé.")
      		FIN
      		
      //		//On ne permet pas le démarrage d'une tache, sur un sprint terminé.
      //		si ClSprint.GetObj(:m_nNum_Sprint_Demarrage).m_bTop_Termine ALORS
      //			ExceptionDéclenche(1,ChaîneConstruit("Impossible de démarrer la tache, sur le sprint %1, car il est terminé.", :m_nNum_Sprint_Demarrage))
      //		FIN
      	fin
      	
      	
      	//Si on a pas de sprint prévisionnel, on s'aligne sur le sprint de démarrage.
      	SI :m_nNum_Sprint_Previsionnel = 0 ALORS
      		:m_nNum_Sprint_Previsionnel				= :m_nNum_Sprint_Realisation
      	FIN
      	SI :m_nNum_Sprint_Previsionnel = 0 ALORS
      		Scr_Tache.Num_Sprint_Previsionnel..Null	= Vrai
      	FIN
      	
      	//Enregistrement du sprint de réalisation
      	SI :m_nNum_Sprint_Realisation = 0 ALORS
      		Scr_Tache.Num_Sprint_Realisation..Null	= Vrai
      	FIN
      	
      	//Enregistrement du sprint de fin
      	SI :m_nNum_Sprint_Fin = 0 ALORS
      		Scr_Tache.Num_Sprint_Fin..Null			= Vrai
      	sinon
      		Scr_Tache.Num_Sprint_Fin				= :m_nNum_Sprint_Fin
      		
      		si pas :m_bAnnule alors
      			//Si on a un sprint de fin, les taches doivent êtres réalisées
      			si pas :m_bEstRealise ALORS
      				ExceptionDéclenche(1,"Impossible d'enregistrer un sprint de fin, sur une tache, qui n'est pas réalisée")
      			FIN
      		FIN
      	FIN
      	
      	
      	
      	//Enregistrement de l'utilisateur testeur
      	SI :m_oUsr_Dev = null ALORS
      		Scr_Tache.IDScr_Usr_Dev..Null			= Vrai
      	sinon
      		Scr_Tache.IDScr_Usr_Dev					= :m_oUsr_Dev.Get_IdUnique()
      	FIN
      	
      	
      	
      	si :m_nNum_Sprint_Creation > :m_nNum_Sprint_Demarrage et :m_nNum_Sprint_Demarrage <> 0 alors
      		exceptiondeclenche(1, chaineconstruit([
      			Enregistrement impossible :
      			Le sprint de démarrage (%2) ne peut pas être antérieur au sprint de création (%1)
      			], :m_nNum_Sprint_Creation, :m_nNum_Sprint_Demarrage))
      	FIN
      	
      	si :m_nNum_Sprint_Creation > :m_nNum_Sprint_Realisation ET :m_nNum_Sprint_Realisation <> 0 alors
      		exceptiondeclenche(1, ChaîneConstruit([
      			Enregistrement impossible :
      			Le sprint de réalisation (%2) ne peut pas être antérieur au sprint de création (%1)
      			], :m_nNum_Sprint_Creation, :m_nNum_Sprint_Realisation))
      	FIN
      	
      	si :m_nNum_Sprint_Realisation > :m_nNum_Sprint_Fin ET :m_nNum_Sprint_Fin <> 0 et pas :m_bAnnule alors
      		exceptiondeclenche(1, ChaîneConstruit([
      			Enregistrement impossible :
      			Le sprint de fin (%2) ne peut pas être antérieur au sprint de réalisation (%1)
      			], :m_nNum_Sprint_Realisation, :m_nNum_Sprint_Fin))
      	FIN
      	
      	si :m_nNum_Sprint_Demarrage > :m_nNum_Sprint_Fin ET :m_nNum_Sprint_Fin <> 0 et pas :m_bAnnule alors
      		exceptiondeclenche(1, ChaîneConstruit([
      			Enregistrement impossible :
      			Le sprint de fin (%2) ne peut pas être antérieur au sprint de démarrage (%1)
      			], :m_nNum_Sprint_Demarrage, :m_nNum_Sprint_Fin))
      	FIN
      	
      	si :m_nNum_Sprint_Demarrage <> 0 et :m_oUsr_Dev = null ALORS
      		ExceptionDéclenche(1, ChaîneConstruit([
      			Enregistrement impossible :
      			Impossible de démarrer une tache sans développeur associé.
      			]))
      	
      	FIN
      	
      	
      	//En création ou en modification, son s'assure que le code article n'est pas pris.
      	si :bModeAjout() _ou_ m_EnrOrigine.CodeTache <> :m_sCodeTache ALORS
      		si pas :bCodeTacheDispo(:m_sCodeTache) ALORS
      			ExceptionDéclenche(1, ChaîneConstruit([
      				Enregistrement impossible :
      				Le code tache ""%1"" est déjà utilisé.
      				], :m_sCodeTache))
      		FIN
      	FIN
      	
      	
      	SI PAS :m_nStatut DANS (::cstStatut_Suspendu) ALORS
      		:m_nStatut = :get_statut_tache()
      	FIN
      	
      	////////////////////////////////////////////////
      	//Historisation de modifications
      	
      	SI :bModeAjout() ALORS
      		:AjouteHistorique("Création de la tache")
      	SINON
      		
      		//User storie parente
      		si m_EnrOrigine.IDScr_UserStory <> :m_oUserStoryParent.Get_IdUnique() ALORS
      			:AjouteHistorique("Changement d'user story")
      		FIN
      		
      		//m_EnrUsActu.Num_Sprint_Creation
      		
      		//Ordre
      		si m_EnrOrigine.Ordre <> :m_nOrdre ALORS
      			:AjouteHistorique(ChaîneConstruit("Changement de l'ordre de la tache : nouvelle position : %1", :m_nOrdre))
      		FIN
      		
      		//m_EnrUsActu.CodeTache
      		
      		//Description de la tache
      		si m_EnrOrigine.Description <> :m_sDescription ALORS
      			:AjouteHistorique(ChaîneConstruit([
      			Changement de la description de la tache :
      			%1
      			], :m_sDescription))
      		FIN
      		
      		//Attribut brouillon
      		si m_EnrOrigine.Top_Brouillon <> :m_bBrouillon ALORS
      			si :m_bBrouillon ALORS
      				:AjouteHistorique("La tache est devenue un brouillon")
      			sinon
      				:AjouteHistorique("La tache n'est plus un brouillon")
      			FIN
      		FIN
      		
      		//Attribut tache technique
      		si m_EnrOrigine.Top_tache_tech <> :m_btache_tech ALORS
      			si :m_btache_tech ALORS
      				:AjouteHistorique("La tache est devenue une tache technique")
      			sinon
      				:AjouteHistorique("La tache n'est plus une tache technique")
      			FIN
      		FIN
      		
      		//Attribut annulé
      		si m_EnrOrigine.Top_Annule <> :m_bAnnule ALORS
      			si :m_bAnnule ALORS
      				:AjouteHistorique("La tache est annulée")
      			sinon
      				:AjouteHistorique("La tache n'est plus annulée")
      			FIN
      		FIN
      		
      		//Sprint de réalisation
      		si m_EnrOrigine.Num_Sprint_Realisation <> :m_nNum_Sprint_Realisation ALORS
      			:AjouteHistorique(ChaîneConstruit("Modification du sprint de réalisation : %1", ...
      				:m_nNum_Sprint_Realisation))
      		FIN
      		
      		//Poids de la tache.
      		si m_EnrOrigine.Poids <> :m_nPoids ALORS
      			:AjouteHistorique(ChaîneConstruit("Modification du poids de la tache : %1", :m_nPoids))
      		FIN
      		
      		//Sprint prévisionnel
      		si m_EnrOrigine.Num_Sprint_Previsionnel <> :m_nNum_Sprint_Previsionnel ALORS
      			:AjouteHistorique(ChaîneConstruit("Changement du sprint prévisionnel : %1", :m_nNum_Sprint_Previsionnel))
      		FIN
      		
      		//Poids prévisionnel de la tache.
      		si m_EnrOrigine.Poids_Previsionnel <> :m_nPoids_Previsionnel ALORS
      			:AjouteHistorique(ChaîneConstruit("Modification du poids prévisionnel de la tache : %1",...
      				:m_nPoids_Previsionnel))
      		FIN
      		
      		//Sprint de démarrage
      		SI m_EnrOrigine.Num_Sprint_Demarrage <> :m_nNum_Sprint_Demarrage ALORS
      			:AjouteHistorique(ChaîneConstruit("Changement du sprint de démarrage : %1", :m_nNum_Sprint_Demarrage))
      			
      		FIN
      
      		//m_EnrUsActu.Top_Realise
      		//m_EnrUsActu.Num_Sprint_Fin
      		
      		si m_EnrOrigine.CMTR <> :m_sCMTR ALORS
      			:AjouteHistorique(ChaîneConstruit([
      			Modification du commentaire :
      			%1
      			], :m_sCMTR))
      		FIN
      		
      		//N° de ticket incident
      		si m_EnrOrigine.NumTicketIncident <> :m_nNumTicketIncident ALORS
      			:AjouteHistorique(ChaîneConstruit("Changement du N° de ticket d'incident : %1", :m_nNumTicketIncident))
      		FIN
      		
      		//m_EnrUsActu.IDScr_Usr_createur
      		
      		//Développeur associé à la tache.
      		si :m_oUsr_Dev = null alors
      			SI m_EnrOrigine.IDScr_Usr_Dev <> 0 ALORS
      				:AjouteHistorique("Retrait du développeur, sur la tache.")
      			FIN
      		sinon
      			si m_EnrOrigine.IDScr_Usr_Dev <> :m_oUsr_Dev.Get_IdUnique() ALORS
      				:AjouteHistorique(ChaîneConstruit("Changement du développeur : %1", :m_oUsr_Dev.p_sNom))
      			FIN
      		FIN
      	fin
      fin
     type : 458752
   -
     name : Controle_Poids
     procedure_id : 2201703616945380860
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] Controle_Poids (<nPoids_p> est entier)
      //
      // Paramètres :
      //	nPoids_p (entier) : <indiquez ici le rôle de nPoids_p>
      // Valeur de retour :
      // 	booléen : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      FONCTION GLOBAL Controle_Poids(LOCAL nPoids_p est un entier):booléen
      
      bPoidsValide est un booléen
      
      aValeurAcepte est un tableau d'entier = [0,1,2,5,8,13,20]
      nIndice est un entier 
      
      nIndice = TableauCherche(aValeurAcepte,tcDichotomique,nPoids_p)
      
      si nIndice = -1 alors
      	bPoidsValide = faux
      sinon
      	bPoidsValide = vrai
      FIN
      
      renvoyer bPoidsValide
      
      
     type : 458752
   -
     name : Charge_Totale
     procedure_id : 2201704858192988172
     type_code : 12
     code : |1-
      // Résumé : Compte le nb de points de tout les projet confondus et de tout les sprints
      // Syntaxe :
      //[ <Résultat> = ] Charge_Totale ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	entier : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      FONCTION GLOBAL Charge_Totale():entier
      
      nTotal est un entier
      
      sdChargeTotale est une source de données
      sReq est une chaîne
      
      sReq = [
      	SELECT SUM(Scr_Tache.Poids) AS Total
      	FROM Scr_Tache
      	WHERE Scr_Tache.Top_Annule = 0
      		AND Scr_Tache.Top_Brouillon = 0
      ]
      
      si goApp.Rsql(sdChargeTotale,sReq) ALORS
      	HLitPremier(sdChargeTotale)
      	si Htrouve(sdChargeTotale) alors
      		nTotal = sdChargeTotale.Total
      	sinon
      		nTotal = 0
      	FIN
      sinon
      	erreur(erreurinfo(errcomplet))
      FIN
      
      HAnnuleDéclaration(sdChargeTotale)
      
      renvoyer nTotal
     type : 458752
   -
     name : Taches_a_faire
     procedure_id : 2205713918146039400
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] Taches_a_faire (<eFiltre> est ClTache.ETypeEtatTacheAFaire)
      //
      // Paramètres :
      //	eFiltre (ClTache.ETypeEtatTacheAFaire) : <indiquez ici le rôle de eFiltre>
      // Valeur de retour :
      // 	tableau : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE globale Taches_a_faire(eFiltre est un ETypeEtatTacheAFaire):tableau de ClTache dynamique
      
      sdTachesAFaire est une Source de Données
      sReq est une chaîne
      aOTaches est un tableau de ClTache dynamique
      
      sFilre est une chaîne
      
      selon eFiltre
      	CAS PasseEtActuelle
      		sFilre = "AND Scr_Tache.Num_Sprint_Realisation <= " + goApp.m_nNumeroDuSprintActuel
      	CAS Future
      		sFilre = "AND Scr_Tache.Num_Sprint_Realisation > " + goApp.m_nNumeroDuSprintActuel
      	CAS Toutes
      		
      FIN
      
      sReq = ChaîneConstruit([
      	
      	SELECT
      		Scr_Tache.IDScr_Tache
      		
      	FROM Scr_Tache
      	
      	where Scr_Tache.Num_Sprint_Demarrage is Null
      		--AND Scr_Tache.IDScr_Usr_Dev is Null
      		AND Scr_Tache.Top_Annule = 0
      		AND Scr_Tache.Top_Brouillon = 0
      		AND Scr_Tache.Top_Realise = 0
      		%1
      		
      ], sFilre)
      
      SI goApp.RSQL(sdTachesAFaire,sReq) ALORS
      	POUR TOUT sdTachesAFaire
      		TableauAjouteRéférence(aOTaches, ClTache.GetObj(sdTachesAFaire.IDScr_Tache))
      	FIN
      FIN
      
      HAnnuleDéclaration(sdTachesAFaire)
      
      
      
      renvoyer aOTaches
     type : 458752
   -
     name : sBulleTache
     procedure_id : 2208269616721134479
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] sBulleTache ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	chaîne ANSI : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE sBulleTache():chaine
      
      renvoyer ChaîneConstruit([
      	Projet : %1
      	-------------------------------------------------
      	En tant que : %2
      	J'ai besoin de : %3
      	Afin de : %4
      	-------------------------------------------------
      	%9
      	%5
      	
      	Sprint : %6
      	Poids : %7
      	-------------------------------------------------
      	Commentaire :
      	%8
      	], :m_oUserStoryParent.p_oProjetParent.p_sNom, ...
      		:m_oUserStoryParent.p_sEntantQue, ...
      		:m_oUserStoryParent.p_sJaiBesoinDe, ...
      		:m_oUserStoryParent.p_sAfinDe, ...
      		:m_sDescription, ...
      		:m_nNum_Sprint_Realisation, ...
      		:m_nPoids, ...
      		:m_sCMTR, ...
      		:m_sCodeTache)
     type : 458752
   -
     name : bEstDemarree
     procedure_id : 2212400769432876719
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] bEstDemarree ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	booléen : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE bEstDemarree():booléen
      renvoyer pas (:m_oUsr_Dev = null)
      
     type : 458752
   -
     name : GetObj
     procedure_id : 2241109468817889337
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] GetObj (<nIdUnique_P> est entier)
      //
      // Paramètres :
      //	nIdUnique_P (entier) : <indiquez ici le rôle de nIdUnique_P>
      // Valeur de retour :
      // 	ClTache : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE globale GetObj(local nIdUnique_P est un entier):ClTache
      
      renvoyer ClObjDB.GetObj("ClTache", nIdUnique_P)
     type : 458752
   -
     name : post_enregistre
     procedure_id : 2254447562539535354
     type_code : 12
     code : |1+
      // Redéfinition de la méthode ClObjDB.post_enregistre
      PROCÉDURE PROTÉGÉE VIRTUELLE post_enregistre()
      
      //Enregistrement de l'historique des modifications
      :EnregHisto()
      
     type : 458752
   -
     name : Get_IdUnique
     procedure_id : 2254453068699376586
     type_code : 12
     code : |1+
      // Redéfinition de la méthode ClObjDB.Get_IdUnique
      FONCTION Get_IdUnique():entier
      
      //redéfinition obligatoire à cause de la déclaration 'abstraite' de la méthode, dans la classe d'historique
      RENVOYER ClObjDB.Get_IdUnique()
      
      
     type : 458752
   -
     name : bCotationAFaire
     procedure_id : 2273530054691809793
     type_code : 12
     code : |1-
      procédure bCotationAFaire():booléen
      
      bRetour est un booléen
      
      si :m_nPoids = 0 et :m_nPoids_Previsionnel <> 0 et :m_bAnnule = faux ET :m_bBrouillon = Faux ALORS
      	bRetour = vrai
      FIN
      
      renvoyer bRetour
     type : 458752
   -
     name : get_statut_tache
     procedure_id : 2276358711767589644
     type_code : 12
     code : |1-
      procédure get_statut_tache():entier
      
      nRetour est un entier
      bUsTermine est un booléen
      
      si :m_bBrouillon ALORS
      	nRetour = ::cstStatut_Brouillon
      sinon
      	si :m_bAnnule ALORS
      		nRetour = ::cstStatut_Annulee
      	sinon
      		si :bCotationAFaire() ALORS
      			nRetour = ::cstStatut_a_coter
      		sinon
      			
      			//On vérifie si l'US parente est terminée ou non.
      			bUsTermine = faux
      			si :m_oUserStoryParent <> Null ALORS
      				si :m_oUserStoryParent.p_bTermine ALORS
      					bUsTermine = vrai
      				FIN
      			FIN
      			
      			SI :m_nNum_Sprint_Fin <> 0 ou :m_bEstRealise ou bUsTermine ALORS
      				nRetour = ::cstStatut_realise
      			SINON
      				si :m_nNum_Sprint_Demarrage <> 0 ALORS
      					nRetour = ::cstStatut_en_cours
      				SINON
      					nRetour = ::cstStatut_a_faire
      				fin
      			FIN
      		FIN
      	FIN
      FIN
      
      renvoyer nRetour
     type : 458752
   -
     name : GetObj_de_code
     procedure_id : 2276888994258211806
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] GetObj_de_code (<nIdUnique_P> est entier)
      //
      // Paramètres :
      //	nIdUnique_P (entier) : <indiquez ici le rôle de nIdUnique_P>
      // Valeur de retour :
      // 	ClTache : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE globale GetObj_de_code(local sCode_P est une chaîne):ClTache
      
      HLitRecherche(Scr_Tache,CodeTache,sCode_P,hIdentique+hLimiteParcours)
      si HTrouve(Scr_Tache) ALORS
      	RENVOYER ClObjDB.GetObj("ClTache", Scr_Tache.IDScr_Tache)
      sinon
      	RENVOYER null
      FIN
     type : 458752
   -
     name : aoTachesSelonStatut
     procedure_id : 2279324343658017766
     type_code : 12
     code : |1+
      procédure publique globale aoTachesSelonStatut(nStatut_P est un entier):tableau de ClTache dynamique
      
      
      sdMesBrouillons est une Source de Données
      sReq est une chaîne
      aOTaches est un tableau de ClTache dynamique
      
      	
      //Récupération des taches en brouillon, de l'utilisateur.
      sReq = ChaîneConstruit([
      	SELECT
      		Scr_Tache.IDScr_Tache
      	FROM Scr_Tache
      	WHERE Scr_Tache.Statut = %1
      	
      ], nStatut_P)
      
      SI goApp.Rsql(sdMesBrouillons,sReq) ALORS
      	POUR TOUT sdMesBrouillons
      		TableauAjouteRéférence(aOTaches, ClTache.GetObj(sdMesBrouillons.IDScr_Tache))
      	FIN
      FIN
      
      HAnnuleDéclaration(sdMesBrouillons)
      
      
      RENVOYER aOTaches
     type : 458752
   -
     name : sExport
     procedure_id : 1156438924059924012
     type_code : 12
     code : |1+
      procédure sExport():JSON
      
      sRetour est un JSON
      nInd est un entier
      
      sRetour.id							= :m_nIdUnique
      sRetour.code						= :m_scodetache
      sRetour.description					= :m_sdescription
      sRetour.cancel						= :m_bannule
      sRetour.is_draft					= :m_bbrouillon
      sRetour.is_finish					= :m_bestrealise
      sRetour.is_technic					= :m_btache_tech
      sRetour.sprint_create				= :m_nnum_sprint_creation
      sRetour.sprint_start				= :m_nnum_sprint_demarrage
      sRetour.sprint_end					= :m_nnum_sprint_fin
      sRetour.sprint_forcast				= :m_nnum_sprint_previsionnel
      sRetour.sprint_completion			= :m_nnum_sprint_realisation
      sRetour.num_ticket					= :m_nnumticketincident
      sRetour.order						= :m_nordre
      sRetour.width						= :m_npoids
      sRetour.width_forcast				= :m_npoids_previsionnel
      sRetour.status						= :m_nstatut
      sRetour.comment						= :m_scmtr
      sRetour.comment_stop				= :m_scmtr_blocage
      sRetour.user_creator				= :m_ousr_createur.sExport()
      
      si :m_oUsr_Dev <> null ALORS
      	sRetour.user_dev				= :m_oUsr_Dev.sExport()
      FIN
      
      
      nInd = 0
      oMsg est un ClMessage dynamique
      POUR TOUT ELEMENT oMsg DE ClMessage.aoListeMessage(objet)
      	nInd++
      	sRetour.message[nInd] = oMsg.sExport()
      FIN
      
      RENVOYER sRetour
     type : 458752
   -
     name : bEstValidee
     procedure_id : 1199028575566318045
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] bEstValidee ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	booléen : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE bEstValidee():booléen
      renvoyer (:m_nNum_Sprint_Fin <> 0 et :m_bEstRealise)
      
     type : 458752
   -
     name : sLibDeStatut
     procedure_id : 1218044371492447721
     type_code : 12
     code : |1-
      procédure sLibDeStatut():chaine
      
      sRetour est une chaîne 
      
      selon :m_nStatut
      	
      	cas ::cstStatut_Brouillon
      		sRetour = "Brouillon"
      	CAS ::cstStatut_a_coter
      		sRetour = "A coter"
      	CAS ::cstStatut_a_faire
      		sRetour = "A faire"
      	cas ::cstStatut_en_cours
      		sRetour = "En cours"
      	CAS ::cstStatut_realise
      		sRetour = "Réalisé"
      	CAS ::cstStatut_Annulee
      		sRetour = "Annulée"
      	CAS ::cstStatut_Suspendu
      		sRetour = "Suspendue"
      	AUTRE CAS
      		ExceptionDéclenche(1, "Statut non prévu")
      FIN
      
      
      renvoyer sRetour
     type : 458752
   -
     name : bCodeTacheDispo
     procedure_id : 1280241888829805518
     type_code : 12
     code : |1-
      procédure privée bCodeTacheDispo(sCodeTache_P est une chaîne):booléen
      
      
      sdRechCodeTache est une Source de Données
      sReq est une chaîne
      bRetour est un booléen
      
      sReq = ChaîneConstruit([
      	
      	SELECT
      		COUNT(*) as Nbre
      	
      	FROM Scr_Tache
      	
      	WHERE Scr_Tache.CodeTache = '%1'
      		AND Scr_Tache.IDScr_Tache <> %2
      	
      ], sCodeTache_P, :Get_IdUnique())
      
      SI goApp.RSQL(sdRechCodeTache,sReq) ALORS
      
      	HLitPremier(sdRechCodeTache)
      	si pas HEnDehors(sdRechCodeTache) ALORS
      		
      		bRetour = (sdRechCodeTache.Nbre = 0)
      		
      	FIN
      	
      FIN
      
      HAnnuleDéclaration(sdRechCodeTache)
      
      
      
      renvoyer bRetour
     type : 458752
  properties :
   -
     name : p_oUsr_Dev
     identifier : 0x1f52b2b3044f6d8c
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_oUsr_Dev() : ClUsr
         
         renvoyer :m_oUsr_Dev
        type : 1966080
      -
        code : |1-
         procédure publique p_oUsr_Dev(oValeur est ClUsr)
         
         :m_oUsr_Dev <- oValeur
        type : 2031616
     template_refs : []
   -
     name : p_oUserStoryParent
     identifier : 0x1f52b2c90450c521
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_oUserStoryParent() : ClUserStory
         
         renvoyer :m_oUserStoryParent
        type : 1966080
      -
        code : |1-
         procédure publique p_oUserStoryParent(oValeur est ClUserStory)
         
         :m_oUserStoryParent <- oValeur
        type : 2031616
     template_refs : []
   -
     name : p_oUsr_createur
     identifier : 0x1f52b5170544c360
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_oUsr_createur() : ClUsr
         
         renvoyer :m_oUsr_createur
        type : 1966080
      -
        code : |1+
         procédure publique p_oUsr_createur(oValeur est ClUsr)
         
         si :m_oUsr_createur.Get_IdUnique() <> oValeur.Get_IdUnique() ALORS
         	:EstModif()
         	:m_oUsr_createur <- oValeur
         FIN
        type : 2031616
     template_refs : []
   -
     name : p_bAnnule
     identifier : 0x1037b0000248d001
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_bAnnule() : booléen
         
         renvoyer :m_bAnnule
        type : 1966080
      -
        code : |1-
         procédure publique p_bAnnule(bValeur est un booléen)
         
         si :m_bAnnule <> bValeur alors
         	:EstModif()
         	
         	:m_bAnnule = bValeur
         	:m_nStatut = ::cstStatut_Annulee
         fin
        type : 2031616
     template_refs : []
   -
     name : p_bBrouillon
     identifier : 0x1037b0110249147d
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_bBrouillon() : booléen
         
         renvoyer :m_bBrouillon
        type : 1966080
      -
        code : |1-
         procédure publique p_bBrouillon(bValeur est un booléen)
         
         si :m_bBrouillon <> bValeur alors
         	:EstModif()
         	
         	:m_bBrouillon = bValeur
         	:m_nStatut = ::cstStatut_Annulee
         fin
        type : 2031616
     template_refs : []
   -
     name : p_bEstRealise
     identifier : 0x1037b022024a56c5
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_bEstRealise() : booléen
         
         renvoyer :m_bEstRealise
        type : 1966080
      -
        code : |1-
         procédure publique p_bEstRealise(bValeur est un booléen)
         
         si :m_bEstRealise <> bValeur alors
         	:EstModif()
         	
         	:m_bEstRealise = bValeur
         	:m_nStatut = ::cstStatut_Annulee
         fin
        type : 2031616
     template_refs : []
   -
     name : p_bTache_tech
     identifier : 0x1037b02c024b7cbc
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_bTache_tech() : booléen
         
         renvoyer :m_bTache_tech
        type : 1966080
      -
        code : |1-
         procédure publique p_bTache_tech(bValeur est un booléen)
         
         si :m_bTache_tech <> bValeur alors
         	:EstModif()
         	
         	:m_bTache_tech = bValeur
         fin
        type : 2031616
     template_refs : []
   -
     name : p_nNum_Sprint_Creation
     identifier : 0x1037b035024ca12c
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_nNum_Sprint_Creation() : entier
         
         renvoyer :m_nNum_Sprint_Creation
        type : 1966080
      -
        code : |1-
         procédure publique p_nNum_Sprint_Creation(nValeur est un entier)
         
         si :m_nNum_Sprint_Creation <> nValeur alors
         	:EstModif()
         	
         	:m_nNum_Sprint_Creation = nValeur
         fin
        type : 2031616
     template_refs : []
   -
     name : p_nNum_Sprint_Demarrage
     identifier : 0x1037b041024dcf22
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_nNum_Sprint_Demarrage() : entier
         
         renvoyer :m_nNum_Sprint_Demarrage
        type : 1966080
      -
        code : |1-
         procédure publique p_nNum_Sprint_Demarrage(nValeur est un entier)
         
         si :m_nNum_Sprint_Demarrage <> nValeur alors
         	:EstModif()
         	
         	:m_nNum_Sprint_Demarrage=nValeur
         fin
        type : 2031616
     template_refs : []
   -
     name : p_nNum_Sprint_Fin
     identifier : 0x1037b049024eedb6
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_nNum_Sprint_Fin() : entier
         
         renvoyer :m_nNum_Sprint_Fin
        type : 1966080
      -
        code : |1-
         procédure publique p_nNum_Sprint_Fin(nValeur est un entier)
         
         si :m_nNum_Sprint_Fin <> nValeur alors
         	:EstModif()
         	
         	:m_nNum_Sprint_Fin=nValeur
         fin
        type : 2031616
     template_refs : []
   -
     name : p_nNum_Sprint_Previsionnel
     identifier : 0x1037b051024f0e1f
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_nNum_Sprint_Previsionnel() : entier
         
         renvoyer :m_nNum_Sprint_Previsionnel
        type : 1966080
      -
        code : |1-
         procédure publique p_nNum_Sprint_Previsionnel(nValeur est un entier)
         
         si :m_nNum_Sprint_Previsionnel <> nValeur alors
         	:EstModif()
         	
         	:m_nNum_Sprint_Previsionnel=nValeur
         fin
        type : 2031616
     template_refs : []
   -
     name : p_nNum_Sprint_Realisation
     identifier : 0x1037b05902502dfb
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_nNum_Sprint_Realisation() : entier
         
         renvoyer :m_nNum_Sprint_Realisation
        type : 1966080
      -
        code : |1-
         procédure publique p_nNum_Sprint_Realisation(nValeur est un entier)
         :EstModif()
         
         :m_nNum_Sprint_Realisation=nValeur
        type : 2031616
     template_refs : []
   -
     name : p_nNumTicketIncident
     identifier : 0x1037b06102514d7a
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_nNumTicketIncident() : entier
         
         renvoyer :m_nNumTicketIncident
        type : 1966080
      -
        code : |1-
         procédure publique p_nNumTicketIncident(nValeur est un entier)
         :EstModif()
         
         :m_nNumTicketIncident=nValeur
        type : 2031616
     template_refs : []
   -
     name : p_nOrdre
     identifier : 0x1037b07602529fc0
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_nOrdre() : entier
         
         renvoyer :m_nOrdre
        type : 1966080
      -
        code : |1-
         procédure publique p_nOrdre(nValeur est un entier)
         
         si :m_nOrdre <> nValeur alors
         	:EstModif()
         	
         	:m_nOrdre = nValeur
         fin
        type : 2031616
     template_refs : []
   -
     name : p_nPoids
     identifier : 0x1037b07e0253bd0c
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_nPoids() : entier
         
         renvoyer :m_nPoids
        type : 1966080
      -
        code : |1-
         procédure publique p_nPoids(nValeur est un entier)
         
         SI ::Controle_Poids(nValeur) ALORS
         	si :m_nPoids <> nValeur alors
         		:EstModif()
         		:m_nPoids = nValeur
         	fin
         SINON
         	ExceptionDéclenche(1, "Valeur incorrecte, pour le poids de la tache")
         FIN
        type : 2031616
     template_refs : []
   -
     name : p_nPoids_Previsionnel
     identifier : 0x1037b0890254ea94
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_nPoids_Previsionnel() : entier
         
         renvoyer :m_nPoids_Previsionnel
        type : 1966080
      -
        code : |1-
         procédure publique p_nPoids_Previsionnel(nValeur est un entier)
         
         
         si ::Controle_Poids(nValeur) ALORS
         	
         	si :m_nPoids_Previsionnel <> nValeur alors	
         		:EstModif()
         		:m_nPoids_Previsionnel=nValeur
         	fin
         sinon
         	ExceptionDéclenche(1, "Valeur incorrecte, pour le poids prévisionnel")
         FIN
        type : 2031616
     template_refs : []
   -
     name : p_nStatut
     identifier : 0x1037b0aa025569e6
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_nStatut() : entier
         
         //si :m_nStatut = 0 ALORS
         //	:m_nStatut = :get_staut_tache()
         //FIN
         
         renvoyer :m_nStatut
        type : 1966080
      -
        code : |1-
         procédure publique p_nStatut(nValeur est un entier)
         
         si :m_nStatut <> nValeur alors
         	:EstModif()
         	
         	:m_nStatut = nValeur
         fin
        type : 2031616
     template_refs : []
   -
     name : p_sCMTR
     identifier : 0x1037b0ef0258775e
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_sCMTR() : chaîne
         
         renvoyer :m_sCMTR
        type : 1966080
      -
        code : |1-
         procédure publique p_sCMTR(sValeur est une chaîne)
         
         si :m_sCMTR <> sValeur alors
         	:EstModif()
         	
         	:m_sCMTR=sValeur
         fin
        type : 2031616
     template_refs : []
   -
     name : p_sCMTR_Blocage
     identifier : 0x1037b0f702599547
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_sCMTR_Blocage() : chaîne
         
         renvoyer :m_sCMTR_Blocage
        type : 1966080
      -
        code : |1-
         procédure publique p_sCMTR_Blocage(sValeur est une chaîne)
         
         si :m_sCMTR_Blocage <> sValeur alors
         	:EstModif()
         	
         	:m_sCMTR_Blocage=sValeur
         fin
        type : 2031616
     template_refs : []
   -
     name : p_sCodeTache
     identifier : 0x1037b104025ac753
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_sCodeTache() : chaîne
         
         renvoyer :m_sCodeTache
        type : 1966080
      -
        code : |1-
         procédure publique p_sCodeTache(sValeur est une chaîne)
         
         si :m_sCodeTache <> sValeur alors
         	:EstModif()
         	
         	:m_sCodeTache = sValeur
         fin
        type : 2031616
     template_refs : []
   -
     name : p_sDescription
     identifier : 0x1037b10d025bebd3
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_sDescription() : chaîne
         
         renvoyer :m_sDescription
        type : 1966080
      -
        code : |1-
         procédure publique p_sDescription(sValeur est une chaîne)
         
         si :m_sDescription <> sValeur alors
         	:EstModif()
         	
         	:m_sDescription=sValeur
         fin
        type : 2031616
     template_refs : []
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : BgAAAAYAAAA6ih3UbgNXHwTtiPSFUEj+2fi/m7v4QV2rqidAupM=
resources :
 string_res :
  identifier : 0x1e85e352228f3dbc
  internal_properties : BgAAAAYAAAAnMYFQ1bL/vz9ehh7L22SNNSlIzGTOI8h5F/WtgDNP
custom_note :
 internal_properties : BgAAAAYAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
