#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : ClColUserStory
 major_version : 27
 minor_version : 0
 type : 4
 description : ""
 subtype : 0
class :
 identifier : 0x136c23731b697cbd
 internal_properties : BwAAAAcAAAB2/vstTMCJbS/hlxjFxirSqKvCUuv8YxgpWyl7S3iA
 code_elements :
  type_code : 10
  p_codes :
   -
     code : |1+
      ClColUserStory est une Classe
      	herite de ClZF_ColObjDB
      PRIVE
      	m_aoUserStories est un tableau de ClDbUserStory dynamique
      fin
      
      constante
      	cstTypeTesteur_Dev			= 1
      	cstTypeTesteur_Fonctionnel	= 2
      	
      	cstGet_UserStoryDeVersion	= "UserStoryDeVersion"
      	cstGet_UserStoryDeProjet	= "UserStoryDeProjet"
      fin
     type : 131072
  procedures :
   -
     name : Constructeur
     procedure_id : 1399532561493556413
     type_code : 27
     code : |1-
      procédure Constructeur()
      
      
      //:ZF_DefTimeOut(ClAppScrum.cstTimeOutProd)
     type : 589824
   -
     name : Destructeur
     procedure_id : 1399532561493621949
     type_code : 28
     code : |1+
      procédure Destructeur()
      
     type : 655360
   -
     name : aItems
     procedure_id : 1399794129095870452
     type_code : 12
     code : |1-
      // Redéfinition de la méthode ClColObjDB.aItems
      PROCÉDURE aItems():tableau de ClDbUserStory dynamique
      renvoyer :m_aoUserStories
     type : 458752
   -
     name : Init
     procedure_id : 1400244886263116895
     type_code : 12
     code : |1+
      // Redéfinition de la méthode ClColObjDB.Init
      PROCÉDURE  Init():Vide
      ZF_InitCol(:m_aoUserStories)
     type : 458752
   -
     name : pre_load
     procedure_id : 1429601434285872893
     type_code : 12
     code : |1-
      // Redéfinition de la méthode ClZF_ColObjDB.pre_load
      PROCÉDURE PROTÉGÉE pre_load(sdSource_P est une Source de Données)
      
      sListePrj	est une chaîne
      sListeEpic	est une chaîne
      sCle		est une chaîne
      sClasse		est une chaine
      
      HLitPremier(sdSource_P,hForwardOnly+hSansRafraîchir)
      TANTQUE PAS HEnDehors(sdSource_P)
      	sClasse = ClDbProjet
      	sCle = ClZF_ObjDB.ZF_sCleOdb(sClasse, sdSource_P.IDScr_Projet)
      	SI ClZF_App.mg_aoInstances[sCle]..Vide ALORS
      		sListePrj += [", "] + sdSource_P.IDScr_Projet
      	FIN
      	
      	
      	sClasse = ClDbEpic
      	sCle = ClZF_ObjDB.ZF_sCleOdb(sClasse, sdSource_P.IDScr_Epic)
      	SI ClZF_App.mg_aoInstances[sCle]..Vide et pas sdSource_P.IDScr_Epic..null ALORS
      		sListeEpic += [", "] + sdSource_P.IDScr_Epic
      	FIN
      	
      	HLitSuivant(sdSource_P)
      FIN
      
      //Le traitement de préchargement n'est utile que si on a plusieurs éléments à précharger (sinon, on passe par le chargement std)
      si Position(sListePrj, ",") > 0 ALORS
      	oColPrj est un ClColProjet()
      	oColPrj.ZF_LoadSQL([
      		SELECT Scr_Projet.*
      		FROM Scr_Projet
      		WHERE Scr_Projet.IDScr_Projet IN ([%sListePrj%])
      		])
      FIN
      
      //Le traitement de préchargement n'est utile que si on a plusieurs éléments à précharger (sinon, on passe par le chargement std)
      si Position(sListeEpic, ",") > 0 ALORS
      	oColEpic est un ClColEpic()
      	oColEpic.ZF_LoadSQL([
      		SELECT Scr_Epic.*
      		FROM Scr_Epic
      		WHERE Scr_Epic.IDScr_Epic IN ([%sListeEpic%])
      		])
      FIN
     type : 458752
   -
     name : oFrom_Epic
     procedure_id : 1454718295460514070
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] oFrom_Epic (<oEpic_p> est ClDbEpic)
      //
      // Paramètres :
      //	oEpic_p (ClDbEpic) : <indiquez ici le rôle de oEpic_p>
      
      // Valeur de retour :
      // 	ClColUserStory : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      procédure globale oFrom_Epic(oEpic_p est un ClDbEpic):ClColUserStory
      
      oRetour est un ClColUserStory
      sReq est une chaîne
      
      sReq = [
      	SELECT
      		Scr_UserStory.*
      	FROM Scr_UserStory
      	WHERE IDScr_Epic = [%oEpic_p:ZF_Get_IdUnique()%]
      ]
      oRetour.ZF_LoadSQL(sReq)
      
      renvoyer oRetour
     type : 458752
   -
     name : oFromProjet
     procedure_id : 1456890114952194886
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] oFromProjet (<oPrj_p> est ClDbProjet [, <bForceRecharge_P> est booléen])
      //
      // Paramètres :
      //	oPrj_p (ClDbProjet) : <indiquez ici le rôle de oPrj_p>
      //	bForceRecharge_P (booléen - valeur par défaut=0) : <indiquez ici le rôle de bForceRecharge_P>
      
      // Valeur de retour :
      // 	ClColUserStory : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      //	bForceRecharge_P (booléen - valeur par défaut=0) : <indiquez ici le rôle de bForceRecharge_P>
      FONCTION globale oFromProjet(oPrj_p est un ClDbProjet, bForceRecharge_P est un booléen = faux):ClColUserStory
      
      sReq	est une chaîne
      oRetour	est un ClColUserStory	<- oPrj_p.ZF_GetCol(ClcolUserStory.cstGet_UserStoryDeProjet)
      
      si oRetour.ZF_bEstExpire() ou bForceRecharge_P alors
      	
      	oRetour.ZF_vider()
      	
      	sReq = [
      		SELECT
      			Scr_UserStory.*
      		FROM Scr_UserStory
      		WHERE Scr_UserStory.IDScr_Projet = [%oPrj_p.ZF_Get_IdUnique()%]
      	]
      	
      	oRetour.ZF_LoadSQL(sReq)
      fin
      
      RENVOYER oRetour
      
     type : 458752
   -
     name : oColsFromProjets
     procedure_id : 1537365384557001580
     type_code : 12
     code : |1-
      PROCEDURE GLOBALE oColsFromProjets(oColPrj_p est un ClcolProjet)<metier>:tableau associatif de ClColUserStory dynamique
      
      sReq				est une chaîne
      aColUs				est un tableau associatif de ClColUserStory dynamique
      sListeIdsPrj		est une chaîne
      
      si oColPrj_p.zf_ntaille() > 0 alors
      	
      	sListeIdsPrj = TableauVersChaîne(oColPrj_p.ZF_Get_Liste_IdUnique(), ", ")
      	
      	oColEpic est un ClColEpic()
      	oColEpic.ZF_LoadSQL([
      		SELECT Scr_Epic.*
      		FROM Scr_Epic
      			INNER JOIN Scr_UserStory ON (Scr_UserStory.IDScr_Epic = Scr_Epic.IDScr_Epic)
      		where Scr_UserStory.IDScr_Projet IN ([%sListeIdsPrj%])
      		])
      	
      	
      	oColUsr est un ClColUsr()
      	oColUsr.ZF_LoadSQL([
      		SELECT Scr_Usr.*
      		FROM Scr_Usr
      			INNER JOIN Scr_UserStory ON (Scr_UserStory.IDScr_Usr_TestDev = Scr_Usr.IDScr_Usr)
      		where Scr_UserStory.IDScr_Projet IN ([%sListeIdsPrj%])
      		
      		UNION
      		
      		SELECT Scr_Usr.*
      		FROM Scr_Usr
      			INNER JOIN Scr_UserStory ON (Scr_UserStory.IDScr_Usr_Valideur = Scr_Usr.IDScr_Usr)
      		WHERE Scr_UserStory.IDScr_Projet IN ([%sListeIdsPrj%])
      
      		])
      	
      	
      //	aColUs <- ::zf_aoInitCols(aColUs, oColPrj_p, ClDbUserStory.cstUSDeProjet)
      	
      	sReq = [
      		select
      			Scr_UserStory.*
      		FROM Scr_UserStory
      		where Scr_UserStory.IDScr_Projet IN ([%sListeIdsPrj%])
      	]
      //	aColUs <- ClZF_ColObjDB.ZF_LoadSQLMulti_Priv(sReq,aColUs, null, oColPrj_p.ZF_Get_Liste_IdUnique(), Scr_UserStory.IDScr_Projet..Nom)
      	aColUs <- ClZF_ColObjDB.ZF_LoadSQLMulti_2(aColUs, sReq,ClcolUserStory.cstGet_UserStoryDeProjet, oColPrj_p, Scr_UserStory.IDScr_Projet..Nom)
      FIN
      
      RENVOYER aColUs
     type : 458752
   -
     name : sClasseObjDbAsso
     procedure_id : 1542749478337554003
     type_code : 12
     code : |1-
      // Redéfinition de la méthode ClZF_ColObjDB.sClasseObjDbAsso
      PROCÉDURE PROTÉGÉE  sClasseObjDbAsso()<metier>:chaîne
      
      sClasse est une chaîne = ClDbUserStory
      RENVOYER sClasse
     type : 458752
   -
     name : oFromUser_Testeur
     procedure_id : 1549710323233422089
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] oFromUser_Testeur (<oUser_p> est ClDbUsr dynamique, <nTypTesteur_p> est entier)
      //
      // Paramètres :
      //	oUser_p (ClDbUsr dynamique) : <indiquez ici le rôle de eTypeTest_P>
      //	nTypTesteur_p (entier) : <indiquez ici le rôle de nTypeTest_p>
      
      // Valeur de retour :
      // 	ClColUserStory : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      //	bForceCharge_p (booléen - valeur par défaut=0) : <indiquez ici le rôle de bForceCharge_p>
      FONCTION globale oFromUser_Testeur(oUser_p est un ClDbUsr dynamique, nTypTesteur_p est un entier)<métier>:ClColUserStory
      
      sdMestests	est une Source de Données
      sReq		est une chaîne
      oUsEnDev	est un ClColUserStory
      sWhere		est une chaîne
      oUsTmp		est un ClDbUserStory dynamique
      
      
      selon nTypTesteur_p
      	CAS cstTypeTesteur_Dev
      		
      		sWhere = [
      			AND Scr_UserStory.EstTesteParEquipeDev = 0
      			]
      		
      		si oUser_p <> null ALORS
      			sWhere += rc + [
      				AND (
      					Scr_UserStory.IDScr_Usr_TestDev = [%oUser_p.ZF_Get_IdUnique()%]
      					OR
      					Scr_UserStory.IDScr_Usr_TestDev IS NULL
      					)			
      				]
      		FIN
      		
      	CAS cstTypeTesteur_Fonctionnel
      		
      		sWhere = [
      			AND Scr_UserStory.EstTesteParEquipeDev = 1
      			AND Scr_UserStory.EstTesteParFonctionnel = 0
      			]
      		
      		SI oUser_p <> Null ALORS
      			sWhere += RC + [
      				AND Scr_UserStory.IDScr_Usr_Valideur = [%oUser_p.ZF_Get_IdUnique()%]
      				]
      		FIN
      		
      	AUTRES CAS
      		ClZF_App.mg_oExSelonCasNonTraite.ZF_Declenche([nTypTesteur_p])
      FIN
      
      
      
      sReq = [
      	SELECT 
      		Scr_UserStory.*
      	
      	FROM Scr_UserStory
      	where Scr_UserStory.IDScr_UserStory IN (
      		SELECT DISTINCT
      			Scr_UserStory.IDScr_UserStory
      		
      		FROM Scr_UserStory
      			LEFT OUTER JOIN Scr_Tache AS tmpTachesSignificatives ON (tmpTachesSignificatives.IDScr_UserStory = Scr_UserStory.IDScr_UserStory
      				AND tmpTachesSignificatives.Top_Realise = 0
      				AND tmpTachesSignificatives.Top_Annule = 0
      				AND tmpTachesSignificatives.Top_tache_tech = 0)
      				
      			LEFT OUTER JOIN Scr_Tache AS tmpTachesExiste ON (tmpTachesExiste.IDScr_UserStory = Scr_UserStory.IDScr_UserStory)
      		
      		WHERE Scr_UserStory.EstTesteParFonctionnel = 0
      			AND Scr_UserStory.Top_Termine = 0
      			AND tmpTachesSignificatives.IDScr_UserStory IS NULL		[% tab/*On ne prend les US qui n'ont pas de taches non finies*/%]
      			AND tmpTachesExiste.IDScr_UserStory IS NOT NULL			[% tab/*On ne prend que les US qui ont au moins une tache*/%]
      			[%sWhere%]
      		)
      ]
      
      goapp.Rsql(sdMestests,sReq)
      pour tout sdMestests
      	oUsTmp <- ClDbUserStory.GetObj(sdMestests.IDScr_UserStory)
      	si (oUsTmp.Get_NbreTache(ClDbUserStory.A_faire) + oUsTmp.Get_NbreTache(ClDbUserStory.EnCours)) = 0 ALORS
      		oUsEnDev.ZF_addItem(oUsTmp)
      	FIN
      FIN
      
      HAnnuleDéclaration(sdMestests)
      
      
      renvoyer oUsEnDev
     type : 458752
   -
     name : oFiltreSansEpic
     procedure_id : 1570828260870022985
     type_code : 12
     code : |1-
      procédure oFiltreSansEpic() <métier>:clcoluserstory
      
      oUs est un ClDbUserStory dynamique
      oColUS est un ClColUserStory
      pour tout oUs de :aitems()
      	si oUs.p_oIDScr_Epic = null ALORS
      		oColUS.ZF_addItem(oUs)
      	FIN
      FIN
      
      renvoyer oColUS
     type : 458752
   -
     name : oFromVersion
     procedure_id : 1573468149719931354
     type_code : 12
     code : |1-
      FONCTION GLOBALE oFromVersion(oParent_p est un ClDbVersion, LOCAL bForceCharge_p est un booléen = Faux)<métier>:ClColuserstory
      
      sReq		est une chaîne
      oColRetour	est un ClColuserstory()
      
      
      // A faire : ClColUserStory.cstGet_UserStoryDeVersion à déclarer dans <ClZF_App>.CreeCol : "CAS ClColUserStory.cstGet_UserStoryDeVersion : oCol = allouer un ClColVersion()"
      
      oColRetour <- oParent_p.ZF_GetCol(ClColUserStory.cstGet_UserStoryDeVersion)
      
      SI oColRetour.ZF_bEstExpire() OU bForceCharge_p ALORS
      	
      	oColRetour.ZF_vider()
      	
      	
      	sReq = [
      	SELECT 
      		Scr_UserStory.*
      	FROM Scr_UserStory
      	WHERE Scr_UserStory.IDScr_Version = [%oParent_p.ZF_Get_IdUnique()%]
      	]
      	oColRetour.ZF_LoadSQL(sReq)
      	
      FIN
      
      
      RENVOYER oColRetour
     type : 458752
   -
     name : oEnTestFct
     procedure_id : 1623154289689781019
     type_code : 12
     code : |1-
      FONCTION GLOBALE oEnTestFct()<métier>:ClColuserstory
      
      sReq		est une chaîne
      oColRetour	est un ClColuserstory()
      
      
      sReq = [
      SELECT 
      	Scr_UserStory.*
      FROM Scr_UserStory
      WHERE Scr_UserStory.EstTesteParEquipeDev = 1
      	AND Scr_UserStory.EstTesteParFonctionnel = 0
      	--AND Scr_UserStory.Top_A_Livrer = 0
      	AND Scr_UserStory.Top_Annule = 0
      	AND Scr_UserStory.Top_Termine = 0
      ]
      oColRetour.ZF_LoadSQL(sReq)
      
      RENVOYER oColRetour
     type : 458752
   -
     name : oFromSprint
     procedure_id : 1641283986545883538
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] oFromSprint (<oSprint_p> est ClDbSprint)
      //
      // Paramètres :
      //	oSprint_p (ClDbSprint) : <indiquez ici le rôle de oPrj_p>
      
      // Valeur de retour :
      // 	ClColUserStory : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      //	bForceRecharge_P (booléen - valeur par défaut=0) : <indiquez ici le rôle de bForceRecharge_P>
      //	bForceRecharge_P (booléen - valeur par défaut=0) : <indiquez ici le rôle de bForceRecharge_P>
      FONCTION globale oFromSprint(oSprint_p est un ClDbSprint):ClColUserStory
      
      sReq	est une chaîne
      oRetour	est un ClColUserStory()
      
      	
      	sReq = [
      		SELECT<§cs:3§>
      			Scr_UserStory.*<§cs:3§>
      		FROM Scr_UserStory<§cs:3§>
      			INNER JOIN Scr_Tache ON (Scr_Tache.IDScr_UserStory = Scr_UserStory.IDScr_UserStory)<§cs:3§>
      		WHERE Scr_Tache.Num_Sprint_Realisation = [%oSprint_p.ZF_Get_IdUnique()%]<§cs:3§>
      	]
      	
      	oRetour.ZF_LoadSQL(sReq)
      
      RENVOYER oRetour
      
     type : 458752
  properties :
   -
     name : p_aoObj
     identifier : 0x155fc0da2446a0f1
     type_code : 103
     p_codes :
      -
        code : |1+
         procédure p_aoObj() : tableau de ClDbUserStory dynamique
         renvoyer :m_aoUserStories
        type : 1966080
      -
        code : |1+
         procédure protégée p_aoObj(aValeur est un tableau de ClDbUserStory dynamique)
         :m_aoUserStories <- aValeur
        type : 2031616
     template_refs : []
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : BwAAAAcAAAA6ih3UbgNXHwTtiPSFUEj+2fi/m7v4QV2rqidAupM=
  original_name : Classe1
resources :
 string_res :
  identifier : 0x136c236b1b635ca2
  internal_properties : BwAAAAcAAAAnMYFQ1bL/vz9ehh7L22SNNSlIzGTOI8h5F/WtgDNP
custom_note :
 internal_properties : BwAAAAcAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
