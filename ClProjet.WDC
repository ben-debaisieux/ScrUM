#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : ClProjet
 major_version : 27
 minor_version : 0
 type : 4
 description : ""
 subtype : 0
class :
 identifier : 0x1e8595a90ed4e230
 internal_properties : BwAAAAcAAAB2/vstTMCJbS/hlxjFxirSqKvCUuv8YxgpWyl7S3iA
 code_elements :
  internal_properties : BwAAAAcAAACmcEcPUOl8P88f4DqAteA6m/Mt111GGOClrNjaLJ9vO63bNEtdrqYoCCnjX1eG34p8AOi72Du5JSuppQ==
  type_code : 10
  p_codes :
   -
     code : |1+
      ClProjet est une Classe
      	Hérite de ClZF_ObjDb
      	
      prive
      	m_sNom					est une chaîne				<MAPPING=nom>
      	m_bTop_Termine			est un booléen				<MAPPING=Top_Termine>
      	m_bTop_Direction		est un booléen				<MAPPING=Top_EstDirection>
      	m_nChargeProvisionelle	est un entier sur 2 octets	<mapping=ChargeProvisionelle>
      	m_sGroupement			est une chaîne				<mapping=Groupement>
      	m_nOrdreGrp				est un entier sur 2 octets	<mapping=Ordre>
      	m_sCode					est une chaine 				<mapping=PrefixeUS>
      	
      	m_bTop_Prioritaire		est un booléen
      	m_sCmtrsituation		est une chaîne
      	m_bInitSituation		est un booléen
      	
      	m_oUsr_ChefProjet		est un objet ClUsr dynamique
      	
      	m_oListeInvites			est un ClColUsr
      	m_aClassifInvite		est un tableau associatif de ClColUsr
      	m_oColUserStories		est un ClColUserStory
      	
      	m_anStatsUS				est un tableau associatif de entier
      	m_bInitStatsUS			est un booléen
      GLOBAL
      	mg_oEx_TypeInvite		est un ClZF_Exception dynamique
      	mg_oEx_SuppImpossible_PresUS		est un ClZF_Exception dynamique
      FIN
      
      STR_SimulationCharge est une structure
      	oSprint				est un ClSprint dynamique
      	nChargeSimulee		est un entier
      fin
      
      constante
      	cstTauxImponderable		= 0.50
      	
      	cstInter_Informe		= 4
      	cstInter_Consulte		= 3
      	cstInter_Decideur		= 2
      	cstInter_Responsable	= 1
      fin
      
      mg_oEx_TypeInvite = allouer un ClZF_Exception("Erreur de type d'invité passé en paramètre : %1")
      mg_oEx_SuppImpossible_PresUS = allouer un ClZF_Exception("Impossible de supprimer un projet, tant que des user stories sont affectées")
     type : 131072
  procedures :
   -
     name : Constructeur
     procedure_id : 2199328546371330608
     type_code : 27
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //Constructeur ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      
      PROCEDURE Constructeur(LOCAL nID_P est un entier = 0)
      
      //Déclaration du constructeur de la classe d'accès aux données.
      Ancêtre.Constructeur(Scr_Projet..Nom, Scr_Projet.IDScr_Projet..Nom, nID_P)
      
      //Chargement des données dans l'instance.
      //:ZF_Charge()
      
     type : 589824
   -
     name : Destructeur
     procedure_id : 2199328546371396144
     type_code : 28
     code : |1-
      
      
      PROCEDURE Destructeur()
     type : 655360
   -
     name : asListeProjets
     procedure_id : 2199355419994774330
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //asListeProjets ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      //	bAvecProjetsFini_P (booléen - valeur par défaut=0) : <indiquez ici le rôle de bAvecProjetsFini_P>
      FONCTION GLOBAL asListeProjets(bAvecProjetsFini_P est un booléen = 0):tableau associatif de chaînes
      
      aRetour est un tableau associatif de chaines
      
      sdSource_Liste_Projet est une Source de Données
      sReq_Liste_Projet est une chaîne
      
      sComplement est une chaîne
      
      si bAvecProjetsFini_P = faux ALORS
      	sComplement = "WHERE Scr_Projet.Top_Termine = 0"
      FIN
      	
      sReq_Liste_Projet = [
      	SELECT
      		Scr_Projet.Nom,
      		Scr_Projet.IDScr_Projet
      	FROM Scr_Projet
      	
      	[%sComplement%]
      	
      	ORDER BY Scr_Projet.Nom
      	]
      
      goApp.Rsql(sdSource_Liste_Projet,sReq_Liste_Projet)
      
      POUR TOUT sdSource_Liste_Projet
      	aRetour[sdSource_Liste_Projet.IDScr_Projet] = sdSource_Liste_Projet.Nom
      FIN
      
      HAnnuleDéclaration(sdSource_Liste_Projet)
      
      renvoyer aRetour
     type : 458752
   -
     name : Projet_Chef
     procedure_id : 2201705382183183079
     type_code : 12
     code : |1-
      // Résumé : Renvoie le nom du chef du projet
      // Syntaxe :
      //[ <Résultat> = ] Projet_Chef ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	ClUsr : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      //	nIDProjet_p (entier) : <indiquez ici le rôle de nIDProjet>
      FONCTION Projet_Chef():ClUsr
      
      //stChefDuProjet est un STR_User
      sdRechercheChef est une source de données
      sReq est une chaîne
      oUsr est un ClUsr dynamique
      
      sReq = [
      	SELECT 
      		Scr_Usr_Projet.IDScr_Usr
      	
      	FROM Scr_Usr_Projet
      	
      	WHERE Scr_Usr_Projet.IDScr_Projet = [%:ZF_Get_IdUnique()%]
      		AND Scr_Usr_Projet.Top_Chef_Projet = 1
      ]
      
      goApp.Rsql(sdRechercheChef,sReq)
      HLitPremier(sdRechercheChef)
      si htrouve(sdRechercheChef) ALORS
      	oUsr <- ClUsr.GetObj(sdRechercheChef.IDScr_Usr)
      FIN
      
      HAnnuleDéclaration(sdRechercheChef)
      
      renvoyer oUsr
     type : 458752
   -
     name : Projet_Etat
     procedure_id : 2201724532538421134
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //Projet_Etat ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      //	nIDProjet_p (entier) : <indiquez ici le rôle de nIDProjet>
      PROCEDURE Projet_Etat():Vide
      
      bProjetTerminees est un booléen
      nNbrUSTerminees est un entier = 0
      nNbrTotal est un entier = 0
      oUs est un ClUserStory dynamique
      
      pour tout element oUs de :aoListeUS().aItems()
      	si oUs.p_bTermine = Vrai alors
      		nNbrUSTerminees++
      	FIN
      	nNbrTotal++
      FIN
      
      si nNbrUSTerminees = nNbrTotal alors
      	bProjetTerminees = vrai
      sinon
      	bProjetTerminees = faux
      FIN
      
      si :m_bTop_Termine <> bProjetTerminees ALORS
      	:m_bTop_Termine = bProjetTerminees
      	:ZF_Enregistre()
      FIN
     type : 458752
   -
     name : ProjetPointsRestant
     procedure_id : 2201725434481631832
     type_code : 12
     code : |1-
      // Résumé : Donne le nb de points restant pour un projet a partir d'un sprint
      // Syntaxe :
      //ProjetPointsRestant ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      //	nIDProjet_p (entier) : <indiquez ici le rôle de nIDProjet_p>
      //	nNumSprint_p (entier) : <indiquez ici le rôle de nNumSprint_p>
      //	nSelecteur (entier) : <indiquez ici le rôle de nSelecteur>
      //	nNumSprint_p (entier) : <indiquez ici le rôle de nNumSprint_p>
      //	nSelecteur (ClTache.ETypeCharge) : <indiquez ici le rôle de nSelecteur>
      FONCTION ProjetPointsRestant(LOCAL nNumSprint_p est un entier , LOCAL nSelecteur est un ClTache.ETypeCharge):entier
      
      nPtsRestant est un entier
      
      //On choisis si on veut en prod ou previsionnel 
      sChoixSprint est une chaîne
      sChoixPoids est une chaine 
      Selon nSelecteur
      	cas ClTache.ETypeCharge.Charge_réelle
      		sChoixSprint = "Scr_Tache.Num_Sprint_Realisation"
      		sChoixPoids = "Scr_Tache.Poids" 
      	CAS ClTache.ETypeCharge.Charge_prévisionelle
      		sChoixSprint = "Scr_Tache.Num_Sprint_Previsionnel"
      		sChoixPoids = "Scr_Tache.Poids_Previsionnel"	
      FIN
      
      sdRecherchePointsRestant est une source de données
      sReq est une chaine
      
      sReq = [
      	SELECT
      		SUM([%sChoixPoids%]) as Points
      	
      	FROM Scr_Sprint
      		INNER JOIN Scr_Tache ON (Scr_Sprint.Num_Sprint = [%nNumSprint_p%])
      		INNER JOIN Scr_UserStory ON (Scr_UserStory.IDScr_UserStory = Scr_Tache.IDScr_UserStory)
      	
      	WHERE
      		 [%sChoixSprint%] > [%nNumSprint_p%] 
      		 AND Scr_UserStory.IDScr_Projet = [%:ZF_Get_IdUnique()%]
      		 AND Scr_Tache.Num_Sprint_Fin is null
      		 AND Scr_Tache.Top_Brouillon = 0
      ]
      //,sChoixPoids,sChoixSprint, nNumSprint_p, :Get_IdUnique())
      
      goApp.Rsql(sdRecherchePointsRestant,sReq)
      HLitPremier(sdRecherchePointsRestant)
      si htrouve (sdRecherchePointsRestant) alors
      	nPtsRestant = sdRecherchePointsRestant.Points
      sinon
      	nPtsRestant = -1
      FIN
      
      HAnnuleDéclaration(sdRecherchePointsRestant)
      
      RENVOYER nPtsRestant
     type : 458752
   -
     name : Projet_Sprint_Points
     procedure_id : 2201725894043566840
     type_code : 12
     code : |1-
      // Résumé : Retourne le nb de point réalisé dans un projet dans un sprint
      // Syntaxe :
      //Projet_Sprint_Points ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      FONCTION Projet_Sprint_Points(LOCAL nNumSprint_p est un entier, LOCAL nSelecteur est un ClTache.ETypeCharge):entier
      
      nPoints est un entier
      sdRechechePointProjetSprint est une source de données
      sReq est une chaîne
      
      //On choisi si on veut en prod ou previsionnel 
      sChoixSprint est une chaîne
      sChoixPoids est une chaine
      
      Selon nSelecteur
      	CAS ClTache.ETypeCharge.Charge_réelle
      		sChoixSprint	= Scr_Tache.Num_Sprint_Realisation..nom
      		sChoixPoids		= Scr_Tache.Poids..Nom
      	CAS ClTache.ETypeCharge.Charge_prévisionelle
      		sChoixSprint	= Scr_Tache.Num_Sprint_Previsionnel..Nom
      		sChoixPoids		= Scr_Tache.Poids_Previsionnel..Nom
      fin
      
      
      sReq = [
      	SELECT 
      		SUM(Scr_Tache.[%sChoixPoids%]) as SommePoids
      	
      	FROM Scr_Tache
      		INNER JOIN Scr_UserStory ON (Scr_UserStory.IDScr_UserStory = Scr_Tache.IDScr_UserStory)
      	
      	WHERE Scr_UserStory.IDScr_Projet = [%:ZF_Get_IdUnique()%]
      		AND Scr_Tache.[%sChoixSprint%] = [%nNumSprint_p%]
      		AND Scr_Tache.Top_Brouillon = 0
      		AND Scr_Tache.Top_Annule = 0
      	
      ]
      goApp.Rsql(sdRechechePointProjetSprint,sReq)
      HLitPremier(sdRechechePointProjetSprint,SommePoids)
      SI pas HEnDehors(sdRechechePointProjetSprint) alors
      	nPoints = sdRechechePointProjetSprint.SommePoids
      FIN
      
      HAnnuleDéclaration(sdRechechePointProjetSprint)
      
      renvoyer nPoints
     type : 458752
   -
     name : Projet_PointsRestantReliquat
     procedure_id : 2201726276296007453
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] Projet_PointsRestantReliquat (<nSelecteur_p> est ClTache.ETypeCharge)
      //
      // Paramètres :
      //	nSelecteur_p (ClTache.ETypeCharge) : <indiquez ici le rôle de nSelecteur_p>
      // Valeur de retour :
      // 	entier : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      //	nNumSprint_p (entier) : <indiquez ici le rôle de nNumSprint_p>
      //	nIDProjet_p (entier) : <indiquez ici le rôle de nIDProjet_p>
      //	nSelecteur_p (entier) : <indiquez ici le rôle de nSelecteur>
      //	nSelecteur_p (ClTache.ETypeCharge) : <indiquez ici le rôle de nSelecteur_p>
      FONCTION Projet_PointsRestantReliquat(nSelecteur_p est un ClTache.ETypeCharge):entier
      
      nPointsTotal est un entier
      
      sdRecherchePointsRestant est une source de données
      sReq est une chaine
      
      sChoixPoids est une chaîne
      
      Selon nSelecteur_p
      	CAS ClTache.ETypeCharge.Charge_réelle
      		sChoixPoids = "Scr_Tache.Poids" 
      	CAS ClTache.ETypeCharge.Charge_prévisionelle
      		sChoixPoids = "Scr_Tache.Poids_Previsionnel"
      FIN
      
      sReq = [
      	SELECT
      		SUM([%sChoixPoids%]) as Points
      	
      	FROM Scr_Tache 
      		INNER JOIN Scr_UserStory ON (Scr_UserStory.IDScr_UserStory = Scr_Tache.IDScr_UserStory)
      	
      	WHERE
      		Scr_UserStory.IDScr_Projet = [%:ZF_Get_IdUnique()%]
      		AND Scr_Tache.Top_Realise = 0
      		AND Scr_Tache.Top_Brouillon = 0
      		AND Scr_Tache.Top_Annule = 0
      		
      ]
      
      goApp.Rsql(sdRecherchePointsRestant,sReq)
      HLitPremier(sdRecherchePointsRestant)
      SI HTrouve (sdRecherchePointsRestant) ALORS
      	nPointsTotal = sdRecherchePointsRestant.Points
      SINON
      	nPointsTotal = 0
      FIN
      
      HAnnuleDéclaration(sdRecherchePointsRestant)
      
      renvoyer nPointsTotal
      
     type : 458752
   -
     name : Projet_charge_Reliquat
     procedure_id : 2201726624188439507
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //Projet_charge_Reliquat ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      //	nNumSprint_p (entier) : <indiquez ici le rôle de nNumSprint>
      //	nNumSprint_p (entier) : <indiquez ici le rôle de nNumSprint_p>
      //	nIDProjet_p (entier) : <indiquez ici le rôle de nIDProjet_p>
      //	nSelecteur_p (ClTache.ETypeCharge) : <indiquez ici le rôle de nSelecteur>
      //	nSelecteur_p (ClTache.ETypeCharge) : <indiquez ici le rôle de nSelecteur_p>
      FONCTION Projet_charge_Reliquat(LOCAL nSelecteur_p est un ClTache.ETypeCharge):entier
      
      nSprintActuel est un entier = goApp.m_nNumeroDuSprintActuel
      nPtsRealises est un entier
      sdRecherchePointsRestant est une source de données
      sReq est une chaine
      sChoixSprint est une chaine
      sChoixPoids est une chaîne
      
      selon nSelecteur_p
      	cas ClTache.ETypeCharge.Charge_réelle
      		sChoixPoids = "Scr_Tache.Poids" 
      		sChoixSprint = "Scr_Tache.Num_Sprint_Realisation"
      		
      	CAS ClTache.ETypeCharge.Charge_prévisionelle
      		sChoixPoids = "Scr_Tache.Poids_Previsionnel"
      		sChoixSprint = "Scr_Tache.Num_Sprint_Previsionnel"
      FIN
      
      
      sReq = [
      	SELECT
      		SUM([%sChoixPoids%]) as Points
      	
      	FROM Scr_Tache
      		INNER JOIN Scr_UserStory ON (Scr_UserStory.IDScr_UserStory = Scr_Tache.IDScr_UserStory)
      	
      	WHERE
      		Scr_UserStory.IDScr_Projet = [%:ZF_Get_IdUnique()%]
      		AND [%sChoixSprint%] < [%nSprintActuel%]
      		AND Scr_Tache.Top_Annule = 0
      		AND Scr_Tache.Top_Realise = 0
      		AND Scr_Tache.Top_Brouillon = 0
      ]
      
      goApp.Rsql(sdRecherchePointsRestant,sReq)
      HLitPremier(sdRecherchePointsRestant)
      SI HTrouve (sdRecherchePointsRestant) ALORS
      	nPtsRealises = sdRecherchePointsRestant.Points
      SINON
      	nPtsRealises = 0
      FIN
      
      HAnnuleDéclaration(sdRecherchePointsRestant)
      
      RENVOYER nPtsRealises
      
     type : 458752
   -
     name : aoListeUS
     procedure_id : 2201921804942772677
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] aoListeUS ( [<bForceRecharge_P> est booléen])
      //
      // Paramètres :
      // 	bForceRecharge_P (booléen - valeur par défaut=0) : <indiquez ici le rôle de bForceRecharge_P>
      // Valeur de retour :
      // 	ClColUserStory : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      //	bForceRecharge_P (booléen - valeur par défaut=0) : <indiquez ici le rôle de bForceRecharge_P>
      FONCTION aoListeUS(bForceRecharge_P est un booléen = faux):ClColUserStory
      
      sReq est une chaîne
      
      
      si pas :m_oColUserStories.p_bEstCharge ou bForceRecharge_P alors
      	
      	m_oColUserStories.ZF_vider()
      	
      	sReq = [
      		SELECT
      			Scr_UserStory.*
      			--Scr_UserStory.IDScr_UserStory
      			
      		FROM Scr_UserStory
      		
      		WHERE Scr_UserStory.IDScr_Projet = [%:ZF_Get_IdUnique()%]
      		
      		ORDER BY Scr_UserStory.IDScr_UserStory
      	]
      	
      	m_oColUserStories.ZF_LoadSQL(sReq)
      fin
      
      RENVOYER m_oColUserStories
     type : 458752
   -
     name : User_Story_Dev_Prevu_Tout_Les_Projets_old
     procedure_id : 2202863756084414943
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] User_Story_Dev_Prevu_Tout_Les_Projets_old ()
      //
      // Paramètres :
      //	Aucun
      
      // Valeur de retour :
      // 	ClColUserStory : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      FONCTION GLOBAL User_Story_Dev_Prevu_Tout_Les_Projets_old():ClColUserStory
      
      oUStableau				est un ClColUserStory
      nVelocite				est un entier	= goApp.m_nVelociteMoyenne
      bUsCommencee			est un booléen	= faux
      bUSAnnulee				est un booleen	= Faux
      //sdRechercheUserStory	est une source de données
      sReq					est une chaîne
      
      
      sReq = [
      	SELECT
      		scr_UserStory.*
      		--scr_UserStory.IDScr_UserStory
      	
      	FROM Scr_Projet
      		INNER JOIN Scr_UserStory ON (Scr_Projet.IDScr_Projet = Scr_UserStory.IDScr_Projet)
      ]
      
      oUStableau.ZF_LoadSQL(sReq)
      
      RENVOYER oUStableau 
     type : 458752
   -
     name : post_enregistre
     procedure_id : 2203202234066144718
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //post_enregistre ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE VIRTUELLE post_enregistre():Vide
      
      
      sdRecupCdp est une Source de Données
      sReq est une chaîne
      
      	si pas :ZF_Get_est_supprime() alors
      	sReq = [
      		
      		SELECT
      			Scr_Usr_Projet.IDScr_Usr_Projet,
      			Scr_Usr_Projet.IDScr_Usr
      			
      		FROM Scr_Usr_Projet
      		
      		WHERE Scr_Usr_Projet.IDScr_Projet = [%:ZF_Get_IdUnique()%]
      			AND Scr_Usr_Projet.Top_Chef_Projet = 1
      		
      	]
      	
      	goapp.Rsql(sdRecupCdp,sReq)
      	HLitPremier(sdRecupCdp)
      	
      	//A t on un chef de projet pour ce projet ?
      	si pas HEnDehors(sdRecupCdp) alors
      		//Oui :
      		//Est ce celui en cours ?
      		si sdRecupCdp.IDScr_Usr	<> :m_oUsr_ChefProjet.ZF_Get_IdUnique() alors
      			//Non :
      			
      			//Mise à jour du chef de projet
      			HLitRecherche(Scr_Usr_Projet,IDScr_Usr_Projet,sdRecupCdp.IDScr_Usr_Projet,hIdentique+hLimiteParcours)
      			si HTrouve(Scr_Usr_Projet) ALORS
      				Scr_Usr_Projet.IDScr_Usr	= :m_oUsr_ChefProjet.ZF_Get_IdUnique()
      				si pas HModifie(Scr_Usr_Projet) ALORS
      					ExceptionDéclenche(1,HErreurInfo(hErrComplet))
      				FIN
      			FIN
      		FIN
      	sinon
      		//Non :
      		
      		//Création de l'association utilisateur / projet, avec l'attribut "chef de projet"
      		hraz(Scr_Usr_Projet)
      		Scr_Usr_Projet.IDScr_Projet		= :ZF_Get_IdUnique()
      		Scr_Usr_Projet.IDScr_Usr		= :m_oUsr_ChefProjet.ZF_Get_IdUnique()
      		Scr_Usr_Projet.Top_Chef_Projet	= vrai
      		Scr_Usr_Projet.Top_Invite		= faux
      		SI PAS HAjoute(Scr_Usr_Projet) ALORS
      			ExceptionDéclenche(1,HErreurInfo(hErrComplet))
      		FIN
      	FIN
      	
      	HAnnuleDéclaration(sdRecupCdp)
      	
      	////////////////////////////////////////////////////////////
      	
      	anLstUsr est un tableau d'entiers
      	nInd est un entier
      	sdLstUsr est une source de données
      	oInvite est un clusr dynamique
      	
      	//Transfert des id usr dans une liste
      	pour tout element oInvite de :m_oListeInvites.aItems()
      		TableauAjoute(anLstUsr,oInvite.ZF_Get_IdUnique())
      	FIN
      	
      	
      	
      	sReq = [
      		SELECT
      			Scr_Usr_Projet.IDScr_Usr
      			
      		FROM Scr_Usr_Projet
      		
      		WHERE Scr_Usr_Projet.IDScr_Projet = [%:ZF_Get_IdUnique()%]
      			AND Scr_Usr_Projet.Top_Invite = 1
      		
      	]
      	
      	goApp.Rsql(sdLstUsr,sReq)
      	pour tout sdLstUsr
      		nInd = TableauCherche(anLstUsr,tcLinéaire, sdLstUsr.IDScr_Usr)
      		si nInd = -1 ALORS
      			//L'utilisateur en base n'est pas dans la liste : il faut le supprimer de la base
      			HLitRecherche(Scr_Usr_Projet,CC_IDScr_ProjetIDScr_Usr,[:ZF_Get_IdUnique(), sdLstUsr.IDScr_Usr],hIdentique+hLimiteParcours)
      			si HTrouve(Scr_Usr_Projet) ALORS
      				HSupprime(Scr_Usr_Projet)
      			FIn
      		sinon
      			// L'id est présent dans les utiliateurs et dans la base : pas de modif en BDD
      			TableauSupprime(anLstUsr,nInd)
      		FIN
      		HAnnuleDéclaration(sdLstUsr)
      		
      		//Une fois ce traitement de comparaison fini, il ne reste que les utilisateurs manquants.
      		pour tout nInd de anLstUsr
      			HRAZ(Scr_Usr_Projet)
      			Scr_Usr_Projet.IDScr_Projet		= :ZF_Get_IdUnique()
      			Scr_Usr_Projet.IDScr_Usr		= nInd
      			Scr_Usr_Projet.Top_Chef_Projet	= Faux
      			Scr_Usr_Projet.Top_Invite		= Vrai
      			SI PAS HAjoute(Scr_Usr_Projet) ALORS
      				ExceptionDéclenche(1,HErreurInfo(hErrComplet))
      			FIN
      		FIN
      	FIN
      fin
     type : 458752
   -
     name : pre_enregistre
     procedure_id : 2203412030359889822
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //pre_enregistre ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      
      PROCEDURE VIRTUELLE pre_enregistre():Vide
      
      
      sdDelUsrPrj est une Source de Données
      sReq est une chaîne
      
      si :ZF_Get_est_supprime() alORS
      	
      	si :aoListeUS().ZF_nTaille() ALORS
      		mg_oEx_SuppImpossible_PresUS.ZF_Declenche()
      		//ExceptionDéclenche(1, "Impossible de supprimer un projet, tant que des user stories sont affectées")
      	FIN
      	
      	//On supprimer tous les liens des utilisateurs associés à ce projet.
      	sReq = [
      	DELETE FROM Scr_Usr_Projet
      	WHERE IDScr_Projet = [%:ZF_Get_IdUnique()%]
      	]
      	goapp.RSQL(sdDelUsrPrj,sReq)
      	HAnnuleDéclaration(sdDelUsrPrj)
      	
      	//On supprimer tous les liens des utilisateurs associés à ce projet.
      	sReq = [
      	DELETE FROM Scr_Projet_Situation
      	WHERE IDScr_Projet = [%:ZF_Get_IdUnique()%]
      	]
      	goapp.RSQL(sdDelUsrPrj,sReq)
      	HAnnuleDéclaration(sdDelUsrPrj)
      FIN
      
     type : 458752
   -
     name : aoListeProjets
     procedure_id : 2205264947135888516
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] aoListeProjets ( [<bAvecProjetsFini_P> est booléen [, <oUsr_p> est ClUsr]])
      //
      // Paramètres :
      //	bAvecProjetsFini_P (booléen - valeur par défaut=0) : <indiquez ici le rôle de bAvecProjetsFini_P>
      // 	oUsr_p (ClUsr - valeur par défaut=0) : <indiquez ici le rôle de oUsr_p>
      // Valeur de retour :
      // 	ClColProjet : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      //	bAvecProjetsFini_P (booléen - valeur par défaut=0) : <indiquez ici le rôle de bAvecProjetsFini_P>
      //	bAvecProjetsFini_P (booléen - valeur par défaut=0) : <indiquez ici le rôle de bAvecProjetsFini_P>
      FONCTION GLOBAL aoListeProjets(bAvecProjetsFini_P est un booléen = faux, oUsr_p est un ClUsr = null):ClcolProjet
      
      oColRetour			est un ClcolProjet
      
      sReq_Liste_Projet	est une chaîne
      sComplement			est une chaîne
      
      si pas bAvecProjetsFini_P ALORS
      	sComplement += ["AND "] + "Scr_Projet.Top_Termine = 0"
      FIN
      
      si oUsr_p <> Null ALORS
      	sComplement += ["AND "] + [
      	Scr_Projet.IDScr_Projet IN (
      		SELECT
      			Scr_Usr_Projet.IDScr_Projet
      		FROM Scr_Usr_Projet
      		where Scr_Usr_Projet.IDScr_Usr = [%oUsr_p.ZF_Get_IdUnique()%]
      		)
      	]
      FIN
      
      si sComplement <> "" ALORS
      	sComplement = "WHERE " + sComplement
      FIN
      
      sReq_Liste_Projet = [
      	SELECT distinct
      		Scr_Projet.*
      		--Scr_Projet.IDScr_Projet
      	FROM Scr_Projet
      	
      	[%sComplement%]
      	]
      
      oColRetour.ZF_LoadSQL(sReq_Liste_Projet)
      
      renvoyer oColRetour
     type : 458752
   -
     name : Invite_Ajoute
     procedure_id : 2205272995906868827
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //Invite_Ajoute (<oUsr_P> est ClUsr [, <nTypeInvite_P> est entier])
      //
      // Paramètres :
      //	oUsr_P (ClUsr) : <indiquez ici le rôle de oUsr_P>
      // 	nTypeInvite_P (entier - valeur par défaut=0) : <indiquez ici le rôle de nTypeInvite_P>
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      //	nIdUsr_P (entier) : <indiquez ici le rôle de nIdUsr_P>
      PROCEDURE Invite_Ajoute(oUsr_P est un ClUsr, nTypeInvite_P est un entier = 0):Vide
      
      //bTrouve est un booléen
      //oInvite est un ClUsr dynamique
      //
      ////On s'assure que l'utilisateur n'est pas déja présent.
      //pour tout element oInvite de :m_oListeInvites.aItems()
      //	si oInvite.ZF_Get_IdUnique() = oUsr_P.ZF_Get_IdUnique() ALORS
      //		bTrouve = vrai
      //		sortir
      //	FIN
      //FIN
      
      si pas :m_oListeInvites.ZF_recherche(oUsr_P) ALORS
      	//Ajout de l'utilisateur à la liste.
      	:m_oListeInvites.ZF_addItem(oUsr_P)
      FIN
      
      si nTypeInvite_P <> 0 alors
      	
      	sCle est une chaîne 
      	oColInvite est un ClColUsr dynamique
      	
      	//Est ce que le type d'invité est correct ?
      	si pas nTypeInvite_P dans(::cstInter_Informe, ::cstInter_Consulte, ::cstInter_Decideur, ::cstInter_Responsable) ALORS
      		mg_oEx_TypeInvite.ZF_Declenche([nTypeInvite_P])
      	FIN
      	
      	//Parcourt de tous les groupes d'invités
      	POUR TOUT ELEMENT oColInvite, sCle de :m_aClassifInvite
      		//Est on sur le groupe où on veut ajouter l'utilisateur ?
      		si val(sCle) = nTypeInvite_P ALORS
      			//Ajout de l'utilisateur à la liste.
      			oColInvite.ZF_addItem(oUsr_P)
      		sinon
      			//Si on trouve l'utilisateur dans cette liste, on le supprime.
      			oColInvite.ZF_Supp(oUsr_P)
      		FIN
      	FIN
      FIN
      
     type : 458752
   -
     name : Invite_Supprime
     procedure_id : 2205273064626427365
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //Invite_Supprime (<oUsr_P> est ClUsr)
      //
      // Paramètres :
      //	oUsr_P (ClUsr) : <indiquez ici le rôle de oUsr_P>
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      //	nIdUsr_P (entier) : <indiquez ici le rôle de nIdUsr_P>
      PROCEDURE Invite_Supprime(LOCAL oUsr_P est un ClUsr):Vide
      
      :m_oListeInvites.ZF_Supp(oUsr_P)
      
      sCle est une chaîne 
      oColInvite est un ClColUsr dynamique
      pour tout oColInvite, sCle de :m_aClassifInvite
      	oColInvite.ZF_Supp(oUsr_P)
      FIN
      
      //nInd	est un entier
      //oUsrTmp	est un ClUsr dynamique
      //
      //pour tout element oUsrTmp, nInd de :m_oListeInvites.aItems()
      //	SI oUsrTmp.ZF_Get_IdUnique() = oUsr_P.ZF_Get_IdUnique() ALORS
      //		:m_oListeInvites.ZF_Supp(nInd)
      //		SORTIR
      //	FIN
      //FIN
     type : 458752
   -
     name : aoInvite_Liste
     procedure_id : 2205304675585811600
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //aoInvite_Liste ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      FONCTION aoInvite_Liste(LOCAL bForce_p est un booléen = 0)<métier>:ClColUsr
      
      sReq est une chaîne
      
      
      si bForce_p ou pas :m_oListeInvites.p_bEstCharge ALORS
      	:m_oListeInvites.ZF_vider()
      	
      	sReq = [
      		SELECT
      			--Scr_Usr_Projet.*
      			Scr_Usr_Projet.IDScr_Usr
      			
      		FROM Scr_Usr_Projet
      		
      		WHERE Scr_Usr_Projet.IDScr_Projet = [%:ZF_Get_IdUnique()%]
      			AND Scr_Usr_Projet.Top_Invite = 1
      	]
      	
      	m_oListeInvites.ZF_LoadSQL(sReq)
      fin
      
      renvoyer :m_oListeInvites
     type : 458752
   -
     name : CalcStatsUS
     procedure_id : 2209838398627248722
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //CalcStatsUS ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      // 	bForceRecharge_P (booléen - valeur par défaut=0) : <indiquez ici le rôle de bForceRecharge_P>
      PROCEDURE PRIVÉE CalcStatsUS(bForceRecharge_P est un booléen = 0):Vide
      
      oUsTmp est un ClUserStory dynamique
      nEtat est un ClUserStory.ECompteNbUS
      
      //Si les stats ne sont pas initialisés ou si on force le rechargement...
      si pas :m_bInitStatsUS ou bForceRecharge_P alors
      	variableraz(:m_anStatsUS)
      	
      	//Préchargement de toutes les taches, dans les collections pour les US	
      	aColTachesParUs	est un tableau associatif de ClColTaches
      	sCle			est une chaîne
      	oTache			est un ClTache dynamique
      	oColTaches		est un ClColTaches
      	sReq			est une chaîne
      
      	sReq = [
      	select
      		Scr_Tache.*
      	FROM Scr_Tache
      		INNER JOIN Scr_UserStory ON (Scr_UserStory.IDScr_UserStory = Scr_Tache.IDScr_UserStory)
      	where Scr_UserStory.IDScr_Projet = [%:ZF_Get_IdUnique()%]
      	]
      	oColTaches.ZF_LoadSQL(sReq)
      	pour tout element oTache de oColTaches.aItems()
      		sCle = oTache.p_oUserStoryParent.ZF_Get_IdUnique()
      		si aColTachesParUs[sCle]..Vide ALORS
      			aColTachesParUs[sCle] = allouer un ClColTaches
      			aColTachesParUs[sCle].p_bEstCharge = Vrai
      		FIN
      		aColTachesParUs[sCle].ZF_addItem(oTache)
      	FIN
      	
      	
      	//Rechargement de toutes les US.
      	pour tout element oUsTmp de :aoListeUS(bForceRecharge_P).aItems()
      		
      		//Envoi de la collection de tache, à l'US
      		sCle = oUsTmp.ZF_Get_IdUnique()
      		si pas aColTachesParUs[sCle]..Vide ALORS
      			oUsTmp.p_oTaches = aColTachesParUs[sCle]
      		FIN
      		
      		//Comptage de tous les US, classés par type.
      		nEtat = oUsTmp.Get_EtatUS()
      		:m_anStatsUS[nEtat]++
      	fin
      	
      	:m_bInitStatsUS = vrai
      fin
     type : 458752
   -
     name : Get_StatUS
     procedure_id : 2209840378607239119
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //Get_StatUS ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      //	eFiltre (ClUserStory.ECompteNbUS) : <indiquez ici le rôle de eFiltre>
      FONCTION Get_StatUS(eFiltre est un ClUserStory.ECompteNbUS):entier
      
      nRetour est un entier
      nVal est un entier
      
      //Calcul des stats si besion
      :CalcStatsUS()
      
      //A t on un filtre ?
      si eFiltre = ClUserStory.ECompteNbUS.Toutes ALORS
      	//Cumul de toutes le valeurs
      	pour tout nVal de :m_anStatsUS
      		nRetour += nVal
      	FIN
      sinon
      	//On renvoi la valeur demandée
      	nRetour = :m_anStatsUS[eFiltre]
      FIN
      
      renvoyer nRetour
     type : 458752
   -
     name : Combo_Charge_Projet
     procedure_id : 2209949265434237452
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //Combo_Charge_Projet ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE GLOBAL Combo_Charge_Projet(local sNomFenetre_P est une chaîne , LOCAL sNomCombo_P est une chaîne , LOCAL oProjets_p est un ClColProjet):Vide
      
      oPrj est un ClProjet dynamique
      oProjets est un ClColProjet
      
      //Si on ne passe pas de liste de projet, on charge les projets non terminés.
      si oProjets_p.ZF_nTaille() = 0 ALORS
      	oProjets <- ClProjet.aoListeProjets()
      sinon
      	//On charge les projets passés en paramètre.
      	oProjets <- oProjets_p
      FIN
      
      ListeSupprimeTout(sNomFenetre_P + "." + sNomCombo_P)
      pour TOUT element oPrj de oProjets.aItems()
      	ListeAjoute(sNomFenetre_P + "." + sNomCombo_P, oPrj.m_sNom + glien(oPrj.ZF_Get_IdUnique()))
      FIN
      
      ListeTrie(sNomFenetre_P + "." + sNomCombo_P)
     type : 458752
   -
     name : aoProjets_sur_periode
     procedure_id : 2210669657044273784
     type_code : 12
     code : |1+
      // Résumé : Renvoie un tableau de str Projet qui contient tout les projet dans une periode de sprints
      // Syntaxe :
      //[ <Résultat> = ] aoProjets_sur_periode (<nNumSprint_p> est entier, <nPeriodeNbSprint_p> est entier, <nSelecteur> est ClTache.ETypeCharge)
      //
      // Paramètres :
      //	nNumSprint_p (entier) : <indiquez ici le rôle de nNumSprint_p>
      //	nPeriodeNbSprint_p (entier) : <indiquez ici le rôle de nPeriodeNbSprint_p>
      //	nSelecteur (ClTache.ETypeCharge) : <indiquez ici le rôle de nSelecteur>
      
      // Valeur de retour :
      // 	ClColProjet dynamique : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      
      //	nNumSprint_p (entier) : Le numéro du sprint
      //	nPeriodeNbSprint_p (entier) : <indiquez ici le rôle de nPeriodeNbSprint_p>
      //	nSelecteur (ClTache.ETypeCharge) : <indiquez ici le rôle de nSelecteur>
      procedure GLOBALe aoProjets_sur_periode(LOCAL nNumSprint_p est un entier , LOCAL nPeriodeNbSprint_p est un entier , LOCAL nSelecteur est un ClTache.ETypeCharge):ClColProjet
      
      oProjetsSprint			est un ClColProjet
      nNumSprintFin			est un entier	= nNumSprint_p + nPeriodeNbSprint_p - 1 
      sChoixSprint			est une chaîne
      sReq					est une chaîne
      
      
      //On choisis si on veut en prod ou previsionnel 
      SI nSelecteur = ClTache.ETypeCharge.Charge_réelle ALORS
      	sChoixSprint = "Scr_Tache.Num_Sprint_Realisation"
      SINON
      	sChoixSprint = "Scr_Tache.Num_Sprint_Previsionnel"
      FIN
      
      
      
      sReq = [
      	SELECT DISTINCT
      		Scr_Projet.*
      		--Scr_Projet.IDScr_Projet
      	
      	FROM Scr_Tache
      		INNER JOIN Scr_UserStory ON (Scr_UserStory.IDScr_UserStory = Scr_Tache.IDScr_UserStory)
      		INNER JOIN Scr_Projet ON (Scr_Projet.IDScr_Projet = Scr_UserStory.IDScr_Projet)
      		
      	WHERE
      		[%sChoixSprint%] BETWEEN [%nNumSprint_p%] AND [%nNumSprintFin%]
      		
      ]
      oProjetsSprint.ZF_LoadSQL(sReq)
      
      renvoyer oProjetsSprint
     type : 458752
   -
     name : aoProcessMetiers
     procedure_id : 2211569564707449649
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] aoProcessMetiers ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	tableau : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      FONCTION aoProcessMetiers():tableau de ClSchem dynamique
      
      
      sdListeProcess est une source de données
      sReq est une chaîne
      aOProcess est un tableau de ClSchem dynamique
      
      sReq = [
      	SELECT
      		Scr_Process_Metier.IDScr_Process_Metier,
      		Scr_Process_Metier.Libelle
      
      	FROM Scr_Process_Metier
      	
      	WHERE Scr_Process_Metier.IDScr_Projet = [%:ZF_Get_IdUnique()%]
      	
      	ORDER BY Scr_Process_Metier.Libelle
      ]
      
      goApp.Rsql(sdListeProcess,sReq)
      POUR TOUT sdListeProcess
      	TableauAjouteRéférence(aOProcess, ClSchem.GetObj(sdListeProcess.IDScr_Process_Metier))
      FIN
      HAnnuleDéclaration(sdListeProcess)
      
      RENVOYER aOProcess
     type : 458752
   -
     name : ReaffecteToutesUsAuCDP
     procedure_id : 2235730142323099978
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //ReaffecteToutesUsAuCDP ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE ReaffecteToutesUsAuCDP():Vide
      
      oUS est un ClUserStory dynamique
      POUR TOUT ELEMENT oUS DE :aoListeUS().aItems()
      	oUS.p_oUsrResponsable = :m_oUsr_ChefProjet
      	oUS.ZF_Enregistre()
      FIN
     type : 458752
   -
     name : GetObj
     procedure_id : 2241107377113344200
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] GetObj (<nIdUnique_P> est entier)
      //
      // Paramètres :
      //	nIdUnique_P (entier) : <indiquez ici le rôle de nIdUnique_P>
      // Valeur de retour :
      // 	ClProjet : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE globale GetObj(local nIdUnique_P est un entier):ClProjet
      
      renvoyer ClZF_ObjDB.ZF_GetObj("ClProjet", nIdUnique_P)
     type : 458752
   -
     name : ChargeSituation
     procedure_id : 2257371631902684937
     type_code : 12
     code : |1+
      procédure prive ChargeSituation():Vide
      
      
      sdSituationPrj est une Source de Données
      sReq est une chaîne
      
      sReq = [
      	SELECT
      		Scr_Projet_Situation.Top_Prioritaire,
      		Scr_Projet_Situation.CMTR
      		
      	FROM Scr_Projet_Situation
      	
      	
      	WHERE Scr_Projet_Situation.Num_Sprint = [%goApp.m_nNumeroDuSprintActuel%]
      		AND Scr_Projet_Situation.IDScr_Projet = [%:ZF_Get_IdUnique()%]
      ]
      
      goapp.RSQL(sdSituationPrj,sReq)
      	
      :m_bInitSituation	=	vrai
      
      HLitPremier(sdSituationPrj)
      si pas HEnDehors(sdSituationPrj)
      	:m_bTop_Prioritaire	= sdSituationPrj.Top_Prioritaire
      	:m_sCmtrsituation	= sdSituationPrj.CMTR
      sinon
      	:m_bTop_Prioritaire	= faux
      	:m_sCmtrsituation	= ""
      FIN
      
      HAnnuleDéclaration(sdSituationPrj)
      
      
      
      
     type : 458752
   -
     name : aoSimulationDistributionCharge
     procedure_id : 2272829957990066902
     type_code : 12
     code : |1+
      procédure aoSimulationDistributionCharge(local nNumSprintDepart_P est un entier, LOCAL nChargeMoy_P est un entier):tableau de STR_SimulationCharge
      
      oTache_Tmp			est un ClTache dynamique
      oSpr_Tmp			est un ClSprint dynamique
      nChargeARealiser	est un entier
      nChargeARealGlob	est un entier
      
      nNunmSprint			est un entier
      nChargeSpr			est un entier
      
      aoRetour			est un tableau de STR_SimulationCharge
      stSpr_Tmp			est un STR_SimulationCharge
      
      nMarge				est un entier
      nSprintFinProv		est un entier
      
      
      
      //Récupération du prévisionnel de toutes les taches non positionnés ou non commencé
      POUR TOUT ELEMENT oTache_Tmp DE :aoListeTaches().aItems()
      	SI oTache_Tmp.p_nNum_Sprint_Realisation = 0 OU oTache_Tmp.p_nNum_Sprint_Realisation >= nNumSprintDepart_P ALORS
      		nChargeARealiser += oTache_Tmp.p_nPoids_Previsionnel
      	FIN
      FIN
      
      
      
      nMarge				= nChargeARealiser * ::cstTauxImponderable
      nChargeARealGlob	= nChargeARealiser + nMarge
      
      nSprintFinProv		= nNumSprintDepart_P + :m_nChargeProvisionelle
      
      //Distribution de la charge restante
      nNunmSprint			= nNumSprintDepart_P
      TANTQUE (nChargeARealGlob > 0 ou nSprintFinProv > nNunmSprint) et nNunmSprint <= ClSprint.nGetNumSprintMax()
      	oSpr_Tmp <- ClSprint.GetObj(nNunmSprint)
      	nChargeSpr = Min(nChargeMoy_P, nChargeARealiser)
      	
      	//A t on un sprint suivant qui existe?
      	SI pas ClSprint.Controlle_Sprint(nNunmSprint + 1) ALORS
      		//Non : On met le restant sur le dernier sprint.
      		nChargeARealGlob = nChargeARealiser
      	FIN
      	
      	//Ajout des infos au tableau de retour
      	stSpr_Tmp.oSprint			<- oSpr_Tmp
      	stSpr_Tmp.nChargeSimulee	= min(nChargeSpr, nChargeARealiser)
      	TableauAjoute(aoRetour, stSpr_Tmp)
      	
      	nNunmSprint++
      	nChargeARealiser -= nChargeSpr
      	nChargeARealGlob -= nChargeMoy_P
      FIN
      
      renvoyer aoRetour
     type : 458752
   -
     name : aoListeTaches
     procedure_id : 2287498860341831704
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] aoListeTaches ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	ClColTaches : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      //	bForceRecharge_P (booléen - valeur par défaut=0) : <indiquez ici le rôle de bForceRecharge_P>
      //	bForceRecharge_P (booléen - valeur par défaut=0) : <indiquez ici le rôle de bForceRecharge_P>
      FONCTION aoListeTaches():ClColTaches
      
      oTaches			est un ClColTaches
      oUS				est un ClUserStory dynamique
      oTache			est un ClTache dynamique
      
      POUR TOUT ELEMENT oUS DE :aoListeUS().aItems()
      	POUR TOUT ELEMENT oTache DE oUS.aoListeTaches().aItems()
      		oTaches.ZF_addItem(oTache)
      	FIN
      FIN
      
      
      RENVOYER oTaches
     type : 458752
   -
     name : sExport
     procedure_id : 1156363581725158529
     type_code : 12
     code : |1+
      procédure sExport():json
      
      sRetour est un JSON
      nInd est un entier
      oUsr est un ClUsr dynamique
      oUS est un ClUserStory dynamique
      
      
      
      sRetour.id					= :ZF_Get_IdUnique()
      sRetour.name				= :m_sNom
      sRetour.is_departement		= :m_btop_direction
      sRetour.is_priority			= :m_btop_prioritaire
      sRetour.is_finish			= :m_btop_termine
      sRetour.forcastload			= :m_nchargeprovisionelle
      sRetour.coment_situation	= :m_scmtrsituation
      sRetour.group				= :m_sGroupement
      sRetour.order_grooup		= :m_nOrdreGrp
      
      sRetour.user_manager		= :m_ousr_chefprojet.sExport()
      
      nInd = 0
      pour tout element oUsr de :aoInvite_Liste().aItems()
      	nInd++
      	sRetour.user_guest[nInd] = oUsr.sExport()
      FIN
      
      nInd = 0
      pour tout element oUS de :aoListeUS().aItems()
      	nInd++
      	sRetour.user_Stories[nInd] = oUS.sExport()
      FIN
      
      
      renvoyer sRetour
     type : 458752
   -
     name : aoEpics
     procedure_id : 1166750015107763012
     type_code : 12
     code : |1-
      procédure aoEpics():ClColEpic
      
      oRetour est un ClColEpic
      sReq est une chaîne
      
      si pas oRetour.p_bEstCharge alors
      	sReq = [
      		SELECT 
      			Scr_Epic.*
      			--Scr_Epic.IDScr_Epic
      		FROM Scr_Epic
      		WHERE IDScr_Projet = [%:ZF_Get_IdUnique()%]
      		ORDER BY Ordre
      	]
      	
      	oRetour.ZF_LoadSQL(sReq)
      fin
      
      renvoyer oRetour
     type : 458752
   -
     name : Combo_Charge_Epic
     procedure_id : 1166850500198140138
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //Combo_Charge_Epic (<sNomFenetre_P> est chaîne, <sNomCombo_P> est chaîne [, <sValDef_P> est chaîne [, <aCompl_P> est tableau associatif]])
      //
      // Paramètres :
      //	sNomFenetre_P (chaîne ANSI) : <indiquez ici le rôle de sNomFenetre_P>
      //	sNomCombo_P (chaîne ANSI) : <indiquez ici le rôle de sNomCombo_P>
      // 	sValDef_P (chaîne ANSI - valeur par défaut="") : <indiquez ici le rôle de sValDef_P>
      //	aCompl_P (tableau associatif - valeur par défaut=0) : <indiquez ici le rôle de aCompl_P>
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE Combo_Charge_Epic(local sNomFenetre_P est une chaîne , LOCAL sNomCombo_P est une chaîne, sValDef_P est une chaîne = "", aCompl_P est un tableau associatif de chaine =  []):Vide
      
      oEpic est un ClEpic dynamique
      sNomComplet est une chaîne = sNomFenetre_P + "." + sNomCombo_P
      sCle est une chaîne
      sComp est une chaîne
      
      
      ListeSupprimeTout(sNomComplet)
      
      pour tout sComp, sCle de aCompl_P
      	ListeAjoute(sNomComplet, sComp + gLien(sCle))
      fin
      
      pour TOUT element oEpic de :aoEpics().aItems()
      	ListeAjoute(sNomComplet, oEpic.p_sNom + glien(oEpic.ZF_Get_IdUnique()))
      FIN
      
      
      //Sélection par défaut
      nInd est un entier
      
      SI sValDef_P = "" ALORS
      	nInd = 1
      SINON
      	nInd = 1
      	TANTQUE nInd <= {sNomComplet, indChamp}..Occurrence ET {sNomComplet, indChamp}[nInd]..ValeurMémorisée <> sValDef_P
      		nInd++
      	FIN
      	SI nInd > {sNomComplet, indChamp}..Occurrence ALORS
      		nInd = 1
      	FIN
      FIN
      
      si ListeOccurrence(sNomComplet) > 0 ALORS
      	ListeSelectPlus(sNomComplet, nInd)
      FIN
     type : 458752
   -
     name : bUsrAffecteAuProjet
     procedure_id : 1334865592183885066
     type_code : 12
     code : |1+
      procédure bUsrAffecteAuProjet(oUsr_p est un ClUsr):booléen
      
      bRetour est un booléen
      oUsr_tmp est un ClUsr dynamique
      
      si oUsr_p.ZF_Get_IdUnique() = :m_oUsr_ChefProjet.ZF_Get_IdUnique() ALORS
      	bRetour = vrai
      sinon
      	POUR TOUT ELÉMENT oUsr_tmp DE :aoInvite_Liste().aItems()
      		SI oUsr_tmp.ZF_Get_IdUnique() = :m_oUsr_ChefProjet.ZF_Get_IdUnique() ALORS
      			bRetour = Vrai
      		FIN
      	FIN
      FIN
      
      renvoyer bRetour
      
     type : 458752
   -
     name : NettoieDependances
     procedure_id : 1398552685824616496
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //NettoieDependances ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure publique  NettoieDependances():Vide
      
      oUs est un ClUserStory dynamique
      oTache est un ClTache dynamique
      oMessage est un ClMessage dynamique
      aoMessages est un tableau de ClMessage dynamique
      
      pour tout element oUs de :aoListeUS().aItems()
      	
      	pour tout element oTache de oUs:aoListeTaches().aItems()
      		
      		aoMessages <- ClMessage::aoListeMessage(oTache)
      		pour tout element oMessage de aoMessages
      			AppSupp(oMessage)
      		FIN
      		
      		AppSupp(oTache)
      	FIN
      	AppSupp(oUs)
      FIN
      
      oUser est un ClUsr dynamique
      pour tout element oUser de :aoInvite_Liste().aItems()
      	:Invite_Supprime(oUser)
      FIN
      
      oEpic est un ClEpic dynamique
      pour tout element oEpic de :aoEpics().aItems()
      	AppSupp(oEpic)
      fin
      
      
      	procedure interne AppSupp(oObj est un ClZF_ObjDB)
      		oObj:ZF_Supprimer()
      		oObj:ZF_Enregistre()
      	FIN
     type : 458752
   -
     name : aoListeProjetsDeUsr
     procedure_id : 1406942354607166897
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] aoListeProjetsDeUsr (<oUsr_p> est ClUsr [, <eTypeUsr> est ClUsr.ETypeUsr [, <bAvecProjetsFini_P> est booléen]])
      //
      // Paramètres :
      //	oUsr_p (ClUsr) : <indiquez ici le rôle de oUsr_p>
      //	eTypeUsr (ClUsr.ETypeUsr) : <indiquez ici le rôle de TypeUsr>
      //	bAvecProjetsFini_P (booléen - valeur par défaut=0) : <indiquez ici le rôle de bAvecProjetsFini_P>
      
      // Valeur de retour :
      // 	ClColProjet : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      //	bAvecProjetsFini_P (booléen - valeur par défaut=0) : <indiquez ici le rôle de bAvecProjetsFini_P>
      //	bAvecProjetsFini_P (booléen - valeur par défaut=0) : <indiquez ici le rôle de bAvecProjetsFini_P>
      FONCTION GLOBAL aoListeProjetsDeUsr(oUsr_p est un ClUsr, ...
      	eTypeUsr est un clusr.ETypeUsr = clusr.ETypeUsr.usr_tous, ...
      	bAvecProjetsFini_P est un booléen = faux):ClcolProjet
      
      oColRetour				est un ClcolProjet
      sReq_Liste_Projet		est une chaîne
      sComplement				est une chaîne
      
      
      si pas bAvecProjetsFini_P ALORS
      	sComplement = "AND Scr_Projet.Top_Termine = 0" + rc
      FIN
      
      
      selon eTypeUsr
      	CAS ClUsr.ETypeUsr.usr_tous
      		
      	CAS ClUsr.ETypeUsr.usr_invite
      		sComplement = "AND Scr_Usr_Projet.Top_Invite = 1" + rc
      	CAS ClUsr.ETypeUsr.usr_chef_de_projet
      		sComplement = "AND Scr_Usr_Projet.Top_Chef_Projet = 1" + rc
      		
      FIN
      
      
      sReq_Liste_Projet = [
      	SELECT
      		Scr_Projet.*
      		--Scr_Projet.IDScr_Projet
      		
      	FROM Scr_Projet
      		INNER JOIN Scr_Usr_Projet ON (Scr_Usr_Projet.IDScr_Projet = Scr_Projet.IDScr_Projet)
      	
      	WHERE Scr_Usr_Projet.IDScr_Usr = [%oUsr_p.ZF_Get_IdUnique()%]
      
      	[%sComplement%]
      	]
      
      oColRetour.ZF_LoadSQL(sReq_Liste_Projet)
      
      renvoyer oColRetour
     type : 458752
   -
     name : Init_ObjBD
     procedure_id : 1422514123716767897
     type_code : 12
     code : |1+
      // Redéfinition de la méthode ClObjDB.ZF_Init_ObjBD
      PROCÉDURE  Init_ObjBD()
      
      nInd est un entier
      aTypes est un tableau d'entiers = [::cstInter_Responsable, ::cstInter_Decideur, ::cstInter_Consulte, ::cstInter_Informe]
      pour tout nInd de aTypes
      	::m_aClassifInvite[nInd] = allouer un ClColUsr()
      FIN
      
      SI :ZF_bModeAjout() ALORS
      	:m_oUsr_ChefProjet <- goApp.m_oUsrCnx
      SINON
      	sdUsrDePrj est une Source de Données
      	sReq est une chaîne
      	
      	sReq = [
      		SELECT IDScr_Usr
      		FROM Scr_Usr_Projet
      		WHERE Top_Chef_Projet = 1
      			AND IDScr_Projet = [%:ZF_Get_IdUnique()%]
      	]
      	
      	goApp.Rsql(sdUsrDePrj,sReq)
      	POUR TOUT sdUsrDePrj
      		:m_oUsr_ChefProjet <- ClUsr::GetObj(sdUsrDePrj.IDScr_Usr)
      	FIN
      	
      	HAnnuleDéclaration(sdUsrDePrj)
      FIN
     type : 458752
   -
     name : sLibelleDeTypeInvite
     procedure_id : 1434408713655293190
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] sLibelleDeTypeInvite (<nType_p> est entier)
      //
      // Paramètres :
      //	nType_p (entier) : <indiquez ici le rôle de nType_p>
      // Valeur de retour :
      // 	chaîne ANSI : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure publique globale sLibelleDeTypeInvite(nType_p est un entier) <métier>:chaine
      
      
      selon nType_p
      	cas cstInter_Informe
      		renvoyer "Informé"
      	cas cstInter_Consulte
      		RENVOYER "Consulté"
      	cas cstInter_Decideur
      		RENVOYER "Décideur"
      	cas cstInter_Responsable
      		RENVOYER "Responsable"
      	autre cas
      		mg_oEx_TypeInvite.ZF_Declenche([nType_p])
      FIN
      
      RENVOYER ""
     type : 458752
   -
     name : aGrpInvite
     procedure_id : 1434414520490178149
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] aGrpInvite ()
      //
      // Paramètres :
      //	Aucun
      
      // Valeur de retour :
      // 	tableau associatif (ClColUsr) : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      FONCTION aGrpInvite()<métier>:tableau associatif de ClColUsr
      
      sReq est une chaîne
      sCle est une chaîne
      oColUsr est un ClColUsr dynamique
      
      pour tout elEMENT oColUsr, sCle de :m_aClassifInvite
      	
      	oColUsr.ZF_vider()
      	
      	sReq = [
      		SELECT
      			Scr_Usr.*
      			
      		FROM Scr_Usr_Projet
      			INNER JOIN Scr_Usr ON (Scr_Usr.IDScr_Usr = Scr_Usr_Projet.IDScr_Usr)
      		
      		WHERE Scr_Usr_Projet.IDScr_Projet = [%:ZF_Get_IdUnique()%]
      			AND Scr_Usr_Projet.RoleSurLeProjet = [%sCle%]
      	]
      	
      	oColUsr.ZF_LoadSQL(sReq)
      	
      	:m_aClassifInvite[sCle] <- oColUsr
      FIN
      
      
      renvoyer :m_aClassifInvite
      
      
      //si bForce_p ou pas :m_oListeInvites.p_bEstCharge ALORS
      //	:m_oListeInvites.ZF_vider()
      //	
      //	
      //	
      //	sReq = [
      //		SELECT
      //			--Scr_Usr_Projet.*
      //			Scr_Usr_Projet.IDScr_Usr
      //			
      //		FROM Scr_Usr_Projet
      //		
      //		WHERE Scr_Usr_Projet.IDScr_Projet = [%:ZF_Get_IdUnique()%]
      //			AND Scr_Usr_Projet.Top_Invite = 1
      //	]
      //	
      //	m_oListeInvites.ZF_LoadSQL(sReq)
      //fin
      //
      //renvoyer :m_oListeInvites
     type : 458752
  properties :
   -
     name : p_bTop_Termine
     identifier : 0x1f52a6d200220943
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_bTop_Termine() : booléen
         
         renvoyer :m_bTop_Termine
        type : 1966080
      -
        code : |1+
         procédure p_bTop_Termine(bTopTremine est un booléen):Vide
         :ZF_EstModif()
         :m_bTop_Termine = bTopTremine
        type : 2031616
     template_refs : []
   -
     name : p_oUsr_ChefProjet
     identifier : 0x1f52a8a2010a1cc9
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_oUsr_ChefProjet() : ClUsr
         
         renvoyer :m_oUsr_ChefProjet
        type : 1966080
      -
        code : |1-
         procédure publique p_oUsr_ChefProjet(oValeur est ClUsr):Vide
         
         si PAS ZF_bObjEgal(:m_oUsr_ChefProjet, oValeur) alors
         	:ZF_EstModif()
         	:m_oUsr_ChefProjet <- oValeur
         fin
        type : 2031616
     template_refs : []
   -
     name : p_bTop_Prioritaire
     identifier : 0x1f53ca7805984aad
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_bTop_Prioritaire() : booléen
         
         SI PAS :m_bInitSituation ALORS
         	:ChargeSituation()
         FIN
         
         renvoyer :m_bTop_Prioritaire
        type : 1966080
     template_refs : []
   -
     name : p_sCmtrsituation
     identifier : 0x1f53ceb9059be50b
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_sCmtrsituation() : chaîne
         
         si pas :m_bInitSituation ALORS
         	:ChargeSituation()
         FIN
         
         renvoyer :m_sCmtrsituation
        type : 1966080
     template_refs : []
   -
     name : p_bTop_Direction
     identifier : 0x1f84c0c200e206c6
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_bTop_Direction() : booléen
         
         renvoyer :m_bTop_Direction
        type : 1966080
      -
        code : |1-
         procédure publique p_bTop_Direction(bValeur est un booléen):Vide
         :ZF_EstModif()
         :m_bTop_Direction=bValeur
        type : 2031616
     template_refs : []
   -
     name : p_nChargeProvisionelle
     identifier : 0x1f8f457400526653
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_nChargeProvisionelle() : entier
         
         renvoyer :m_nChargeProvisionelle
        type : 1966080
      -
        code : |1-
         procédure publique p_nChargeProvisionelle(nValeur est un entier):Vide
         :ZF_EstModif()
         :m_nChargeProvisionelle=nValeur
        type : 2031616
     template_refs : []
   -
     name : p_nOrdreGrp
     identifier : 0x1f8f457d005387f5
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_nOrdreGrp() : entier
         
         renvoyer :m_nOrdreGrp
        type : 1966080
      -
        code : |1-
         procédure publique p_nOrdreGrp(nValeur est un entier):Vide
         :ZF_EstModif()
         :m_nOrdreGrp=nValeur
        type : 2031616
     template_refs : []
   -
     name : p_sGroupement
     identifier : 0x1f8f458a0054bcd0
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_sGroupement() : chaîne
         
         renvoyer :m_sGroupement
        type : 1966080
      -
        code : |1-
         procédure publique p_sGroupement(sValeur est une chaîne):Vide
         :ZF_EstModif()
         :m_sGroupement=sValeur
        type : 2031616
     template_refs : []
   -
     name : p_sNom
     identifier : 0x1f93330a03f98312
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_sNom() : chaîne
         
         renvoyer :m_sNom
        type : 1966080
      -
        code : |1-
         procédure publique p_sNom(sValeur est une chaîne):Vide
         :ZF_EstModif()
         :m_sNom = sValeur
        type : 2031616
     template_refs : []
   -
     name : p_sCode
     identifier : 0x1160617c02e7a25a
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_sCode() : chaîne
         
         renvoyer :m_sCode
        type : 1966080
      -
        code : |1-
         procédure publique p_sCode(sValeur est une chaîne):Vide
         :ZF_EstModif()
         :m_sCode = sValeur
        type : 2031616
     template_refs : []
   -
     name : p_aClassifInvite
     identifier : 0x13e80a25101e4030
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_aClassifInvite() : tableau associatif de ClColUsr
         
         renvoyer m_aClassifInvite
        type : 1966080
     template_refs : []
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : BwAAAAcAAAA6ih3UbgNXHwTtiPSFUEj+2fi/m7v4QV2rqidAupM=
resources :
 string_res :
  identifier : 0x1e8595a90ed5e230
  internal_properties : BwAAAAcAAAAnMYFQ1bL/vz9ehh7L22SNNSlIzGTOI8h5F/WtgDNP
custom_note :
 internal_properties : BwAAAAcAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
associated_test :
 name : TEST_ClProjet.wxt
