#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : ClZF_AuditModele
 major_version : 27
 minor_version : 0
 type : 4
 description : ""
 subtype : 0
class :
 identifier : 0x1483817c008aa4e5
 internal_properties : BwAAAAcAAAB2/vstTMCJbS/hlxjFxirSqKvCUuv8YxgpWyl7S3iA
 code_elements :
  type_code : 10
  p_codes :
   -
     code : |1+
      ClZF_AuditModele est une Classe
      
      PROTÉGÉ
      	m_oClasseGen	est un ClZF_GenCodeFic dynamique
      //	m_bErreur		est un booléen
      	m_sRapport		est une chaîne
      fin
     type : 131072
  procedures :
   -
     name : Constructeur
     procedure_id : 1478167472292734181
     type_code : 27
     code : |1-
      procédure Constructeur(sNomTable_p est une chaine)
      
      :m_oClasseGen = allouer un  ClZF_GenCodeFic(sNomTable_p)
      :m_oClasseGen.Analyse()
     type : 589824
   -
     name : Destructeur
     procedure_id : 1478167472292799717
     type_code : 28
     code : |1+
      procédure Destructeur()
     type : 655360
   -
     name : sRamureTbl
     procedure_id : 1478167979099321461
     type_code : 12
     code : |1+
      procedure sRamureTbl()<metier>:chaine
      renvoyer Répète("#", 100) + RC + :m_oClasseGen.p_sNomTable + RC + Répète("#", 100) + RC
     type : 458752
   -
     name : AnaPk
     procedure_id : 1478177952015573514
     type_code : 12
     code : |1+
      procedure AnaPk()<metier>:vide
      
      SI :m_oClasseGen.p_sNomRubId = "" ALORS
      	:m_sRapport	= "Aucune rubrique 'PK' n'est identifiée."
      FIN
      
     type : 458752
   -
     name : AnaFk
     procedure_id : 1478176161013859180
     type_code : 12
     code : |1+
      PROCÉDURE AnaFk()<métier>:Vide
      
      
      sRapport		est une chaîne
      stRelTmp		est un ClZF_GenCodeFic.str_rel
      sRub			est une chaîne
      nNbFkIncl		est un entier
      sListeFkCompo	est une chaîne
      stInfoRub		est un ClZF_GenCodeFic.STR_DefRub
      
      
      
      POUR TOUT ÉLÉMENT stRelTmp, sRub DE :m_oClasseGen.m_aPK_de_FK
      
      	//Récupération de la définition de la rubrique associé à la contrainte FK
      	stInfoRub  = :m_oClasseGen.m_aRub[sRub]
      	
      	
      	SELON stRelTmp.nTypeRel
      		CAS ClZF_GenCodeFic.cstRelNonDef
      			traceInfo("Liaison ""[%stRelTmp.sNomRel%]"" non normalisée ([%stRelTmp.sTablePK%].[%stRelTmp.sRubriquePK%] -> [%stRelTmp.sTableFK%].[%stRelTmp.sRubriqueFK%]).")
      		CAS ClZF_GenCodeFic.cstRelIncl
      			nNbFkIncl++
      			sListeFkCompo += [RC] + stRelTmp.sNomRel
      			
      			si stInfoRub.nTypeCle <> ClZF_GenCodeFic.cstTypeCleUnique ALORS
      				traceInfo("Liaison ""[%stRelTmp.sNomRel%]"", de type ""Inclusion"", pointe vers une rubrique non unique : [%sRub%].")
      			FIN
      	FIN
      	
      	SI stInfoRub.bNullable ET stRelTmp.bRubFKOblig ALORS
      		traceInfo("Liaison ""[%stRelTmp.sNomRel%]"" non normalisée ([%sRub%] nullable et relation de type ""1,1"").")
      	FIN
      	SI PAS stInfoRub.bNullable ET PAS stRelTmp.bRubFKOblig ALORS
      		traceInfo("Liaison ""[%stRelTmp.sNomRel%]"" non normalisée ([%sRub%] non nullable et relation de type ""0,1"").")
      	FIN
      	
      	
      FIN
      
      SI nNbFkIncl > 1 ALORS
      	traceInfo("[%nNbFkIncl%] liaisons sont de type ""Inclusion"", dans cette table (1 seule maxi): " + RC + sListeFkCompo)
      FIN
      
      
      :m_sRapport = sRapport
      
      
      PROCÉDURE INTERNE traceInfo(sMessage):vide
      	sRapport += [RC] + sMessage
      FIN
      
     type : 458752
   -
     name : AnaLibRubs
     procedure_id : 1479647406539584332
     type_code : 12
     code : |1+
      PROCÉDURE AnaLibRubs()<métier>:Vide
      
      
      sRapport		est une chaîne
      stRubTmp		est un ClZF_GenCodeFic.STR_DefRub
      sRub			est une chaîne
      
      
      POUR TOUT ÉLÉMENT stRubTmp, sRub DE :m_oClasseGen.m_aRub
      	//SI le libellé et le nom de la rubrique sont identiques, c'est que le libellé n'a pas été redéfinit
      	si sRub = stRubTmp.sLibelleRubrique ALORS
      		traceInfo("Le libellé de la rubrique ""[%sRub%]"" n'a pas été redéfinit.")
      	FIN
      FIN
      
      
      :m_sRapport = sRapport
      
      
      PROCÉDURE INTERNE traceInfo(sMessage):vide
      	sRapport += [RC] + sMessage
      FIN
      
     type : 458752
   -
     name : AnaPropriete
     procedure_id : 1478171939059827917
     type_code : 12
     code : |1+
      procedure AnaPropriete()<metier>:vide
      
      
      
      str_compareObj est une Structure
      	bPresAnalyse	est un booléen
      	bMembreMap		est un booléen
      	bPropLect		est un booléen
      	bPropEcr		est un booléen
      	bMembreObj		est un booléen
      	bPropIdLect		est un booléen
      	bPropIdEcr		est un booléen
      	sNomMembre		est une chaîne
      FIN
      
      
      sRapport est une chaîne
      
      SI :m_oClasseGen.p_bClasseExiste ALORS
      	
      	//-------------------------------------
      	//
      	
      	oTmp est un objet dynamique
      	
      	
      	oTmp = ClZF_ObjDbLs.ZF_GetObj(:m_oClasseGen.sNomClasseGen(), ClZF_ObjDbLs.cstModeSansChargement)
      	SI PAS oTmp est ClZF_ObjDbLs ALORS
      		ExceptionDéclenche(1,"Type incompatible")
      		RETOUR
      	FIN
      	
      	
      	oObjBD est un ClZF_GenCodeClBd(:m_oClasseGen)
      	
      	SI oTmp est ClZF_ObjDB ALORS
      		oObjBD.p_bLectureSeule = Faux
      	SINON
      		oObjBD.p_bLectureSeule = Vrai
      	FIN
      	
      	
      	
      	//-------------------------------------
      	//récupération des rubriques attendues.
      	sRub			est une chaîne
      	stRubAnaTmp		est un ClZF_GenCodeFic.str_DefRub
      	stInfosDiffRub	est un tableau associatif (ccSansCasse + ccSansEspace) de str_compareObj
      	stDiffRub		est un str_compareObj
      	
      	POUR TOUT ÉLÉMENT stRubAnaTmp, sRub DE :m_oClasseGen.m_aRub
      		VariableRAZ(stDiffRub)
      		stDiffRub.bPresAnalyse		= Vrai
      		stDiffRub.bMembreObj		= (stRubAnaTmp.oObj_Parent <> null)
      		stDiffRub.sNomMembre		= stRubAnaTmp.sNomMembre
      		stInfosDiffRub[sRub]		= stDiffRub
      	FIN
      	
      	
      	//-------------------------------------------------
      	//Récupération des membres déclarées dans la classe
      	Vars			est une Description de variable
      	Def				est une Définition	= RécupèreDéfinitionType(:m_oClasseGen.sNomClasseGen())
      	
      	POUR TOUT Vars DE Def.Variable
      		
      		sRub = ""
      		SI Vars.AttributMapping <> "" ALORS
      			sRub = Vars.AttributMapping
      		FIN
      		SI Vars.AttributNote <> "" ALORS
      			aNotes est un tableau associatif de chaînes = col_zf_surcharge.chaineverstableauasso(Vars.AttributNote)
      			sRub = aNotes["mapping"]
      		FIN
      		
      		
      		SI sRub <> "" ALORS
      			SI stInfosDiffRub[sRub]..Vide ALORS
      				stInfosDiffRub[sRub] = allouer un str_compareObj
      			FIN
      			stDiffRub				= stInfosDiffRub[sRub]
      			
      			stDiffRub.bMembreMap	= Vrai
      			stDiffRub.sNomMembre	= Vars.Nom
      			
      			stInfosDiffRub[sRub]	= stDiffRub
      		FIN
      	FIN
      	
      	
      	//------------------------------------------------
      	//Analyse des propriétés de la classe sélectionnée
      	Prop	est une Description de Propriété
      	sMembre	est une chaîne
      	POUR TOUT Prop DE Def.Propriété  
      		SI PAS Prop.Hérité ALORS
      			sMembre		= Prop.Nom
      			sMembre[1]	= "m"
      			
      			//Parcout des rubriques attendues :
      			POUR TOUT ÉLÉMENT stDiffRub, sRub DE stInfosDiffRub
      				
      				SI sMembre ~= stDiffRub.sNomMembre ALORS
      					stDiffRub.bPropLect		= Prop.Lecture
      					stDiffRub.bPropEcr		= Prop.Ecriture OU oObjBD.p_bLectureSeule
      				FIN
      				
      				SI stDiffRub.bMembreObj ALORS
      					//				trace(sMembre + "_ID" + ">" + stDiffRub.sNomMembre)
      					SI sMembre ~= stDiffRub.sNomMembre + "_ID" ALORS
      						stDiffRub.bPropIdLect	= Prop.Lecture
      						stDiffRub.bPropIdEcr	= Prop.Ecriture OU oObjBD.p_bLectureSeule
      					FIN
      				FIN
      			FIN
      		FIN
      	FIN
      	
      	
      	
      	
      	POUR TOUT ÉLÉMENT stDiffRub, sRub DE stInfosDiffRub
      		
      		
      		SI PAS stDiffRub.bMembreMap ALORS
      			sRapport += [RC + RC] + "Rubrique ""[%sRub%]"" non mappée dans la classe [%:m_oClasseGen.sNomClasseGen()%]."
      		FIN
      		
      		SI PAS stDiffRub.bPresAnalyse ALORS
      			sRapport += [RC + RC] + "Rubrique ""[%sRub%]"" mappée dans la classe ""[%:m_oClasseGen.sNomClasseGen()%]"", mais non présente dans la table ""[%:m_oClasseGen.p_sNomTable%]""."
      		FIN
      		
      		SI stDiffRub.bPresAnalyse ET stDiffRub.bMembreMap ALORS
      			
      			SI PAS stDiffRub.bPropLect ET PAS stDiffRub.bPropEcr ALORS
      				sRapport += [RC + RC] + "Accesseur en lecture / écriture manquant pour le membre ""[%stDiffRub.sNomMembre%]""."
      				blocPropriete(oObjBD, sRub)
      			SINON
      				SI PAS stDiffRub.bPropLect ALORS
      					sRapport += [RC + RC] + "Accesseur en lecture manquant pour le membre ""[%stDiffRub.sNomMembre%]""."
      					blocPropriete(oObjBD, sRub)
      				FIN
      				
      				SI PAS stDiffRub.bPropEcr ALORS
      					sRapport += [RC + RC] + "Accesseur en écriture manquant pour le membre ""[%stDiffRub.sNomMembre%]""."
      					blocPropriete(oObjBD, sRub)
      				FIN
      			FIN
      			
      			SI stDiffRub.bMembreObj ALORS
      				SI PAS stDiffRub.bPropIdLect ET PAS stDiffRub.bPropIdEcr ALORS
      					sRapport += [RC + RC] + "Accesseur en lecture / écriture manquant pour le membre objet ""[%stDiffRub.sNomMembre%]"" via son ID."
      					blocProprieteId(oObjBD, sRub)
      				SINON
      					SI PAS stDiffRub.bPropIdLect ALORS
      						sRapport += [RC + RC] + "Accesseur en lecture manquant pour le membre objet ""[%stDiffRub.sNomMembre%]"" via son ID."
      						blocProprieteId(oObjBD, sRub)
      					FIN
      					
      					SI PAS stDiffRub.bPropIdEcr ALORS
      						sRapport += [RC + RC] + "Accesseur en écriture manquant pour le membre objet ""[%stDiffRub.sNomMembre%]"" via son ID."
      						blocProprieteId(oObjBD, sRub)
      					FIN
      				FIN
      			FIN
      		FIN
      	FIN
      FIN
      
      :m_sRapport = sRapport
      
      
      
      	PROCÉDURE INTERNE blocPropriete(oObjBD_p, sRub_p)
      		sRapport += RC + "---------------------------------"
      		sRapport += RC + oObjBD_p.GenPropriete(sRub_p)
      		sRapport += RC + "---------------------------------"
      	FIN
      
      	PROCÉDURE INTERNE blocProprieteId(oObjBD_p, sRub_p)
      		sRapport += RC + "---------------------------------"
      		sRapport += RC + oObjBD_p.GenProprieteId(sRub_p)
      		sRapport += RC + "---------------------------------"
      	FIN
      	
     type : 458752
   -
     name : AnaMeta
     procedure_id : 1478173480953512014
     type_code : 12
     code : |1+
      pROCÉDURE AnaMeta()<métier>:Vide
      
      
      
      str_compareMeth est une Structure
      	bPresAnalyse	est un booléen
      	bPresObj		est un booléen
      	sCodeCrea		est une chaîne
      FIN
      
      
      
      
      sRapport est une chaîne
      
      SI :m_oClasseGen.p_bClasseExiste ALORS
      	
      	
      	stRelTmp		est un ClZF_GenCodeFic.STR_Rel
      	stDiffRub		est un str_compareMeth
      	sRub			est une chaîne
      	stInfosDiffRub	est un tableau associatif (ccSansCasse + ccSansEspace) de str_compareMeth
      	
      	
      	
      	//------------------------------------
      	//récupération des méthodes attendues.	
      	POUR TOUT ÉLÉMENT stRelTmp DE :m_oClasseGen.m_aPK_de_FK
      		SI stRelTmp.nTypeRel DANS(ClZF_GenCodeFic.cstRelAsso, ClZF_GenCodeFic.cstRelCompo) ALORS
      			
      			clOClGen est un ClZF_GenCodeFic(stRelTmp.sTablePK)
      			sRub = ClZF_GenCodeClCol.sNomFct_ChargeFrom(clOClGen)
      			
      			
      			oGenCol est un ClZF_GenCodeClCol(clOClGen)
      			oGenCol.SetNatif = Faux
      			
      			VariableRAZ(stDiffRub)
      			stDiffRub.sCodeCrea			= oGenCol.GenProc_ChargeFromDeRel(stRelTmp)
      			stDiffRub.bPresAnalyse		= Vrai
      			stInfosDiffRub[sRub]		= stDiffRub
      			
      		FIN
      	FIN
      	
      	
      	
      	//--------------------------------------------------
      	//Récupération des méthodes déclarées dans la classe
      	Vars			est une Description de procédure
      	Def				est une Définition	= RécupèreDéfinitionType(:m_oClasseGen.sNomClasseColGen())
      	
      	SI Def <> Null ALORS
      		POUR TOUT Vars DE Def.Procédure
      			sRub = Vars.Nom
      			SI stInfosDiffRub[sRub]..Vide ALORS
      				stInfosDiffRub[sRub] = allouer un str_compareMeth
      				VariableRAZ(stDiffRub)
      				stDiffRub.bPresAnalyse = Faux
      			SINON
      				stDiffRub = stInfosDiffRub[sRub]
      			FIN
      			stDiffRub.bPresObj			= Vrai
      			stInfosDiffRub[sRub]		= stDiffRub
      		FIN
      		
      		
      		POUR TOUT ÉLÉMENT stDiffRub, sRub DE stInfosDiffRub
      			SI stDiffRub.bPresAnalyse ET PAS stDiffRub.bPresObj ALORS
      				sRapport += [RC + RC] + "Méthode ""[%sRub%]"" non présente dans la classe [%:m_oClasseGen.sNomClasseColGen()%]."
      				blocCode(stDiffRub.sCodeCrea)
      			FIN
      		FIN
      		
      	SINON
      		sRapport += [RC + RC] + "Classe ""[%:m_oClasseGen.sNomClasseColGen()%]"" non présente."
      	FIN
      FIN
      
      
      :m_sRapport = sRapport
      
      
      
      PROCÉDURE INTERNE blocCode(sMsg)
      	sRapport += RC + "---------------------------------"
      	sRapport += RC + sMsg
      	sRapport += RC + "---------------------------------"
      FIN
      
     type : 458752
   -
     name : AnaColMqt
     procedure_id : 1478175220415671222
     type_code : 12
     code : |1-
      PROCÉDURE AnaColMqt()<métier>:Vide
      
      
      
      
      sRapport est une chaîne
      
      
      SI :m_oClasseGen.p_bClasseExiste ALORS
      	
      	
      	stRelTmp			est un ClZF_GenCodeFic.STR_Rel
      	sConstRef			est une chaîne
      	sCodeCrea			est une chaîne
      	tabACleMqt			est un tableau de chaine
      	
      	//------------------------------------
      	//récupération des méthodes attendues.	
      	POUR TOUT ÉLÉMENT stRelTmp DE :m_oClasseGen.m_aPK_de_FK
      		SI stRelTmp.nTypeRel DANS (ClZF_GenCodeFic.cstRelCompo) ALORS
      			
      			sConstRef	= ClZF_GenCodeClCol.sNomConstanteColCompo(stRelTmp)
      			sConstRef	= """" + stRelTmp.sTableFK + "." + stRelTmp.sRubriqueFK + """"		//recréation de la valeur de la constant, car ExécuteCode bugge
      			
      			QUAND EXCEPTION DANS
      				sCode est une chaîne = ChaîneConstruit([
      					clOCol%1 est un [%:m_oClasseGen.sNomClasseColGen()%]<§cs:2§>
      					clODb%1 est un [%:m_oClasseGen.sNomClasseGen()%]<§cs:2§>
      					clOCol%1 <- clODb%1.ZF_GetCol([%sConstRef%])<§cs:2§>
      					libérer clODb%1<§cs:2§>
      					libérer clOCol%1<§cs:2§>
      				], DonneIdentifiant())
      				ExécuteCode(sCode)
      			FAIRE
      				SELON ExceptionInfo(errCode)
      					CAS ClZF_App.mg_oExTypeColNonDefinit.ZF_Code
      						TableauAjoute(tabACleMqt, sConstRef)
      					AUTRE CAS
      						ExceptionPropage()
      				FIN
      				
      			FIN
      		FIN
      	FIN
      	
      	
      	SI TableauOccurrence(tabACleMqt) > 0 ALORS
      		
      		sCodeCrea = [
      			CAS [%TableauVersChaîne(tabACleMqt, ", ")%] :<§cs:2§>
      			[%TAB%]oCol = allouer un [%:m_oClasseGen.sNomClasseColGen()%]<§cs:2§>
      		]
      		
      		sRapport += [RC + RC] + "Code de déclaration des collections manquant (procédure CreeCol)."
      		blocCode(sCodeCrea)
      		
      	FIN
      FIN
      
      
      :m_sRapport = sRapport
      
      
      
      	PROCÉDURE INTERNE blocCode(sMsg)
      		sRapport += RC + "---------------------------------"
      		sRapport += RC + sMsg
      		sRapport += RC + "---------------------------------"
      	FIN
     type : 458752
   -
     name : bMsgInfo
     procedure_id : 1478180915544287250
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] bMsgInfo ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	booléen : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure bMsgInfo() <métier>:booleen
      renvoyer :m_sRapport <> ""
      
     type : 458752
  properties :
   -
     name : p_sRapport
     identifier : 0x1483821a00940f4e
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_sRapport() : chaîne
         renvoyer m_sRapport
        type : 1966080
     template_refs : []
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : BwAAAAcAAAA6ih3UbgNXHwTtiPSFUEj+2fi/m7v4QV2rqidAupM=
  original_name : Classe1
resources :
 string_res :
  identifier : 0x1483815e0084313c
  internal_properties : BwAAAAcAAAAnMYFQ1bL/vz9ehh7L22SNNSlIzGTOI8h5F/WtgDNP
custom_note :
 internal_properties : BwAAAAcAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
