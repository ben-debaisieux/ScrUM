#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : ClApp
 major_version : 27
 minor_version : 0
 type : 4
 description : ""
 subtype : 0
class :
 identifier : 0x1e88f2392f2e7685
 internal_properties : BwAAAAcAAAB2/vstTMCJbS/hlxjFxirSqKvCUuv8YxgpWyl7S3iA
 code_elements :
  internal_properties : BwAAAAcAAACmcEcPUOl8P88f4DqAteA6m/Mt111GGOClrNjaLJ9vO63bNEtdrqYoCCnjX1eG34p8AOi72Du5JSuppQ==
  type_code : 10
  p_codes :
   -
     code : |1-
      ClApp est une Classe
      	public
      	m_oUsrCnx				est un objet ClUsr dynamique
      	m_nVelociteMoyenne		est un entier
      	m_nNumeroDuSprintActuel	est un entier
      	
      	m_sMsgCnx				est une chaîne
      prive
      	m_cnxBDD				est une connexion
      	m_nNbreTrsOuverte		est un entier
      	m_bAnnulationDemande	est un booléen
      	
      	m_bUsrDev				est un booléen
      FIN
       
     type : 131072
  procedures :
   -
     name : Constructeur
     procedure_id : 2200274745389184645
     type_code : 27
     code : |1+
      PROCEDURE Constructeur()
      
      sMsgErrCnx est une chaîne
      
      // ************************************** Connexion à la base de données ******************************************//
      HSurErreur("*",hErrTout,"")
      HGèreIntégrité(Vrai)
      
      
      si pas EnModeTestAutomatique() alors
      	
      	HVérifieStructure(hCompatible)   //pour fonctionner même si modif analyse
      	
      	SI pas enmodetest() ou PAS Droite(SysEnvironnement("USERNAME"),4) DANS ("x2777", "5045") ALORS 
      		
      		:m_sMsgCnx					= "Connexion : HF/CS"
      		
      		// Paramètres de la connexion
      		:m_cnxBDD..Provider			= hAccèsHFClientServeur
      		:m_cnxBDD..Accès			= hOLectureEcriture
      		:m_cnxBDD..Utilisateur		= "cnx_scrum"
      		:m_cnxBDD..MotDePasse		= "cnx_scrum"
      		:m_cnxBDD..Serveur			= "prod-vm-ast02"
      		
      		:m_cnxBDD..BaseDeDonnées	= "SCRUM-BDD"
      		:m_cnxBDD..Cryptage			= hCryptageNon
      		:m_cnxBDD..OptionsCurseur	= hCurseurClient
      		
      		sMsgErrCnx					= "Impossible d'ouvrir les tables de la base de donnés sur le serveur : [%:m_cnxBDD..Serveur%]."
      	SINON
      		:m_sMsgCnx = "Connexion : HF local"
      		
      		// connexion locale aux fichiers
      		:m_cnxBDD..Provider			= hAccèsHF7
      		sMsgErrCnx					= "Impossible d'ouvrir les tables locales de la base de données."
      	FIN
      SINON
      	// connexion local aux fichiers
      	HVérifieStructure(hidentique)
      	:m_cnxBDD..Provider				= hAccèsHF7
      	sMsgErrCnx						= "Impossible d'ouvrir les tables locales de la base de données."
      FIN
      
      
      // Ouverture de la nouvelle connexion
      SI HOuvreConnexion(:m_cnxBDD) ALORS
      	
      	HChangeConnexion("*",:m_cnxBDD)
      	
      	SI PAS HCréationSiInexistant("*") ALORS
      		Info(sMsgErrCnx)
      		STOP
      		FinProgramme()
      	FIN		
      SINON
      	Info(sMsgErrCnx)
      	STOP
      	FinProgramme()
      FIN
      
      
      
      
      //***************************** Identification de l'utilisateur ***************************************************//
      sLoginAD est une chaîne
      
      SI PAS EnModeTestAutomatique() ALORS
      	
      	//On rempli le login de la structure globale Utilisateur par le login de la session windows
      	sLoginAD = Droite(SysEnvironnement("USERNAME"),4)
      	
      	HLitRecherche(Scr_Usr,Login_AD,sLoginAD,hIdentique+hLimiteParcours)
      	//Si on le trouve alors on rempli le reste des inforamtion dans la structure
      	SI pas HTrouve(Scr_Usr) ALORS
      		
      		si HNbEnr(Scr_Usr) = 0 alors
      			hraz(Scr_Usr)
      			Scr_Usr.Login_AD				= sLoginAD
      			Scr_Usr.Top_Equip_Informatique	= vrai
      			HAjoute(Scr_Usr)
      		sinon
      			//Sinon on bloque l'acces à l'application en fermant le programme
      			Info("vous n'avez pas accès à cette application. (" + sLoginAD + " / " + :m_cnxBDD..Serveur + ")")
      			STOP
      			FinProgramme()
      		FIN
      	FIN	
      sinon
      	Col_Test.InitAll()
      	
      	HLitPremier(Scr_Usr)
      	sLoginAD = Scr_Usr.Login_AD
      fin
      //*****************************************************************************************************************//
      
      
      :m_nNumeroDuSprintActuel = ClSprint.Sprint_Num_Actuel() 
      ClSprint.Calcul_Velocite_Moyenne()
      
      
      //Enregistrement de l'utilisateur en cours, dans l'application.
      :m_oUsrCnx <- ClUsr.GetObj(ClUsr.nGetIdDeNumAD(sLoginAD))
      
      //On mémorise si l'utilisateur est de l'équipe de dev (isolé, pour gérer les cas d'usurpation d'identité)
      :m_bUsrDev = :m_oUsrCnx.p_bTop_Equip_Informatique
      
      :m_sMsgCnx += [" - "] + :m_oUsrCnx.p_sNom
     type : 589824
   -
     name : Destructeur
     procedure_id : 2200274745389250181
     type_code : 28
     code : |1+
      PROCEDURE Destructeur()
      
      // Fermeture de tous les fichiers
      SI PAS HFerme("*") ALORS
      	Erreur(HErreurInfo(hErrComplet))
      FIN
       
      SI PAS HFermeConnexion(:m_cnxBDD) ALORS
      	Erreur(HErreurInfo(hErrComplet))
      FIN
      
     type : 655360
   -
     name : Sprint_Num_Actuel
     procedure_id : 2200274814108808312
     type_code : 12
     code : |1-
      FONCTION Sprint_Num_Actuel()
      
      renvoyer :m_nNumeroDuSprintActuel
     type : 458752
   -
     name : Rsql
     internal_properties : BwAAAAcAAABi7hm9i7KpV7ImaJiXE0yAv/lCt7qfnFr9clIPQeK148MNBUJR0RNmbsuBC9xFcykAE065Rjnl7bSylWBOiVLbEmiVfZN+4Ld3sTKc+3S5X01znpGnhTCWIeOy6jTnXbFy8u6Httxc+k9TSisBxeZ4tFOMxEDGyVdN5chsvCP7uQVge8Rz//FjIQ/LK0hbRlHiWaWXeCZx
     procedure_id : 2203050552823197080
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] Rsql (<sdSource_P> est source de données, <sReq_P> est chaîne [, <bSansCorrection_p> est booléen])
      //
      // Paramètres :
      //	sdSource_P (source de données) : <indiquez ici le rôle de sdSource>
      //	sReq_P (chaîne ANSI) : <indiquez ici le rôle de sReq_P>
      //	bSansCorrection_p (booléen - valeur par défaut=0) : <indiquez ici le rôle de bSansCorrection_p>
      // Valeur de retour :
      // 	booléen : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      FONCTION Rsql(sdSource_P est source de données , sReq_P est une chaîne , bSansCorrection_p est un booléen = 0)
      
      si bSansCorrection_p ALORS
      	SI PAS HExécuteRequêteSQL( sdSource_P, :m_cnxBDD, hRequêteSansCorrection+hVérifieIntégrité+hVérifieDoublon, sReq_P) ALORS
      		ExceptionDéclenche(1,"Erreur de récupération de données :" + rc + sReq_P + rc + rc + HErreurInfo(hErrComplet))
      	FIN
      sinon
      	SI PAS HExécuteRequêteSQL( sdSource_P, hRequêteDéfaut, sReq_P) ALORS
      		ExceptionDéclenche(1,"Erreur de récupération de données :" + RC + sReq_P)
      	FIN
      	
      FIN
      renvoyer vrai
     type : 458752
   -
     name : TranDebut
     procedure_id : 2210830778627536123
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //TranDebut ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE TranDebut()
      
      
      :m_nNbreTrsOuverte++
      
      SI :m_nNbreTrsOuverte = 1 ALORS
      	//Lors de la 1ere transaction, on réinitialise la valeur mémorisant l'annulation de transaction.
      	:m_bAnnulationDemande = Faux
      	
      	//	trace("TD " + :nNbreTrsOuverte)
      	
      	//On active la transaction qu'au 1er appel de la procédure.
      	SI PAS HTransactionDébut(:m_cnxBDD) ALORS
      		ExceptionDéclenche(1, HErreurInfo(hErrMessage))
      	FIN
      fin
     type : 458752
   -
     name : TranFin
     procedure_id : 2210832462255173223
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //TranFin ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE TranFin()
      
      
      //On décrémente le compteur de transactions
      :m_nNbreTrsOuverte--
      
      //A t on eu une erreur pendant une transaction ?
      SI PAS :m_bAnnulationDemande ALORS
      	//Non : on valide réellement la transaction.
      	
      	//Trace("TF " + :nNbreTrsOuverte)
      
      	SI :m_nNbreTrsOuverte = 0 ALORS
      		si pas HTransactionFin(:m_cnxBDD) ALORS
      			ExceptionDéclenche(1,HErreurInfo(hErrMessage))
      		FIN
      	FIN
      sinon
      	:TranAnnule()
      FIN
     type : 458752
   -
     name : TranAnnule
     procedure_id : 2210841211103626845
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //TranAnnule ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE TranAnnule()
      
      //On décrémente le nombre de transactions ouvertes, et on mémorise une annulation de transaction.
      :m_nNbreTrsOuverte--
      :m_bAnnulationDemande = Vrai
      
      //Trace("TA " + :nNbreTrsOuverte)
      
      si pas HTransactionAnnule(:m_cnxBDD) ALORS
      	ExceptionDéclenche(1, HErreurInfo(hErrMessage))
      FIN
     type : 458752
   -
     name : sFormateTexteSQL
     internal_properties : BwAAAAcAAADYuPST6CP+T+K2ZU37o7g3n8Kew/nVjSZD5G6OyRuT2Yo67DV/AZmlWI7RE7NW48hb
     procedure_id : 2277711467686255264
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] sFormateTexteSQL (<sTexte_P> est chaîne)
      //
      // Paramètres :
      //	sTexte_P (chaîne ANSI) : <indiquez ici le rôle de sTexte_P>
      // Valeur de retour :
      // 	variant : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE global sFormateTexteSQL(local sTexte_P est une chaîne)
      
      renvoyer remplace(sTexte_P, "'", "''")
     type : 458752
   -
     name : sParamSql
     procedure_id : 1168628840022539232
     type_code : 12
     code : |1+
      procédure sParamSql(sChaine_P est une chaîne):chaîne ANSI
      sRetour est une chaîne
      sRetour = Remplace(sChaine_P, "'", "''")
      renvoyer sRetour
      
     type : 458752
  properties :
   -
     name : p_bUsrDev
     identifier : 0x1005f71604579ab0
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_bUsrDev() : booléen
         
         renvoyer :m_bUsrDev
        type : 1966080
     template_refs : []
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : BwAAAAcAAAA6ih3UbgNXHwTtiPSFUEj+2fi/m7v4QV2rqidAupM=
resources :
 string_res :
  identifier : 0x1e88f2332f2b5f44
  internal_properties : BwAAAAcAAAAnMYFQ1bL/vz9ehh7L22SNNSlIzGTOI8h5F/WtgDNP
custom_note :
 internal_properties : BwAAAAcAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
