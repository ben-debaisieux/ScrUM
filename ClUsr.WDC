#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : ClUsr
 major_version : 27
 minor_version : 0
 type : 4
 description : ""
 subtype : 0
class :
 identifier : 0x1e85d17720597ea1
 internal_properties : BwAAAAcAAAB2/vstTMCJbS/hlxjFxirSqKvCUuv8YxgpWyl7S3iA
 code_elements :
  internal_properties : BwAAAAcAAACmcEcPUOl8P88f4DqAteA6m/Mt111GGOClrNjaLJ9vO63bNEtdrqYoCCnjX1eG34p8AOi72Du5JSuppQ==
  type_code : 10
  p_codes :
   -
     code : |1+
      ClUsr est une Classe
      	Hérite de ClZF_ObjDB
      
      prive
      	m_sNom est une chaîne <MAPPING=Nom>
      	m_sEMail est une chaîne <MAPPING=eMail>
      	m_sService est une chaîne <MAPPING=Service>
      	m_sLogin_AD est une chaîne <MAPPING=Login_AD>
      	m_bTop_Equip_Informatique est un booléen <MAPPING=Top_Equip_Informatique>
      GLOBAL
      PUBLIC
      	mg_oEx_IdAbsentAD				est un ClZF_Exception dynamique
      	mg_oEx_UsrReferenceParPrj		est un ClZF_Exception dynamique
      	mg_oEx_UsrReferenceParUS		est un ClZF_Exception dynamique
      	mg_oEx_UsrReferenceParMessage	est un ClZF_Exception dynamique
      FIN
       
      ETypeUsr est une énumération
      	usr_tous
      	usr_invite
      	usr_chef_de_projet
      fin
      ETypeInter est une énumération
      	usr_tous
      	usr_Dev
      	usr_Fonc
      FIN
      
      ETypeTest est une énumération
      	test_unitaire
      	test_fonctionnel
      fin
       
      
      mg_oEx_IdAbsentAD				= allouer un ClZF_Exception("Identifiant AD introuvable : ""%1"".")
      mg_oEx_UsrReferenceParPrj		= allouer un ClZF_Exception("Cet utilisateur est responsable ou invité d'un projet, impossible de le supprimer")
      mg_oEx_UsrReferenceParUS		= allouer un ClZF_Exception("Cet utilisateur est responsable d'une User Story, impossible de le supprimer")
      mg_oEx_UsrReferenceParMessage	= allouer un ClZF_Exception("Cet utilisateur a posté au moins un message, impossible de le supprimer")
     type : 131072
  procedures :
   -
     name : Constructeur
     procedure_id : 2199394302614535841
     type_code : 27
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //Constructeur ( [<nID_P> est entier])
      //
      // Paramètres :
      //	nID_P (entier - valeur par défaut=0) : <indiquez ici le rôle de nId_P>
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      
      
      
      // 	sdSource_P (source de données - valeur par défaut=0) : <indiquez ici le rôle de sdSource_P>
      PROCEDURE Constructeur(LOCAL nID_P est un entier = 0)
      
      Ancêtre.Constructeur(Scr_Usr..Nom, Scr_Usr.IDScr_Usr..Nom, nID_P)
      
      //Chargement des données dans l'instance.
      //:ZF_Charge()
     type : 589824
   -
     name : Destructeur
     procedure_id : 2199394302614601377
     type_code : 28
     code : |1-
      
      
      PROCEDURE Destructeur()
     type : 655360
   -
     name : asListeUsr
     procedure_id : 2199526673692739116
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] asListeUsr ( [<filtre_p> est ClUsr.ETypeUsr])
      //
      // Paramètres :
      //	filtre_p (ClUsr.ETypeUsr) : <indiquez ici le rôle de filtre_p>
      // Valeur de retour :
      // 	tableau associatif : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      FONCTION GLOBAL asListeUsr(filtre_p est un ETypeInter = ETypeInter.usr_tous)
      
      asRetour est un tableau associatif de chaînes
      oUsrTmp est un ClUsr dynamique
      
      pour tout element oUsrTmp de ::aoListeUsr(filtre_p).aItems()
      	asRetour[oUsrTmp.ZF_Get_IdUnique()] = oUsrTmp.m_sNom
      FIN
      
      
      renvoyer asRetour
     type : 458752
   -
     name : nGetIdDeNumAD
     procedure_id : 2200293059147433591
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] nGetIdDeNumAD (<sNumAD_P> est chaîne)
      //
      // Paramètres :
      //	sNumAD_P (chaîne ANSI) : <indiquez ici le rôle de nNNumAD_P>
      // Valeur de retour :
      // 	ClUsr : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      FONCTION GLOBAL nGetIdDeNumAD(LOCAL sNumAD_P est une chaîne)<métier>:clusr
      
      HLitRecherche(Scr_Usr,Login_AD,sNumAD_P,hIdentique+hLimiteParcours)
      si pas HTrouve(Scr_Usr) ALORS
      	mg_oEx_IdAbsentAD.ZF_Declenche([sNumAD_P])
      	//ExceptionDéclenche(1,"Identifiant AD introuvable.")
      FIN
      
      RENVOYER ::GetObj(Scr_Usr.IDScr_Usr)
     type : 458752
   -
     name : oTaches_MesTaches
     procedure_id : 2202419580284796419
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] oTaches_MesTaches ()
      //
      // Paramètres :
      //	Aucun
      
      // Valeur de retour :
      // 	ClColTaches : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      //	bForceCharge_p (booléen - valeur par défaut=0) : <indiquez ici le rôle de bForceCharge_p>
      FONCTION oTaches_MesTaches():ClColTaches
      
      //sdMesTaches est une Source de Données
      sReq est une chaîne
      oTachesEnDev est un ClColTaches
      
      
      //Récupération des taches en cours, de l'utilisateur.
      sReq = [
      	SELECT
      		Scr_Tache.*
      		--Scr_Tache.IDScr_Tache
      	FROM Scr_Tache
      	WHERE Scr_Tache.Top_Brouillon = 0
      		AND Scr_Tache.Top_Annule = 0
      		AND Scr_Tache.Top_Realise = 0
      		AND Scr_Tache.Num_Sprint_Demarrage is not Null
      		AND Scr_Tache.IDScr_Usr_Dev = [%:ZF_Get_IdUnique()%]
      		AND Scr_Tache.Statut <> [%ClTache.cstStatut_Suspendu%]
      ]
      
      oTachesEnDev.ZF_LoadSQL(sReq)
      
      renvoyer oTachesEnDev
     type : 458752
   -
     name : Utilisateur_Est_Chef_De_Projet
     procedure_id : 2202877388316407809
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] Utilisateur_Est_Chef_De_Projet ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	booléen : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      //	nIDUsr_p (entier) : <indiquez ici le rôle de nIDUsr_p>
      FONCTION Utilisateur_Est_Chef_De_Projet()
      
      bChefdeProjet est un booléen
      
      sdRecherche est une source de données
      sReq est une chaîne
      
      sReq = ChaîneConstruit([
      	SELECT DISTINCT
      	Scr_Usr_Projet.IDScr_Usr,
      	SUM(Scr_Usr_Projet.Top_Chef_Projet) AS NbProjets
      	
      	FROM Scr_Usr_Projet
      	
      	WHERE Scr_Usr_Projet.IDScr_Usr = %1
      		AND Scr_Usr_Projet.Top_Chef_Projet = 1
      
      	GROUP BY Scr_Usr_Projet.IDScr_Usr
      	
      ], :ZF_Get_IdUnique())
      
      goApp.Rsql(sdRecherche,sReq)
      	
      HLitPremier(sdRecherche)
      si pas HEnDehors(sdRecherche) alors
      	si sdRecherche.NbProjets > 0 alors
      		bChefdeProjet = vrai
      	sinon
      		bChefdeProjet = faux
      	FIN
      fin
      
      HAnnuleDéclaration(sdRecherche)
      
      renvoyer bChefdeProjet
     type : 458752
   -
     name : User_Story_Dev_Prevu_Tout_Les_Projets_old
     procedure_id : 2202877392611506817
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] User_Story_Dev_Prevu_Tout_Les_Projets_old ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	tableau (STR_UserStorie) : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      FONCTION GLOBAL User_Story_Dev_Prevu_Tout_Les_Projets_old()
      
      aStUStableau est un tableau de STR_UserStorie
      
      stUSTableau est une STR_UserStorie
      nVelocite est un entier = goApp.m_nVelociteMoyenne
      pclSprint est un ClSprint dynamique
      oUs est un ClUserStory dynamique
      
      //bTacheSansPoids est un booleen
      bUsCommencee est un booléen = faux
      bUSAnnulee est un booleen = Faux
      //nNbTacheAnnulee est un entier
      
      sdRechercheUserStory est une source de données
      sReq est une chaîne
      
      sReq = ChaîneConstruit([
      	SELECT
      		MIN(Scr_Tache.Num_Sprint_Realisation) AS Sprint,
      		Scr_UserStory.IDScr_UserStory,
      		Scr_UserStory.JAiBesoinDe,
      		Scr_UserStory.Top_Termine,
      		Scr_UserStory.CodeUserStory,
      		Scr_Projet.Nom
      	
      	FROM Scr_Projet
      		INNER JOIN Scr_UserStory ON (Scr_Projet.IDScr_Projet = Scr_UserStory.IDScr_Projet)
      		INNER JOIN Scr_Tache ON (Scr_UserStory.IDScr_UserStory = Scr_Tache.IDScr_UserStory)
      	
      	
      	GROUP BY
      		Scr_UserStory.IDScr_UserStory,
      		Scr_UserStory.JAiBesoinDe,
      		Scr_UserStory.Top_Termine,
      		Scr_UserStory.CodeUserStory,
      		Scr_Projet.Nom
      	
      ])
      
      goApp.Rsql(sdRechercheUserStory,sReq)
      POUR TOUT sdRechercheUserStory 
      	stUSTableau.nIDUserStorie = sdRechercheUserStory.IDScr_UserStory
      	stUSTableau.sCodeUserStorie = sdRechercheUserStory.CodeUserStory
      	stUSTableau.sBesoinUserStorie = sdRechercheUserStory.JAiBesoinDe
      	stUSTableau.sProjet = sdRechercheUserStory.Nom
      	
      	stUSTableau.nSprint = sdRechercheUserStory.Sprint
      	//Si le sprint = 0 alors la clef prend la valeur 0, sinon elle prend la valeur - numSprint
      	SI stUSTableau.nSprint = 0 ALORS
      		stUSTableau.nOrdre = 999999999
      	SINON
      		stUSTableau.nOrdre = stUSTableau.nSprint
      	FIN
      	
      	pclSprint <- ClSprint.GetObj(sdRechercheUserStory.Sprint)
      	stUSTableau.sNPeriodeDeDemarage = pclSprint.sSprint_Date()
      	oUs <- ClUserStory.GetObj(sdRechercheUserStory.IDScr_UserStory)
      	stUSTableau = oUs.User_Story_Poids()
      	
      	
      	TableauAjoute(aStUStableau,stUSTableau)
      FIN
      
      HAnnuleDéclaration(sdRechercheUserStory)
      
      TableauTrie(aStUStableau,ttMembre,"nOrdre")
      
      RENVOYER aStUStableau 
     type : 458752
   -
     name : aoListeUsr
     procedure_id : 2202879295282330733
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] aoListeUsr ( [<eFiltre_p> est ClUsr.ETypeUsr])
      //
      // Paramètres :
      //	eFiltre_p (ClUsr.ETypeUsr) : <indiquez ici le rôle de eFiltre_p>
      
      // Valeur de retour :
      // 	ClColUsr : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      //	filtre_p (ClUsr.ETypeUsr) : <indiquez ici le rôle de filtre_p>
      //	filtre_p (ClUsr.ETypeUsr) : <indiquez ici le rôle de filtre_p>
      FONCTION GLOBAL aoListeUsr(eFiltre_p est un ETypeInter = ETypeInter.usr_tous):ClColUsr
      
      
      
      oRetour				est un ClColUsr
      //sdSource_Liste_Usr	est une Source de Données
      sReq_Liste_Usr		est une chaîne
      sWhere				est une chaîne
      
      selon eFiltre_p
      	CAS ETypeInter.usr_tous
      		sWhere = ""
      	CAS ETypeInter.usr_dev
      		sWhere = "WHERE Scr_Usr.Top_Equip_Informatique = 1"
      	CAS ETypeInter.usr_Fonc
      		sWhere = "WHERE Scr_Usr.Top_Equip_Informatique = 0"
      //		sWhere = [
      //		WHERE Scr_Usr.IDScr_Usr in (
      //			SELECT DISTINCT Scr_Usr_Projet.IDScr_Usr
      //			FROM Scr_Usr_Projet
      //			WHERE Scr_Usr_Projet.Top_Chef_Projet = 1
      //			)
      //		]
      FIN
      
      sReq_Liste_Usr = [
      	SELECT
      		Scr_Usr.*
      		--Scr_Usr.IDScr_Usr--,
      		--Scr_Usr.Nom
      	FROM Scr_Usr
      	
      	[%sWhere%]
      	
      	ORDER BY Scr_Usr.Nom
      ]
      
      oRetour.ZF_LoadSQL(sReq_Liste_Usr)
      
      renvoyer oRetour
     type : 458752
   -
     name : Combo_Charge_Usr
     procedure_id : 2205309103697796737
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //Combo_Charge_Usr (<sNomFen_p> est chaîne, <sNomChamps_p> est chaîne [, <eFiltre_p> est ClUsr.ETypeInter [, <oUsr_P> est ClUsr]])
      //
      // Paramètres :
      //	sNomFen_p (chaîne ANSI) : <indiquez ici le rôle de sNomFen_p>
      //	sNomChamps_p (chaîne ANSI) : <indiquez ici le rôle de sNomChamps_p>
      //	eFiltre_p (ClUsr.ETypeInter) : <indiquez ici le rôle de eFiltre_p>
      //	oUsr_P (ClUsr - valeur par défaut=0) : <indiquez ici le rôle de oUsr_P>
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      //	sNomFen_p (chaîne ANSI) : <indiquez ici le rôle de sNomFen_p>
      //	sNomChamps_p (chaîne ANSI) : <indiquez ici le rôle de sNomChamps_p>
      //	filtre_p (ClUsr.ETypeUsr) : <indiquez ici le rôle de filtre_p>
      // 	oUsr_P (ClUsr - valeur par défaut=0) : <indiquez ici le rôle de oUsr_P>
      PROCEDURE GLOBAL Combo_Charge_Usr(sNomFen_p est une chaîne , sNomChamps_p est une chaîne , eFiltre_p est un ETypeInter = ETypeInter.usr_tous, oUsr_P est ClUsr = Null):vide
      
      nNumLigneSel est un entier
      oUsr est un ClUsr dynamique
      sNomComplet est une chaîne = sNomFen_p + "." + sNomChamps_p
      
      ListeSupprimeTout(sNomComplet)
      ListeAjoute(sNomComplet, "<Aucun>" + gLien(0))
      
      pour tout element oUsr de ClUsr.aoListeUsr(eFiltre_p).aItems()
      	
      	ListeAjoute(sNomComplet, oUsr.m_sNom + glien(oUsr.ZF_Get_IdUnique()))
      	
      	si oUsr_P <> null _et_ oUsr.ZF_Get_IdUnique() = oUsr_P.ZF_Get_IdUnique() ALORS
      		nNumLigneSel = ListeOccurrence(sNomComplet)
      	FIN
      fin
      
      //Si l'utilisateur n'a pas été trouvé, on l'ajoute à la liste
      SI oUsr_P <> Null et nNumLigneSel = 0 ALORS
      	ListeAjoute(sNomComplet, oUsr_P.m_sNom + gLien(oUsr_P.ZF_Get_IdUnique()))
      	nNumLigneSel = ListeOccurrence(sNomComplet)
      FIN
      
      
      si nNumLigneSel >= 1 ALORS
      	ListeSelectPlus(sNomComplet,nNumLigneSel)
      sinon
      	ListeSelectPlus(sNomComplet,1)
      FIN
      
     type : 458752
   -
     name : oTaches_MesBrouillons
     procedure_id : 2205721558895358880
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] oTaches_MesBrouillons ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	ClColTaches : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      //	bForceCharge_p (booléen - valeur par défaut=0) : <indiquez ici le rôle de bForceCharge_p>
      FONCTION oTaches_MesBrouillons():ClColTaches
      
      //sdMesBrouillons est une Source de Données
      sReq est une chaîne
      oTaches est un ClColTaches
      
      	
      //Récupération des taches en brouillon, de l'utilisateur.
      sReq = [
      	SELECT
      		Scr_Tache.*
      		--Scr_Tache.IDScr_Tache
      	FROM Scr_Tache
      	WHERE Scr_Tache.Top_Brouillon = 1
      		AND Scr_Tache.IDScr_Usr_createur = [%:ZF_Get_IdUnique()%]	
      ]
      
      oTaches.ZF_LoadSQL(sReq)
      
      
      renvoyer oTaches
     type : 458752
   -
     name : aoMesUS_En_Test
     procedure_id : 2205752766154986971
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] aoMesUS_En_Test (<eTypeTest_P> est ClUsr.ETypeTest)
      //
      // Paramètres :
      //	eTypeTest_P (ClUsr.ETypeTest) : <indiquez ici le rôle de eTypeTest_P>
      // Valeur de retour :
      // 	ClColUserStory : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      //	bForceCharge_p (booléen - valeur par défaut=0) : <indiquez ici le rôle de bForceCharge_p>
      FONCTION aoMesUS_En_Test(eTypeTest_P est un ETypeTest):ClColUserStory
      
      sdMestests est une Source de Données
      sReq est une chaîne
      oUsEnDev est un ClColUserStory
      sWhere est une chaîne
      oUsTmp est un ClUserStory dynamique
      
      selon eTypeTest_P
      	CAS test_unitaire
      		
      		sWhere = ChaîneConstruit([
      		AND (
      			Scr_UserStory.IDScr_Usr_TestDev = %1
      			OR
      			Scr_UserStory.IDScr_Usr_TestDev IS NULL
      			)
      			AND Scr_UserStory.EstTesteParEquipeDev = 0
      		], :ZF_Get_IdUnique())
      		
      	CAS test_fonctionnel
      		
      		sWhere = ChaîneConstruit([
      		AND Scr_UserStory.IDScr_Usr_Valideur = %1
      		AND Scr_UserStory.EstTesteParEquipeDev = 1
      		AND Scr_UserStory.EstTesteParFonctionnel = 0
      		], :ZF_Get_IdUnique())
      		
      FIN
      
      
      sReq = [
      	SELECT 
      		Scr_UserStory.*
      		--Scr_UserStory.IDScr_UserStory
      	
      	FROM Scr_UserStory
      	where Scr_UserStory.IDScr_UserStory IN (
      		SELECT DISTINCT
      			Scr_UserStory.IDScr_UserStory
      		
      		FROM Scr_UserStory
      			LEFT OUTER JOIN Scr_Tache AS tmpTachesSignificatives ON (tmpTachesSignificatives.IDScr_UserStory = Scr_UserStory.IDScr_UserStory
      				AND tmpTachesSignificatives.Top_Realise = 0
      				AND tmpTachesSignificatives.Top_Annule = 0
      				AND tmpTachesSignificatives.Top_tache_tech = 0)
      				
      			LEFT OUTER JOIN Scr_Tache AS tmpTachesExiste ON (tmpTachesExiste.IDScr_UserStory = Scr_UserStory.IDScr_UserStory)
      		
      		WHERE Scr_UserStory.EstTesteParFonctionnel = 0
      			AND Scr_UserStory.Top_Termine = 0
      			AND tmpTachesSignificatives.IDScr_UserStory IS NULL		--On ne prend les US qui n'ont pas de taches non finies.
      			AND tmpTachesExiste.IDScr_UserStory IS NOT NULL			--On ne prend que les US qui ont au moins une tache
      			[%sWhere%]
      		)
      ]
      
      goApp.Rsql(sdMestests,sReq)
      POUR TOUT sdMestests
      	oUsTmp <- ClUserStory.GetObj(sdMestests.IDScr_UserStory)
      	si (oUsTmp.Get_NbreTache(ClUserStory.A_faire) + oUsTmp.Get_NbreTache(ClUserStory.EnCours)) = 0 ALORS
      		oUsEnDev.ZF_addItem(oUsTmp)
      	FIN
      FIN
      
      HAnnuleDéclaration(sdMestests)
      
      
      renvoyer oUsEnDev
     type : 458752
   -
     name : pre_enregistre
     procedure_id : 2214002873149516131
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //pre_enregistre ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE virtuelle pre_enregistre()
      
      
      si :ZF_Get_est_supprime() ALORS
      	
      	//verif si l'utilisateur n'est pas responsables de projets ou d'User Story, ou si il n'as pas posté de message
      	HLitRecherche(Scr_Usr_Projet,IDScr_Usr,:ZF_Get_IdUnique(),hIdentique+hLimiteParcours)
      	SI HTrouve(Scr_Usr_Projet) ALORS
      		mg_oEx_UsrReferenceParPrj.ZF_Declenche()
      //		ExceptionDéclenche(1, "Cet utilisateur est responsable ou invité d'un projet, impossible de le supprimer")
      	FIN
      	
      	HLitRecherche(Scr_UserStory,IDScr_Usr_Valideur,:ZF_Get_IdUnique(),hIdentique+hLimiteParcours)
      	SI HTrouve(Scr_UserStory) ALORS
      		mg_oEx_UsrReferenceParUS.ZF_Declenche()
      //		ExceptionDéclenche(1, "Cet utilisateur est responsable d'une User Story, impossible de le supprimer")
      	FIN
      	
      	HLitRecherche(Scr_Message,IDScr_Usr,:ZF_Get_IdUnique(),hIdentique+hLimiteParcours)
      	SI HTrouve(Scr_Message) ALORS
      		mg_oEx_UsrReferenceParMessage.ZF_Declenche()
      //		ExceptionDéclenche(1, "Cet utilisateur a posté au moins un message, impossible de le supprimer")
      	FIN
      	
      FIN
     type : 458752
   -
     name : GetObj
     procedure_id : 2241095093268415111
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] GetObj (<nIdUnique_P> est entier)
      //
      // Paramètres :
      //	nIdUnique_P (entier) : <indiquez ici le rôle de nIdUnique_P>
      
      // Valeur de retour :
      // 	ClUsr : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE globale GetObj(local nIdUnique_P est un entier):ClUsr
      
      renvoyer ClZF_ObjDB.ZF_GetObj("ClUsr", nIdUnique_P)
     type : 458752
   -
     name : sExport
     procedure_id : 1156426172301150652
     type_code : 12
     code : |1+
      procédure sExport():json
      
      sRetour est un json
      
      sRetour.id					= :ZF_Get_IdUnique()
      sRetour.name				= :m_snom
      sRetour.email				= :m_semail
      sRetour.login_ad			= :m_slogin_ad
      sRetour.depatement			= :m_sservice
      sRetour.is_team_info		= :m_btop_equip_informatique
      
      renvoyer sRetour
     type : 458752
   -
     name : Init_ObjBD
     procedure_id : 1422513878896693885
     type_code : 12
     code : |1+
      // Redéfinition de la méthode ClObjDB.ZF_Init_ObjBD
      PROCÉDURE  Init_ObjBD()
      
     type : 458752
  properties :
   -
     name : p_bTop_Equip_Informatique
     identifier : 0x1033ef14091f344d
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_bTop_Equip_Informatique() : booléen
         
         renvoyer :m_bTop_Equip_Informatique
        type : 1966080
      -
        code : |1-
         procédure publique p_bTop_Equip_Informatique(bValeur est un booléen)
         :ZF_EstModif()
         :m_bTop_Equip_Informatique=bValeur
        type : 2031616
     template_refs : []
   -
     name : p_sEMail
     identifier : 0x1033ef1b09205225
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_sEMail() : chaîne
         
         renvoyer :m_sEMail
        type : 1966080
      -
        code : |1-
         procédure publique p_sEMail(sValeur est une chaîne)
         :ZF_EstModif()
         :m_sEMail=sValeur
        type : 2031616
     template_refs : []
   -
     name : p_sLogin_AD
     identifier : 0x1033ef200921659e
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_sLogin_AD() : chaîne
         
         renvoyer :m_sLogin_AD
        type : 1966080
      -
        code : |1-
         procédure publique p_sLogin_AD(sValeur est une chaîne)
         :ZF_EstModif()
         :m_sLogin_AD=sValeur
        type : 2031616
     template_refs : []
   -
     name : p_sNom
     identifier : 0x1033ef2509227703
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_sNom() : chaîne
         
         renvoyer :m_sNom
        type : 1966080
      -
        code : |1-
         procédure publique p_sNom(sValeur est une chaîne)
         :ZF_EstModif()
         :m_sNom=sValeur
        type : 2031616
     template_refs : []
   -
     name : p_sService
     identifier : 0x1033ef2a09238ccd
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_sService() : chaîne
         
         renvoyer :m_sService
        type : 1966080
      -
        code : |1-
         procédure publique p_sService(sValeur est une chaîne)
         :ZF_EstModif()
         :m_sService=sValeur
        type : 2031616
     template_refs : []
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : BwAAAAcAAAA6ih3UbgNXHwTtiPSFUEj+2fi/m7v4QV2rqidAupM=
resources :
 string_res :
  identifier : 0x1e85d177205a7ea1
  internal_properties : BwAAAAcAAAAnMYFQ1bL/vz9ehh7L22SNNSlIzGTOI8h5F/WtgDNP
custom_note :
 internal_properties : BwAAAAcAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
