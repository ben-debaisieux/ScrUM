#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : ClDbTache
 major_version : 27
 minor_version : 0
 type : 4
 description : ""
 subtype : 0
class :
 identifier : 0x140d081e69784a45
 internal_properties : BwAAAAcAAAB2/vstTMCJbS/hlxjFxirSqKvCUuv8YxgpWyl7S3iA
 code_elements :
  internal_properties : BwAAAAcAAACmcEcPUOl8P88f4DqAteA6m/Mt111GGOClrNjaLJ9vO63bNEtdrqYoCCnjX1eG34p8AOi72Du5JSuppQ==
  type_code : 10
  p_codes :
   -
     code : |1+
      ClDbTache est une Classe
      	Hérite de ClZF_ObjDB
      	Hérite de ClZF_Histo
      	
      prive
      	m_sCodeTache				est une chaîne							<MAPPING=CodeTache>
      	m_sDescription				est une chaîne							<MAPPING=description>
      	m_nPoids					est un entier sur 2 octets				<MAPPING=Poids>
      	m_nOrdreSprint				est un Entier sans signe sur 1 octet	<MAPPING=OrdreSprint>
      	m_nPoids_Previsionnel		est un entier sur 2 octets				<MAPPING=Poids_previsionnel>
      	m_nOrdre					est un entier sur 2 octets				<MAPPING=Ordre>
      	m_bEstRealise				est un booléen							<MAPPING=Top_Realise>
      	m_bAnnule					est un booléen							<MAPPING=Top_Annule>
      	m_bBrouillon				est un booléen							<MAPPING=Top_Brouillon>
      	m_nStatut					est un entier							<MAPPING=Statut>
      	m_bTache_tech				est un booléen							<MAPPING=Top_Tache_tech>
      	m_sCMTR						est une chaîne							<MAPPING=CMTR>
      	m_sCMTR_Blocage				est une chaîne							<MAPPING=CMTR_Blocage>
      	m_nNumTicketIncident		est un entier							<MAPPING=NumTicketIncident>
      	m_nNum_Sprint_Creation		est un entier							<MAPPING=Num_Sprint_Creation>
      	m_nNum_Sprint_Demarrage		est un entier							<MAPPING=Num_Sprint_Demarrage>
      	m_nNum_Sprint_Realisation	est un entier							<MAPPING=Num_Sprint_Realisation>
      	m_nNum_Sprint_Previsionnel	est un entier							<MAPPING=Num_Sprint_Previsionnel>
      	m_nNum_Sprint_Fin			est un entier							<MAPPING=Num_Sprint_Fin>
      	
      	m_oUserStoryParent			est un objet ClDbUserStory dynamique	<note="mapping=IDScr_UserStory">
      	m_oUsr_Dev					est un objet ClDbUsr dynamique			<note="mapping=IDScr_Usr_Dev">
      	m_oUsr_createur				est un objet ClDbUsr dynamique			<note="mapping=IDScr_Usr_createur">
      global
      public
      	m_oExPbPoidTache					est un ClZF_Exception dynamique
      	m_oExPbPoidTachePrev				est un ClZF_Exception dynamique
      	m_oExPbSpDemarrageErreur			est un ClZF_Exception dynamique
      	m_oExPbSpRealErreur					est un ClZF_Exception dynamique
      	//	m_oExPbTacheDemrreeSansDev			est un ClZF_Exception dynamique
      	m_oExEnregSpFinSiPasRealise			est un ClZF_Exception dynamique
      	m_oExPbSpRealErreurFin				est un ClZF_Exception dynamique
      	m_oExPbSpDemarreErreurFin			est un ClZF_Exception dynamique
      	m_oExPbSpDemarreErreurSansDev		est un ClZF_Exception dynamique
      	m_oExErreurStatutTacheImpossible	est un ClZF_Exception dynamique
      	m_oExPbCodeDejaPris					est un ClZF_Exception dynamique
      	m_oExOrdreTachePbParam				est un ClZF_Exception dynamique
      	m_oExEnregUsParentAbsente			est un ClZF_Exception dynamique
      	mg_oExTacheFinieSansSprintDemarrage	est un ClZF_Exception dynamique
      
      FIN
      
      constante
      	cstPoidsEstimatifTacheNonCote		= 2
      	cstOffsetEstimatifTacheNonPlanif	= 3
      	
      	cstStatut_Brouillon					= 1
      	cstStatut_a_coter					= 2
      	cstStatut_a_faire					= 3
      	cstStatut_en_cours					= 4
      	cstStatut_realise					= 5
      	cstStatut_Annulee					= 6
      	cstStatut_Suspendu					= 7
      	
      	cstChangeOrdre_Premier				= 1
      	cstChangeOrdre_Precedent			= 2
      	cstChangeOrdre_Suivant				= 3
      	cstChangeOrdre_Dernier				= 4
      fin
      
      ETypeCharge est une énumération
      	Charge_réelle
      	Charge_prévisionelle
      	Charge_Fin
      	Charge_Demarre
      fin
      
      
      
      m_oExPbPoidTache			= allouer un ClZF_Exception("Valeur incorrecte, pour le poids de la tache")
      m_oExPbPoidTachePrev		= allouer un ClZF_Exception("Valeur incorrecte, pour le poids prévisionnel")
      //m_oExPbTacheDemrreeSansDev	= allouer un ClZF_Exception("Impossible de démarrer une tache, sans développeur associé.")
      m_oExEnregSpFinSiPasRealise	= allouer un ClZF_Exception("Impossible d'enregistrer un sprint de fin, sur une tache, qui n'est pas réalisée")
      m_oExPbSpDemarrageErreur	= allouer un  ClZF_Exception([
      	Enregistrement impossible (Tache : %3) :
      	Le sprint de démarrage (%2) ne peut pas être antérieur au sprint de création (%1)
      	])
      m_oExPbSpRealErreur = allouer un ClZF_Exception([
      	Enregistrement impossible (Tache : %3) :
      	Le sprint de réalisation (%2) ne peut pas être antérieur au sprint de création (%1)
      	])
      m_oExPbSpRealErreurFin = allouer ClZF_Exception([
      	Enregistrement impossible (Tache : %3) :
      	Le sprint de fin (%2) ne peut pas être antérieur au sprint de réalisation (%1)
      	])
      m_oExPbSpDemarreErreurFin = allouer un  ClZF_Exception([
      	Enregistrement impossible (Tache : %3) :
      	Le sprint de fin (%2) ne peut pas être antérieur au sprint de démarrage (%1)
      	])
      m_oExPbSpDemarreErreurSansDev = allouer ClZF_Exception([
      	Enregistrement impossible (Tache : %3) :
      	Impossible de démarrer une tache sans développeur associé.
      	])
      m_oExErreurStatutTacheImpossible = allouer un  ClZF_Exception("Identification du statut de la tache impossible : %1")
      m_oExPbCodeDejaPris = allouer un ClZF_Exception([
      	Enregistrement impossible :
      	Le code tache "%1" est déjà Utilise.
      	])
      m_oExOrdreTachePbParam = allouer un ClZF_Exception("Erreur de paramètre : %1")
      
      m_oExEnregUsParentAbsente = allouer un ClZF_Exception("Impossible d'enregistrer une taches sans user story associée.")
      
      mg_oExTacheFinieSansSprintDemarrage = allouer un ClZF_Exception("Impossible de finir la tache %1, sans sprint de démarrage.")
      
     type : 131072
  procedures :
   -
     name : Constructeur
     procedure_id : 1444819982168902228
     type_code : 27
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //Constructeur (<nId_P> est entier)
      //
      // Paramètres :
      //	nId_P (entier) : <indiquez ici le rôle de nId_P>
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      
      PROCEDURE Constructeur(LOCAL nId_P est un entier)
      
      ClZF_ObjDB.constructeur(Scr_Tache..nom, Scr_Tache.IDScr_Tache..Nom, nId_P)
      
      //:ZF_DefTimeOut(ClAppScrum.cstTimeOutProd, vrai)
     type : 589824
   -
     name : Destructeur
     procedure_id : 1444819982168967764
     type_code : 28
     code : |1-
      
      
      PROCEDURE Destructeur()
     type : 655360
   -
     name : pre_enregistre
     procedure_id : 1444819982169033300
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //pre_enregistre ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE VIRTUELLE pre_enregistre()<metier>:Vide
      
      
      SI :ZF_bEstsupprime() ALORS
      	//On supprime tous les historiques de la user story
      	goApp.EnregHistoBDD(objet)
      	
      	//Desenregistrement de la tache de l'US parente
      	ClColTache.oFromUserStory(:p_oUserStoryParent).ZF_Supp(objet)
      SINON
      	
      	//Initialisation de l'historisation.
      	:ZF_InitMemo()
      	
      	
      	//Maj du statut
      	si :m_nStatut <> ClDbTache.cstStatut_Suspendu alors
      		:m_nStatut = :get_statut_tache()
      		SI :m_nStatut = 0 ALORS
      			m_oExErreurStatutTacheImpossible.ZF_Declenche([:m_nStatut])
      		FIN
      	fin
      		
      	//Si l'ordre n'est pas définit, on ajoute la tache en dernier.
      	si :m_nOrdre <= 0 ALORS
      		trace("Pb ordre pour [%:m_sCodeTache%] : [%:m_nOrdre%]")
      	FIN
      	
      //	//Gestion de l'ordre de la tache dans le sprint de réalisation
      //	si :m_nNum_Sprint_Realisation > 0 ALORS
      //		si :m_nOrdreSprint <= 0 ou :m_nOrdreSprint <> Scr_Tache.OrdreSprint alors
      //			oSpr est un ClDbSprint dynamique	<- ClDbSprint.GetObj(:m_nNum_Sprint_Realisation)
      //			oColTache est un ClColTache			<- ClColTache.oFromSprint(oSpr, Charge_réelle)
      //			oColTache.ZF_addItem(objet)			//Ajoute la tache en cours à la collection (si elle ne l'est pas déja)
      //			:p_nOrdreSprint = oColTache.ZF_nTaille() + 1
      //		fin
      //	SINON
      //		:m_nOrdreSprint = 0
      //	FIN
      //	SI Scr_Tache.OrdreSprint > 0 ALORS
      //		SI :m_nOrdreSprint <> Scr_Tache.OrdreSprint ALORS
      //			oSpr		est un ClDbSprint dynamique	<- ClDbSprint.GetObj(Scr_Tache.OrdreSprint)
      //			oColTache	est un ClColTache			<- ClColTache.oFromSprint(oSpr, Charge_réelle)
      //			oColTache.ZF_Supp(objet)	//Ajoute la tache en cours à la collection (si elle ne l'est pas déja)
      //			oColTache.ZF_EnrPos("p_nOrdreSprint", objet)
      //		FIN
      //	FIN
      		
      	
      	
      	si :m_nNum_Sprint_Creation > :m_nNum_Sprint_Demarrage et :m_nNum_Sprint_Demarrage <> 0 alors
      		m_oExPbSpDemarrageErreur.ZF_Declenche([:m_nNum_Sprint_Creation, :m_nNum_Sprint_Demarrage, :m_sCodeTache])
      	FIN
      	
      	si :m_nNum_Sprint_Creation > :m_nNum_Sprint_Realisation ET :m_nNum_Sprint_Realisation <> 0 alors
      		m_oExPbSpRealErreur.ZF_Declenche([:m_nNum_Sprint_Creation, :m_nNum_Sprint_Realisation, :m_sCodeTache])
      	FIN
      	
      	si :m_nNum_Sprint_Realisation > :m_nNum_Sprint_Fin ET :m_nNum_Sprint_Fin <> 0 et pas :m_bAnnule alors
      		m_oExPbSpRealErreurFin.ZF_Declenche([:m_nNum_Sprint_Realisation, :m_nNum_Sprint_Fin, :m_sCodeTache])
      	FIN
      	
      	si :m_nNum_Sprint_Demarrage > :m_nNum_Sprint_Fin ET :m_nNum_Sprint_Fin <> 0 et pas :m_bAnnule alors
      		m_oExPbSpDemarreErreurFin.ZF_Declenche([:m_nNum_Sprint_Demarrage, :m_nNum_Sprint_Fin, :m_sCodeTache])
      	FIN
      	
      	si :m_nNum_Sprint_Demarrage <> 0 et :m_oUsr_Dev = null ALORS
      		m_oExPbSpDemarreErreurSansDev.ZF_Declenche([:m_sCodeTache])
      	FIN
      	
      	SI :m_nNum_Sprint_Demarrage = 0 ET :m_bEstRealise ALORS
      		mg_oExTacheFinieSansSprintDemarrage.ZF_Declenche([:m_sCodeTache])
      	FIN
      	
      	SI :m_oUserStoryParent = Null ALORS
      		m_oExEnregUsParentAbsente.ZF_Declenche()
      	FIN
      	
      	//En création ou en modification, son s'assure que le code article n'est pas pris.
      	si :ZF_bModeAjout() _ou_ :ZF_bRubEstModifiee(Scr_Tache.CodeTache..nom, :m_sCodeTache) ALORS
      		si pas :bCodeTacheDispo(:m_sCodeTache) ALORS
      			m_oExPbCodeDejaPris.ZF_Declenche([:m_sCodeTache])
      		FIN
      	FIN
      	
      //	SI PAS :m_nStatut DANS (::cstStatut_Suspendu) ALORS
      //		:m_nStatut = :get_statut_tache()
      //	FIN
      	
      	//Enregistrement du sprint de fin
      	SI :m_nNum_Sprint_Fin <> 0 et PAS :m_bAnnule ALORS
      		//Si on a un sprint de fin, les taches doivent êtres réalisées
      		SI PAS :m_bEstRealise ALORS
      			m_oExEnregSpFinSiPasRealise.ZF_Declenche()
      		FIN
      	FIN
      	
      	////////////////////////////////////////////////
      	//Historisation de modifications
      	:ZF_InitMemo()
      	
      	SI :ZF_bModeAjout() ALORS
      		:ZF_SetMsgHisto("Création de la tache")
      		//:AjouteHistorique("Création de la tache")
      	SINON
      		
      		//User story parente
      		:ZF_HistoriseInfo("Changement d'user story",Scr_Tache.IDScr_Tache..nom,m_oUserStoryParent.ZF_Get_IdUnique())
      //		si m_EnrOrigine.IDScr_UserStory <> :m_oUserStoryParent.ZF_Get_IdUnique() ALORS
      //			:AjouteHistorique("Changement d'user story")
      //		FIN
      		
      		//Ordre
      		:ZF_HistoriseInfo("Changement de l'ordre de la tache. Nouvelle position : %1", Scr_Tache.Ordre..Nom, :m_nOrdre)
      //		si m_EnrOrigine.Ordre <> :m_nOrdre ALORS
      //			:AjouteHistorique(ChaîneConstruit("Changement de l'ordre de la tache : nouvelle position : %1", :m_nOrdre))
      //		FIN
      		
      		//Description de la tache
      		:ZF_HistoriseInfo([
      			Changement de la description de la tache :
      			%1
      		], Scr_Tache.Description..Nom, :m_sDescription)
      //		si m_EnrOrigine.Description <> :m_sDescription ALORS
      //			:AjouteHistorique(ChaîneConstruit([
      //			Changement de la description de la tache :
      //			%1
      //			], :m_sDescription))
      //		FIN
      		
      		//Attribut brouillon
      		si ZF_bRubEstModifiee(Scr_Tache.Top_Brouillon..Nom, :m_bBrouillon) ALORS
      //		si m_EnrOrigine.Top_Brouillon <> :m_bBrouillon ALORS
      			si :m_bBrouillon ALORS
      				:ZF_SetMsgHisto("La tache est devenue un brouillon")
      //				:AjouteHistorique("La tache est devenue un brouillon")
      			sinon
      				:ZF_SetMsgHisto("La tache n'est plus un brouillon")
      //				:AjouteHistorique("La tache n'est plus un brouillon")
      			FIN
      		FIN
      		
      		//Attribut tache technique
      		SI ZF_bRubEstModifiee(Scr_Tache.Top_tache_tech..Nom, :m_bBrouillon) ALORS
      //		si m_EnrOrigine.Top_tache_tech <> :m_btache_tech ALORS
      			si :m_btache_tech ALORS
      				:ZF_SetMsgHisto("La tache est devenue une tache technique")
      //				:AjouteHistorique("La tache est devenue une tache technique")
      			sinon
      				:ZF_SetMsgHisto("La tache n'est plus une tache technique")
      //				:AjouteHistorique("La tache n'est plus une tache technique")
      			FIN
      		FIN
      		
      		//Attribut annulé
      		SI ZF_bRubEstModifiee(Scr_Tache.Top_Annule..Nom, :m_bAnnule) ALORS
      //		si m_EnrOrigine.Top_Annule <> :m_bAnnule ALORS
      			si :m_bAnnule ALORS
      				:ZF_SetMsgHisto("La tache est annulée")
      //				:AjouteHistorique("La tache est annulée")
      			sinon
      				:ZF_SetMsgHisto("La tache n'est plus annulée")
      //				:AjouteHistorique("La tache n'est plus annulée")
      			FIN
      		FIN
      		
      		//Sprint de réalisation
      		:ZF_HistoriseInfo("Modification du sprint de réalisation : %1",Scr_Tache.Num_Sprint_Realisation..Nom, :m_nNum_Sprint_Realisation)
      //		si m_EnrOrigine.Num_Sprint_Realisation <> :m_nNum_Sprint_Realisation ALORS
      //			:AjouteHistorique(ChaîneConstruit("Modification du sprint de réalisation : %1", ...
      //				:m_nNum_Sprint_Realisation))
      //		FIN
      		
      		//Poids de la tache.
      		:ZF_HistoriseInfo("Modification du poids de la tache : %1",Scr_Tache.Poids..Nom, :m_nPoids)
      //		si m_EnrOrigine.Poids <> :m_nPoids ALORS
      //			:AjouteHistorique(ChaîneConstruit("Modification du poids de la tache : %1", :m_nPoids))
      //		FIN
      		
      		//Sprint prévisionnel
      		:ZF_HistoriseInfo("Changement du sprint prévisionnel : %1",Scr_Tache.Num_Sprint_Previsionnel..Nom, :m_nNum_Sprint_Previsionnel)
      //		si m_EnrOrigine.Num_Sprint_Previsionnel <> :m_nNum_Sprint_Previsionnel ALORS
      //			:AjouteHistorique(ChaîneConstruit("Changement du sprint prévisionnel : %1", :m_nNum_Sprint_Previsionnel))
      //		FIN
      		
      		//Poids prévisionnel de la tache.
      		:ZF_HistoriseInfo("Modification du poids prévisionnel de la tache : %1",Scr_Tache.Poids_Previsionnel..Nom, :m_nPoids_Previsionnel)
      //		si m_EnrOrigine.Poids_Previsionnel <> :m_nPoids_Previsionnel ALORS
      //			:AjouteHistorique(ChaîneConstruit("Modification du poids prévisionnel de la tache : %1",...
      //				:m_nPoids_Previsionnel))
      //		FIN
      		
      		//Sprint de démarrage
      		:ZF_HistoriseInfo("Changement du sprint de démarrage : %1",Scr_Tache.Num_Sprint_Demarrage..Nom, :m_nNum_Sprint_Demarrage)
      //		SI m_EnrOrigine.Num_Sprint_Demarrage <> :m_nNum_Sprint_Demarrage ALORS
      //			:AjouteHistorique(ChaîneConstruit("Changement du sprint de démarrage : %1", :m_nNum_Sprint_Demarrage))
      //		FIN
      		
      		:ZF_HistoriseInfo([
      			Modification du commentaire :
      			%1
      			], Scr_Tache.CMTR..Nom, :m_sCMTR)
      //		si m_EnrOrigine.CMTR <> :m_sCMTR ALORS
      //			:AjouteHistorique(ChaîneConstruit([
      //			Modification du commentaire :
      //			%1
      //			], :m_sCMTR))
      //		FIN
      		
      		//N° de ticket incident
      		:ZF_HistoriseInfo("Changement du N° de ticket d'incident : %1", Scr_Tache.NumTicketIncident..Nom, :m_nNumTicketIncident)
      //		si m_EnrOrigine.NumTicketIncident <> :m_nNumTicketIncident ALORS
      //			:AjouteHistorique(ChaîneConstruit("Changement du N° de ticket d'incident : %1", :m_nNumTicketIncident))
      //		FIN
      		
      		//Développeur associé à la tache.
      		si :ZF_bRubEstModifiee(Scr_Tache.IDScr_Usr_Dev..nom, :ZF_IdSiNonNull(:m_oUsr_Dev)) ALORS
      			SI :m_oUsr_Dev = Null ALORS
      				:ZF_SetMsgHisto("Retrait du développeur, sur la tache.")
      			SINON
      				:ZF_SetMsgHisto(ChaîneConstruit("Changement du développeur : %1", :m_oUsr_Dev.p_sNom))
      			FIN
      		FIN
      //		si :m_oUsr_Dev = null alors
      //			SI m_EnrOrigine.IDScr_Usr_Dev <> 0 ALORS
      //				:AjouteHistorique("Retrait du développeur, sur la tache.")
      //			FIN
      //		sinon
      //			si m_EnrOrigine.IDScr_Usr_Dev <> :m_oUsr_Dev.ZF_Get_IdUnique() ALORS
      //				:AjouteHistorique(ChaîneConstruit("Changement du développeur : %1", :m_oUsr_Dev.p_sNom))
      //			FIN
      //		FIN
      	fin
      fin
     type : 458752
   -
     name : Controle_Poids
     procedure_id : 1444819982169098836
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] Controle_Poids (<nPoids_p> est entier)
      //
      // Paramètres :
      //	nPoids_p (entier) : <indiquez ici le rôle de nPoids_p>
      // Valeur de retour :
      // 	booléen : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      FONCTION GLOBAL Controle_Poids(LOCAL nPoids_p est un entier)<metier>:booléen
      
      bPoidsValide est un booléen
      
      aValeurAcepte est un tableau d'entier = [0,1,2,3,5,8,13,20]
      nIndice est un entier 
      
      nIndice = TableauCherche(aValeurAcepte,tcDichotomique,nPoids_p)
      
      si nIndice = -1 alors
      	bPoidsValide = faux
      sinon
      	bPoidsValide = vrai
      FIN
      
      renvoyer bPoidsValide
      
      
     type : 458752
   -
     name : Charge_Totale
     procedure_id : 1444819982169164372
     type_code : 12
     code : |1-
      // Résumé : Compte le nb de points de tout les projet confondus et de tout les sprints
      // Syntaxe :
      //[ <Résultat> = ] Charge_Totale ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	entier : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      FONCTION GLOBAL Charge_Totale()<metier>:entier
      
      nTotal est un entier
      
      sdChargeTotale est une source de données
      sReq est une chaîne
      
      sReq = [
      	SELECT SUM(Scr_Tache.Poids) AS Total
      	FROM Scr_Tache
      	WHERE Scr_Tache.Top_Annule = 0
      		AND Scr_Tache.Top_Brouillon = 0
      ]
      
      ::mg_oApp.Rsql(sdChargeTotale,sReq)
      HLitPremier(sdChargeTotale,hSansRafraîchir)
      si Htrouve(sdChargeTotale) alors
      	nTotal = sdChargeTotale.Total
      sinon
      	nTotal = 0
      FIN
      
      HAnnuleDéclaration(sdChargeTotale)
      
      renvoyer nTotal
     type : 458752
   -
     name : sBulleTache
     procedure_id : 1444819982169295444
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] sBulleTache ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	chaîne ANSI : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE sBulleTache()<metier>:chaine
      
      sComBlocage est une chaîne = :m_sCMTR
      
      si m_nStatut = ClDbTache.cstStatut_Suspendu ALORS
      	sComBlocage += rc + RC + [
      	Commentaire de blocage :
      	[%:m_sCMTR_Blocage%]
      	]
      FIN
      
      renvoyer [
      	Projet : [%:m_oUserStoryParent.p_oIDScr_Projet.p_sNom%]
      	-------------------------------------------------
      	En tant que : [%:m_oUserStoryParent.p_sEntantQue%]
      	J'ai besoin de : [%:m_oUserStoryParent.p_sJaiBesoinDe%]
      	Afin de : [%:m_oUserStoryParent.p_sAfinDe%]
      	Valeur Business : [%:m_oUserStoryParent.p_nValeurBusiness%]
      	-------------------------------------------------
      	[%:m_sCodeTache%]
      	[%:m_sDescription%]
      	
      	Sprint : [%:m_nNum_Sprint_Realisation%]
      	Poids : [%:m_nPoids%]
      	-------------------------------------------------
      	Commentaire :
      	[%sComBlocage%]
      	]
     type : 458752
   -
     name : bEstDemarree
     procedure_id : 1444819982169360980
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] bEstDemarree ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	booléen : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE bEstDemarree()<metier>:booléen
      renvoyer pas (:m_oUsr_Dev = null)
     type : 458752
   -
     name : GetObj
     procedure_id : 1444819982169426516
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] GetObj (<nIdUnique_P> est entier)
      //
      // Paramètres :
      //	nIdUnique_P (entier) : <indiquez ici le rôle de nIdUnique_P>
      // Valeur de retour :
      // 	ClTache : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE globale GetObj(local nIdUnique_P est un entier)<metier>:ClDbTache
      sClasse est une chaine = ClDbTache
      RENVOYER ClZF_ObjDB.ZF_GetObj(sClasse, nIdUnique_P)
     type : 458752
   -
     name : post_enregistre
     procedure_id : 1444819982169492052
     type_code : 12
     code : |1-
      // Redéfinition de la méthode ClObjDB.post_enregistre
      PROCÉDURE PROTÉGÉE VIRTUELLE post_enregistre()<metier>:Vide
      
      
      //Recalcul de l'état de l'US parente
      oUsParente est un ClDbUserStory <- :m_oUserStoryParent
      oUsParente:RecalcEtatUS()
      si oUsParente.zf_bestmodifie() ALORS
      	si oUsParente.p_dDateMiseEnProd = ""
      		oUsParente.p_bTop_A_Livrer = vrai
      	fin
      	
      	oUsParente.ZF_Enregistre()
      FIN
      
      
      //Enregistrement de l'historique des modifications
      //:EnregHisto()
     type : 458752
   -
     name : Get_IdUnique
     procedure_id : 1444819982169557588
     type_code : 12
     code : |1-
      // Redéfinition de la méthode ClObjDB.Get_IdUnique
      FONCTION Get_IdUnique()<metier>:entier
      
      //redéfinition obligatoire à cause de la déclaration 'abstraite' de la méthode, dans la classe d'historique
      RENVOYER ClZF_ObjDB.ZF_Get_IdUnique()
     type : 458752
   -
     name : bCotationAFaire
     procedure_id : 1444819982169623124
     type_code : 12
     code : |1-
      procédure bCotationAFaire()<metier>:booléen
      
      bRetour est un booléen
      
      si :m_nPoids = 0 et :m_nPoids_Previsionnel <> 0 et :m_bAnnule = faux ET :m_bBrouillon = Faux ALORS
      	bRetour = vrai
      FIN
      
      renvoyer bRetour
     type : 458752
   -
     name : get_statut_tache
     procedure_id : 1444819982169688660
     type_code : 12
     code : |1-
      procédure get_statut_tache()<metier>:entier
      
      nRetour est un entier
      bUsTermine est un booléen
      
      si :m_bBrouillon ALORS
      	nRetour = ::cstStatut_Brouillon
      sinon
      	si :m_bAnnule ALORS
      		nRetour = ::cstStatut_Annulee
      	sinon
      		si :bCotationAFaire() ALORS
      			nRetour = ::cstStatut_a_coter
      		sinon
      			
      			//On vérifie si l'US parente est terminée ou non.
      			bUsTermine = faux
      			si :m_oUserStoryParent <> Null ALORS
      				si :m_oUserStoryParent.p_bTermine ALORS
      					bUsTermine = vrai
      				FIN
      			FIN
      			
      			SI :m_nNum_Sprint_Fin <> 0 ou :m_bEstRealise ou bUsTermine ALORS
      				nRetour = ::cstStatut_realise
      			SINON
      				si :m_nNum_Sprint_Demarrage <> 0 ALORS
      					nRetour = ::cstStatut_en_cours
      				SINON
      					nRetour = ::cstStatut_a_faire
      				fin
      			FIN
      		FIN
      	FIN
      FIN
      
      renvoyer nRetour
     type : 458752
   -
     name : GetObj_de_code
     procedure_id : 1444819982169754196
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] GetObj_de_code (<nIdUnique_P> est entier)
      //
      // Paramètres :
      //	nIdUnique_P (entier) : <indiquez ici le rôle de nIdUnique_P>
      // Valeur de retour :
      // 	ClTache : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE globale GetObj_de_code(local sCode_P est une chaîne)<metier>:ClDbTache
      
      oColTache est un ClColTache
      sReq est une chaine = [
      SELECT
      	Scr_Tache.*
      FROM Scr_Tache
      WHERE Scr_Tache.CodeTache = '[%sCode_P%]'
      ]
      oColTache.ZF_LoadSQL(sReq)
      si oColTache.zf_ntaille() = 1 ALORS
      	renvoyer oColTache.oItem(1)
      sinon
      	renvoyer null
      FIN
      
      //HLitRecherche(Scr_Tache,CodeTache,sCode_P,hIdentique+hLimiteParcours)
      //si HTrouve(Scr_Tache) ALORS
      //	sClasse est une chaine = ClDbTache
      //	RENVOYER ClZF_ObjDB.ZF_GetObj(sClasse, Scr_Tache.IDScr_Tache)
      //sinon
      //	RENVOYER null
      //FIN
     type : 458752
   -
     name : bEstValidee
     procedure_id : 1444819982169950804
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] bEstValidee ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	booléen : // 	Aucune
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE bEstValidee()<metier>:booléen
      renvoyer (:m_nNum_Sprint_Fin <> 0 et :m_bEstRealise)
      
     type : 458752
   -
     name : sStatut
     procedure_id : 1444819982170016340
     type_code : 12
     code : |1+
      procédure sStatut()<metier>:chaine
      
      si :m_nStatut = 0 ALORS
      	:m_nStatut = get_statut_tache()
      	trace("Etat à '0' : " + :m_sCodeTache)
      FIN
      renvoyer sLibDeStatut(:m_nStatut)
     type : 458752
   -
     name : sLibDeStatut
     procedure_id : 1612405116063064014
     type_code : 12
     code : |1-
      procedure globale sLibDeStatut(local nStatut_p est un entier)<metier>:chaine
      
      sRetour est une chaîne 
      
      SELON nStatut_p
      	CAS ::cstStatut_Brouillon
      		sRetour = "Brouillon"
      	CAS ::cstStatut_a_coter
      		sRetour = "A coter"
      	CAS ::cstStatut_a_faire
      		sRetour = "A faire"
      	CAS ::cstStatut_en_cours
      		sRetour = "En cours"
      	CAS ::cstStatut_realise
      		sRetour = "Réalisé"
      	CAS ::cstStatut_Annulee
      		sRetour = "Annulée"
      	CAS ::cstStatut_Suspendu
      		sRetour = "Suspendue"
      	AUTRE CAS
      		//ExceptionDéclenche(1, "Statut non prévu")
      		m_oExErreurStatutTacheImpossible.ZF_Declenche([nStatut_p])
      FIN
      renvoyer sRetour
     type : 458752
   -
     name : bCodeTacheDispo
     procedure_id : 1444819982170081876
     type_code : 12
     code : |1-
      procédure privée bCodeTacheDispo(LOCAL sCodeTache_P est une chaîne)<metier>:booléen
      
      
      sdRechCodeTache est une Source de Données
      sReq est une chaîne
      bRetour est un booléen
      
      sReq = ChaîneConstruit([
      	
      	SELECT
      		COUNT(*) as Nbre
      	
      	FROM Scr_Tache
      	
      	WHERE Scr_Tache.CodeTache = '%1'
      		AND Scr_Tache.IDScr_Tache <> %2
      	
      ], sCodeTache_P, :Get_IdUnique())
      
      ::mg_oApp.RSQL(sdRechCodeTache,sReq)
      
      HLitPremier(sdRechCodeTache)
      si pas HEnDehors(sdRechCodeTache) ALORS
      	
      	bRetour = (sdRechCodeTache.Nbre = 0)
      	
      FIN
      	
      HAnnuleDéclaration(sdRechCodeTache)
      
      
      
      renvoyer bRetour
     type : 458752
   -
     name : changeOrdre
     procedure_id : 1444819982170147412
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //changeOrdre (<oTache_p> est ClDbTache, <nChangePos_P> est entier)
      //
      // Paramètres :
      //	oTache_p (ClDbTache) : <indiquez ici le rôle de oTache_p>
      //	nChangePos_P (entier) : <indiquez ici le rôle de nChangePos_P>
      // Valeur de retour :
      // 	Aucune
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure globale changeOrdre(oTache_p est un ClDbTache, nChangePos_P est un entier)<metier,zombie>:Vide
      
      nPosInit		est un entier
      nNouvPos		est un entier
      nNbPos			est un entier
      oLstTachesUS	est un ClColTache	= ClColTache.oFromUserStory(oTache_p.p_oUserStoryParent)
      oTacheTmp		est un ClDbTache dynamique
      bModifTache		est un booléen
      nDecalage		est un entier
      
      nPosInit	= oTache_p.p_nOrdre
      nNbPos		= oLstTachesUS.ZF_nTaille()
      
      selon nChangePos_P
      	cas cstChangeOrdre_Premier
      		nNouvPos = 1
      		nDecalage = 1
      	CAS cstChangeOrdre_Precedent
      		nNouvPos = max(1, nPosInit - 1)
      		nDecalage = 1
      	CAS cstChangeOrdre_Suivant
      		nNouvPos = Min(nNbPos, nPosInit + 1)
      		nDecalage = -1
      	CAS cstChangeOrdre_Dernier
      		nNouvPos = nNbPos
      		nDecalage = -1
      	autres cas:
      		m_oExOrdreTachePbParam.ZF_Declenche([nChangePos_P])
      fin
      
      
      pour tout element oTacheTmp de oLstTachesUS.aItems()
      	bModifTache = faux
      	
      	//Est on sur une autre tache que moimeme ?
      	si oTacheTmp.Get_IdUnique() <> oTache_p.Get_IdUnique() alors
      		//Oui :
      		
      		si min(nPosInit, nNouvPos) <= oTacheTmp.p_nOrdre <= Max(nPosInit, nNouvPos) alors
      			oTacheTmp.p_nOrdre += nDecalage
      			oTacheTmp.ZF_Enregistre()
      		FIN
      	FIN
      FIN
      
      oTache_p.p_nOrdre = nNouvPos
      oTache_p.ZF_Enregistre()
     type : 458752
   -
     name : Init_ObjBD
     procedure_id : 1444819982170212948
     type_code : 12
     code : |1+
      // Redéfinition de la méthode ClObjDB.ZF_Init_ObjBD
      PROCÉDURE Init_ObjBD()<metier>:vide
      
      si pas :ZF_bModeAjout() alors
      //	SI PAS Scr_Tache.IDScr_Usr_createur..Null ALORS
      //		:m_oUsr_createur			<- ClDbUsr.GetObj(Scr_Tache.IDScr_Usr_createur)
      //	FIN
      //	
      //	SI PAS Scr_Tache.IDScr_UserStory..Null ALORS
      //		:m_oUserStoryParent			<- ClDbUserStory.GetObj(Scr_Tache.IDScr_UserStory)
      //	FIN
      //	
      //	SI PAS Scr_Tache.IDScr_Usr_Dev..Null ALORS
      //		:m_oUsr_Dev					<- ClDbUsr.GetObj(Scr_Tache.IDScr_Usr_Dev)
      //	FIN
      FIN
     type : 458752
   -
     name : ZF_Get_IdUnique
     procedure_id : 1477443749167823929
     type_code : 12
     code : |1+
      // Redéfinition de la méthode ClZF_ObjDbLs.ZF_Get_IdUnique
      FONCTION ZF_Get_IdUnique()<métier>:entier
      //redéfinition obligatoire à cause de la déclaration 'abstraite' de la méthode, dans la classe d'historique
      RENVOYER ClZF_ObjDB.ZF_Get_IdUnique()
      
     type : 458752
   -
     name : TraiteHisto
     procedure_id : 1500636142835431234
     type_code : 12
     code : |1-
      // Redéfinition de la méthode ClHistorique.TraiteHisto
      PROCÉDURE  TraiteHisto()<métier>:Vide
      
      //a faire
     type : 458752
   -
     name : pre_enregistre_data
     procedure_id : 1500636172905387010
     type_code : 12
     code : |1-
      // Redéfinition de la méthode ClZF_ObjDB.pre_enregistre_data
      PROCÉDURE PROTÉGÉE pre_enregistre_data()<metier>:vide
      
      
      
      
      //Enregistrement du sprint de démarrage.
      SI :m_nNum_Sprint_Demarrage = 0 ALORS
      	Scr_Tache.Num_Sprint_Demarrage..Null	= Vrai
      FIN
      
      //Si on a pas de sprint prévisionnel, on s'aligne sur le sprint de démarrage.
      SI :m_nNum_Sprint_Previsionnel = 0 ALORS
      	:m_nNum_Sprint_Previsionnel				= :m_nNum_Sprint_Realisation
      FIN
      
      SI :m_nNum_Sprint_Previsionnel = 0 ALORS
      	Scr_Tache.Num_Sprint_Previsionnel..Null	= Vrai
      FIN
      
      //Enregistrement du sprint de réalisation
      SI :m_nNum_Sprint_Realisation = 0 ALORS
      	Scr_Tache.Num_Sprint_Realisation..Null	= Vrai
      FIN
      
      
      //Enregistrement du sprint de fin
      SI :m_nNum_Sprint_Fin = 0 ALORS
      	Scr_Tache.Num_Sprint_Fin..Null			= Vrai
      FIN
      
      si Scr_Tache.Statut = 0 ALORS
      	stop
      FIN
     type : 458752
   -
     name : ZF_Charge
     procedure_id : 1546100837482625184
     type_code : 12
     code : |1+
      // Redéfinition de la méthode ClZF_ObjDB.ZF_Charge
      PROCÉDURE PROTÉGÉE ZF_Charge(bSansRechargement_P est un booléen = Faux)<métier>:Vide
      ClZF_ObjDB.ZF_Charge(bSansRechargement_P)
     type : 458752
   -
     name : ZF_sNomTable
     procedure_id : 1546100876140093047
     type_code : 12
     code : |1+
      // Redéfinition de la méthode ClZF_ObjDbLs.ZF_sNomTable
      PROCÉDURE VIRTUELLE ZF_sNomTable() <métier>:chaîne
      renvoyer ClZF_ObjDB.ZF_sNomTable()
     type : 458752
   -
     name : setCallBackostEnreg
     procedure_id : 1546103362973200533
     type_code : 12
     code : |1-
      PROCÉDURE PRIVÉ setCallBackostEnreg()<métier>:Vide
      :m_procCallPostEnreg = goApp.EnregHistoBDD
     type : 458752
   -
     name : sGetNextNumTache
     procedure_id : 1599066511029000056
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] sGetNextNumTache (<oUS_p> est ClDbUserStory)
      //
      // Paramètres :
      //	oUS_p (ClDbUserStory) : <indiquez ici le rôle de oPrj_p>
      
      // Valeur de retour :
      // 	chaîne ANSI : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure sGetNextNumTache(oUS_p est un ClDbUserStory)<métier>:chaine
      
      sRetour			est une chaîne
      sPrefixe		est une chaîne	= oUS_p.p_sCodeUserStory
      sSufixe			est une chaîne
      sdCodesTaches	est une Source de Données
      sReq			est une chaîne
      
      sReq = [
      select top 1
      
      	Scr_Tache.CodeTache
      
      
      from Scr_Tache
      	INNER JOIN Scr_UserStory on (Scr_UserStory.IDScr_UserStory = Scr_Tache.IDScr_UserStory)
      
      
      where Scr_Tache.CodeTache like '[%sPrefixe%]]%'
      	--and SUBSTRING(Scr_Tache.CodeTache, [%(taille(sPrefixe) + 1) %], 1) between '0' and '9'
      
      order by Scr_Tache.CodeTache desc
      ]
      goapp.RSQL(sdCodesTaches,sReq)
      HLitPremier(sdCodesTaches, hSansRafraîchir)
      si HEnDehors(sdCodesTaches) alors
      	sSufixe = "a"
      sinon
      	sSufixe = droite(sdCodesTaches.CodeTache,1)
      	sSufixe = caract(Asc(sSufixe) + 1)
      FIN
      HAnnuleDéclaration(sdCodesTaches)
      
      sRetour = sPrefixe + sSufixe
      
      renvoyer sRetour
      
     type : 458752
  properties :
   -
     name : p_oUsr_Dev
     identifier : 0x140d081e69794a54
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_oUsr_Dev()<metier> : ClDbUsr
         
         renvoyer :m_oUsr_Dev
        type : 1966080
      -
        code : |1-
         procédure publique p_oUsr_Dev(oValeur est ClDbUsr)<metier>:Vide
         
         si PAS ZF_bObjEgal(:m_oUsr_Dev, oValeur) alors
         	:ZF_EstModif()
         	:m_oUsr_Dev <- oValeur
         fin
        type : 2031616
     template_refs : []
   -
     name : p_oUserStoryParent
     identifier : 0x140d081e697a4a54
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_oUserStoryParent()<metier> : ClDbUserStory
         
         renvoyer :m_oUserStoryParent
        type : 1966080
      -
        code : |1-
         procédure publique p_oUserStoryParent(oValeur est ClDbUserStory)<metier>:Vide
         
         si PAS ZF_bObjEgal(:m_oUserStoryParent, oValeur) alors
         	:ZF_EstModif()
         	:m_oUserStoryParent <- oValeur
         	
         	
         //	:p_sCodeTache = :sGetNextNumTache(oValeur)
         	
         fin
        type : 2031616
     template_refs : []
   -
     name : p_oUsr_createur
     identifier : 0x140d081e697b4a54
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_oUsr_createur()<metier> : ClDbUsr
         
         renvoyer :m_oUsr_createur
        type : 1966080
      -
        code : |1+
         procédure publique p_oUsr_createur(oValeur est ClDbUsr)<metier>:Vide
         
         si PAS ZF_bObjEgal(:m_oUsr_createur, oValeur) ALORS
         	:ZF_EstModif()
         	:m_oUsr_createur <- oValeur
         FIN
        type : 2031616
     template_refs : []
   -
     name : p_bAnnule
     identifier : 0x140d081e697c4a54
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_bAnnule() <metier>: booléen
         
         renvoyer :m_bAnnule
        type : 1966080
      -
        code : |1-
         procédure publique p_bAnnule(bValeur est un booléen)<metier>:Vide
         
         si :m_bAnnule <> bValeur alors
         	:ZF_EstModif()
         	
         	:m_bAnnule = bValeur
         	:m_nStatut = ::cstStatut_Annulee
         fin
        type : 2031616
     template_refs : []
   -
     name : p_bBrouillon
     identifier : 0x140d081e697d4a54
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_bBrouillon()<metier> : booléen
         
         renvoyer :m_bBrouillon
        type : 1966080
      -
        code : |1-
         procédure publique p_bBrouillon(bValeur est un booléen)<metier>:Vide
         
         si :m_bBrouillon <> bValeur alors
         	:ZF_EstModif()
         	
         	:m_bBrouillon = bValeur
         fin
        type : 2031616
     template_refs : []
   -
     name : p_bEstRealise
     identifier : 0x140d081e697e4a54
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_bEstRealise()<metier> : booléen
         
         renvoyer :m_bEstRealise
        type : 1966080
      -
        code : |1-
         procédure publique p_bEstRealise(bValeur est un booléen)<metier>:Vide
         
         si :m_bEstRealise <> bValeur alors
         	:ZF_EstModif()
         	
         	:m_bEstRealise = bValeur
         fin
        type : 2031616
     template_refs : []
   -
     name : p_bTache_tech
     identifier : 0x140d081e697f4a54
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_bTache_tech()<metier> : booléen
         
         renvoyer :m_bTache_tech
        type : 1966080
      -
        code : |1-
         procédure publique p_bTache_tech(bValeur est un booléen)<metier>:Vide
         
         si :m_bTache_tech <> bValeur alors
         	:ZF_EstModif()
         	
         	:m_bTache_tech = bValeur
         fin
        type : 2031616
     template_refs : []
   -
     name : p_nNum_Sprint_Creation
     identifier : 0x140d081e69804a54
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_nNum_Sprint_Creation() <metier>: entier
         
         renvoyer :m_nNum_Sprint_Creation
        type : 1966080
      -
        code : |1-
         procédure publique p_nNum_Sprint_Creation(nValeur est un entier)<metier>:Vide
         
         si :m_nNum_Sprint_Creation <> nValeur alors
         	:ZF_EstModif()
         	
         	:m_nNum_Sprint_Creation = nValeur
         fin
        type : 2031616
     template_refs : []
   -
     name : p_nNum_Sprint_Demarrage
     identifier : 0x140d081e69814a54
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_nNum_Sprint_Demarrage()<metier> : entier
         
         renvoyer :m_nNum_Sprint_Demarrage
        type : 1966080
      -
        code : |1-
         procédure publique p_nNum_Sprint_Demarrage(nValeur est un entier)<metier>:Vide
         
         si :m_nNum_Sprint_Demarrage <> nValeur alors
         	:ZF_EstModif()
         	
         	:m_nNum_Sprint_Demarrage=nValeur
         fin
        type : 2031616
     template_refs : []
   -
     name : p_nNum_Sprint_Fin
     identifier : 0x140d081e69824a54
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_nNum_Sprint_Fin()<metier> : entier
         
         renvoyer :m_nNum_Sprint_Fin
        type : 1966080
      -
        code : |1-
         procédure publique p_nNum_Sprint_Fin(nValeur est un entier)<metier>:Vide
         
         si :m_nNum_Sprint_Fin <> nValeur alors
         	:ZF_EstModif()
         	
         	:m_nNum_Sprint_Fin=nValeur
         fin
        type : 2031616
     template_refs : []
   -
     name : p_nNum_Sprint_Previsionnel
     identifier : 0x140d081e69834a54
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_nNum_Sprint_Previsionnel()<metier> : entier
         
         renvoyer :m_nNum_Sprint_Previsionnel
        type : 1966080
      -
        code : |1-
         procédure publique p_nNum_Sprint_Previsionnel(nValeur est un entier)<metier>:Vide
         
         si :m_nNum_Sprint_Previsionnel <> nValeur alors
         	:ZF_EstModif()
         	:m_nNum_Sprint_Previsionnel=nValeur
         fin
        type : 2031616
     template_refs : []
   -
     name : p_nNum_Sprint_Realisation
     identifier : 0x140d081e69844a54
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_nNum_Sprint_Realisation()<metier> : entier
         
         renvoyer :m_nNum_Sprint_Realisation
        type : 1966080
      -
        code : |1-
         procédure publique p_nNum_Sprint_Realisation(nValeur est un entier)<metier>:Vide
         
         si :m_nNum_Sprint_Realisation <> nValeur alors
         	:ZF_EstModif()
         	:m_nNum_Sprint_Realisation=nValeur
         fin
        type : 2031616
     template_refs : []
   -
     name : p_nNumTicketIncident
     identifier : 0x140d081e69854a54
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_nNumTicketIncident()<metier> : entier
         
         renvoyer :m_nNumTicketIncident
        type : 1966080
      -
        code : |1+
         procédure publique p_nNumTicketIncident(nValeur est un entier)<metier>:Vide
         
         si :m_nNumTicketIncident <> nValeur ALORS
         	:ZF_EstModif()
         	:m_nNumTicketIncident=nValeur
         FIN
        type : 2031616
     template_refs : []
   -
     name : p_nOrdre
     identifier : 0x140d081e69864a54
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_nOrdre()<metier> : entier
         
         renvoyer :m_nOrdre
        type : 1966080
      -
        code : |1-
         procédure publique p_nOrdre(nValeur est un entier)<metier>:Vide
         
         si :m_nOrdre <> nValeur alors
         	:ZF_EstModif()
         	
         	:m_nOrdre = nValeur
         fin
        type : 2031616
     template_refs : []
   -
     name : p_nPoids
     identifier : 0x140d081e69874a54
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_nPoids()<metier> : entier
         
         renvoyer :m_nPoids
        type : 1966080
      -
        code : |1-
         procédure publique p_nPoids(nValeur est un entier)<metier>:Vide
         
         SI ::Controle_Poids(nValeur) ALORS
         	si :m_nPoids <> nValeur alors
         		:ZF_EstModif()
         		:m_nPoids = nValeur
         	fin
         SINON
         	m_oExPbPoidTache.ZF_Declenche()
         FIN
        type : 2031616
     template_refs : []
   -
     name : p_nPoids_Previsionnel
     identifier : 0x140d081e69884a54
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_nPoids_Previsionnel()<metier> : entier
         
         renvoyer :m_nPoids_Previsionnel
        type : 1966080
      -
        code : |1-
         procédure publique p_nPoids_Previsionnel(nValeur est un entier):Vide
         
         
         si ::Controle_Poids(nValeur) ALORS
         	
         	si :m_nPoids_Previsionnel <> nValeur alors	
         		:ZF_EstModif()
         		:m_nPoids_Previsionnel=nValeur
         	fin
         sinon
         	m_oExPbPoidTachePrev.ZF_Declenche()
         FIN
        type : 2031616
     template_refs : []
   -
     name : p_nStatut
     identifier : 0x140d081e69894a54
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_nStatut()<metier> : entier
         
         renvoyer :m_nStatut
        type : 1966080
      -
        code : |1-
         procédure publique p_nStatut(nValeur est un entier)<metier>:Vide
         
         si :m_nStatut <> nValeur alors
         	:ZF_EstModif()
         	
         	:m_nStatut = nValeur
         fin
        type : 2031616
     template_refs : []
   -
     name : p_sCMTR
     identifier : 0x140d081e698a4a54
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_sCMTR()<metier> : chaîne
         
         renvoyer :m_sCMTR
        type : 1966080
      -
        code : |1-
         procédure publique p_sCMTR(sValeur est une chaîne)<metier>:Vide
         
         si :m_sCMTR <> sValeur alors
         	:ZF_EstModif()
         	
         	:m_sCMTR=sValeur
         fin
        type : 2031616
     template_refs : []
   -
     name : p_sCMTR_Blocage
     identifier : 0x140d081e698b4a54
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_sCMTR_Blocage()<metier> : chaîne
         
         renvoyer :m_sCMTR_Blocage
        type : 1966080
      -
        code : |1-
         procédure publique p_sCMTR_Blocage(sValeur est une chaîne)<metier>:Vide
         
         si :m_sCMTR_Blocage <> sValeur alors
         	:ZF_EstModif()
         	
         	:m_sCMTR_Blocage=sValeur
         fin
        type : 2031616
     template_refs : []
   -
     name : p_sCodeTache
     identifier : 0x140d081e698c4a54
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_sCodeTache()<metier> : chaîne
         
         renvoyer :m_sCodeTache
        type : 1966080
      -
        code : |1-
         procédure publique p_sCodeTache(sValeur est une chaîne)<metier>:Vide
         
         si :m_sCodeTache <> sValeur alors
         	:ZF_EstModif()
         	
         	:m_sCodeTache = sValeur
         fin
        type : 2031616
     template_refs : []
   -
     name : p_sDescription
     identifier : 0x140d081e698d4a54
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_sDescription() : chaîne
         
         renvoyer :m_sDescription
        type : 1966080
      -
        code : |1-
         procédure publique p_sDescription(sValeur est une chaîne)<metier>:Vide
         
         si :m_sDescription <> sValeur alors
         	:ZF_EstModif()
         	
         	:m_sDescription=sValeur
         fin
        type : 2031616
     template_refs : []
   -
     name : p_oUsr_createur_ID
     identifier : 0x140d081e698e4a54
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_oUsr_createur_ID() <métier>:entier
         
         si :m_oUsr_createur = Null ALORS
         	renvoyer 0
         sinon
         	RENVOYER :m_oUsr_createur.ZF_Get_IdUnique()
         FIN
        type : 1966080
      -
        code : |1-
         procédure publique p_oUsr_createur_ID(nValeur_P est un entier):vide
         
         si nValeur_P = 0 ALORS
         	:m_oUsr_createur = null
         sinon
         	:m_oUsr_createur = ClDbUsr.GetObj(nValeur_P)
         FIN
        type : 2031616
     template_refs : []
   -
     name : p_oUsr_Dev_ID
     identifier : 0x140d081e698f4a54
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_oUsr_Dev_ID() <métier>:entier
         
         SI :m_oUsr_Dev = Null ALORS
         	RENVOYER 0
         SINON
         	RENVOYER :m_oUsr_Dev.ZF_Get_IdUnique()
         FIN
        type : 1966080
      -
        code : |1-
         procédure publique p_oUsr_Dev_ID(nValeur_P est un entier)<metier>:vide
         
         SI nValeur_P = 0 ALORS
         	:m_oUsr_Dev = Null
         SINON
         	:m_oUsr_Dev = ClDbUsr.GetObj(nValeur_P)
         FIN
        type : 2031616
     template_refs : []
   -
     name : p_oUserStoryParent_ID
     identifier : 0x141957ba1617b47a
     type_code : 103
     p_codes :
      -
        code : |1+
         procédure publique p_oUserStoryParent_ID()<metier>:entier
         //Propriétés de l'objet m_oIDScr_UserStory, accessible via son ID
         SI :p_oUserStoryParent = Null ALORS
         	RENVOYER 0
         SINON
         	RENVOYER :p_oUserStoryParent.ZF_Get_IdUnique()
         FIN
         
        type : 1966080
      -
        code : |1-
         procédure publique p_oUserStoryParent_ID(nValeur_p est un entier)<metier>:Vide
         
         SI nValeur_p = 0 ALORS
         	:p_oUserStoryParent = Null
         SINON
         	:p_oUserStoryParent = ClDbUserStory.GetObj(nValeur_p)
         FIN
        type : 2031616
     template_refs : []
   -
     name : p_nOrdreSprint
     identifier : 0x16295d6c0a2b7a60
     type_code : 103
     p_codes :
      -
        code : |1+
         PROCEDURE p_nOrdreSprint()<métier>:Entier
         //Propriétés de m_nOrdreSprint
         
         RENVOYER :m_nOrdreSprint
        type : 1966080
      -
        code : |1+
         PROCEDURE p_nOrdreSprint(nValeur_p est un Entier sans signe sur 1 octet)<métier>:Vide
         
         SI :m_nOrdreSprint <> nValeur_p ALORS
         	:ZF_EstModif()
         	:m_nOrdreSprint = nValeur_p
         FIN
         
        type : 2031616
     template_refs : []
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : BwAAAAcAAAA6ih3UbgNXHwTtiPSFUEj+2fi/m7v4QV2rqidAupM=
  original_name : ClTache
resources :
 string_res :
  identifier : 0x1e85e352228f3dbc
  internal_properties : BwAAAAcAAAAnMYFQ1bL/vz9ehh7L22SNNSlIzGTOI8h5F/WtgDNP
custom_note :
 internal_properties : BwAAAAcAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
