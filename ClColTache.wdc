#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : ClColTache
 major_version : 27
 minor_version : 0
 type : 4
 description : ""
 subtype : 0
class :
 identifier : 0x1476e66f025f1bff
 internal_properties : BwAAAAcAAAB2/vstTMCJbS/hlxjFxirSqKvCUuv8YxgpWyl7S3iA
 code_elements :
  type_code : 10
  p_codes :
   -
     code : |1-
      ClColTache est une Classe
      	hérite de ClZF_ColObjDB
      prive
      	m_aoTaches est un tableau de ClDbTache dynamique
      fin
      
      ETypeEtatTacheAFaire est une Enumération
      	PasseEtActuelle
      	Future
      	Toutes
      FIN
      
      constante
      	cstGet_TacheDeUserStory			= "TachesDeUS"
      	cstTachesDeProjet				= "TachesDeProjet"
      	
      	cstTachesDeSprint_Reel			= "TachesDeSprint_reel"
      	cstTachesDeSprint_Prev			= "TachesDeSprint_prev"
      	cstTachesDeSprint_Fin			= "TachesDeSprint_fin"
      	cstTachesDeSprint_Demarre		= "TachesDeSprint_Demarre"
      	
      	
      	cstGetPointsDemarres	= 1
      	cstGetPointsReal		= 2
      	cstGetPointsPrev		= 3
      	cstGetPointsFini		= 4
      
      fin
     type : 131072
  procedures :
   -
     name : Constructeur
     procedure_id : 1474619292466027519
     type_code : 27
     code : |1-
      procédure Constructeur()
      
      
      //:ZF_DefTimeOut(ClAppScrum.cstTimeOutProd)
     type : 589824
   -
     name : Destructeur
     procedure_id : 1474619292466093055
     type_code : 28
     code : |1+
      procédure Destructeur()
      
     type : 655360
   -
     name : Init
     procedure_id : 1474619292466224127
     type_code : 12
     code : |1+
      // Redéfinition de la méthode ClColObjDB.Init
      PROCÉDURE  Init():Vide
      ZF_InitCol(:m_aoTaches)
     type : 458752
   -
     name : aItems
     procedure_id : 1474619292466289663
     type_code : 12
     code : |1-
      // Redéfinition de la méthode ClColObjDB.aItems
      PROCÉDURE aItems():tableau de ClDbTache dynamique
      renvoyer :m_aoTaches
     type : 458752
   -
     name : pre_load
     procedure_id : 1474619292466420735
     type_code : 12
     code : |1-
      // Redéfinition de la méthode ClZF_ColObjDB.pre_load
      PROCÉDURE PROTÉGÉE pre_load(sdSource_P est une Source de Données)
      
      sListeUS est une chaîne
      sCle est une chaîne
      
      HLitPremier(sdSource_P,hForwardOnly+hSansRafraîchir)
      TANTQUE PAS HEnDehors(sdSource_P)
      	sClasse est une chaine = ClDbUserStory
      	sCle = ClZF_ObjDB.ZF_sCleOdb(sClasse, sdSource_P.IDScr_UserStory)
      	
      	SI ClZF_App.mg_aoInstances[sCle]..Vide ALORS
      		sListeUS += [", "] + sdSource_P.IDScr_UserStory
      	FIN
      
      	HLitSuivant(sdSource_P)
      FIN
      
      //Le traitement de préchargement n'est utile que si on a plusieurs éléments à précharger (sinon, on passe par le chargement std)
      si Position(sListeUS, ",") > 0 ALORS
      	oColUs est un ClColUserStory()
      	oColUs.ZF_LoadSQL([
      		SELECT Scr_UserStory.*
      		FROM Scr_UserStory
      		WHERE Scr_UserStory.IDScr_UserStory IN ([%sListeUS%])
      		])
      FIN
     type : 458752
   -
     name : oTaches_MesBrouillons
     procedure_id : 1474619292466486271
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] oTaches_MesBrouillons ()
      //
      // Paramètres :
      //	Aucun
      // Valeur de retour :
      // 	ClColTaches : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      //	bForceCharge_p (booléen - valeur par défaut=0) : <indiquez ici le rôle de bForceCharge_p>
      FONCTION globale oTaches_MesBrouillons(oUser_p est un ClDbUsr):ClColTache
      
      //sdMesBrouillons est une Source de Données
      sReq est une chaîne
      oTaches est un ClColTache
      
      	
      //Récupération des taches en brouillon, de l'utilisateur.
      sReq = [
      	SELECT
      		Scr_Tache.*
      	FROM Scr_Tache
      	WHERE Scr_Tache.Top_Brouillon = 1
      		AND Scr_Tache.IDScr_Usr_createur = [%oUser_p.ZF_Get_IdUnique()%]	
      ]
      
      oTaches.ZF_LoadSQL(sReq)
      
      
      renvoyer oTaches
     type : 458752
   -
     name : oTaches_MesTaches
     procedure_id : 1474619292466551807
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] oTaches_MesTaches ()
      //
      // Paramètres :
      //	Aucun
      
      // Valeur de retour :
      // 	ClColTaches : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      //	bForceCharge_p (booléen - valeur par défaut=0) : <indiquez ici le rôle de bForceCharge_p>
      FONCTION globale oTaches_MesTaches(oUser_p est un ClDbUsr):ClColTache
      
      sReq			est une chaîne
      oTachesEnDev	est un ClColTache
      
      
      //Récupération des taches en cours, de l'utilisateur.
      sReq = [
      	SELECT
      		Scr_Tache.*
      	FROM Scr_Tache
      	WHERE Scr_Tache.Top_Brouillon = 0
      		AND Scr_Tache.Top_Annule = 0
      		AND Scr_Tache.Top_Realise = 0
      		AND Scr_Tache.Num_Sprint_Demarrage is not Null
      		AND Scr_Tache.IDScr_Usr_Dev = [%oUser_p.ZF_Get_IdUnique()%]
      		AND Scr_Tache.Statut <> [%ClDbTache.cstStatut_Suspendu%]
      ]
      
      oTachesEnDev.ZF_LoadSQL(sReq)
      
      renvoyer oTachesEnDev
     type : 458752
   -
     name : Sprint_Taches
     procedure_id : 1474619292466617343
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] Sprint_Taches (<oSprint_P> est ClDbSprint)
      // Paramètres :
      //	oSprint_P (ClDbSprint) : <indiquez ici le rôle de oSprint_P>
      // Valeur de retour :
      // 	tableau (STR_Tache) : <indiquez ici le rôle de la valeur de retour>
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      //	nNumSprint_p (entier) : <indiquez ici le rôle de nNumSprint>
      PROCEDURE globale Sprint_Taches(oSprint_P est un ClDbSprint):tableau de str_Tache
      
      // a faire : a supprimer
      
      
      //Tableau des taches du sprint
      aTaches est un tableau de STR_Tache
      
      //Structure d'une tache
      stTache est un STR_Tache
      
      sReq est une chaine
      sdRechercheTaches est une source de Données
      
      sReq = [
      	SELECT 
      		Scr_UserStory.JAiBesoinDe,
      		Scr_Tache.IDScr_Tache,
      		(Scr_Tache.Num_Sprint_Demarrage <> 0) AS Top_EstDemarree,
      		Scr_Tache.Num_Sprint_Fin,
      		case when (Scr_Tache.Num_Sprint_Fin = 0 AND Scr_Tache.Num_Sprint_Demarrage <> 0) then
      			2
      		else
      			case when Scr_Tache.Num_Sprint_Fin <> 0 then
      				3
      			else
      				1
      			end
      		end AS val_etat		
      	
      	FROM Scr_Tache
      		INNER JOIN Scr_UserStory ON (Scr_UserStory.IDScr_UserStory = Scr_Tache.IDScr_UserStory)
      	
      	WHERE Scr_Tache.Num_Sprint_Demarrage = [%oSprint_P.ZF_Get_IdUnique()%]
      	
      	ORDER BY val_etat
      ]
      
      ClZF_ObjDbLs.mg_oApp.Rsql(sdRechercheTaches,sReq)
      	
      pour TOUT sdRechercheTaches 
      	stTache = COL_Scrum.Tache_Charger(sdRechercheTaches.IDScr_Tache) //Procédure qui rempli la structure
      	selon sdRechercheTaches.val_etat
      		cas 1 : 
      			stTache.sEtat = "A faire"
      		cas 2 :
      			stTache.setat = "Commencée"
      		cas 3 :
      			stTache.setat = "Terminée"
      		AUTRE CAS	
      	FIN
      	
      	stTache.sBesoinUserStory = sdRechercheTaches.JAiBesoinDe
      	
      	tableauajoute(aTaches,stTache)
      	
      FIN
      
      HAnnuleDéclaration(sdRechercheTaches)
      
      RENVOYER aTaches
     type : 458752
   -
     name : oFromUserStory
     procedure_id : 1474619292466682879
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] oFromUserStory (<oUS_p> est ClDbUserStory [, <bForceCharge_p> est booléen])
      //
      // Paramètres :
      //	oUS_p (ClDbUserStory) : <indiquez ici le rôle de oUS_p>
      //	bForceCharge_p (booléen - valeur par défaut=0) : <indiquez ici le rôle de bForceCharge_p>
      
      // Valeur de retour :
      // 	ClColTaches : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      
      FONCTION globale oFromUserStory(oUS_p est un ClDbUserStory, LOCAL bForceCharge_p est un booléen = faux):ClColTache
      
      sReq est une chaine
      
      oColTachesRetour est un ClColTache dynamique <- oUS_p.ZF_GetCol(cstGet_TacheDeUserStory)
      
      si oColTachesRetour.ZF_bEstExpire() ou bForceCharge_p alors
      
      	oColTachesRetour.ZF_vider()
      
      	sReq = [
      		SELECT 
      			Scr_Tache.*
      			
      		FROM Scr_Tache
      		
      		WHERE Scr_Tache.IDScr_UserStory = [%oUS_p.ZF_Get_IdUnique()%]
      		
      		ORDER BY Scr_Tache.Ordre,
      			Scr_Tache.CodeTache
      	]
      	oColTachesRetour.ZF_LoadSQL(sReq)
      fin
      
      
      RENVOYER oColTachesRetour
     type : 458752
   -
     name : oFromProjet
     procedure_id : 1474619292466748415
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] oFromProjet (<oPrj_p> est ClDbProjet [, <bForceCharge_p> est booléen])
      //
      // Paramètres :
      //	oPrj_p (ClDbProjet) : <indiquez ici le rôle de oPrj_p>
      //	bForceCharge_p (booléen - valeur par défaut=0) : <indiquez ici le rôle de bForceCharge_p>
      
      // Valeur de retour :
      // 	ClColTaches : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure publique globale oFromProjet(oPrj_p est un ClDbProjet, bForceCharge_p est un booléen = faux):ClColTache
      
      sReq				est une chaîne
      oColTachesRetour	est un ClColTache dynamique	<- oPrj_p.ZF_GetCol(cstTachesDeProjet)
      
      SI oColTachesRetour.ZF_bEstExpire() OU bForceCharge_p ALORS
      	
      	oColTachesRetour.ZF_vider()
      
      	sReq = [
      	select<§cs:3§>
      		Scr_Tache.*<§cs:3§>
      	FROM Scr_Tache<§cs:3§>
      		INNER JOIN Scr_UserStory ON (Scr_UserStory.IDScr_UserStory = Scr_Tache.IDScr_UserStory)<§cs:3§>
      	where Scr_UserStory.IDScr_Projet = [%oPrj_p.ZF_Get_IdUnique()%]<§cs:3§>
      	]
      	oColTachesRetour.ZF_LoadSQL(sReq)
      fin
      renvoyer oColTachesRetour
     type : 458752
   -
     name : oFromPeriodeSprints
     procedure_id : 1474619292466813951
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] oFromPeriodeSprints (<oSpDeb_p> est ClDbSprint, <oSpFin_p> est ClDbSprint)
      //
      // Paramètres :
      //	oSpDeb_p (ClDbSprint) : <indiquez ici le rôle de oUS_p>
      //	oSpFin_p (ClDbSprint) : <indiquez ici le rôle de oSpFin_p>
      
      // Valeur de retour :
      // 	ClColTaches : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      
      //	bForceCharge_p (booléen - valeur par défaut=0) : <indiquez ici le rôle de bForceCharge_p>
      FONCTION globale oFromPeriodeSprints(oSpDeb_p est un ClDbSprint, oSpFin_p est un ClDbSprint):ClColTache
      
      sReq est une chaine
      oColTachesRetour est un ClColTache
      
      sReq = [
      	SELECT 
      		Scr_Tache.*
      		
      	FROM Scr_Tache
      	
      	WHERE Scr_Tache.Num_Sprint_Realisation BETWEEN [%oSpDeb_p.ZF_Get_IdUnique()%] AND [%oSpFin_p.ZF_Get_IdUnique()%]
      	
      ]
      oColTachesRetour.ZF_LoadSQL(sReq)
      
      
      RENVOYER oColTachesRetour
     type : 458752
   -
     name : oTaches_MesTaches_NonFinies
     procedure_id : 1477678619179869155
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] oTaches_MesTaches_NonFinies (<oUser_p> est ClDbUsr)
      //
      // Paramètres :
      //	oUser_p (ClDbUsr) : <indiquez ici le rôle de oUser_p>
      
      // Valeur de retour :
      // 	ClColTaches : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      //	bForceCharge_p (booléen - valeur par défaut=0) : <indiquez ici le rôle de bForceCharge_p>
      FONCTION globale oTaches_MesTaches_NonFinies(oUser_p est un ClDbUsr):ClColTache
      
      sReq			est une chaîne
      oTachesEnDev	est un ClColTache
      
      
      //Récupération des taches en cours, de l'utilisateur.
      sReq = [
      	SELECT
      		Scr_Tache.*
      	FROM Scr_Tache
      	WHERE Scr_Tache.Top_Brouillon = 0
      		AND Scr_Tache.Top_Annule = 0
      		AND Scr_Tache.Top_Realise = 0
      		AND Scr_Tache.Num_Sprint_Demarrage is not Null
      		AND Scr_Tache.Num_Sprint_Fin is Null
      		AND Scr_Tache.IDScr_Usr_Dev = [%oUser_p.ZF_Get_IdUnique()%]
      		AND Scr_Tache.Statut <> [%ClDbTache.cstStatut_Suspendu%]
      ]
      
      oTachesEnDev.ZF_LoadSQL(sReq)
      
      renvoyer oTachesEnDev
     type : 458752
   -
     name : anGetNbPointsSprints
     procedure_id : 1537180623594592261
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] anGetNbPointsSprints (<oColSpr> est ClColSprint, <nTypeFiltre_p> est entier)
      //
      // Paramètres :
      //	oColSpr (ClColSprint) : <indiquez ici le rôle de oColSpr>
      //	nTypeFiltre_p (entier) : <indiquez ici le rôle de nTypeFiltre_p>
      
      // Valeur de retour :
      // 	tableau associatif (entier) : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure globale anGetNbPointsSprints(oColSpr est un ClColSprint, nTypeFiltre_p est un entier) <métier>:tableau associatif d'entiers
      
      aNRetour		est un tableau associatif d'entiers
      sdCountPoint	est une Source de Données
      sReq			est une chaîne
      sCondition		est une chaîne
      sPoidsSel		est une chaîne
      oSpr est un ClDbSprint dynamique
      sListe est une chaîne
      
      
      pour tout oSpr de oColSpr.aitems()
      	aNRetour[oSpr.ZF_Get_IdUnique()] = 0
      	sListe += [", "] + oSpr.ZF_Get_IdUnique()
      FIN
      
      si sListe <> "" alors
      	
      	sPoidsSel	= Scr_Tache.Poids..Nom
      	SELON nTypeFiltre_p
      		CAS cstGetPointsDemarres
      			sCondition = Scr_Tache.Num_Sprint_Demarrage..Nom
      		CAS cstGetPointsFini
      			sCondition	= Scr_Tache.Num_Sprint_Fin..Nom
      		CAS cstGetPointsReal
      			sCondition	= Scr_Tache.Num_Sprint_Realisation..Nom
      		CAS cstGetPointsPrev
      			sCondition	= Scr_Tache.Num_Sprint_Previsionnel..Nom
      			sPoidsSel	= Scr_Tache.Poids_Previsionnel..Nom
      		AUTRE CAS
      			ClZF_App.mg_oExSelonCasNonTraite.ZF_Declenche()
      	FIN
      	
      	sReq = [
      		
      		SELECT
      			SUM(Scr_Tache.Poids) AS NbrPoints,
      			Scr_Tache.[%sCondition%] AS Sprint
      		
      		FROM Scr_Tache
      		
      		WHERE 
      			Scr_Tache.[%sCondition%] IN ([%sListe%])
      			and Scr_Tache.Top_Annule = 0
      		
      		GROUP BY Scr_Tache.[%sCondition%]
      	]
      	
      	
      	goapp.Rsql(sdCountPoint,sReq)
      	pour tout sdCountPoint
      		aNRetour[sdCountPoint.Sprint] = sdCountPoint.NbrPoints
      	FIN
      	
      	HAnnuleDéclaration(sdCountPoint)
      fin
      
      RENVOYER aNRetour
      
     type : 458752
   -
     name : nGetNbPointsSprint
     procedure_id : 1537183806192248243
     type_code : 12
     code : |1+
      procedure globale nGetNbPointsSprint(oSpr est un ClDbSprint, nTypeFiltre_p est un entier) <métier>:entier
      
      oClSpr est un ClColSprint()
      aNRetour		est un tableau associatif d'entiers
      
      oClSpr.ZF_addItem(oSpr)
      
      aNRetour = ::anGetNbPointsSprints(oClSpr,nTypeFiltre_p)
      
      renvoyer aNRetour[oSpr.ZF_Get_IdUnique()]
     type : 458752
   -
     name : oColsFromUs
     procedure_id : 1537339069220519396
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] oColsFromUs (<oColUs_p> est ClColUserStory)
      //
      // Paramètres :
      //	oColUs_p (ClColUserStory) : <indiquez ici le rôle de oPrj_p>
      
      // Valeur de retour :
      // 	tableau associatif (ClColTache dynamique) : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      //	bForceCharge_p (booléen - valeur par défaut=1) : <indiquez ici le rôle de bForceCharge_p>
      procédure publique globale oColsFromUs(oColUs_p est un ClColUserStory)<metier>:tableau associatif de ClColTache dynamique
      
      sReq				est une chaîne
      aColTaches			est un tableau associatif de ClColTache dynamique
      
      SI oColUs_p.ZF_nTaille() > 0 ALORS
      	
      	sListeIdsUs est une chaine = TableauVersChaîne(oColUs_p.ZF_Get_Liste_IdUnique(), ", ")
      	
      	oColUsr est un ClColUsr()
      	oColUsr.ZF_LoadSQL([
      		
      		SELECT Scr_Usr.*
      		FROM Scr_Usr
      			INNER JOIN Scr_Tache ON (Scr_Tache.IDScr_Usr_createur = Scr_Usr.IDScr_Usr)
      		WHERE Scr_Tache.IDScr_UserStory IN ([%sListeIdsUs%])
      		
      		UNION
      		
      		SELECT Scr_Usr.*
      		FROM Scr_Usr
      			INNER JOIN Scr_Tache ON (Scr_Tache.IDScr_Usr_Dev = Scr_Usr.IDScr_Usr)
      		WHERE Scr_Tache.IDScr_UserStory IN ([%sListeIdsUs%])
      
      
      	])
      	
      //	aColTaches <- ::ZF_aoInitCols(aColTaches, oColUs_p, cstTachesDeUS)
      	
      	sReq = [
      		select
      			Scr_Tache.*
      		FROM Scr_Tache
      		where Scr_Tache.IDScr_UserStory IN ([%sListeIdsUs%])
      	]
      //	aColTaches = ClZF_ColObjDB.ZF_LoadSQLMulti_Priv(sReq,aColTaches, null, oColUs_p.ZF_Get_Liste_IdUnique(), Scr_UserStory.IDScr_UserStory..nom)
      	aColTaches <- ClZF_ColObjDB.ZF_LoadSQLMulti_2(aColTaches, sReq, cstGet_TacheDeUserStory, oColUs_p, Scr_UserStory.IDScr_UserStory..Nom)
      	
      FIN
      
      renvoyer aColTaches
     type : 458752
   -
     name : sClasseObjDbAsso
     procedure_id : 1542749409608689447
     type_code : 12
     code : |1-
      // Redéfinition de la méthode ClZF_ColObjDB.sClasseObjDbAsso
      PROCÉDURE PROTÉGÉE  sClasseObjDbAsso():chaîne
      
      sClasse est une chaîne = ClDbTache
      RENVOYER sClasse
     type : 458752
   -
     name : oFromSprints
     procedure_id : 1543136863604369684
     type_code : 12
     code : |1+
      procédure globale oFromSprints(oColSpr_p est une ClColSprint dynamique, LOCAL eNSelecteur_p est un ClDbTache.ETypeCharge, bForceRecharge_P est un booléen = faux) <métier>:clcoltache
      
      sChoixSprint	est une chaîne
      sCleCol			est une chaîne
      oRetour			est un clcoltache dynamique
      
      SELON eNSelecteur_p
      	CAS ClDbTache.ETypeCharge.Charge_réelle
      		sChoixSprint	= Scr_Tache.Num_Sprint_Realisation..Nom
      		sCleCol			= cstTachesDeSprint_Reel
      	CAS ClDbTache.ETypeCharge.Charge_prévisionelle
      		sChoixSprint	= Scr_Tache.Num_Sprint_Previsionnel..Nom
      		sCleCol			= cstTachesDeSprint_Prev
      	CAS ClDbTache.ETypeCharge.Charge_Fin
      		sChoixSprint	= Scr_Tache.Num_Sprint_Fin..Nom
      		sCleCol			= cstTachesDeSprint_Fin
      	CAS ClDbTache.ETypeCharge.Charge_Demarre
      		sChoixSprint	= Scr_Tache.Num_Sprint_Demarrage..Nom
      		sCleCol			= cstTachesDeSprint_Demarre
      	autres cas
      		ClZF_App.mg_oExSelonCasNonTraite.ZF_Declenche([eNSelecteur_p])
      FIN
      
      //Si on a qu'un sprint dans la colletsion, on cherche à mettre le résultat en cache
      si oColSpr_p.zf_ntaille() = 1 ALORS
      	oRetour	<- oColSpr_p.oItem(1).ZF_GetCol(sCleCol)
      sinon
      	oRetour = allouer un clcoltache()
      FIN
      
      
      SI oRetour.ZF_bEstExpire() OU bForceRecharge_P ALORS
      	
      	oRetour.ZF_vider()
      	
      	sReq est une chaîne = [
      		SELECT 
      			Scr_Tache.*
      		FROM Scr_Tache
      		WHERE Scr_Tache.[%sChoixSprint%] IN([%TableauVersChaîne(oColSpr_p.ZF_Get_Liste_IdUnique(), ", ")%])
      	]
      	oRetour.ZF_LoadSQL(sReq)
      fin
      renvoyer oRetour
     type : 458752
   -
     name : oFromSprint
     procedure_id : 1596923253815747256
     type_code : 12
     code : |1-
      PROCÉDURE GLOBALE oFromSprint(oSpr_p est une CldbSprint dynamique, LOCAL eNSelecteur_p est un ClDbTache.ETypeCharge) <métier>:ClColTache
      oColSpr_p est une ClColSprint()
      oColSpr_p.ZF_addItem(oSpr_p)
      renvoyer oFromSprints(oColSpr_p,eNSelecteur_p)
     type : 458752
   -
     name : oFromUsrPrj
     procedure_id : 1545635559157201439
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] oFromUsrPrj (<oUsr_p> est ClDbUsr)
      //
      // Paramètres :
      //	oUsr_p (ClDbUsr) : <indiquez ici le rôle de oProjet_p>
      
      // Valeur de retour :
      // 	ClColTache : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure globale oFromUsrPrj(oUsr_p est un ClDbUsr):ClColTache
      
      
      sReq	est une chaîne
      oTaches	est un ClColTache
      
      
      //Récupération des taches des projets, associées à un utilisateur.
      sReq = [
      	SELECT
      		Scr_Tache.*
      	FROM Scr_Tache
      		INNER JOIN Scr_UserStory ON (Scr_UserStory.IDScr_UserStory = Scr_Tache.IDScr_UserStory)
      		INNER JOIN Scr_Projet ON (Scr_Projet.IDScr_Projet = Scr_UserStory.IDScr_Projet)
      		INNER JOIN Scr_Usr_Projet ON (Scr_Usr_Projet.IDScr_Projet = Scr_Projet.IDScr_Projet)
      	WHERE Scr_Tache.Statut = [%oUsr_p.ZF_Get_IdUnique()%]
      ]
      
      oTaches.ZF_LoadSQL(sReq)
      
      RENVOYER oTaches
     type : 458752
   -
     name : oFiltreEtat
     procedure_id : 1545637942938070778
     type_code : 12
     code : |1-
      PROCÉDURE oFiltreEtat(nStatut_p est un entier)<métier>:ClColTache
      
      oRetour	est un ClColTache()
      oTache	est un ClDbTache dynamique
      
      POUR TOUT oTache DE :m_aoTaches
      	SI oTache.p_nStatut = nStatut_p ALORS
      		oRetour.ZF_addItem(oTache)
      	FIN
      FIN
      
      RENVOYER oRetour
     type : 458752
   -
     name : oFromStatut
     procedure_id : 1545642701783062688
     type_code : 12
     code : |1+
      procédure publique globale oFromStatut(nStatut_P est un entier)<metier>:ClColTache
      
      
      sReq est une chaîne
      oTaches est un ClColTache
      
      sReq = [
      	SELECT
      		Scr_Tache.*
      	FROM Scr_Tache
      	WHERE Scr_Tache.Statut = [%nStatut_P%]
      ]
      
      oTaches.ZF_LoadSQL(sReq)
      
      RENVOYER oTaches
      
     type : 458752
   -
     name : oFromNumSprint
     procedure_id : 1581537224816167289
     type_code : 12
     code : |1-
      procedure GLOBALE oFromNumSprint(local nNumSprint_p est un entier, local eNSelecteur est un ClDbTache.ETypeCharge) <métier>:ClColTache
      oColSprint est un ClColSprint()
      oColSprint.ZF_addItem(ClDbSprint.GetObj(nNumSprint_p))
      renvoyer oFromSprints(oColSprint, eNSelecteur)
     type : 458752
   -
     name : Taches_a_faire
     procedure_id : 1585422014707728068
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] Taches_a_faire (<eFiltre> est ClTache.ETypeEtatTacheAFaire)
      //
      // Paramètres :
      //	eFiltre (ClTache.ETypeEtatTacheAFaire) : <indiquez ici le rôle de eFiltre>
      // Valeur de retour :
      // 	ClColTaches : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // Indiquez ici un exemple d'utilisation.
      //
      PROCEDURE globale Taches_a_faire(eFiltre est un ETypeEtatTacheAFaire)<metier>:ClColTache
      
      sReq	est une chaîne
      oTaches	est un ClColTache
      sFilre	est une chaîne
      
      selon eFiltre
      	CAS PasseEtActuelle
      		sFilre = "AND Scr_Tache.Num_Sprint_Realisation <= " + goApp.m_nNumeroDuSprintActuel
      	CAS Future
      		sFilre = "AND Scr_Tache.Num_Sprint_Realisation > " + goApp.m_nNumeroDuSprintActuel
      	CAS Toutes
      		
      FIN
      
      sReq = [
      	
      	SELECT
      		Scr_Tache.*
      		
      	FROM Scr_Tache
      	
      	where Scr_Tache.Num_Sprint_Demarrage is Null
      		AND Scr_Tache.Top_Annule = 0
      		AND Scr_Tache.Top_Brouillon = 0
      		AND Scr_Tache.Top_Realise = 0
      		[%sFilre%]
      		
      ]
      
      oTaches.ZF_LoadSQL(sReq)
      
      renvoyer oTaches
     type : 458752
   -
     name : oFiltreSprint
     procedure_id : 1596850806118957049
     type_code : 12
     code : |1+
      procédure oFiltreSprint(local nNumSprint_p est un entier, local eType_p est un ClDbTache.ETypeCharge) <métier>:clcoltache
      
      oRetour est un ClColTache
      oTacheTmp est un ClDbTache dynamique
      nValSprint est un entier
      
      pour tout oTacheTmp de :aItems()
      	selon eType_p
      		CAS ClDbTache.ETypeCharge.Charge_réelle
      			nValSprint = oTacheTmp.p_nNum_Sprint_Realisation
      		CAS ClDbTache.ETypeCharge.Charge_prévisionelle
      			nValSprint = oTacheTmp.p_nNum_Sprint_Previsionnel
      		CAS ClDbTache.ETypeCharge.Charge_Demarre
      			nValSprint = oTacheTmp.p_nNum_Sprint_Demarrage
      		CAS ClDbTache.ETypeCharge.Charge_Fin
      			nValSprint = oTacheTmp.p_nNum_Sprint_Fin
      		AUTRE CAS
      			ClZF_App.mg_oExSelonCasNonTraite.ZF_Declenche()
      	FIN
      	
      	si nValSprint = nNumSprint_p ALORS
      		oRetour.ZF_addItem(oTacheTmp)
      	FIN
      	
      	
      FIN
      
      
      renvoyer oRetour
     type : 458752
   -
     name : oTachesACoter
     procedure_id : 1610212865965374412
     type_code : 12
     code : |1-
      PROCÉDURE GLOBALE oTachesACoter():ClColTache
      
      
      sReq	est une chaîne
      oTaches	est un ClColTache
      
      
      //Récupération des taches des projets, associées à un utilisateur.
      sReq = [
      	SELECT
      		Scr_Tache.*
      	FROM Scr_Tache
      		INNER JOIN Scr_UserStory ON (Scr_UserStory.IDScr_UserStory = Scr_Tache.IDScr_UserStory)
      		INNER JOIN Scr_Projet ON (Scr_Projet.IDScr_Projet = Scr_UserStory.IDScr_Projet)
      		INNER JOIN Scr_Usr_Projet ON (Scr_Usr_Projet.IDScr_Projet = Scr_Projet.IDScr_Projet)
      	WHERE Scr_Tache.Poids = 0
      		AND Scr_Tache.Poids_Previsionnel <> 0
      ]
      
      oTaches.ZF_LoadSQL(sReq)
      
      RENVOYER oTaches
     type : 458752
   -
     name : oTachesDeTickets
     procedure_id : 1626143445558215065
     type_code : 12
     code : |1-
      PROCÉDURE GLOBALE oTachesDeTickets(aListeNumTickets est un tableau de chaînes):ClColTache
      
      
      sReq	est une chaîne
      oTaches	est un ClColTache()
      sListe	est une chaine = TableauVersChaîne(aListeNumTickets,", ")
      
      si sListe <> "" alors
      	//Récupération des taches des N° de ticket
      	sReq = [
      		SELECT<§cs:3§>
      			Scr_Tache.*<§cs:3§>
      		FROM Scr_Tache<§cs:3§>
      		WHERE Scr_Tache.NumTicketIncident IN ([%sListe%])<§cs:3§>
      	]
      	
      	oTaches.ZF_LoadSQL(sReq)
      fin
      
      RENVOYER oTaches
     type : 458752
  properties :
   -
     name : p_aoObj
     identifier : 0x155fc0ae2421f4e2
     type_code : 103
     p_codes :
      -
        code : |1+
         procédure p_aoObj() : tableau de ClDbTache dynamique
         renvoyer :m_aoTaches
        type : 1966080
      -
        code : |1-
         procédure protégée p_aoObj(aValeur est un tableau de ClDbTache dynamique)
         :m_aoTaches <- aValeur
        type : 2031616
     template_refs : []
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : BwAAAAcAAAA6ih3UbgNXHwTtiPSFUEj+2fi/m7v4QV2rqidAupM=
  original_name : Classe1
resources :
 string_res :
  identifier : 0x136ea9a72325c19d
  internal_properties : BwAAAAcAAAAnMYFQ1bL/vz9ehh7L22SNNSlIzGTOI8h5F/WtgDNP
custom_note :
 internal_properties : BwAAAAcAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
