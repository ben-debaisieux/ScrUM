#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : ClZF_GenCodeClBd
 major_version : 27
 minor_version : 0
 type : 4
 description : ""
 subtype : 0
class :
 identifier : 0x140a495301d40081
 internal_properties : BwAAAAcAAAB2/vstTMCJbS/hlxjFxirSqKvCUuv8YxgpWyl7S3iA
 code_elements :
  type_code : 10
  p_codes :
   -
     code : |1+
      ClZF_GenCodeClBd est une Classe
      	herite de ClZF_GenCodeCl
      	
      PRIVE
      	m_bGenCodeFinal est un booléen
      	m_bLectureSeule est un booléen
      	m_sEx_Decl est une chaîne
      	m_sEx_Inst est une chaîne
      fin
     type : 131072
  procedures :
   -
     name : Constructeur
     procedure_id : 1444047251387580545
     type_code : 27
     code : |1+
      procédure Constructeur(oClasseGen est un ClZF_GenCodeFic)
      Ancêtre.Constructeur(oClasseGen)
      
     type : 589824
   -
     name : Destructeur
     procedure_id : 1444047251387646081
     type_code : 28
     code : |1+
      procédure Destructeur()
      
     type : 655360
   -
     name : GenDeclaration
     procedure_id : 1444047650820810862
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] GenDeclaration (<oGencode_p> est ClZF_GenCodeFic)
      //
      // Paramètres :
      //	oGencode_p (ClZF_GenCodeFic) : <indiquez ici le rôle de oGencode_p>
      
      // Valeur de retour :
      // 	chaîne ANSI : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure prive GenDeclaration(oGencode_p est un ClZF_GenCodeFic):chaîne
      
      
      sRetour			est une chaîne
      sListeMembres	est une chaîne
      stDefRub		est un ClZF_GenCodeFic.STR_DefRub
      sRub			est une chaine
      stRubCol		est un ClZF_GenCodeFic.STR_InfoCol
      sDecExcept		est une chaîne
      sInitExcept		est une chaîne
      sHerite			est une chaîne
      
      
      pour tout stDefRub, sRub de oGencode_p.m_aRub
      	sListeMembres += [rc] + TAB + stDefRub.sNomMembre + "	[%stDefRub.sNomDeclarationComplet%]"
      	
      	si stDefRub.nTypeRub <> ClZF_GenCodeFic.cstDefRubObj ALORS
      		sListeMembres +="	<MAPPING=[%sRub%]>"
      	sinon
      		sListeMembres +="	<note=""mapping=[%sRub%]"">"
      	FIN
      FIN
      
      
      POUR TOUT element stRubCol de oGencode_p.m_aCol_Enfant
      	sListeMembres += [rc] + TAB + stRubCol.sDeclaration
      FIN
      
      
      si :m_bLectureSeule ALORS
      	sHerite = ClZF_ObjDbLs
      sinon
      	sHerite = ClZF_ObjDb
      FIN
      
      
      
      nInd est un entier
      
      sDecExcept = :m_sEx_Decl
      sInitExcept = :m_sEx_Inst
      pour nInd = 1 a 10
      	sDecExcept += [rc] + tab + "// mg_oEx_Exception[%nInd%]	est un ClZF_Exception dynamique"
      	sInitExcept += [rc] + "// mg_oEx_Exception[%nInd%]	= Allouer un ClZF_Exception("". . ."")"
      fin
      
      
      sRetour = [
      [%oGencode_p.sNomClasseGen()%] est une Classe
      [%TAB%]hérite de [%sHerite%]
      	
      PRIVÉ
      [%sListeMembres%]
      
      GLOBAL
      PUBLIC
      [%sDecExcept%]
      FIN
      
      [%sInitExcept%]
      
      ]
      
      si :m_bNatif ALORS
      	sRetour = GenBlocCL_Init(sRetour, oGencode_p.sNomClasseGen())
      FIN
      
      renvoyer sRetour
     type : 458752
   -
     name : GenGetObj
     procedure_id : 1444047650820876523
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] GenGetObj (<oGencode_p> est ClZF_GenCodeFic)
      //
      // Paramètres :
      //	oGencode_p (ClZF_GenCodeFic) : <indiquez ici le rôle de oGencode_p>
      
      // Valeur de retour :
      // 	chaîne ANSI : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure PRIVÉ GenGetObj(oGencode_p est un ClZF_GenCodeFic):chaine
      
      sRetour		est une chaîne
      sNomProc est une chaîne = "GetObj"
      
      sRetour = [
      PROCÉDURE GLOBALE [%sNomProc%](LOCAL nIdUnique_P est un entier)<métier>:[%oGencode_p.sNomClasseGen()%]
      
      sClasse est une chaîne = [%oGencode_p.sNomClasseGen()%]
      RENVOYER ClZF_ObjDB.ZF_GetObj(sClasse, nIdUnique_P)
      
      ]
      
      SI :m_bNatif ALORS
      	sRetour = GenBlocCL_Procedure(sRetour, sNomProc)
      FIN
      
      renvoyer sRetour
     type : 458752
   -
     name : GenInitObject
     procedure_id : 1444047650820942153
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] GenInitObject (<oGencode_p> est ClZF_GenCodeFic)
      //
      // Paramètres :
      //	oGencode_p (ClZF_GenCodeFic) : <indiquez ici le rôle de oGencode_p>
      // Valeur de retour :
      // 	chaîne ANSI : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure PRIVÉ GenInitObject(oGencode_p est un ClZF_GenCodeFic):chaine
      
      sRetour		est une chaîne
      sListeInit	est une chaîne
      //sCle		est une chaîne
      //sLigne		est une chaîne
      //stRubTmp	est un ClZF_GenCodeFic.STR_DefRub
      
      //pour tout element stRubTmp, sCle de oGencode_p.m_aRub
      //	si stRubTmp.sNomClasseObjetCompse <> "" ALORS
      //		
      //		sLigne = tab + ":m_o[%sCle%]	<- [%stRubTmp.sNomClasseObjetCompse%].GetObj([%oGencode_p.p_sNomTable%].[%sCle%])"
      //		
      //		si stRubTmp.bNullable ALORS
      //			
      //			sLigne = [
      //			[%TAB%]SI PAS [%oGencode_p.p_sNomTable%].[%sCle%]..Null ALORS
      //			[%TAB%][%TAB%][%sLigne%]
      //			[%TAB%]FIN
      //			]
      //		fin
      //		
      //		sListeInit += [rc + rc] + sLigne
      //	FIN
      //FIN
      
      si pas :m_bLectureSeule ALORS
      	sListeInit = [
      	SI PAS :ZF_bModeAjout() ALORS
      	[%sListeInit%]
      	FIN
      	]
      FIN
      
      
      sNomProc est une chaîne = "init_ObjBD"
      
      sRetour = [
      PROCÉDURE PROTÉGÉ [%sNomProc%]()<métier>:vide
      // Redéfinition de la méthode ClZF_ObjDB.init_ObjBD
      
      [%sListeInit%]
      
      
      ]
      
      
      SI :m_bNatif ALORS
      	sRetour = GenBlocCL_Procedure(sRetour, sNomProc)
      FIN
      
      renvoyer sRetour
     type : 458752
   -
     name : GenPreEnreg
     procedure_id : 1444047650821007783
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] GenPreEnreg (<oGencode_p> est ClZF_GenCodeFic)
      //
      // Paramètres :
      //	oGencode_p (ClZF_GenCodeFic) : <indiquez ici le rôle de oGencode_p>
      // Valeur de retour :
      // 	chaîne ANSI : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure GenPreEnreg(oGencode_p est un ClZF_GenCodeFic):chaine
      
      
      
      sRetour		est une chaine
      stTmp		est un ClZF_GenCodeFic.STR_DefRub
      sCle		est une chaîne
      //sCondNull	est une chaîne
      sNomVarExc	est une chaîne
      
      
      POUR TOUT ÉLÉMENT stTmp, sCle DE oGencode_p.m_aRub
      	si stTmp.oObj_Parent <> null alors
      		
      		si pas stTmp.bNullable ALORS
      			sNomVarExc = "mg_oEx_CompoNonInst_" + sCle
      			:m_sEx_Decl += [rc] + sNomVarExc + "	est un ClZF_Exception dynamique"
      			:m_sEx_Inst += [rc] + sNomVarExc + "	= Allouer un ClZF_Exception(""Enregistrement impossible : [%stTmp.sNomMembre%] est requis."")"
      			
      			sRetour += [RC] + [
      			//
      			SI :[%stTmp.sNomMembre%] = Null ALORS
      			[%TAB%][%sNomVarExc%].ZF_Declenche()
      			FIN
      			
      			]
      		FIN
      	FIN
      FIN
      //POUR TOUT ÉLÉMENT stTmp, sCle DE oGencode_p.m_aRub
      //	si stTmp.sNomClasseObjetCompse <> "" alors
      //		
      //		si stTmp.bNullable ALORS
      //			sCondNull = oGencode_p.p_sNomTable + "." + sCle + "..Null	= Vrai"
      //		sinon
      //			sNomVarExc = "mg_oEx_CompoNonInst_" + sCle
      //			sCondNull = sNomVarExc + ".ZF_Declenche()"
      //			
      //			:m_sEx_Decl += [rc] + sNomVarExc + "	est un ClZF_Exception dynamique"
      //			:m_sEx_Inst += [rc] + sNomVarExc + "	= Allouer un ClZF_Exception(""Enregistrement impossible : [%stTmp.sNomMembre%] est requis."")"
      //		FIN
      //		
      //		sRetour += [rc] + [
      //		//
      //		SI :[%stTmp.sNomMembre%] = Null _OU_ :[%stTmp.sNomMembre%].ZF_Get_IdUnique() = 0 ALORS
      //		[%TAB%][%sCondNull%]
      //		SINON
      //		[%TAB%][%oGencode_p.p_sNomTable%].[%sCle%]	= :[%stTmp.sNomMembre%].ZF_Get_IdUnique()
      //		FIN
      //		
      //		]
      //		
      //	FIN
      //FIN
      
      
      
      sNomProc est une chaîne = "Pre_Enregistre"
      
      sRetour = [
      PROCÉDURE PROTÉGÉ [%sNomProc%]()<métier>:vide
      // Redéfinition de la méthode ClZF_ObjDB.Pre_Enregistre()
      
      
      SI :ZF_bEstsupprime() ALORS
      	//. . .
      SINON
      	
      [%sRetour%]
      	
      FIN
      ]
      
      
      SI :m_bNatif ALORS
      	sRetour = GenBlocCL_Procedure(sRetour, sNomProc)
      FIN
      
      
      renvoyer sRetour
      
     type : 458752
   -
     name : GenPropriete
     procedure_id : 1444047650821073428
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] GenPropriete (<sRub_p> est chaîne)
      //
      // Paramètres :
      //	sRub_p (chaîne ANSI) : <indiquez ici le rôle de sRub_p>
      // Valeur de retour :
      // 	chaîne ANSI : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure GenPropriete(oGencode_p est un ClZF_GenCodeFic, sRub_p est une chaîne):chaine
      
      sRetour		est une chaîne
      sPropR		est une chaîne
      sPropw		est une chaîne
      sPropDecl	est une chaîne
      stRub		est un ClZF_GenCodeFic.STR_DefRub	= oGencode_p.m_aRub[sRub_p]
      sPropriete	est une chaîne
      sMembre		est une chaîne
      sTestModif	est une chaîne
      sParam		est une chaîne
      
      
      si :m_bNatif ALORS
      	sPropDecl = "PROCEDURE"
      sinon
      	sPropDecl = "PROPRIETE"
      FIN
      
      si stRub.oObj_Parent = Null ALORS
      	sMembre		= "m_" + oGencode_p.GetInfoRubPrefix(stRub.nTypeRubHF) + sRub_p
      	sPropriete	= "p_" + oGencode_p.GetInfoRubPrefix(stRub.nTypeRubHF) + sRub_p
      	sTestModif	= "SI :[%sMembre%] <> [%oGencode_p.GetInfoRubPrefix(stRub.nTypeRubHF)%]Valeur_p ALORS"
      sinon
      	sMembre		= "m_o" + sRub_p
      	sPropriete	= "p_o" + sRub_p
      	sTestModif	= "SI PAS ZF_bObjEgal(:[%sMembre%], oValeur_p) ALORS"
      FIN
      
      sParam = stRub.sPrefixe + "Valeur_p" + oGencode_p.GetInfoRubType(stRub.nTypeRubHF,Vrai)
      
      
      
      sPropR = [
      [%sPropDecl%] [%sPropriete%]() : [%stRub.sNomDeclarationCourt%]
      //Propriétés de [%sMembre%]
      
      RENVOYER :[%sMembre%]
      
      ]
      
      si pas :m_bLectureSeule alors
      	sPropw = [
      	[%sPropDecl%] [%sPropriete%]([%stRub.sPrefixe%]Valeur_p [%stRub.sNomDeclarationComplet%]):Vide
      	
      	[%sTestModif%]
      	[%TAB%]:ZF_EstModif()
      	[%TAB%]:[%sMembre%] = [%stRub.sPrefixe%]Valeur_p
      	FIN
      	
      	]
      FIN
      
      
      SI :m_bNatif ALORS
      	sRetour = GenBlocCL_Propriete(sPropR, sPropw, sPropriete)
      sinon
      	sRetour = sPropR + rc + rc + sPropw
      FIN
      
      
      si stRub.oObj_Parent <> Null ALORS
      	sRetour += rc + GenProprieteID(oGencode_p, sRub_p)
      FIN
      
      
      renvoyer sRetour
     type : 458752
   -
     name : GenProprieteID
     procedure_id : 1444047650821139073
     type_code : 12
     code : |1+
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] GenProprieteID (<oGencode_p> est ClZF_GenCodeFic, <sRub_p> est chaîne)
      //
      // Paramètres :
      //	oGencode_p (ClZF_GenCodeFic) : <indiquez ici le rôle de oGencode_p>
      //	sRub_p (chaîne ANSI) : <indiquez ici le rôle de sRub_p>
      
      // Valeur de retour :
      // 	chaîne ANSI : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure GenProprieteID(oGencode_p est un ClZF_GenCodeFic, sRub_p est une chaîne):chaine
      
      sRetour		est une chaîne
      sPropR		est une chaîne
      sPropw		est une chaîne
      sPropDecl	est une chaîne
      stRub		est un ClZF_GenCodeFic.STR_DefRub	= oGencode_p.m_aRub[sRub_p]
      sPropriete	est une chaîne
      sMembre		est une chaîne
      
      
      SI :m_bNatif ALORS
      	sPropDecl = "PROCEDURE"
      SINON
      	sPropDecl = "PROPRIETE"
      FIN
      
      si stRub.oObj_Parent = Null ALORS
      	ExceptionDéclenche(1,"Génération impossible de 'propriété ID' pour les membres simples")
      sinon
      	sMembre		= "m_o" + sRub_p
      	sPropriete	= "p_o" + sRub_p
      FIN
      
      
      sPropR = [
      [%sPropDecl%] [%sPropriete%]_ID():entier
      //Propriétés de l'objet [%sMembre%], accessible via son ID
      SI :[%sPropriete%] = Null ALORS
      [%TAB%]RENVOYER 0
      SINON
      [%TAB%]RENVOYER :[%sPropriete%].ZF_Get_IdUnique()
      FIN
      
      
      ]
      
      
      si pas :m_bLectureSeule alors
      	sPropw = [
      	[%sPropDecl%] [%sPropriete%]_ID(nValeur_p est un entier):Vide
      	
      	SI nValeur_P = 0 ALORS
      	[%TAB%]:[%sPropriete%] = Null
      	SINON
      	[%TAB%]:[%sPropriete%] = [%stRub.sNomDeclarationCourt%].GetObj(nValeur_p)
      	FIN
      	
      	
      	]
      FIN
      
      
      SI :m_bNatif ALORS
      	sRetour = GenBlocCL_Propriete(sPropR, sPropw, sPropriete + "_ID")
      SINON
      	sRetour = sPropR + RC + RC + sPropw
      FIN
      
      
      renvoyer sRetour
     type : 458752
   -
     name : GenChargeCol_old
     procedure_id : 1444051099681204643
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] GenChargeCol_old (<oGencode_p> est ClZF_GenCodeFic)
      //
      // Paramètres :
      //	oGencode_p (ClZF_GenCodeFic) : <indiquez ici le rôle de oGencode_p>
      // Valeur de retour :
      // 	chaîne ANSI : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure PRIVÉ GenChargeCol_old(oGencode_p est un ClZF_GenCodeFic):chaine
      
      
      sModele est une chaîne
      sNomProc est une chaîne
      sRetour est une chaîne
      stLien est une ClZF_GenCodeFic.STR_InfoCol
      oClas est un ClZF_GenCodeFic dynamique
      
      
      pour tout element stLien  de oGencode_p.m_aCol_Enfant
      	oClas = allouer un ClZF_GenCodeFic(stLien.sTableDesti)
      	
      	sNomProc = oClas.sNomClasseColGen(Vrai)
      	
      	sModele = [
      	PROCÉDURE [%sNomProc%]()<métier>:[%oClas.sNomClasseColGen()%]
      	
      	oRetour est un [%oClas.sNomClasseColGen()%]
      	sReq est une chaîne
      	
      	SI PAS oRetour.p_bEstCharge ALORS
      	[%tab%]sReq = [%"["%]
      	[%TAB%][%TAB%]SELECT 
      	[%TAB%][%TAB%][%TAB%][%stLien.sTableDesti%].*
      	[%TAB%][%TAB%]FROM [%stLien.sTableDesti%]
      	[%TAB%][%TAB%]WHERE [%stLien.sTableDesti%].[%stLien.sCleDesti%] = [%"["%]%:ZF_Get_IdUnique()%[%"]"%]
      	[%TAB%][%"]"%]
      		
      	[%TAB%]oRetour.ZF_LoadSQL(sReq)
      	FIN
      	
      	
      	RENVOYER oRetour
      	
      	
      	]
      	
      	SI :m_bNatif ALORS
      		sModele = GenBlocCL_Procedure(sModele, sNomProc)
      	FIN
      
      	
      	sRetour += [rc] + sModele
      fin
      
      renvoyer sRetour
     type : 458752
   -
     name : Genere
     procedure_id : 1444052925069993716
     type_code : 12
     code : |1-
      procédure Genere():vide
      
      
      sClasse			est une chaîne
      sRub			est une chaîne
      sProprietes		est une chaîne
      //sProcsChargeCol	est une chaîne
      
      
      POUR TOUT ÉLÉMENT sRub DE :m_oClasseGen.aLstRubs()
      	sProprietes += :GenPropriete(:m_oClasseGen,sRub)
      FIN
      
      sClasse += :GenConstructeur(:m_oClasseGen) + rc
      sClasse += :GenDestructeur() + rc
      
      SI pas m_bNatif ALORS
      	sClasse += sProprietes + rc
      FIN
      
      sClasse += :GenGetObj(:m_oClasseGen) + RC
      sClasse += :GenInitObject(:m_oClasseGen) + RC
      
      SI PAS :m_bLectureSeule ALORS
      	sClasse += :GenPreEnreg(:m_oClasseGen) + RC
      FIN
      //
      //sProcsChargeCol = :GenChargeCol(oGenCode)
      //si sProcsChargeCol <> "" ALORS
      //	sClasse += sProcsChargeCol + RC
      //FIN
      
      
      sClasse = :GenDeclaration(:m_oClasseGen) + rc + sClasse
      
      
      SI m_bNatif ALORS
      	sClasse += "  properties :" + rc + sProprietes + RC
      	sClasse += GenBlocCL_Fin()
      FIN
      
      
      m_sCode = sClasse
     type : 458752
   -
     name : GenConstructeur
     procedure_id : 1444072084947679717
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] GenConstructeur (<oGencode_p> est ClZF_GenCodeFic)
      //
      // Paramètres :
      //	oGencode_p (ClZF_GenCodeFic) : <indiquez ici le rôle de oGencode_p>
      
      // Valeur de retour :
      // 	chaîne ANSI : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      procédure prive GenConstructeur(oGencode_p est un ClZF_GenCodeFic):chaîne
      
      sRetour			est une chaîne = [
      PROCÉDURE Constructeur(LOCAL nID_P est un entier = 0)
      Ancêtre.Constructeur([%oGencode_p.p_sNomTable%]..Nom, [%oGencode_p.p_sNomTable%].[%oGencode_p.p_sNomRubId%]..Nom,nID_P)
      
      ]
      
      SI :m_bNatif ALORS
      	sRetour = GenBlocCL_Constructeur(sRetour)
      FIN
      
      renvoyer sRetour
     type : 458752
   -
     name : GenDestructeur
     procedure_id : 1444072115012523090
     type_code : 12
     code : |1-
      // Résumé : <indiquez ici ce que fait la procédure>
      // Syntaxe :
      //[ <Résultat> = ] GenDestructeur ()
      //
      // Paramètres :
      //	Aucun
      
      // Valeur de retour :
      // 	chaîne ANSI : <indiquez ici le rôle de la valeur de retour>
      //
      // Exemple :
      // <Indiquez ici un exemple d'utilisation>
      //
      //	oGencode_p (ClZF_GenCodeFic) : <indiquez ici le rôle de oGencode_p>
      procédure prive GenDestructeur():chaîne
      
      sRetour			est une chaîne = [
      Procédure Destructeur()
      
      ]
      
      SI :m_bNatif ALORS
      	sRetour = GenBlocCL_Destructeur(sRetour)
      FIN
      
      renvoyer sRetour
     type : 458752
  properties :
   -
     name : GetCode
     identifier : 0x140a495301d50081
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure GetCode() : chaîne
         
         renvoyer m_sCode
        type : 1966080
     template_refs : []
   -
     name : p_bLectureSeule
     identifier : 0x140a4bb501ef4e29
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_bLectureSeule() : booléen
         
         renvoyer m_bLectureSeule
        type : 1966080
      -
        code : |1-
         procédure publique p_bLectureSeule(bValeur est un booléen)
         
         m_bLectureSeule=bValeur
        type : 2031616
     template_refs : []
   -
     name : p_bGenCodeFinal
     identifier : 0x140a60d3055fcaeb
     type_code : 103
     p_codes :
      -
        code : |1-
         procédure publique p_bGenCodeFinal(bValeur est un booléen)
         
         m_bGenCodeFinal=bValeur
        type : 2031616
     template_refs : []
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : BwAAAAcAAAA6ih3UbgNXHwTtiPSFUEj+2fi/m7v4QV2rqidAupM=
  original_name : Classe1
resources :
 string_res :
  identifier : 0x1408fe69c68941fa
  internal_properties : BwAAAAcAAAAnMYFQ1bL/vz9ehh7L22SNNSlIzGTOI8h5F/WtgDNP
custom_note :
 internal_properties : BwAAAAcAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
